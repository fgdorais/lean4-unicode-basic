{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.Seq.endsWithVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">endsWithVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Var\">Var</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.Seq.endsWithVar","kind":"def","line":327,"name":"Lean.Grind.AC.Seq.endsWithVar","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Grind/AC/Seq.lean#L327-L330"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.Seq.lastVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">lastVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Var\">Var</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.Seq.lastVar","kind":"def","line":322,"name":"Lean.Grind.AC.Seq.lastVar","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Grind/AC/Seq.lean#L322-L325"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.Seq.startsWithVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">startsWithVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Var\">Var</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.Seq.startsWithVar","kind":"def","line":317,"name":"Lean.Grind.AC.Seq.startsWithVar","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Grind/AC/Seq.lean#L317-L320"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.Seq.firstVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">firstVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Var\">Var</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.Seq.firstVar","kind":"def","line":312,"name":"Lean.Grind.AC.Seq.firstVar","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Grind/AC/Seq.lean#L312-L315"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.Seq.superpose?\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">superpose?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s₁ </span><span class=\"fn\">s₂</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></div></div>","info":{"doc":"Returns `some (p, c, s)` if `s₁ == p ++ c` and `s₂ == c ++ s`\n","docLink":"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.Seq.superpose?","kind":"def","line":296,"name":"Lean.Grind.AC.Seq.superpose?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Grind/AC/Seq.lean#L296-L310"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.Seq.superposeAC?\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">superposeAC?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s₁ </span><span class=\"fn\">s₂</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></div></div>","info":{"doc":"Returns `some (r₁, c, r₂)` if `s₁ == r₁.union c` and `s₂ == r₂.union c`\n\nIt assumes `s₁` and `s₂` are sorted\n","docLink":"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.Seq.superposeAC?","kind":"def","line":265,"name":"Lean.Grind.AC.Seq.superposeAC?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Grind/AC/Seq.lean#L265-L294"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.toSeq?\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">toSeq?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Var\">Var</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.toSeq?","kind":"def","line":242,"name":"Lean.Grind.AC.toSeq?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Grind/AC/Seq.lean#L242-L250"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.Seq.sharesVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">sharesVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s₁ </span><span class=\"fn\">s₂</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Returns `true` if `s₁` and `s₂` have at least one variable in common.\nThe function assumes both of them are sorted.\n","docLink":"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.Seq.sharesVar","kind":"def","line":222,"name":"Lean.Grind.AC.Seq.sharesVar","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Grind/AC/Seq.lean#L222-L234"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.Seq.noAdjacentDuplicates\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">noAdjacentDuplicates</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.Seq.noAdjacentDuplicates","kind":"def","line":208,"name":"Lean.Grind.AC.Seq.noAdjacentDuplicates","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Grind/AC/Seq.lean#L208-L216"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.Seq.contains\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">contains</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Var\">Var</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.Seq.contains","kind":"def","line":203,"name":"Lean.Grind.AC.Seq.contains","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Grind/AC/Seq.lean#L203-L206"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.Seq.isSorted\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">isSorted</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.Seq.isSorted","kind":"def","line":193,"name":"Lean.Grind.AC.Seq.isSorted","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Grind/AC/Seq.lean#L193-L201"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.Seq.subset\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">subset</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s₁ </span><span class=\"fn\">s₂</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.SubsetResult\">SubsetResult</a></div></div>","info":{"doc":"`s₁.subset s₂` checks whether `s₁` is a subset of `s₂`.\nIt assumes `s₁` and `s₂` are sorted.\n","docLink":"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.Seq.subset","kind":"def","line":150,"name":"Lean.Grind.AC.Seq.subset","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Grind/AC/Seq.lean#L150-L180"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.SubsetResult.strict\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">SubsetResult</span>.<span class=\"name\">strict</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.SubsetResult\">SubsetResult</a></div></div>","info":{"doc":"`s₁.union s == s₂` ","docLink":"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.SubsetResult.strict","kind":"ctor","line":147,"name":"Lean.Grind.AC.SubsetResult.strict","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Grind/AC/Seq.lean#L147-L148"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.SubsetResult.exact\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">SubsetResult</span>.<span class=\"name\">exact</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.SubsetResult\">SubsetResult</a></div></div>","info":{"doc":"`s₁ == s₂` ","docLink":"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.SubsetResult.exact","kind":"ctor","line":145,"name":"Lean.Grind.AC.SubsetResult.exact","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Grind/AC/Seq.lean#L145-L146"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.SubsetResult.false\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">SubsetResult</span>.<span class=\"name\">false</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.SubsetResult\">SubsetResult</a></div></div>","info":{"doc":"`s₁` is not a subset of `s₂` ","docLink":"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.SubsetResult.false","kind":"ctor","line":143,"name":"Lean.Grind.AC.SubsetResult.false","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Grind/AC/Seq.lean#L143-L144"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.SubsetResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">SubsetResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Result type for `s₁.subset s₂`\n","docLink":"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.SubsetResult","kind":"inductive","line":139,"name":"Lean.Grind.AC.SubsetResult","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Grind/AC/Seq.lean#L139-L148"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.Seq.subseq\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">subseq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s₁ </span><span class=\"fn\">s₂</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.SubseqResult\">SubseqResult</a></div></div>","info":{"doc":"`s₁.subseq s₂` checks whether `s₁` is a subsequence of `s₂`\n","docLink":"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.Seq.subseq","kind":"def","line":108,"name":"Lean.Grind.AC.Seq.subseq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Grind/AC/Seq.lean#L108-L127"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.SubseqResult.middle\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">SubseqResult</span>.<span class=\"name\">middle</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.SubseqResult\">SubseqResult</a></div></div>","info":{"doc":"`p ++ s₁ ++ s == s₂` ","docLink":"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.SubseqResult.middle","kind":"ctor","line":105,"name":"Lean.Grind.AC.SubseqResult.middle","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Grind/AC/Seq.lean#L105-L106"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.SubseqResult.suffix\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">SubseqResult</span>.<span class=\"name\">suffix</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.SubseqResult\">SubseqResult</a></div></div>","info":{"doc":"`s ++ s₁ == s₂` ","docLink":"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.SubseqResult.suffix","kind":"ctor","line":103,"name":"Lean.Grind.AC.SubseqResult.suffix","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Grind/AC/Seq.lean#L103-L104"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.SubseqResult.prefix\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">SubseqResult</span>.<span class=\"name\">prefix</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.SubseqResult\">SubseqResult</a></div></div>","info":{"doc":"`s₁ ++ s == s₂` ","docLink":"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.SubseqResult.prefix","kind":"ctor","line":101,"name":"Lean.Grind.AC.SubseqResult.prefix","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Grind/AC/Seq.lean#L101-L102"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.SubseqResult.exact\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">SubseqResult</span>.<span class=\"name\">exact</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.SubseqResult\">SubseqResult</a></div></div>","info":{"doc":"`s₁ == s₂` ","docLink":"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.SubseqResult.exact","kind":"ctor","line":99,"name":"Lean.Grind.AC.SubseqResult.exact","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Grind/AC/Seq.lean#L99-L100"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.SubseqResult.false\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">SubseqResult</span>.<span class=\"name\">false</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.SubseqResult\">SubseqResult</a></div></div>","info":{"doc":"`s₁` is not a subsequence of `s₂` ","docLink":"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.SubseqResult.false","kind":"ctor","line":97,"name":"Lean.Grind.AC.SubseqResult.false","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Grind/AC/Seq.lean#L97-L98"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.SubseqResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">SubseqResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Result type for `s₁.subseq s₂`\n","docLink":"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.SubseqResult","kind":"inductive","line":93,"name":"Lean.Grind.AC.SubseqResult","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Grind/AC/Seq.lean#L93-L106"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.instOfNatSeq_lean\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">instOfNatSeq_lean</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat\">OfNat</a> <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.instOfNatSeq_lean","kind":"def","line":79,"name":"Lean.Grind.AC.instOfNatSeq_lean","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Grind/AC/Seq.lean#L79-L80"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.instAppendSeq_lean\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">instAppendSeq_lean</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Append\">Append</a> <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.instAppendSeq_lean","kind":"instance","line":53,"name":"Lean.Grind.AC.instAppendSeq_lean","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Grind/AC/Seq.lean#L53-L54"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.instOrdSeq_lean\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">instOrdSeq_lean</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.instOrdSeq_lean","kind":"instance","line":50,"name":"Lean.Grind.AC.instOrdSeq_lean","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Grind/AC/Seq.lean#L50-L51"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.Seq.compare\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">compare</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s₁ </span><span class=\"fn\">s₂</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.Seq.compare","kind":"def","line":33,"name":"Lean.Grind.AC.Seq.compare","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Grind/AC/Seq.lean#L33-L48"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.Seq.reverse\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">reverse</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a></div></div>","info":{"doc":"Reverses the sequence ","docLink":"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.Seq.reverse","kind":"def","line":23,"name":"Lean.Grind.AC.Seq.reverse","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Grind/AC/Seq.lean#L23-L31"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.Seq.isVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">isVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Returns `true` if `s` is a variable. ","docLink":"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.Seq.isVar","kind":"def","line":18,"name":"Lean.Grind.AC.Seq.isVar","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Grind/AC/Seq.lean#L18-L21"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.Seq.length\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">AC</span>.<span class=\"name\">Seq</span>.<span class=\"name\">length</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/AC.html#Lean.Grind.AC.Seq\">Seq</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/AC/Seq.html#Lean.Grind.AC.Seq.length","kind":"def","line":14,"name":"Lean.Grind.AC.Seq.length","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Grind/AC/Seq.lean#L14-L16"}}],"imports":["Init.Core","Init.Grind.AC","Init.Data.Ord"],"instances":[{"className":"Ord","name":"Lean.Grind.AC.instOrdSeq_lean","typeNames":["Lean.Grind.AC.Seq"]},{"className":"Append","name":"Lean.Grind.AC.instAppendSeq_lean","typeNames":["Lean.Grind.AC.Seq"]}],"name":"Lean.Meta.Tactic.Grind.AC.Seq"}