{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ACLt.html#Lean.Meta.acLt\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">acLt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mode</span> : <a href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode\">ACLt.ReduceMode</a> := <a href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode.none\">ACLt.ReduceMode.none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"An AC-compatible ordering.\n\nRecall that an AC-compatible ordering if it is monotonic, well-founded, and total.\nBoth KBO and LPO are AC-compatible. KBO is faster, but we do not cache the weight of\neach expression in Lean 4. Even if we did, we would need to have a weight where implicit instance arguments are ignored.\nSo, we use a LPO-like term ordering.\n\nRemark: this method is used to implement ordered rewriting. We ignore implicit instance\narguments to address an issue reported at issue #972.\n\nRemark: the order is not really total on terms since\n - We instance implicit arguments.\n - We ignore metadata.\n - We ignore universe parameters at constants.\n","docLink":"./Lean/Meta/ACLt.html#Lean.Meta.acLt","kind":"def","line":198,"name":"Lean.Meta.acLt","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/ACLt.lean#L198-L200"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.main\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ACLt</span>.<span class=\"name\">main</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mode</span> : <a href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode\">ReduceMode</a> := <a href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode.none\">ReduceMode.none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"An AC-compatible ordering.\n\nRecall that an AC-compatible ordering if it is monotonic, well-founded, and total.\nBoth KBO and LPO are AC-compatible. KBO is faster, but we do not cache the weight of\neach expression in Lean 4. Even if we did, we would need to have a weight where implicit instance arguments are ignored.\nSo, we use a LPO-like term ordering.\n\nRemark: this method is used to implement ordered rewriting. We ignore implicit instance\narguments to address an issue reported at issue #972.\n\nRemark: the order is not really total on terms since\n - We instance implicit arguments.\n - We ignore metadata.\n - We ignore universe parameters at constants.\n","docLink":"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.main","kind":"def","line":44,"name":"Lean.Meta.ACLt.main","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/ACLt.lean#L44-L192"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode.none\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ACLt</span>.<span class=\"name\">ReduceMode</span>.<span class=\"name\">none</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode\">ReduceMode</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode.none","kind":"ctor","line":37,"name":"Lean.Meta.ACLt.ReduceMode.none","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/ACLt.lean#L37-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode.reduceSimpleOnly\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ACLt</span>.<span class=\"name\">ReduceMode</span>.<span class=\"name\">reduceSimpleOnly</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode\">ReduceMode</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode.reduceSimpleOnly","kind":"ctor","line":36,"name":"Lean.Meta.ACLt.ReduceMode.reduceSimpleOnly","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/ACLt.lean#L36-L36"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode.reduce\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ACLt</span>.<span class=\"name\">ReduceMode</span>.<span class=\"name\">reduce</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode\">ReduceMode</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode.reduce","kind":"ctor","line":35,"name":"Lean.Meta.ACLt.ReduceMode.reduce","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/ACLt.lean#L35-L35"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ACLt</span>.<span class=\"name\">ReduceMode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/ACLt.html#Lean.Meta.ACLt.ReduceMode","kind":"inductive","line":34,"name":"Lean.Meta.ACLt.ReduceMode","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/ACLt.lean#L34-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ACLt.html#Lean.Expr.ctorWeight\"><span class=\"name\">Lean</span>.<span class=\"name\">Expr</span>.<span class=\"name\">ctorWeight</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> â†’ <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/ACLt.html#Lean.Expr.ctorWeight","kind":"def","line":17,"name":"Lean.Expr.ctorWeight","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/ACLt.lean#L17-L29"}}],"imports":["Lean.Meta.Basic","Lean.Meta.FunInfo","Lean.Meta.DiscrTree"],"instances":[],"name":"Lean.Meta.ACLt"}