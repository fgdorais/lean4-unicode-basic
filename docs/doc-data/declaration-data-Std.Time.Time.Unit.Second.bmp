{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Ordinal.toOffset\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Second</span>.<span class=\"name\">Ordinal</span>.<span class=\"name\">toOffset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">leap</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ordinal</span> : <span class=\"fn\"><a href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Ordinal\">Ordinal</a> <span class=\"fn\">leap</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Offset\">Offset</a></div></div>","info":{"doc":"Converts an `Ordinal` to an `Second.Offset`.\n","docLink":"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Ordinal.toOffset","kind":"def","line":123,"name":"Std.Time.Second.Ordinal.toOffset","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Time/Unit/Second.lean#L123-L128"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Ordinal.ofFin\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Second</span>.<span class=\"name\">Ordinal</span>.<span class=\"name\">ofFin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">leap</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">data</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> (<a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">leap</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">61</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">60</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Ordinal\">Ordinal</a> <span class=\"fn\">leap</span></span></div></div>","info":{"doc":"Creates an `Ordinal` from a `Fin`, ensuring the value is within bounds.\n","docLink":"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Ordinal.ofFin","kind":"def","line":114,"name":"Std.Time.Second.Ordinal.ofFin","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Time/Unit/Second.lean#L114-L121"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Ordinal.ofNat\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Second</span>.<span class=\"name\">Ordinal</span>.<span class=\"name\">ofNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">leap</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">data</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">data</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">leap</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">60</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">59</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Ordinal\">Ordinal</a> <span class=\"fn\">leap</span></span></div></div>","info":{"doc":"Creates an `Ordinal` from a natural number, ensuring the value is within bounds.\n","docLink":"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Ordinal.ofNat","kind":"def","line":107,"name":"Std.Time.Second.Ordinal.ofNat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Time/Unit/Second.lean#L107-L112"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Ordinal.ofInt\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Second</span>.<span class=\"name\">Ordinal</span>.<span class=\"name\">ofInt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">leap</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">data</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">data</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">data</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int.ofNat\">Int.ofNat</a> (<a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">leap</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">60</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">59</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Ordinal\">Ordinal</a> <span class=\"fn\">leap</span></span></div></div>","info":{"doc":"Creates an `Ordinal` from an integer, ensuring the value is within bounds.\n","docLink":"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Ordinal.ofInt","kind":"def","line":100,"name":"Std.Time.Second.Ordinal.ofInt","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Time/Unit/Second.lean#L100-L105"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Offset.ofInt\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Second</span>.<span class=\"name\">Offset</span>.<span class=\"name\">ofInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">data</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Offset\">Offset</a></div></div>","info":{"doc":"Creates an `Second.Offset` from an integer.\n","docLink":"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Offset.ofInt","kind":"def","line":89,"name":"Std.Time.Second.Offset.ofInt","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Time/Unit/Second.lean#L89-L94"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Offset.ofNat\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Second</span>.<span class=\"name\">Offset</span>.<span class=\"name\">ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">data</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Offset\">Offset</a></div></div>","info":{"doc":"Creates an `Second.Offset` from a natural number.\n","docLink":"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Offset.ofNat","kind":"def","line":82,"name":"Std.Time.Second.Offset.ofNat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Time/Unit/Second.lean#L82-L87"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instLawfulEqOrdOffset\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Second</span>.<span class=\"name\">instLawfulEqOrdOffset</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.LawfulEqOrd\">LawfulEqOrd</a> <a href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Offset\">Offset</a></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instLawfulEqOrdOffset","kind":"instance","line":78,"name":"Std.Time.Second.instLawfulEqOrdOffset","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Time/Unit/Second.lean#L78-L78"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instTransOrdOffset\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Second</span>.<span class=\"name\">instTransOrdOffset</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransOrd\">TransOrd</a> <a href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Offset\">Offset</a></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instTransOrdOffset","kind":"instance","line":76,"name":"Std.Time.Second.instTransOrdOffset","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Time/Unit/Second.lean#L76-L76"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instOrdOffset\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Second</span>.<span class=\"name\">instOrdOffset</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <a href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Offset\">Offset</a></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instOrdOffset","kind":"instance","line":74,"name":"Std.Time.Second.instOrdOffset","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Time/Unit/Second.lean#L74-L74"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instOfNatOffset\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Second</span>.<span class=\"name\">instOfNatOffset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat\">OfNat</a> <a href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Offset\">Offset</a> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instOfNatOffset","kind":"instance","line":71,"name":"Std.Time.Second.instOfNatOffset","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Time/Unit/Second.lean#L71-L72"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instDecidableLtOffset\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Second</span>.<span class=\"name\">instDecidableLtOffset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Offset\">Offset</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">y</span>)</span></div></div>","info":{"doc":"","docLink":"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instDecidableLtOffset","kind":"instance","line":68,"name":"Std.Time.Second.instDecidableLtOffset","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Time/Unit/Second.lean#L68-L69"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instDecidableLeOffset\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Second</span>.<span class=\"name\">instDecidableLeOffset</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Offset\">Offset</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span>)</span></div></div>","info":{"doc":"","docLink":"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instDecidableLeOffset","kind":"instance","line":65,"name":"Std.Time.Second.instDecidableLeOffset","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Time/Unit/Second.lean#L65-L66"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instToStringOffset\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Second</span>.<span class=\"name\">instToStringOffset</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Offset\">Offset</a></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instToStringOffset","kind":"instance","line":63,"name":"Std.Time.Second.instToStringOffset","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Time/Unit/Second.lean#L63-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instLTOffset\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Second</span>.<span class=\"name\">instLTOffset</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <a href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Offset\">Offset</a></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instLTOffset","kind":"instance","line":63,"name":"Std.Time.Second.instLTOffset","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Time/Unit/Second.lean#L63-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instLEOffset\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Second</span>.<span class=\"name\">instLEOffset</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <a href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Offset\">Offset</a></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instLEOffset","kind":"instance","line":63,"name":"Std.Time.Second.instLEOffset","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Time/Unit/Second.lean#L63-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instNegOffset\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Second</span>.<span class=\"name\">instNegOffset</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <a href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Offset\">Offset</a></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instNegOffset","kind":"instance","line":63,"name":"Std.Time.Second.instNegOffset","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Time/Unit/Second.lean#L63-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instSubOffset\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Second</span>.<span class=\"name\">instSubOffset</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">Sub</a> <a href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Offset\">Offset</a></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instSubOffset","kind":"instance","line":63,"name":"Std.Time.Second.instSubOffset","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Time/Unit/Second.lean#L63-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instAddOffset\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Second</span>.<span class=\"name\">instAddOffset</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <a href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Offset\">Offset</a></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instAddOffset","kind":"instance","line":63,"name":"Std.Time.Second.instAddOffset","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Time/Unit/Second.lean#L63-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instInhabitedOffset\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Second</span>.<span class=\"name\">instInhabitedOffset</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Offset\">Offset</a></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instInhabitedOffset","kind":"instance","line":63,"name":"Std.Time.Second.instInhabitedOffset","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Time/Unit/Second.lean#L63-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instDecidableEqOffset\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Second</span>.<span class=\"name\">instDecidableEqOffset</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Offset\">Offset</a></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instDecidableEqOffset","kind":"instance","line":63,"name":"Std.Time.Second.instDecidableEqOffset","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Time/Unit/Second.lean#L63-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instReprOffset\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Second</span>.<span class=\"name\">instReprOffset</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Offset\">Offset</a></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instReprOffset","kind":"instance","line":63,"name":"Std.Time.Second.instReprOffset","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Time/Unit/Second.lean#L63-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Offset\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Second</span>.<span class=\"name\">Offset</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"`Offset` represents an offset in seconds. It is defined as an `Int`.\n","docLink":"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Offset","kind":"def","line":59,"name":"Std.Time.Second.Offset","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Time/Unit/Second.lean#L59-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instLawfulEqOrdOrdinal\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Second</span>.<span class=\"name\">instLawfulEqOrdOrdinal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">leap</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.LawfulEqOrd\">LawfulEqOrd</a> <span class=\"fn\">(<a href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Ordinal\">Ordinal</a> <span class=\"fn\">leap</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instLawfulEqOrdOrdinal","kind":"instance","line":57,"name":"Std.Time.Second.instLawfulEqOrdOrdinal","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Time/Unit/Second.lean#L57-L57"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instTransOrdOrdinal\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Second</span>.<span class=\"name\">instTransOrdOrdinal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">leap</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Order/Ord.html#Std.TransOrd\">TransOrd</a> <span class=\"fn\">(<a href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Ordinal\">Ordinal</a> <span class=\"fn\">leap</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instTransOrdOrdinal","kind":"instance","line":55,"name":"Std.Time.Second.instTransOrdOrdinal","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Time/Unit/Second.lean#L55-L55"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instOrdOrdinal\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Second</span>.<span class=\"name\">instOrdOrdinal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">leap</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <span class=\"fn\">(<a href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Ordinal\">Ordinal</a> <span class=\"fn\">leap</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instOrdOrdinal","kind":"instance","line":53,"name":"Std.Time.Second.instOrdOrdinal","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Time/Unit/Second.lean#L53-L53"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instDecidableEqOrdinal\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Second</span>.<span class=\"name\">instDecidableEqOrdinal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">leap</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">(<a href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Ordinal\">Ordinal</a> <span class=\"fn\">leap</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instDecidableEqOrdinal","kind":"instance","line":51,"name":"Std.Time.Second.instDecidableEqOrdinal","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Time/Unit/Second.lean#L51-L51"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instDecidableLtOrdinal\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Second</span>.<span class=\"name\">instDecidableLtOrdinal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">leap</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Ordinal\">Ordinal</a> <span class=\"fn\">leap</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">y</span>)</span></div></div>","info":{"doc":"","docLink":"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instDecidableLtOrdinal","kind":"instance","line":48,"name":"Std.Time.Second.instDecidableLtOrdinal","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Time/Unit/Second.lean#L48-L49"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instDecidableLeOrdinal\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Second</span>.<span class=\"name\">instDecidableLeOrdinal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">leap</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Ordinal\">Ordinal</a> <span class=\"fn\">leap</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">y</span>)</span></div></div>","info":{"doc":"","docLink":"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instDecidableLeOrdinal","kind":"instance","line":45,"name":"Std.Time.Second.instDecidableLeOrdinal","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Time/Unit/Second.lean#L45-L46"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instOfNatOrdinal\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Second</span>.<span class=\"name\">instOfNatOrdinal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">leap</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat\">OfNat</a> <span class=\"fn\">(<a href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Ordinal\">Ordinal</a> <span class=\"fn\">leap</span>)</span> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instOfNatOrdinal","kind":"instance","line":39,"name":"Std.Time.Second.instOfNatOrdinal","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Time/Unit/Second.lean#L39-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instToStringOrdinal\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Second</span>.<span class=\"name\">instToStringOrdinal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">leap</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <span class=\"fn\">(<a href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Ordinal\">Ordinal</a> <span class=\"fn\">leap</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instToStringOrdinal","kind":"instance","line":36,"name":"Std.Time.Second.instToStringOrdinal","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Time/Unit/Second.lean#L36-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instReprOrdinal\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Second</span>.<span class=\"name\">instReprOrdinal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">leap</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">(<a href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Ordinal\">Ordinal</a> <span class=\"fn\">leap</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instReprOrdinal","kind":"instance","line":33,"name":"Std.Time.Second.instReprOrdinal","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Time/Unit/Second.lean#L33-L34"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instLTOrdinal\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Second</span>.<span class=\"name\">instLTOrdinal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">leap</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">(<a href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Ordinal\">Ordinal</a> <span class=\"fn\">leap</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instLTOrdinal","kind":"instance","line":30,"name":"Std.Time.Second.instLTOrdinal","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Time/Unit/Second.lean#L30-L31"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instLEOrdinal\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Second</span>.<span class=\"name\">instLEOrdinal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">leap</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">(<a href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Ordinal\">Ordinal</a> <span class=\"fn\">leap</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Time/Unit/Second.html#Std.Time.Second.instLEOrdinal","kind":"instance","line":27,"name":"Std.Time.Second.instLEOrdinal","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Time/Unit/Second.lean#L27-L28"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Ordinal\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Second</span>.<span class=\"name\">Ordinal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">leap</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"`Ordinal` represents a bounded value for second, which ranges between 0 and 59 or 60. This accounts\nfor potential leap second.\n","docLink":"./Std/Time/Time/Unit/Second.html#Std.Time.Second.Ordinal","kind":"def","line":21,"name":"Std.Time.Second.Ordinal","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Time/Unit/Second.lean#L21-L25"}}],"imports":["Std.Time.Time.Unit.Nanosecond"],"instances":[{"className":"LE","name":"Std.Time.Second.instLEOrdinal","typeNames":["Std.Time.Second.Ordinal"]},{"className":"LT","name":"Std.Time.Second.instLTOrdinal","typeNames":["Std.Time.Second.Ordinal"]},{"className":"Repr","name":"Std.Time.Second.instReprOrdinal","typeNames":["Std.Time.Second.Ordinal"]},{"className":"ToString","name":"Std.Time.Second.instToStringOrdinal","typeNames":["Std.Time.Second.Ordinal"]},{"className":"OfNat","name":"Std.Time.Second.instOfNatOrdinal","typeNames":["Std.Time.Second.Ordinal"]},{"className":"Decidable","name":"Std.Time.Second.instDecidableLeOrdinal","typeNames":["LE.le"]},{"className":"Decidable","name":"Std.Time.Second.instDecidableLtOrdinal","typeNames":["LT.lt"]},{"className":"Decidable","name":"Std.Time.Second.instDecidableEqOrdinal","typeNames":["Eq"]},{"className":"Ord","name":"Std.Time.Second.instOrdOrdinal","typeNames":["Std.Time.Second.Ordinal"]},{"className":"Std.TransCmp","name":"Std.Time.Second.instTransOrdOrdinal","typeNames":["Std.Time.Second.Ordinal"]},{"className":"Std.LawfulEqCmp","name":"Std.Time.Second.instLawfulEqOrdOrdinal","typeNames":["Std.Time.Second.Ordinal"]},{"className":"Repr","name":"Std.Time.Second.instReprOffset","typeNames":["Std.Time.Second.Offset"]},{"className":"Decidable","name":"Std.Time.Second.instDecidableEqOffset","typeNames":["Eq"]},{"className":"Inhabited","name":"Std.Time.Second.instInhabitedOffset","typeNames":["Std.Time.Second.Offset"]},{"className":"Add","name":"Std.Time.Second.instAddOffset","typeNames":["Std.Time.Second.Offset"]},{"className":"Sub","name":"Std.Time.Second.instSubOffset","typeNames":["Std.Time.Second.Offset"]},{"className":"Neg","name":"Std.Time.Second.instNegOffset","typeNames":["Std.Time.Second.Offset"]},{"className":"LE","name":"Std.Time.Second.instLEOffset","typeNames":["Std.Time.Second.Offset"]},{"className":"LT","name":"Std.Time.Second.instLTOffset","typeNames":["Std.Time.Second.Offset"]},{"className":"ToString","name":"Std.Time.Second.instToStringOffset","typeNames":["Std.Time.Second.Offset"]},{"className":"Decidable","name":"Std.Time.Second.instDecidableLeOffset","typeNames":["LE.le"]},{"className":"Decidable","name":"Std.Time.Second.instDecidableLtOffset","typeNames":["LT.lt"]},{"className":"OfNat","name":"Std.Time.Second.instOfNatOffset","typeNames":["Std.Time.Second.Offset"]},{"className":"Ord","name":"Std.Time.Second.instOrdOffset","typeNames":["Std.Time.Second.Offset"]},{"className":"Std.TransCmp","name":"Std.Time.Second.instTransOrdOffset","typeNames":["Std.Time.Second.Offset"]},{"className":"Std.LawfulEqCmp","name":"Std.Time.Second.instLawfulEqOrdOffset","typeNames":["Std.Time.Second.Offset"]}],"name":"Std.Time.Time.Unit.Second"}