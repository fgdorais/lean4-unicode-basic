{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.elabDeriving\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">elabDeriving</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElab\">Command.CommandElab</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Deriving/Basic.html#Lean.Elab.elabDeriving","kind":"def","line":292,"name":"Lean.Elab.elabDeriving","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Deriving/Basic.lean#L292-L308"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingClassView.applyHandlers\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DerivingClassView</span>.<span class=\"name\">applyHandlers</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">view</span> : <a href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingClassView\">DerivingClassView</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">Command.CommandElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingClassView.applyHandlers","kind":"def","line":265,"name":"Lean.Elab.DerivingClassView.applyHandlers","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Deriving/Basic.lean#L265-L267"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.getOptDerivingClasses\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">getOptDerivingClasses</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">optDeriving</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingClassView\">DerivingClassView</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Deriving/Basic.html#Lean.Elab.getOptDerivingClasses","kind":"def","line":260,"name":"Lean.Elab.getOptDerivingClasses","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Deriving/Basic.lean#L260-L263"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingClassView.ofSyntax\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DerivingClassView</span>.<span class=\"name\">ofSyntax</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.Parser.Command.derivingClass</span> â†’ <span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingClassView\">DerivingClassView</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingClassView.ofSyntax","kind":"def","line":255,"name":"Lean.Elab.DerivingClassView.ofSyntax","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Deriving/Basic.lean#L255-L258"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingClassView.getClassName\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DerivingClassView</span>.<span class=\"name\">getClassName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">view</span> : <a href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingClassView\">DerivingClassView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingClassView.getClassName","kind":"def","line":252,"name":"Lean.Elab.DerivingClassView.getClassName","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Deriving/Basic.lean#L252-L253"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.applyDerivingHandlers\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">applyDerivingHandlers</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">className</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">typeNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">setExpose</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">Command.CommandElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Deriving/Basic.html#Lean.Elab.applyDerivingHandlers","kind":"def","line":232,"name":"Lean.Elab.applyDerivingHandlers","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Deriving/Basic.lean#L232-L248"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.registerDerivingHandler\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">registerDerivingHandler</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">className</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">handler</span> : <a href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingHandler\">DerivingHandler</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Registers a deriving handler for a class. This function should be called in an `initialize` block.\n\nA `DerivingHandler` is called on the fully qualified names of all types it is running for. For\nexample, `deriving instance Foo for Bar, Baz` invokes ``fooHandler #[`Bar, `Baz]``.\n","docLink":"./Lean/Elab/Deriving/Basic.html#Lean.Elab.registerDerivingHandler","kind":"def","line":219,"name":"Lean.Elab.registerDerivingHandler","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Deriving/Basic.lean#L219-L230"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.derivingHandlersRef\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">derivingHandlersRef</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <span class=\"fn\">(<a href=\"./Lean/Data/NameMap/Basic.html#Lean.NameMap\">NameMap</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingHandler\">DerivingHandler</a>)</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Deriving/Basic.html#Lean.Elab.derivingHandlersRef","kind":"opaque","line":217,"name":"Lean.Elab.derivingHandlersRef","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Deriving/Basic.lean#L217-L217"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingHandler\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DerivingHandler</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingHandler","kind":"def","line":215,"name":"Lean.Elab.DerivingHandler","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Deriving/Basic.lean#L215-L215"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.Term.processDefDeriving\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Term</span>.<span class=\"name\">processDefDeriving</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">view</span> : <a href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingClassView\">DerivingClassView</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Delta deriving handler. Creates an instance of class `classStx` for `decl`.\nThe elaborated class expression may be underapplied (e.g. `Decidable` instead of `Decidable _`),\nand may be `decl`.\nIf unfolding `decl` results in an underapplied lambda, then this enters the body of the lambda.\nWe prevent `classStx` from referring to these local variables; instead it's expected that one uses section variables.\n\nThis function can handle being run from within a nontrivial local context,\nand it uses `mkValueTypeClosure` to construct the final instance.\n","docLink":"./Lean/Elab/Deriving/Basic.html#Lean.Elab.Term.processDefDeriving","kind":"def","line":152,"name":"Lean.Elab.Term.processDefDeriving","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Deriving/Basic.lean#L152-L211"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingClassView.cls\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DerivingClassView</span>.<span class=\"name\">cls</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingClassView\">DerivingClassView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta/Defs.html#Lean.Syntax.Term\">Term</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingClassView.cls","kind":"def","line":23,"name":"Lean.Elab.DerivingClassView.cls","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Deriving/Basic.lean#L23-L23"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingClassView.hasExpose\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DerivingClassView</span>.<span class=\"name\">hasExpose</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingClassView\">DerivingClassView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingClassView.hasExpose","kind":"def","line":22,"name":"Lean.Elab.DerivingClassView.hasExpose","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Deriving/Basic.lean#L22-L22"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingClassView.ref\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DerivingClassView</span>.<span class=\"name\">ref</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingClassView\">DerivingClassView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingClassView.ref","kind":"def","line":21,"name":"Lean.Elab.DerivingClassView.ref","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Deriving/Basic.lean#L21-L21"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingClassView.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DerivingClassView</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hasExpose</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cls</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Term\">Term</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingClassView\">DerivingClassView</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingClassView.mk","kind":"ctor","line":20,"name":"Lean.Elab.DerivingClassView.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Deriving/Basic.lean#L20-L20"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingClassView\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DerivingClassView</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Deriving/Basic.html#Lean.Elab.DerivingClassView","kind":"structure","line":20,"name":"Lean.Elab.DerivingClassView","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Deriving/Basic.lean#L20-L23"}}],"imports":["Lean.Elab.App","Lean.Elab.Command","Lean.Elab.DeclarationRange","Lean.Elab.DeclNameGen","Lean.Parser.Command"],"instances":[],"name":"Lean.Elab.Deriving.Basic"}