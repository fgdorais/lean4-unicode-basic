{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instMinUSize\"><span class=\"name\">instMinUSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Min\">Min</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instMinUSize","kind":"instance","line":1029,"name":"instMinUSize","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L1029-L1029"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instMaxUSize\"><span class=\"name\">instMaxUSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Max\">Max</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instMaxUSize","kind":"instance","line":1028,"name":"instMaxUSize","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L1028-L1028"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#Bool.toUSize\"><span class=\"name\">Bool</span>.<span class=\"name\">toUSize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>","info":{"doc":"Converts `true` to `1` and `false` to `0`.\n","docLink":"./Init/Data/UInt/Basic.html#Bool.toUSize","kind":"def","line":1022,"name":"Bool.toUSize","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L1022-L1026"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instShiftRightUSize\"><span class=\"name\">instShiftRightUSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ShiftRight\">ShiftRight</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instShiftRightUSize","kind":"instance","line":1020,"name":"instShiftRightUSize","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L1020-L1020"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instShiftLeftUSize\"><span class=\"name\">instShiftLeftUSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ShiftLeft\">ShiftLeft</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instShiftLeftUSize","kind":"instance","line":1019,"name":"instShiftLeftUSize","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L1019-L1019"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instXorOpUSize\"><span class=\"name\">instXorOpUSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#XorOp\">XorOp</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instXorOpUSize","kind":"instance","line":1018,"name":"instXorOpUSize","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L1018-L1018"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instOrOpUSize\"><span class=\"name\">instOrOpUSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OrOp\">OrOp</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instOrOpUSize","kind":"instance","line":1017,"name":"instOrOpUSize","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L1017-L1017"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instAndOpUSize\"><span class=\"name\">instAndOpUSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#AndOp\">AndOp</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instAndOpUSize","kind":"instance","line":1016,"name":"instAndOpUSize","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L1016-L1016"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instNegUSize\"><span class=\"name\">instNegUSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instNegUSize","kind":"instance","line":1015,"name":"instNegUSize","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L1015-L1015"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instComplementUSize\"><span class=\"name\">instComplementUSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Complement\">Complement</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instComplementUSize","kind":"instance","line":1014,"name":"instComplementUSize","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L1014-L1014"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#USize.neg\"><span class=\"name\">USize</span>.<span class=\"name\">neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>","info":{"doc":"Negation of word-sized unsigned integers, computed modulo `USize.size`.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/Basic.html#USize.neg","kind":"def","line":1006,"name":"USize.neg","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L1006-L1012"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#USize.complement\"><span class=\"name\">USize</span>.<span class=\"name\">complement</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>","info":{"doc":"Bitwise complement, also known as bitwise negation, for word-sized unsigned integers. Usually\naccessed via the `~~~` prefix operator.\n\nEach bit of the resulting integer is the opposite of the corresponding bit of the input integer.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/Basic.html#USize.complement","kind":"def","line":996,"name":"USize.complement","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L996-L1005"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instDivUSize\"><span class=\"name\">instDivUSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Div\">Div</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instDivUSize","kind":"instance","line":994,"name":"instDivUSize","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L994-L994"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instHModUSizeNat\"><span class=\"name\">instHModUSizeNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HMod\">HMod</a> <a href=\"./Init/Prelude.html#USize\">USize</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instHModUSizeNat","kind":"instance","line":992,"name":"instHModUSizeNat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L992-L992"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instModUSize\"><span class=\"name\">instModUSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mod\">Mod</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instModUSize","kind":"instance","line":989,"name":"instModUSize","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L989-L989"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instPowUSizeNat\"><span class=\"name\">instPowUSizeNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Pow\">Pow</a> <a href=\"./Init/Prelude.html#USize\">USize</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instPowUSizeNat","kind":"instance","line":988,"name":"instPowUSizeNat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L988-L988"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instMulUSize\"><span class=\"name\">instMulUSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <a href=\"./Init/Prelude.html#USize\">USize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instMulUSize","kind":"instance","line":987,"name":"instMulUSize","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L987-L987"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#USize.toUInt64\"><span class=\"name\">USize</span>.<span class=\"name\">toUInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>","info":{"doc":"Converts word-sized unsigned integers to 32-bit unsigned integers. This cannot overflow because\n`USize.size` is either `2^32` or `2^64`.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/Basic.html#USize.toUInt64","kind":"def","line":977,"name":"USize.toUInt64","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L977-L985"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt64.toUSize\"><span class=\"name\">UInt64</span>.<span class=\"name\">toUSize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>","info":{"doc":"Converts 64-bit unsigned integers to word-sized unsigned integers. On 32-bit machines, this may\noverflow, which results in the value wrapping around (that is, it is reduced modulo `USize.size`).\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/Basic.html#UInt64.toUSize","kind":"def","line":969,"name":"UInt64.toUSize","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L969-L976"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#USize.toUInt32\"><span class=\"name\">USize</span>.<span class=\"name\">toUInt32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>","info":{"doc":"Converts word-sized unsigned integers to 32-bit unsigned integers. Wraps around on overflow, which\nmight occur on 64-bit architectures.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/Basic.html#USize.toUInt32","kind":"def","line":961,"name":"USize.toUInt32","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L961-L968"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt32.toUSize\"><span class=\"name\">UInt32</span>.<span class=\"name\">toUSize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>","info":{"doc":"Converts 32-bit unsigned integers to word-sized unsigned integers.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/Basic.html#UInt32.toUSize","kind":"def","line":954,"name":"UInt32.toUSize","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L954-L960"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#USize.toUInt16\"><span class=\"name\">USize</span>.<span class=\"name\">toUInt16</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>","info":{"doc":"Converts word-sized unsigned integers to 16-bit unsigned integers. Wraps around on overflow.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/Basic.html#USize.toUInt16","kind":"def","line":947,"name":"USize.toUInt16","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L947-L953"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt16.toUSize\"><span class=\"name\">UInt16</span>.<span class=\"name\">toUSize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>","info":{"doc":"Converts 16-bit unsigned integers to word-sized unsigned integers.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/Basic.html#UInt16.toUSize","kind":"def","line":939,"name":"UInt16.toUSize","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L939-L946"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#USize.toUInt8\"><span class=\"name\">USize</span>.<span class=\"name\">toUInt8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>","info":{"doc":"Converts word-sized unsigned integers to 8-bit unsigned integers. Wraps around on overflow.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/Basic.html#USize.toUInt8","kind":"def","line":932,"name":"USize.toUInt8","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L932-L938"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt8.toUSize\"><span class=\"name\">UInt8</span>.<span class=\"name\">toUSize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>","info":{"doc":"Converts 8-bit unsigned integers to word-sized unsigned integers.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/Basic.html#UInt8.toUSize","kind":"def","line":924,"name":"UInt8.toUSize","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L924-L931"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#USize.ofNat32\"><span class=\"name\">USize</span>.<span class=\"name\">ofNat32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">4294967296</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>","info":{"doc":"Converts a natural number to a `USize`. Overflow is impossible on any supported platform because\n`USize.size` is either `2^32` or `2^64`.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/Basic.html#USize.ofNat32","kind":"def","line":915,"name":"USize.ofNat32","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L915-L923"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#USize.shiftRight\"><span class=\"name\">USize</span>.<span class=\"name\">shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>","info":{"doc":"Bitwise right shift for word-sized unsigned integers. Usually accessed via the `>>>` operator.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/Basic.html#USize.shiftRight","kind":"def","line":908,"name":"USize.shiftRight","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L908-L914"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#USize.shiftLeft\"><span class=\"name\">USize</span>.<span class=\"name\">shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>","info":{"doc":"Bitwise left shift for word-sized unsigned integers. Usually accessed via the `<<<` operator.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/Basic.html#USize.shiftLeft","kind":"def","line":901,"name":"USize.shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L901-L907"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#USize.xor\"><span class=\"name\">USize</span>.<span class=\"name\">xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>","info":{"doc":"Bitwise exclusive or for word-sized unsigned integers. Usually accessed via the `^^^` operator.\n\nEach bit of the resulting integer is set if exactly one of the corresponding bits of both input\nintegers are set.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/Basic.html#USize.xor","kind":"def","line":891,"name":"USize.xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L891-L900"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#USize.lor\"><span class=\"name\">USize</span>.<span class=\"name\">lor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>","info":{"doc":"Bitwise or for word-sized unsigned integers. Usually accessed via the `|||` operator.\n\nEach bit of the resulting integer is set if at least one of the corresponding bits of both input\nintegers are set.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/Basic.html#USize.lor","kind":"def","line":881,"name":"USize.lor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L881-L890"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#USize.land\"><span class=\"name\">USize</span>.<span class=\"name\">land</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>","info":{"doc":"Bitwise and for word-sized unsigned integers. Usually accessed via the `&&&` operator.\n\nEach bit of the resulting integer is set if the corresponding bits of both input integers are set.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/Basic.html#USize.land","kind":"def","line":872,"name":"USize.land","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L872-L880"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#USize.modn\"><span class=\"name\">USize</span>.<span class=\"name\">modn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#USize.modn","kind":"def","line":870,"name":"USize.modn","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L870-L871"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#USize.mod\"><span class=\"name\">USize</span>.<span class=\"name\">mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>","info":{"doc":"The modulo operator for word-sized unsigned integers, which computes the remainder when dividing one\ninteger by another. Usually accessed via the `%` operator.\n\nWhen the divisor is `0`, the result is the dividend rather than an error.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n* `USize.mod 5 2 = 1`\n* `USize.mod 4 2 = 0`\n* `USize.mod 4 0 = 4`\n","docLink":"./Init/Data/UInt/Basic.html#USize.mod","kind":"def","line":852,"name":"USize.mod","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L852-L866"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#USize.pow\"><span class=\"name\">USize</span>.<span class=\"name\">pow</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>","info":{"doc":"The power operation, raising a word-sized unsigned integer to a natural number power,\nwrapping around on overflow. Usually accessed via the `^` operator.\n\nThis function is currently *not* overridden at runtime with an efficient implementation,\nand should be used with caution. See https://github.com/leanprover/lean4/issues/7887.\n","docLink":"./Init/Data/UInt/Basic.html#USize.pow","kind":"def","line":841,"name":"USize.pow","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L841-L851"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#USize.div\"><span class=\"name\">USize</span>.<span class=\"name\">div</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>","info":{"doc":"Unsigned division for word-sized unsigned integers, discarding the remainder. Usually accessed\nvia the `/` operator.\n\nThis operation is sometimes called “floor division.” Division by zero is defined to be zero.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/Basic.html#USize.div","kind":"def","line":831,"name":"USize.div","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L831-L840"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#USize.mul\"><span class=\"name\">USize</span>.<span class=\"name\">mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>","info":{"doc":"Multiplies two word-sized unsigned integers, wrapping around on overflow.  Usually accessed via the\n`*` operator.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/Basic.html#USize.mul","kind":"def","line":823,"name":"USize.mul","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L823-L830"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#le_usize_size\"><span class=\"name\">le_usize_size</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">4294967296</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <a href=\"./Init/Prelude.html#USize.size\">USize.size</a></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#le_usize_size","kind":"theorem","line":819,"name":"le_usize_size","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L819-L821"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#usize_size_le\"><span class=\"name\">usize_size_le</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize.size\">USize.size</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">18446744073709551616</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#usize_size_le","kind":"theorem","line":815,"name":"usize_size_le","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L815-L817"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#USize.size_le\"><span class=\"name\">USize</span>.<span class=\"name\">size_le</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize.size\">size</a> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">64</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#USize.size_le","kind":"theorem","line":813,"name":"USize.size_le","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L813-L813"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#USize.le_size\"><span class=\"name\">USize</span>.<span class=\"name\">le_size</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">32</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <a href=\"./Init/Prelude.html#USize.size\">size</a></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#USize.le_size","kind":"theorem","line":812,"name":"USize.le_size","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L812-L812"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#USize.ofInt\"><span class=\"name\">USize</span>.<span class=\"name\">ofInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>","info":{"doc":"Converts an `Int` to a `USize` by taking the (non-negative remainder of the division by `2 ^ numBits`. ","docLink":"./Init/Data/UInt/Basic.html#USize.ofInt","kind":"def","line":809,"name":"USize.ofInt","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L809-L810"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#USize.ofNatCore\"><span class=\"name\">USize</span>.<span class=\"name\">ofNatCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Prelude.html#USize.size\">size</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>","info":{"doc":"Converts a natural number to a `USize`. Requires a proof that the number is small enough to be\nrepresentable without overflow.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/Basic.html#USize.ofNatCore","kind":"def","line":805,"name":"USize.ofNatCore","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L805-L807"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#USize.mk\"><span class=\"name\">USize</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bitVec</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>","info":{"doc":"Creates a `USize` from a `BitVec System.Platform.numBits`. This function is overridden with a\nnative implementation.\n","docLink":"./Init/Data/UInt/Basic.html#USize.mk","kind":"def","line":802,"name":"USize.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L802-L804"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#USize.ofFin\"><span class=\"name\">USize</span>.<span class=\"name\">ofFin</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#USize.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>","info":{"doc":"Converts a `Fin USize.size` into the corresponding `USize`. ","docLink":"./Init/Data/UInt/Basic.html#USize.ofFin","kind":"def","line":800,"name":"USize.ofFin","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L800-L801"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instMinUInt64\"><span class=\"name\">instMinUInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Min\">Min</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instMinUInt64","kind":"instance","line":798,"name":"instMinUInt64","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L798-L798"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instMaxUInt64\"><span class=\"name\">instMaxUInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Max\">Max</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instMaxUInt64","kind":"instance","line":797,"name":"instMaxUInt64","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L797-L797"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt64.decLe\"><span class=\"name\">UInt64</span>.<span class=\"name\">decLe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></div></div>","info":{"doc":"Decides whether one 64-bit unsigned integer is less than or equal to another. Usually accessed via the\n`DecidableLE UInt64` instance.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n * `(if (15 : UInt64) ≤ 15 then \"yes\" else \"no\") = \"yes\"`\n * `(if (15 : UInt64) ≤ 5 then \"yes\" else \"no\") = \"no\"`\n * `(if (5 : UInt64) ≤ 15 then \"yes\" else \"no\") = \"yes\"`\n * `show (7 : UInt64) ≤ 7 by decide`\n","docLink":"./Init/Data/UInt/Basic.html#UInt64.decLe","kind":"instance","line":779,"name":"UInt64.decLe","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L779-L793"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt64.decLt\"><span class=\"name\">UInt64</span>.<span class=\"name\">decLt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></div></div>","info":{"doc":"Decides whether one 64-bit unsigned integer is strictly less than another. Usually accessed via the\n`DecidableLT UInt64` instance.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n * `(if (6 : UInt64) < 7 then \"yes\" else \"no\") = \"yes\"`\n * `(if (5 : UInt64) < 5 then \"yes\" else \"no\") = \"no\"`\n * `show ¬((7 : UInt64) < 7) by decide`\n","docLink":"./Init/Data/UInt/Basic.html#UInt64.decLt","kind":"instance","line":764,"name":"UInt64.decLt","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L764-L777"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#Bool.toUInt64\"><span class=\"name\">Bool</span>.<span class=\"name\">toUInt64</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>","info":{"doc":"Converts `true` to `1` and `false` to `0`.\n","docLink":"./Init/Data/UInt/Basic.html#Bool.toUInt64","kind":"def","line":758,"name":"Bool.toUInt64","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L758-L762"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instShiftRightUInt64\"><span class=\"name\">instShiftRightUInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ShiftRight\">ShiftRight</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instShiftRightUInt64","kind":"instance","line":756,"name":"instShiftRightUInt64","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L756-L756"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instShiftLeftUInt64\"><span class=\"name\">instShiftLeftUInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ShiftLeft\">ShiftLeft</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instShiftLeftUInt64","kind":"instance","line":755,"name":"instShiftLeftUInt64","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L755-L755"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instXorOpUInt64\"><span class=\"name\">instXorOpUInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#XorOp\">XorOp</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instXorOpUInt64","kind":"instance","line":754,"name":"instXorOpUInt64","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L754-L754"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instOrOpUInt64\"><span class=\"name\">instOrOpUInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OrOp\">OrOp</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instOrOpUInt64","kind":"instance","line":753,"name":"instOrOpUInt64","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L753-L753"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instAndOpUInt64\"><span class=\"name\">instAndOpUInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#AndOp\">AndOp</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instAndOpUInt64","kind":"instance","line":752,"name":"instAndOpUInt64","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L752-L752"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instNegUInt64\"><span class=\"name\">instNegUInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instNegUInt64","kind":"instance","line":751,"name":"instNegUInt64","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L751-L751"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instComplementUInt64\"><span class=\"name\">instComplementUInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Complement\">Complement</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instComplementUInt64","kind":"instance","line":750,"name":"instComplementUInt64","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L750-L750"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt64.neg\"><span class=\"name\">UInt64</span>.<span class=\"name\">neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>","info":{"doc":"Negation of 64-bit unsigned integers, computed modulo `UInt64.size`.\n\n`UInt64.neg a` is equivalent to `18_446_744_073_709_551_615 - a + 1`.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/Basic.html#UInt64.neg","kind":"def","line":740,"name":"UInt64.neg","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L740-L748"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt64.complement\"><span class=\"name\">UInt64</span>.<span class=\"name\">complement</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>","info":{"doc":"Bitwise complement, also known as bitwise negation, for 64-bit unsigned integers. Usually accessed\nvia the `~~~` prefix operator.\n\nEach bit of the resulting integer is the opposite of the corresponding bit of the input integer.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/Basic.html#UInt64.complement","kind":"def","line":730,"name":"UInt64.complement","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L730-L739"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instLEUInt64\"><span class=\"name\">instLEUInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instLEUInt64","kind":"instance","line":728,"name":"instLEUInt64","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L728-L728"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instLTUInt64\"><span class=\"name\">instLTUInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instLTUInt64","kind":"instance","line":727,"name":"instLTUInt64","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L727-L727"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instDivUInt64\"><span class=\"name\">instDivUInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Div\">Div</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instDivUInt64","kind":"instance","line":726,"name":"instDivUInt64","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L726-L726"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instHModUInt64Nat\"><span class=\"name\">instHModUInt64Nat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HMod\">HMod</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instHModUInt64Nat","kind":"instance","line":724,"name":"instHModUInt64Nat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L724-L724"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instModUInt64\"><span class=\"name\">instModUInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mod\">Mod</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instModUInt64","kind":"instance","line":721,"name":"instModUInt64","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L721-L721"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instPowUInt64Nat\"><span class=\"name\">instPowUInt64Nat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Pow\">Pow</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instPowUInt64Nat","kind":"instance","line":720,"name":"instPowUInt64Nat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L720-L720"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instMulUInt64\"><span class=\"name\">instMulUInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instMulUInt64","kind":"instance","line":719,"name":"instMulUInt64","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L719-L719"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instSubUInt64\"><span class=\"name\">instSubUInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">Sub</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instSubUInt64","kind":"instance","line":718,"name":"instSubUInt64","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L718-L718"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instAddUInt64\"><span class=\"name\">instAddUInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instAddUInt64","kind":"instance","line":717,"name":"instAddUInt64","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L717-L717"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt64.le\"><span class=\"name\">UInt64</span>.<span class=\"name\">le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"Non-strict inequality of 64-bit unsigned integers, defined as inequality of the corresponding\nnatural numbers. Usually accessed via the `≤` operator.\n","docLink":"./Init/Data/UInt/Basic.html#UInt64.le","kind":"def","line":711,"name":"UInt64.le","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L711-L715"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt64.lt\"><span class=\"name\">UInt64</span>.<span class=\"name\">lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"Strict inequality of 64-bit unsigned integers, defined as inequality of the corresponding\nnatural numbers. Usually accessed via the `<` operator.\n","docLink":"./Init/Data/UInt/Basic.html#UInt64.lt","kind":"def","line":706,"name":"UInt64.lt","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L706-L710"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt64.shiftRight\"><span class=\"name\">UInt64</span>.<span class=\"name\">shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>","info":{"doc":"Bitwise right shift for 64-bit unsigned integers. Usually accessed via the `>>>` operator.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/Basic.html#UInt64.shiftRight","kind":"def","line":699,"name":"UInt64.shiftRight","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L699-L705"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt64.shiftLeft\"><span class=\"name\">UInt64</span>.<span class=\"name\">shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>","info":{"doc":"Bitwise left shift for 64-bit unsigned integers. Usually accessed via the `<<<` operator.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/Basic.html#UInt64.shiftLeft","kind":"def","line":692,"name":"UInt64.shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L692-L698"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt64.xor\"><span class=\"name\">UInt64</span>.<span class=\"name\">xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>","info":{"doc":"Bitwise exclusive or for 64-bit unsigned integers. Usually accessed via the `^^^` operator.\n\nEach bit of the resulting integer is set if exactly one of the corresponding bits of both input\nintegers are set.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/Basic.html#UInt64.xor","kind":"def","line":682,"name":"UInt64.xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L682-L691"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt64.lor\"><span class=\"name\">UInt64</span>.<span class=\"name\">lor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>","info":{"doc":"Bitwise or for 64-bit unsigned integers. Usually accessed via the `|||` operator.\n\nEach bit of the resulting integer is set if at least one of the corresponding bits of both input\nintegers are set.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/Basic.html#UInt64.lor","kind":"def","line":672,"name":"UInt64.lor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L672-L681"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt64.land\"><span class=\"name\">UInt64</span>.<span class=\"name\">land</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>","info":{"doc":"Bitwise and for 64-bit unsigned integers. Usually accessed via the `&&&` operator.\n\nEach bit of the resulting integer is set if the corresponding bits of both input integers are set.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/Basic.html#UInt64.land","kind":"def","line":663,"name":"UInt64.land","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L663-L671"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt64.modn\"><span class=\"name\">UInt64</span>.<span class=\"name\">modn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#UInt64.modn","kind":"def","line":661,"name":"UInt64.modn","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L661-L662"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt64.mod\"><span class=\"name\">UInt64</span>.<span class=\"name\">mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>","info":{"doc":"The modulo operator for 64-bit unsigned integers, which computes the remainder when dividing one\ninteger by another. Usually accessed via the `%` operator.\n\nWhen the divisor is `0`, the result is the dividend rather than an error.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n* `UInt64.mod 5 2 = 1`\n* `UInt64.mod 4 2 = 0`\n* `UInt64.mod 4 0 = 4`\n","docLink":"./Init/Data/UInt/Basic.html#UInt64.mod","kind":"def","line":643,"name":"UInt64.mod","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L643-L657"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt64.pow\"><span class=\"name\">UInt64</span>.<span class=\"name\">pow</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>","info":{"doc":"The power operation, raising a 64-bit unsigned integer to a natural number power,\nwrapping around on overflow. Usually accessed via the `^` operator.\n\nThis function is currently *not* overridden at runtime with an efficient implementation,\nand should be used with caution. See https://github.com/leanprover/lean4/issues/7887.\n","docLink":"./Init/Data/UInt/Basic.html#UInt64.pow","kind":"def","line":632,"name":"UInt64.pow","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L632-L642"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt64.div\"><span class=\"name\">UInt64</span>.<span class=\"name\">div</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>","info":{"doc":"Unsigned division for 64-bit unsigned integers, discarding the remainder. Usually accessed\nvia the `/` operator.\n\nThis operation is sometimes called “floor division.” Division by zero is defined to be zero.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/Basic.html#UInt64.div","kind":"def","line":622,"name":"UInt64.div","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L622-L631"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt64.mul\"><span class=\"name\">UInt64</span>.<span class=\"name\">mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>","info":{"doc":"Multiplies two 64-bit unsigned integers, wrapping around on overflow.  Usually accessed via the `*`\noperator.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/Basic.html#UInt64.mul","kind":"def","line":614,"name":"UInt64.mul","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L614-L621"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt64.sub\"><span class=\"name\">UInt64</span>.<span class=\"name\">sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>","info":{"doc":"Subtracts one 64-bit unsigned integer from another, wrapping around on underflow. Usually accessed\nvia the `-` operator.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/Basic.html#UInt64.sub","kind":"def","line":606,"name":"UInt64.sub","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L606-L613"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt64.add\"><span class=\"name\">UInt64</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>","info":{"doc":"Adds two 64-bit unsigned integers, wrapping around on overflow. Usually accessed via the `+`\noperator.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/Basic.html#UInt64.add","kind":"def","line":598,"name":"UInt64.add","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L598-L605"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt64.ofInt\"><span class=\"name\">UInt64</span>.<span class=\"name\">ofInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>","info":{"doc":"Converts an `Int` to a `UInt64` by taking the (non-negative remainder of the division by `2 ^ 64`. ","docLink":"./Init/Data/UInt/Basic.html#UInt64.ofInt","kind":"def","line":595,"name":"UInt64.ofInt","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L595-L596"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt64.ofNatCore\"><span class=\"name\">UInt64</span>.<span class=\"name\">ofNatCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Prelude.html#UInt64.size\">size</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>","info":{"doc":"Converts a natural number to a 64-bit unsigned integer. Requires a proof that the number is small\nenough to be representable without overflow; it must be smaller than `2^64`.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/Basic.html#UInt64.ofNatCore","kind":"def","line":591,"name":"UInt64.ofNatCore","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L591-L593"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt64.mk\"><span class=\"name\">UInt64</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bitVec</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">64</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>","info":{"doc":"Creates a `UInt64` from a `BitVec 64`. This function is overridden with a native implementation.\n","docLink":"./Init/Data/UInt/Basic.html#UInt64.mk","kind":"def","line":588,"name":"UInt64.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L588-L590"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt64.ofFin\"><span class=\"name\">UInt64</span>.<span class=\"name\">ofFin</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#UInt64.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>","info":{"doc":"Converts a `Fin UInt64.size` into the corresponding `UInt64`. ","docLink":"./Init/Data/UInt/Basic.html#UInt64.ofFin","kind":"def","line":586,"name":"UInt64.ofFin","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L586-L587"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#Bool.toUInt32\"><span class=\"name\">Bool</span>.<span class=\"name\">toUInt32</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>","info":{"doc":"Converts `true` to `1` and `false` to `0`.\n","docLink":"./Init/Data/UInt/Basic.html#Bool.toUInt32","kind":"def","line":580,"name":"Bool.toUInt32","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L580-L584"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instShiftRightUInt32\"><span class=\"name\">instShiftRightUInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ShiftRight\">ShiftRight</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instShiftRightUInt32","kind":"instance","line":578,"name":"instShiftRightUInt32","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L578-L578"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instShiftLeftUInt32\"><span class=\"name\">instShiftLeftUInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ShiftLeft\">ShiftLeft</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instShiftLeftUInt32","kind":"instance","line":577,"name":"instShiftLeftUInt32","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L577-L577"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instXorOpUInt32\"><span class=\"name\">instXorOpUInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#XorOp\">XorOp</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instXorOpUInt32","kind":"instance","line":576,"name":"instXorOpUInt32","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L576-L576"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instOrOpUInt32\"><span class=\"name\">instOrOpUInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OrOp\">OrOp</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instOrOpUInt32","kind":"instance","line":575,"name":"instOrOpUInt32","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L575-L575"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instAndOpUInt32\"><span class=\"name\">instAndOpUInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#AndOp\">AndOp</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instAndOpUInt32","kind":"instance","line":574,"name":"instAndOpUInt32","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L574-L574"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instNegUInt32\"><span class=\"name\">instNegUInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instNegUInt32","kind":"instance","line":573,"name":"instNegUInt32","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L573-L573"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instComplementUInt32\"><span class=\"name\">instComplementUInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Complement\">Complement</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instComplementUInt32","kind":"instance","line":572,"name":"instComplementUInt32","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L572-L572"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt32.neg\"><span class=\"name\">UInt32</span>.<span class=\"name\">neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>","info":{"doc":"Negation of 32-bit unsigned integers, computed modulo `UInt32.size`.\n\n`UInt32.neg a` is equivalent to `429_4967_295 - a + 1`.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/Basic.html#UInt32.neg","kind":"def","line":562,"name":"UInt32.neg","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L562-L570"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt32.complement\"><span class=\"name\">UInt32</span>.<span class=\"name\">complement</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>","info":{"doc":"Bitwise complement, also known as bitwise negation, for 32-bit unsigned integers. Usually accessed\nvia the `~~~` prefix operator.\n\nEach bit of the resulting integer is the opposite of the corresponding bit of the input integer.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/Basic.html#UInt32.complement","kind":"def","line":552,"name":"UInt32.complement","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L552-L561"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instDivUInt32\"><span class=\"name\">instDivUInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Div\">Div</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instDivUInt32","kind":"instance","line":549,"name":"instDivUInt32","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L549-L549"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instHModUInt32Nat\"><span class=\"name\">instHModUInt32Nat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HMod\">HMod</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instHModUInt32Nat","kind":"instance","line":547,"name":"instHModUInt32Nat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L547-L547"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instModUInt32\"><span class=\"name\">instModUInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mod\">Mod</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instModUInt32","kind":"instance","line":544,"name":"instModUInt32","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L544-L544"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instPowUInt32Nat\"><span class=\"name\">instPowUInt32Nat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Pow\">Pow</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instPowUInt32Nat","kind":"instance","line":543,"name":"instPowUInt32Nat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L543-L543"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instMulUInt32\"><span class=\"name\">instMulUInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instMulUInt32","kind":"instance","line":542,"name":"instMulUInt32","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L542-L542"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instSubUInt32\"><span class=\"name\">instSubUInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">Sub</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instSubUInt32","kind":"instance","line":541,"name":"instSubUInt32","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L541-L541"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instAddUInt32\"><span class=\"name\">instAddUInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <a href=\"./Init/Prelude.html#UInt32\">UInt32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instAddUInt32","kind":"instance","line":540,"name":"instAddUInt32","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L540-L540"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt32.le\"><span class=\"name\">UInt32</span>.<span class=\"name\">le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"Non-strict inequality of 32-bit unsigned integers, defined as inequality of the corresponding\nnatural numbers. Usually accessed via the `≤` operator.\n","docLink":"./Init/Data/UInt/Basic.html#UInt32.le","kind":"def","line":534,"name":"UInt32.le","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L534-L538"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt32.lt\"><span class=\"name\">UInt32</span>.<span class=\"name\">lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"Strict inequality of 32-bit unsigned integers, defined as inequality of the corresponding\nnatural numbers. Usually accessed via the `<` operator.\n","docLink":"./Init/Data/UInt/Basic.html#UInt32.lt","kind":"def","line":527,"name":"UInt32.lt","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L527-L533"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt32.shiftRight\"><span class=\"name\">UInt32</span>.<span class=\"name\">shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>","info":{"doc":"Bitwise right shift for 32-bit unsigned integers. Usually accessed via the `>>>` operator.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/Basic.html#UInt32.shiftRight","kind":"def","line":520,"name":"UInt32.shiftRight","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L520-L526"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt32.shiftLeft\"><span class=\"name\">UInt32</span>.<span class=\"name\">shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>","info":{"doc":"Bitwise left shift for 32-bit unsigned integers. Usually accessed via the `<<<` operator.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/Basic.html#UInt32.shiftLeft","kind":"def","line":513,"name":"UInt32.shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L513-L519"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt32.xor\"><span class=\"name\">UInt32</span>.<span class=\"name\">xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>","info":{"doc":"Bitwise exclusive or for 32-bit unsigned integers. Usually accessed via the `^^^` operator.\n\nEach bit of the resulting integer is set if exactly one of the corresponding bits of both input\nintegers are set.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/Basic.html#UInt32.xor","kind":"def","line":503,"name":"UInt32.xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L503-L512"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt32.lor\"><span class=\"name\">UInt32</span>.<span class=\"name\">lor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>","info":{"doc":"Bitwise or for 32-bit unsigned integers. Usually accessed via the `|||` operator.\n\nEach bit of the resulting integer is set if at least one of the corresponding bits of both input\nintegers are set.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/Basic.html#UInt32.lor","kind":"def","line":493,"name":"UInt32.lor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L493-L502"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt32.land\"><span class=\"name\">UInt32</span>.<span class=\"name\">land</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>","info":{"doc":"Bitwise and for 32-bit unsigned integers. Usually accessed via the `&&&` operator.\n\nEach bit of the resulting integer is set if the corresponding bits of both input integers are set.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/Basic.html#UInt32.land","kind":"def","line":484,"name":"UInt32.land","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L484-L492"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt32.modn\"><span class=\"name\">UInt32</span>.<span class=\"name\">modn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#UInt32.modn","kind":"def","line":482,"name":"UInt32.modn","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L482-L483"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt32.mod\"><span class=\"name\">UInt32</span>.<span class=\"name\">mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>","info":{"doc":"The modulo operator for 32-bit unsigned integers, which computes the remainder when dividing one\ninteger by another. Usually accessed via the `%` operator.\n\nWhen the divisor is `0`, the result is the dividend rather than an error.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n* `UInt32.mod 5 2 = 1`\n* `UInt32.mod 4 2 = 0`\n* `UInt32.mod 4 0 = 4`\n","docLink":"./Init/Data/UInt/Basic.html#UInt32.mod","kind":"def","line":464,"name":"UInt32.mod","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L464-L478"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt32.pow\"><span class=\"name\">UInt32</span>.<span class=\"name\">pow</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>","info":{"doc":"The power operation, raising a 32-bit unsigned integer to a natural number power,\nwrapping around on overflow. Usually accessed via the `^` operator.\n\nThis function is currently *not* overridden at runtime with an efficient implementation,\nand should be used with caution. See https://github.com/leanprover/lean4/issues/7887.\n","docLink":"./Init/Data/UInt/Basic.html#UInt32.pow","kind":"def","line":453,"name":"UInt32.pow","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L453-L463"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt32.div\"><span class=\"name\">UInt32</span>.<span class=\"name\">div</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>","info":{"doc":"Unsigned division for 32-bit unsigned integers, discarding the remainder. Usually accessed\nvia the `/` operator.\n\nThis operation is sometimes called “floor division.” Division by zero is defined to be zero.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/Basic.html#UInt32.div","kind":"def","line":443,"name":"UInt32.div","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L443-L452"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt32.mul\"><span class=\"name\">UInt32</span>.<span class=\"name\">mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>","info":{"doc":"Multiplies two 32-bit unsigned integers, wrapping around on overflow.  Usually accessed via the `*`\noperator.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/Basic.html#UInt32.mul","kind":"def","line":435,"name":"UInt32.mul","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L435-L442"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt32.sub\"><span class=\"name\">UInt32</span>.<span class=\"name\">sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>","info":{"doc":"Subtracts one 32-bit unsigned integer from another, wrapping around on underflow. Usually accessed\nvia the `-` operator.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/Basic.html#UInt32.sub","kind":"def","line":427,"name":"UInt32.sub","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L427-L434"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt32.add\"><span class=\"name\">UInt32</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>","info":{"doc":"Adds two 32-bit unsigned integers, wrapping around on overflow. Usually accessed via the `+`\noperator.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/Basic.html#UInt32.add","kind":"def","line":419,"name":"UInt32.add","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L419-L426"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt32.ofInt\"><span class=\"name\">UInt32</span>.<span class=\"name\">ofInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>","info":{"doc":"Converts an `Int` to a `UInt32` by taking the (non-negative remainder of the division by `2 ^ 32`. ","docLink":"./Init/Data/UInt/Basic.html#UInt32.ofInt","kind":"def","line":416,"name":"UInt32.ofInt","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L416-L417"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt32.ofNatCore\"><span class=\"name\">UInt32</span>.<span class=\"name\">ofNatCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Prelude.html#UInt32.size\">size</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>","info":{"doc":"Converts a natural number to a 32-bit unsigned integer. Requires a proof that the number is small\nenough to be representable without overflow; it must be smaller than `2^32`.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/Basic.html#UInt32.ofNatCore","kind":"def","line":412,"name":"UInt32.ofNatCore","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L412-L414"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt32.mk\"><span class=\"name\">UInt32</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bitVec</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">32</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>","info":{"doc":"Creates a `UInt32` from a `BitVec 32`. This function is overridden with a native implementation.\n","docLink":"./Init/Data/UInt/Basic.html#UInt32.mk","kind":"def","line":409,"name":"UInt32.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L409-L411"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt32.ofFin\"><span class=\"name\">UInt32</span>.<span class=\"name\">ofFin</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#UInt32.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32\">UInt32</a></div></div>","info":{"doc":"Converts a `Fin UInt32.size` into the corresponding `UInt32`. ","docLink":"./Init/Data/UInt/Basic.html#UInt32.ofFin","kind":"def","line":407,"name":"UInt32.ofFin","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L407-L408"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instMinUInt16\"><span class=\"name\">instMinUInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Min\">Min</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instMinUInt16","kind":"instance","line":405,"name":"instMinUInt16","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L405-L405"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instMaxUInt16\"><span class=\"name\">instMaxUInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Max\">Max</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instMaxUInt16","kind":"instance","line":404,"name":"instMaxUInt16","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L404-L404"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt16.decLe\"><span class=\"name\">UInt16</span>.<span class=\"name\">decLe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span></div></div>","info":{"doc":"Decides whether one 16-bit unsigned integer is less than or equal to another. Usually accessed via the\n`DecidableLE UInt16` instance.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n * `(if (15 : UInt16) ≤ 15 then \"yes\" else \"no\") = \"yes\"`\n * `(if (15 : UInt16) ≤ 5 then \"yes\" else \"no\") = \"no\"`\n * `(if (5 : UInt16) ≤ 15 then \"yes\" else \"no\") = \"yes\"`\n * `show (7 : UInt16) ≤ 7 by decide`\n","docLink":"./Init/Data/UInt/Basic.html#UInt16.decLe","kind":"instance","line":386,"name":"UInt16.decLe","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L386-L400"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt16.decLt\"><span class=\"name\">UInt16</span>.<span class=\"name\">decLt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></div></div>","info":{"doc":"Decides whether one 16-bit unsigned integer is strictly less than another. Usually accessed via the\n`DecidableLT UInt16` instance.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n * `(if (6 : UInt16) < 7 then \"yes\" else \"no\") = \"yes\"`\n * `(if (5 : UInt16) < 5 then \"yes\" else \"no\") = \"no\"`\n * `show ¬((7 : UInt16) < 7) by decide`\n","docLink":"./Init/Data/UInt/Basic.html#UInt16.decLt","kind":"instance","line":370,"name":"UInt16.decLt","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L370-L383"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#Bool.toUInt16\"><span class=\"name\">Bool</span>.<span class=\"name\">toUInt16</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>","info":{"doc":"Converts `true` to `1` and `false` to `0`.\n","docLink":"./Init/Data/UInt/Basic.html#Bool.toUInt16","kind":"def","line":363,"name":"Bool.toUInt16","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L363-L367"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instShiftRightUInt16\"><span class=\"name\">instShiftRightUInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ShiftRight\">ShiftRight</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instShiftRightUInt16","kind":"instance","line":361,"name":"instShiftRightUInt16","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L361-L361"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instShiftLeftUInt16\"><span class=\"name\">instShiftLeftUInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ShiftLeft\">ShiftLeft</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instShiftLeftUInt16","kind":"instance","line":360,"name":"instShiftLeftUInt16","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L360-L360"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instXorOpUInt16\"><span class=\"name\">instXorOpUInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#XorOp\">XorOp</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instXorOpUInt16","kind":"instance","line":359,"name":"instXorOpUInt16","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L359-L359"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instOrOpUInt16\"><span class=\"name\">instOrOpUInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OrOp\">OrOp</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instOrOpUInt16","kind":"instance","line":358,"name":"instOrOpUInt16","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L358-L358"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instAndOpUInt16\"><span class=\"name\">instAndOpUInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#AndOp\">AndOp</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instAndOpUInt16","kind":"instance","line":357,"name":"instAndOpUInt16","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L357-L357"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instNegUInt16\"><span class=\"name\">instNegUInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instNegUInt16","kind":"instance","line":356,"name":"instNegUInt16","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L356-L356"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instComplementUInt16\"><span class=\"name\">instComplementUInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Complement\">Complement</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instComplementUInt16","kind":"instance","line":355,"name":"instComplementUInt16","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L355-L355"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt16.neg\"><span class=\"name\">UInt16</span>.<span class=\"name\">neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>","info":{"doc":"Negation of 16-bit unsigned integers, computed modulo `UInt16.size`.\n\n`UInt16.neg a` is equivalent to `65_535 - a + 1`.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/Basic.html#UInt16.neg","kind":"def","line":345,"name":"UInt16.neg","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L345-L353"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt16.complement\"><span class=\"name\">UInt16</span>.<span class=\"name\">complement</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>","info":{"doc":"Bitwise complement, also known as bitwise negation, for 16-bit unsigned integers. Usually accessed\nvia the `~~~` prefix operator.\n\nEach bit of the resulting integer is the opposite of the corresponding bit of the input integer.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/Basic.html#UInt16.complement","kind":"def","line":335,"name":"UInt16.complement","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L335-L344"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instLEUInt16\"><span class=\"name\">instLEUInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instLEUInt16","kind":"instance","line":333,"name":"instLEUInt16","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L333-L333"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instLTUInt16\"><span class=\"name\">instLTUInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instLTUInt16","kind":"instance","line":332,"name":"instLTUInt16","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L332-L332"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instDivUInt16\"><span class=\"name\">instDivUInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Div\">Div</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instDivUInt16","kind":"instance","line":331,"name":"instDivUInt16","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L331-L331"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instHModUInt16Nat\"><span class=\"name\">instHModUInt16Nat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HMod\">HMod</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instHModUInt16Nat","kind":"instance","line":329,"name":"instHModUInt16Nat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L329-L329"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instModUInt16\"><span class=\"name\">instModUInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mod\">Mod</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instModUInt16","kind":"instance","line":326,"name":"instModUInt16","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L326-L326"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instPowUInt16Nat\"><span class=\"name\">instPowUInt16Nat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Pow\">Pow</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instPowUInt16Nat","kind":"instance","line":325,"name":"instPowUInt16Nat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L325-L325"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instMulUInt16\"><span class=\"name\">instMulUInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instMulUInt16","kind":"instance","line":324,"name":"instMulUInt16","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L324-L324"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instSubUInt16\"><span class=\"name\">instSubUInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">Sub</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instSubUInt16","kind":"instance","line":323,"name":"instSubUInt16","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L323-L323"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instAddUInt16\"><span class=\"name\">instAddUInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <a href=\"./Init/Prelude.html#UInt16\">UInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instAddUInt16","kind":"instance","line":322,"name":"instAddUInt16","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L322-L322"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt16.le\"><span class=\"name\">UInt16</span>.<span class=\"name\">le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"Non-strict inequality of 16-bit unsigned integers, defined as inequality of the corresponding\nnatural numbers. Usually accessed via the `≤` operator.\n","docLink":"./Init/Data/UInt/Basic.html#UInt16.le","kind":"def","line":316,"name":"UInt16.le","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L316-L320"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt16.lt\"><span class=\"name\">UInt16</span>.<span class=\"name\">lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"Strict inequality of 16-bit unsigned integers, defined as inequality of the corresponding\nnatural numbers. Usually accessed via the `<` operator.\n","docLink":"./Init/Data/UInt/Basic.html#UInt16.lt","kind":"def","line":311,"name":"UInt16.lt","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L311-L315"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt16.shiftRight\"><span class=\"name\">UInt16</span>.<span class=\"name\">shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>","info":{"doc":"Bitwise right shift for 16-bit unsigned integers. Usually accessed via the `>>>` operator.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/Basic.html#UInt16.shiftRight","kind":"def","line":304,"name":"UInt16.shiftRight","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L304-L310"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt16.shiftLeft\"><span class=\"name\">UInt16</span>.<span class=\"name\">shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>","info":{"doc":"Bitwise left shift for 16-bit unsigned integers. Usually accessed via the `<<<` operator.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/Basic.html#UInt16.shiftLeft","kind":"def","line":297,"name":"UInt16.shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L297-L303"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt16.xor\"><span class=\"name\">UInt16</span>.<span class=\"name\">xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>","info":{"doc":"Bitwise exclusive or for 16-bit unsigned integers. Usually accessed via the `^^^` operator.\n\nEach bit of the resulting integer is set if exactly one of the corresponding bits of both input\nintegers are set.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/Basic.html#UInt16.xor","kind":"def","line":287,"name":"UInt16.xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L287-L296"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt16.lor\"><span class=\"name\">UInt16</span>.<span class=\"name\">lor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>","info":{"doc":"Bitwise or for 16-bit unsigned integers. Usually accessed via the `|||` operator.\n\nEach bit of the resulting integer is set if at least one of the corresponding bits of both input\nintegers are set.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/Basic.html#UInt16.lor","kind":"def","line":277,"name":"UInt16.lor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L277-L286"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt16.land\"><span class=\"name\">UInt16</span>.<span class=\"name\">land</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>","info":{"doc":"Bitwise and for 16-bit unsigned integers. Usually accessed via the `&&&` operator.\n\nEach bit of the resulting integer is set if the corresponding bits of both input integers are set.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/Basic.html#UInt16.land","kind":"def","line":268,"name":"UInt16.land","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L268-L276"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt16.modn\"><span class=\"name\">UInt16</span>.<span class=\"name\">modn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#UInt16.modn","kind":"def","line":266,"name":"UInt16.modn","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L266-L267"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt16.mod\"><span class=\"name\">UInt16</span>.<span class=\"name\">mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>","info":{"doc":"The modulo operator for 16-bit unsigned integers, which computes the remainder when dividing one\ninteger by another. Usually accessed via the `%` operator.\n\nWhen the divisor is `0`, the result is the dividend rather than an error.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n* `UInt16.mod 5 2 = 1`\n* `UInt16.mod 4 2 = 0`\n* `UInt16.mod 4 0 = 4`\n","docLink":"./Init/Data/UInt/Basic.html#UInt16.mod","kind":"def","line":248,"name":"UInt16.mod","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L248-L262"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt16.pow\"><span class=\"name\">UInt16</span>.<span class=\"name\">pow</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>","info":{"doc":"The power operation, raising a 16-bit unsigned integer to a natural number power,\nwrapping around on overflow. Usually accessed via the `^` operator.\n\nThis function is currently *not* overridden at runtime with an efficient implementation,\nand should be used with caution. See https://github.com/leanprover/lean4/issues/7887.\n","docLink":"./Init/Data/UInt/Basic.html#UInt16.pow","kind":"def","line":237,"name":"UInt16.pow","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L237-L247"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt16.div\"><span class=\"name\">UInt16</span>.<span class=\"name\">div</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>","info":{"doc":"Unsigned division for 16-bit unsigned integers, discarding the remainder. Usually accessed\nvia the `/` operator.\n\nThis operation is sometimes called “floor division.” Division by zero is defined to be zero.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/Basic.html#UInt16.div","kind":"def","line":227,"name":"UInt16.div","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L227-L236"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt16.mul\"><span class=\"name\">UInt16</span>.<span class=\"name\">mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>","info":{"doc":"Multiplies two 16-bit unsigned integers, wrapping around on overflow.  Usually accessed via the `*`\noperator.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/Basic.html#UInt16.mul","kind":"def","line":219,"name":"UInt16.mul","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L219-L226"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt16.sub\"><span class=\"name\">UInt16</span>.<span class=\"name\">sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>","info":{"doc":"Subtracts one 16-bit unsigned integer from another, wrapping around on underflow. Usually accessed\nvia the `-` operator.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/Basic.html#UInt16.sub","kind":"def","line":211,"name":"UInt16.sub","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L211-L218"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt16.add\"><span class=\"name\">UInt16</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>","info":{"doc":"Adds two 16-bit unsigned integers, wrapping around on overflow. Usually accessed via the `+`\noperator.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/Basic.html#UInt16.add","kind":"def","line":203,"name":"UInt16.add","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L203-L210"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt16.ofInt\"><span class=\"name\">UInt16</span>.<span class=\"name\">ofInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>","info":{"doc":"Converts an `Int` to a `UInt16` by taking the (non-negative remainder of the division by `2 ^ 16`. ","docLink":"./Init/Data/UInt/Basic.html#UInt16.ofInt","kind":"def","line":200,"name":"UInt16.ofInt","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L200-L201"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt16.ofNatCore\"><span class=\"name\">UInt16</span>.<span class=\"name\">ofNatCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Prelude.html#UInt16.size\">size</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>","info":{"doc":"Converts a natural number to a 16-bit unsigned integer. Requires a proof that the number is small\nenough to be representable without overflow; it must be smaller than `2^16`.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/Basic.html#UInt16.ofNatCore","kind":"def","line":196,"name":"UInt16.ofNatCore","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L196-L198"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt16.mk\"><span class=\"name\">UInt16</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bitVec</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">16</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>","info":{"doc":"Creates a `UInt16` from a `BitVec 16`. This function is overridden with a native implementation.\n","docLink":"./Init/Data/UInt/Basic.html#UInt16.mk","kind":"def","line":193,"name":"UInt16.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L193-L195"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt16.ofFin\"><span class=\"name\">UInt16</span>.<span class=\"name\">ofFin</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#UInt16.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16\">UInt16</a></div></div>","info":{"doc":"Converts a `Fin UInt16.size` into the corresponding `UInt16`. ","docLink":"./Init/Data/UInt/Basic.html#UInt16.ofFin","kind":"def","line":191,"name":"UInt16.ofFin","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L191-L192"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instMinUInt8\"><span class=\"name\">instMinUInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Min\">Min</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instMinUInt8","kind":"instance","line":189,"name":"instMinUInt8","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L189-L189"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instMaxUInt8\"><span class=\"name\">instMaxUInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Max\">Max</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instMaxUInt8","kind":"instance","line":188,"name":"instMaxUInt8","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L188-L188"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#Bool.toUInt8\"><span class=\"name\">Bool</span>.<span class=\"name\">toUInt8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>","info":{"doc":"Converts `true` to `1` and `false` to `0`.\n","docLink":"./Init/Data/UInt/Basic.html#Bool.toUInt8","kind":"def","line":182,"name":"Bool.toUInt8","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L182-L186"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instShiftRightUInt8\"><span class=\"name\">instShiftRightUInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ShiftRight\">ShiftRight</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instShiftRightUInt8","kind":"instance","line":180,"name":"instShiftRightUInt8","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L180-L180"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instShiftLeftUInt8\"><span class=\"name\">instShiftLeftUInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ShiftLeft\">ShiftLeft</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instShiftLeftUInt8","kind":"instance","line":179,"name":"instShiftLeftUInt8","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L179-L179"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instXorOpUInt8\"><span class=\"name\">instXorOpUInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#XorOp\">XorOp</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instXorOpUInt8","kind":"instance","line":178,"name":"instXorOpUInt8","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L178-L178"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instOrOpUInt8\"><span class=\"name\">instOrOpUInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OrOp\">OrOp</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instOrOpUInt8","kind":"instance","line":177,"name":"instOrOpUInt8","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L177-L177"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instAndOpUInt8\"><span class=\"name\">instAndOpUInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#AndOp\">AndOp</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instAndOpUInt8","kind":"instance","line":176,"name":"instAndOpUInt8","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L176-L176"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instNegUInt8\"><span class=\"name\">instNegUInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Neg\">Neg</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instNegUInt8","kind":"instance","line":175,"name":"instNegUInt8","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L175-L175"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instComplementUInt8\"><span class=\"name\">instComplementUInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Complement\">Complement</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instComplementUInt8","kind":"instance","line":174,"name":"instComplementUInt8","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L174-L174"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt8.neg\"><span class=\"name\">UInt8</span>.<span class=\"name\">neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>","info":{"doc":"Negation of 8-bit unsigned integers, computed modulo `UInt8.size`.\n\n`UInt8.neg a` is equivalent to `255 - a + 1`.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/Basic.html#UInt8.neg","kind":"def","line":164,"name":"UInt8.neg","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L164-L172"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt8.complement\"><span class=\"name\">UInt8</span>.<span class=\"name\">complement</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>","info":{"doc":"Bitwise complement, also known as bitwise negation, for 8-bit unsigned integers. Usually accessed\nvia the `~~~` prefix operator.\n\nEach bit of the resulting integer is the opposite of the corresponding bit of the input integer.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/Basic.html#UInt8.complement","kind":"def","line":154,"name":"UInt8.complement","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L154-L163"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instDivUInt8\"><span class=\"name\">instDivUInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Div\">Div</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instDivUInt8","kind":"instance","line":152,"name":"instDivUInt8","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L152-L152"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instHModUInt8Nat\"><span class=\"name\">instHModUInt8Nat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#HMod\">HMod</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instHModUInt8Nat","kind":"instance","line":150,"name":"instHModUInt8Nat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L150-L150"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instModUInt8\"><span class=\"name\">instModUInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mod\">Mod</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instModUInt8","kind":"instance","line":147,"name":"instModUInt8","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L147-L147"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instPowUInt8Nat\"><span class=\"name\">instPowUInt8Nat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Pow\">Pow</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instPowUInt8Nat","kind":"instance","line":146,"name":"instPowUInt8Nat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L146-L146"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instMulUInt8\"><span class=\"name\">instMulUInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Mul\">Mul</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instMulUInt8","kind":"instance","line":145,"name":"instMulUInt8","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L145-L145"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instSubUInt8\"><span class=\"name\">instSubUInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Sub\">Sub</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instSubUInt8","kind":"instance","line":144,"name":"instSubUInt8","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L144-L144"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#instAddUInt8\"><span class=\"name\">instAddUInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Add\">Add</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#instAddUInt8","kind":"instance","line":143,"name":"instAddUInt8","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L143-L143"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt8.shiftRight\"><span class=\"name\">UInt8</span>.<span class=\"name\">shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>","info":{"doc":"Bitwise right shift for 8-bit unsigned integers. Usually accessed via the `>>>` operator.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/Basic.html#UInt8.shiftRight","kind":"def","line":135,"name":"UInt8.shiftRight","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L135-L141"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt8.shiftLeft\"><span class=\"name\">UInt8</span>.<span class=\"name\">shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>","info":{"doc":"Bitwise left shift for 8-bit unsigned integers. Usually accessed via the `<<<` operator.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/Basic.html#UInt8.shiftLeft","kind":"def","line":128,"name":"UInt8.shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L128-L134"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt8.xor\"><span class=\"name\">UInt8</span>.<span class=\"name\">xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>","info":{"doc":"Bitwise exclusive or for 8-bit unsigned integers. Usually accessed via the `^^^` operator.\n\nEach bit of the resulting integer is set if exactly one of the corresponding bits of both input\nintegers are set.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/Basic.html#UInt8.xor","kind":"def","line":118,"name":"UInt8.xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L118-L127"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt8.lor\"><span class=\"name\">UInt8</span>.<span class=\"name\">lor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>","info":{"doc":"Bitwise or for 8-bit unsigned integers. Usually accessed via the `|||` operator.\n\nEach bit of the resulting integer is set if at least one of the corresponding bits of both input\nintegers are set.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/Basic.html#UInt8.lor","kind":"def","line":108,"name":"UInt8.lor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L108-L117"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt8.land\"><span class=\"name\">UInt8</span>.<span class=\"name\">land</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>","info":{"doc":"Bitwise and for 8-bit unsigned integers. Usually accessed via the `&&&` operator.\n\nEach bit of the resulting integer is set if the corresponding bits of both input integers are set.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/Basic.html#UInt8.land","kind":"def","line":99,"name":"UInt8.land","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L99-L107"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt8.modn\"><span class=\"name\">UInt8</span>.<span class=\"name\">modn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Basic.html#UInt8.modn","kind":"def","line":97,"name":"UInt8.modn","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L97-L98"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt8.mod\"><span class=\"name\">UInt8</span>.<span class=\"name\">mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>","info":{"doc":"The modulo operator for 8-bit unsigned integers, which computes the remainder when dividing one\ninteger by another. Usually accessed via the `%` operator.\n\nWhen the divisor is `0`, the result is the dividend rather than an error.\n\nThis function is overridden at runtime with an efficient implementation.\n\nExamples:\n* `UInt8.mod 5 2 = 1`\n* `UInt8.mod 4 2 = 0`\n* `UInt8.mod 4 0 = 4`\n","docLink":"./Init/Data/UInt/Basic.html#UInt8.mod","kind":"def","line":79,"name":"UInt8.mod","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L79-L93"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt8.pow\"><span class=\"name\">UInt8</span>.<span class=\"name\">pow</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>","info":{"doc":"The power operation, raising an 8-bit unsigned integer to a natural number power,\nwrapping around on overflow. Usually accessed via the `^` operator.\n\nThis function is currently *not* overridden at runtime with an efficient implementation,\nand should be used with caution. See https://github.com/leanprover/lean4/issues/7887.\n","docLink":"./Init/Data/UInt/Basic.html#UInt8.pow","kind":"def","line":68,"name":"UInt8.pow","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L68-L78"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt8.div\"><span class=\"name\">UInt8</span>.<span class=\"name\">div</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>","info":{"doc":"Unsigned division for 8-bit unsigned integers, discarding the remainder. Usually accessed\nvia the `/` operator.\n\nThis operation is sometimes called “floor division.” Division by zero is defined to be zero.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/Basic.html#UInt8.div","kind":"def","line":58,"name":"UInt8.div","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L58-L67"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt8.mul\"><span class=\"name\">UInt8</span>.<span class=\"name\">mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>","info":{"doc":"Multiplies two 8-bit unsigned integers, wrapping around on overflow.  Usually accessed via the `*`\noperator.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/Basic.html#UInt8.mul","kind":"def","line":50,"name":"UInt8.mul","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L50-L57"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt8.sub\"><span class=\"name\">UInt8</span>.<span class=\"name\">sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>","info":{"doc":"Subtracts one 8-bit unsigned integer from another, wrapping around on underflow. Usually accessed\nvia the `-` operator.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/Basic.html#UInt8.sub","kind":"def","line":42,"name":"UInt8.sub","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L42-L49"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt8.add\"><span class=\"name\">UInt8</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>","info":{"doc":"Adds two 8-bit unsigned integers, wrapping around on overflow. Usually accessed via the `+`\noperator.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/Basic.html#UInt8.add","kind":"def","line":34,"name":"UInt8.add","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L34-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt8.ofInt\"><span class=\"name\">UInt8</span>.<span class=\"name\">ofInt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>","info":{"doc":"Converts an `Int` to a `UInt8` by taking the (non-negative remainder of the division by `2 ^ 8`. ","docLink":"./Init/Data/UInt/Basic.html#UInt8.ofInt","kind":"def","line":31,"name":"UInt8.ofInt","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L31-L32"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt8.ofNatCore\"><span class=\"name\">UInt8</span>.<span class=\"name\">ofNatCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Prelude.html#UInt8.size\">size</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>","info":{"doc":"Converts a natural number to an 8-bit unsigned integer. Requires a proof that the number is small\nenough to be representable without overflow; it must be smaller than `2^8`.\n\nThis function is overridden at runtime with an efficient implementation.\n","docLink":"./Init/Data/UInt/Basic.html#UInt8.ofNatCore","kind":"def","line":27,"name":"UInt8.ofNatCore","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L27-L29"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt8.mk\"><span class=\"name\">UInt8</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bitVec</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">8</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>","info":{"doc":"Creates a `UInt8` from a `BitVec 8`. This function is overridden with a native implementation.\n","docLink":"./Init/Data/UInt/Basic.html#UInt8.mk","kind":"def","line":24,"name":"UInt8.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L24-L26"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Basic.html#UInt8.ofFin\"><span class=\"name\">UInt8</span>.<span class=\"name\">ofFin</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#UInt8.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>","info":{"doc":"Converts a `Fin UInt8.size` into the corresponding `UInt8`. ","docLink":"./Init/Data/UInt/Basic.html#UInt8.ofFin","kind":"def","line":22,"name":"UInt8.ofFin","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Basic.lean#L22-L23"}}],"imports":["Init.Data.UInt.BasicAux","Init.Data.BitVec.Basic","Init.Data.Order.Classes","Init.Data.Order.Factories"],"instances":[{"className":"Add","name":"instAddUInt8","typeNames":["UInt8"]},{"className":"Sub","name":"instSubUInt8","typeNames":["UInt8"]},{"className":"Mul","name":"instMulUInt8","typeNames":["UInt8"]},{"className":"Pow","name":"instPowUInt8Nat","typeNames":["UInt8","Nat"]},{"className":"Mod","name":"instModUInt8","typeNames":["UInt8"]},{"className":"HMod","name":"instHModUInt8Nat","typeNames":["UInt8","Nat","UInt8"]},{"className":"Div","name":"instDivUInt8","typeNames":["UInt8"]},{"className":"Complement","name":"instComplementUInt8","typeNames":["UInt8"]},{"className":"Neg","name":"instNegUInt8","typeNames":["UInt8"]},{"className":"AndOp","name":"instAndOpUInt8","typeNames":["UInt8"]},{"className":"OrOp","name":"instOrOpUInt8","typeNames":["UInt8"]},{"className":"XorOp","name":"instXorOpUInt8","typeNames":["UInt8"]},{"className":"ShiftLeft","name":"instShiftLeftUInt8","typeNames":["UInt8"]},{"className":"ShiftRight","name":"instShiftRightUInt8","typeNames":["UInt8"]},{"className":"Max","name":"instMaxUInt8","typeNames":["UInt8"]},{"className":"Min","name":"instMinUInt8","typeNames":["UInt8"]},{"className":"Add","name":"instAddUInt16","typeNames":["UInt16"]},{"className":"Sub","name":"instSubUInt16","typeNames":["UInt16"]},{"className":"Mul","name":"instMulUInt16","typeNames":["UInt16"]},{"className":"Pow","name":"instPowUInt16Nat","typeNames":["UInt16","Nat"]},{"className":"Mod","name":"instModUInt16","typeNames":["UInt16"]},{"className":"HMod","name":"instHModUInt16Nat","typeNames":["UInt16","Nat","UInt16"]},{"className":"Div","name":"instDivUInt16","typeNames":["UInt16"]},{"className":"LT","name":"instLTUInt16","typeNames":["UInt16"]},{"className":"LE","name":"instLEUInt16","typeNames":["UInt16"]},{"className":"Complement","name":"instComplementUInt16","typeNames":["UInt16"]},{"className":"Neg","name":"instNegUInt16","typeNames":["UInt16"]},{"className":"AndOp","name":"instAndOpUInt16","typeNames":["UInt16"]},{"className":"OrOp","name":"instOrOpUInt16","typeNames":["UInt16"]},{"className":"XorOp","name":"instXorOpUInt16","typeNames":["UInt16"]},{"className":"ShiftLeft","name":"instShiftLeftUInt16","typeNames":["UInt16"]},{"className":"ShiftRight","name":"instShiftRightUInt16","typeNames":["UInt16"]},{"className":"Decidable","name":"UInt16.decLt","typeNames":["LT.lt"]},{"className":"Decidable","name":"UInt16.decLe","typeNames":["LE.le"]},{"className":"Max","name":"instMaxUInt16","typeNames":["UInt16"]},{"className":"Min","name":"instMinUInt16","typeNames":["UInt16"]},{"className":"Add","name":"instAddUInt32","typeNames":["UInt32"]},{"className":"Sub","name":"instSubUInt32","typeNames":["UInt32"]},{"className":"Mul","name":"instMulUInt32","typeNames":["UInt32"]},{"className":"Pow","name":"instPowUInt32Nat","typeNames":["UInt32","Nat"]},{"className":"Mod","name":"instModUInt32","typeNames":["UInt32"]},{"className":"HMod","name":"instHModUInt32Nat","typeNames":["UInt32","Nat","UInt32"]},{"className":"Div","name":"instDivUInt32","typeNames":["UInt32"]},{"className":"Complement","name":"instComplementUInt32","typeNames":["UInt32"]},{"className":"Neg","name":"instNegUInt32","typeNames":["UInt32"]},{"className":"AndOp","name":"instAndOpUInt32","typeNames":["UInt32"]},{"className":"OrOp","name":"instOrOpUInt32","typeNames":["UInt32"]},{"className":"XorOp","name":"instXorOpUInt32","typeNames":["UInt32"]},{"className":"ShiftLeft","name":"instShiftLeftUInt32","typeNames":["UInt32"]},{"className":"ShiftRight","name":"instShiftRightUInt32","typeNames":["UInt32"]},{"className":"Add","name":"instAddUInt64","typeNames":["UInt64"]},{"className":"Sub","name":"instSubUInt64","typeNames":["UInt64"]},{"className":"Mul","name":"instMulUInt64","typeNames":["UInt64"]},{"className":"Pow","name":"instPowUInt64Nat","typeNames":["UInt64","Nat"]},{"className":"Mod","name":"instModUInt64","typeNames":["UInt64"]},{"className":"HMod","name":"instHModUInt64Nat","typeNames":["UInt64","Nat","UInt64"]},{"className":"Div","name":"instDivUInt64","typeNames":["UInt64"]},{"className":"LT","name":"instLTUInt64","typeNames":["UInt64"]},{"className":"LE","name":"instLEUInt64","typeNames":["UInt64"]},{"className":"Complement","name":"instComplementUInt64","typeNames":["UInt64"]},{"className":"Neg","name":"instNegUInt64","typeNames":["UInt64"]},{"className":"AndOp","name":"instAndOpUInt64","typeNames":["UInt64"]},{"className":"OrOp","name":"instOrOpUInt64","typeNames":["UInt64"]},{"className":"XorOp","name":"instXorOpUInt64","typeNames":["UInt64"]},{"className":"ShiftLeft","name":"instShiftLeftUInt64","typeNames":["UInt64"]},{"className":"ShiftRight","name":"instShiftRightUInt64","typeNames":["UInt64"]},{"className":"Decidable","name":"UInt64.decLt","typeNames":["LT.lt"]},{"className":"Decidable","name":"UInt64.decLe","typeNames":["LE.le"]},{"className":"Max","name":"instMaxUInt64","typeNames":["UInt64"]},{"className":"Min","name":"instMinUInt64","typeNames":["UInt64"]},{"className":"Mul","name":"instMulUSize","typeNames":["USize"]},{"className":"Pow","name":"instPowUSizeNat","typeNames":["USize","Nat"]},{"className":"Mod","name":"instModUSize","typeNames":["USize"]},{"className":"HMod","name":"instHModUSizeNat","typeNames":["USize","Nat","USize"]},{"className":"Div","name":"instDivUSize","typeNames":["USize"]},{"className":"Complement","name":"instComplementUSize","typeNames":["USize"]},{"className":"Neg","name":"instNegUSize","typeNames":["USize"]},{"className":"AndOp","name":"instAndOpUSize","typeNames":["USize"]},{"className":"OrOp","name":"instOrOpUSize","typeNames":["USize"]},{"className":"XorOp","name":"instXorOpUSize","typeNames":["USize"]},{"className":"ShiftLeft","name":"instShiftLeftUSize","typeNames":["USize"]},{"className":"ShiftRight","name":"instShiftRightUSize","typeNames":["USize"]},{"className":"Max","name":"instMaxUSize","typeNames":["USize"]},{"className":"Min","name":"instMinUSize","typeNames":["USize"]}],"name":"Init.Data.UInt.Basic"}