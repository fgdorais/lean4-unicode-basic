{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.instFormatGenericFormatFormatTypeString\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">instFormatGenericFormatFormatTypeString</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aw</span> : <a href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness\">Awareness</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.Format\">Format</a> <span class=\"fn\">(<a href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat\">GenericFormat</a> <span class=\"fn\">aw</span>)</span> <span class=\"fn\">fun (<span class=\"fn\">x1</span> : <a href=\"./foundational_types.html\">Type</a>) (<span class=\"fn\">x2</span> : <span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat\">GenericFormat</a> <span class=\"fn\">aw</span></span>) =&gt; <span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.FormatType\">FormatType</a> <span class=\"fn\">x1</span> <span class=\"fn\"><span class=\"fn\">x2</span>.<a href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat.string\">string</a></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Format/Basic.html#Std.Time.instFormatGenericFormatFormatTypeString","kind":"instance","line":1535,"name":"Std.Time.instFormatGenericFormatFormatTypeString","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L1535-L1537"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.Format.parse\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Format</span>.<span class=\"name\">parse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">typ</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <span class=\"fn\"><span class=\"fn\">f</span> → <a href=\"./foundational_types.html\">Type</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.Format\">Format</a> <span class=\"fn\">f</span> <span class=\"fn\">typ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fmt</span> : <span class=\"fn\">f</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">typ</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span> <span class=\"fn\">fmt</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <span class=\"fn\">α</span></span></span></span></div></div>","info":{"doc":"Parses a string into a format using the provided format type `f`.\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.Format.parse","kind":"def","line":1533,"name":"Std.Time.Format.parse","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L1533-L1533"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.Format.format\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Format</span>.<span class=\"name\">format</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">typ</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <span class=\"fn\"><span class=\"fn\">f</span> → <a href=\"./foundational_types.html\">Type</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.Format\">Format</a> <span class=\"fn\">f</span> <span class=\"fn\">typ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fmt</span> : <span class=\"fn\">f</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">typ</span> <a href=\"./Init/Prelude.html#String\">String</a> <span class=\"fn\">fmt</span></span></div></div>","info":{"doc":"Converts a format `f` into a string.\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.Format.format","kind":"def","line":1528,"name":"Std.Time.Format.format","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L1528-L1528"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.Format.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Format</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">typ</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <span class=\"fn\"><span class=\"fn\">f</span> → <a href=\"./foundational_types.html\">Type</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">format</span> : <span class=\"fn\">(<span class=\"fn\">fmt</span> : <span class=\"fn\">f</span>) → <span class=\"fn\"><span class=\"fn\">typ</span> <a href=\"./Init/Prelude.html#String\">String</a> <span class=\"fn\">fmt</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">parse</span> : <span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>} → <span class=\"fn\">(<span class=\"fn\">fmt</span> : <span class=\"fn\">f</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">typ</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span> <span class=\"fn\">fmt</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <span class=\"fn\">α</span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.Format\">Format</a> <span class=\"fn\">f</span> <span class=\"fn\">typ</span></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Format/Basic.html#Std.Time.Format.mk","kind":"ctor","line":1524,"name":"Std.Time.Format.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L1524-L1524"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.Format\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Format</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">typ</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <span class=\"fn\"><span class=\"fn\">f</span> → <a href=\"./foundational_types.html\">Type</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> 1</div></div>","info":{"doc":"Typeclass for formatting and parsing values with the given format type.\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.Format","kind":"class","line":1521,"name":"Std.Time.Format","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L1521-L1533"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat.formatBuilder\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">GenericFormat</span>.<span class=\"name\">formatBuilder</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aw</span> : <a href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness\">Awareness</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">format</span> : <span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat\">GenericFormat</a> <span class=\"fn\">aw</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.FormatType\">FormatType</a> <a href=\"./Init/Prelude.html#String\">String</a> <span class=\"fn\"><span class=\"fn\">format</span>.<a href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat.string\">string</a></span></span></div></div>","info":{"doc":"Constructs a `FormatType` function to format a date into a string using a `GenericFormat`.\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.GenericFormat.formatBuilder","kind":"def","line":1509,"name":"Std.Time.GenericFormat.formatBuilder","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L1509-L1517"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat.formatGeneric\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">GenericFormat</span>.<span class=\"name\">formatGeneric</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aw</span> : <a href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness\">Awareness</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">format</span> : <span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat\">GenericFormat</a> <span class=\"fn\">aw</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">getInfo</span> : <span class=\"fn\">(<span class=\"fn\">typ</span> : <a href=\"./Std/Time/Format/Basic.html#Std.Time.Modifier\">Modifier</a>) → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Std/Time/Format/Basic.html#Std.Time.TypeFormat\">TypeFormat</a> <span class=\"fn\">typ</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"Formats the date using the format into a String, using a `getInfo` function to get the information needed to build the `String`.\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.GenericFormat.formatGeneric","kind":"def","line":1499,"name":"Std.Time.GenericFormat.formatGeneric","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L1499-L1507"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat.parseBuilder!\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">GenericFormat</span>.<span class=\"name\">parseBuilder!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aw</span> : <a href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness\">Awareness</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">format</span> : <span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat\">GenericFormat</a> <span class=\"fn\">aw</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">builder</span> : <span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.FormatType\">FormatType</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span> <span class=\"fn\"><span class=\"fn\">format</span>.<a href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat.string\">string</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"Parses an input string using a builder function, panicking on errors.\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.GenericFormat.parseBuilder!","kind":"def","line":1491,"name":"Std.Time.GenericFormat.parseBuilder!","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L1491-L1497"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat.parseBuilder\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">GenericFormat</span>.<span class=\"name\">parseBuilder</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aw</span> : <a href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness\">Awareness</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">format</span> : <span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat\">GenericFormat</a> <span class=\"fn\">aw</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">builder</span> : <span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.FormatType\">FormatType</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span> <span class=\"fn\"><span class=\"fn\">format</span>.<a href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat.string\">string</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Parses an input string using a builder function to produce a value.\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.GenericFormat.parseBuilder","kind":"def","line":1485,"name":"Std.Time.GenericFormat.parseBuilder","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L1485-L1489"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat.parse!\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">GenericFormat</span>.<span class=\"name\">parse!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aw</span> : <a href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness\">Awareness</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">format</span> : <span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat\">GenericFormat</a> <span class=\"fn\">aw</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">aw</span>.<a href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness.type\">type</a></span></div></div>","info":{"doc":"Parses the input string into a `ZoneDateTime` and panics if its wrong.\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.GenericFormat.parse!","kind":"def","line":1477,"name":"Std.Time.GenericFormat.parse!","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L1477-L1483"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat.parse\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">GenericFormat</span>.<span class=\"name\">parse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aw</span> : <a href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness\">Awareness</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">format</span> : <span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat\">GenericFormat</a> <span class=\"fn\">aw</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <span class=\"fn\"><span class=\"fn\">aw</span>.<a href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness.type\">type</a></span></span></div></div>","info":{"doc":"Parses the input string into a `ZoneDateTime`.\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.GenericFormat.parse","kind":"def","line":1471,"name":"Std.Time.GenericFormat.parse","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L1471-L1475"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat.builderParser\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">GenericFormat</span>.<span class=\"name\">builderParser</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">format</span> : <a href=\"./Std/Time/Format/Basic.html#Std.Time.FormatString\">FormatString</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">config</span> : <a href=\"./Std/Time/Format/Basic.html#Std.Time.FormatConfig\">FormatConfig</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">func</span> : <span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.FormatType\">FormatType</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span> <span class=\"fn\">format</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Internal/Parsec/String.html#Std.Internal.Parsec.String.Parser\">Internal.Parsec.String.Parser</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Parser for a format with a builder.\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.GenericFormat.builderParser","kind":"def","line":1455,"name":"Std.Time.GenericFormat.builderParser","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L1455-L1469"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat.format\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">GenericFormat</span>.<span class=\"name\">format</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aw</span> : <a href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness\">Awareness</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">tz</span> : <a href=\"./Std/Time/Zoned/TimeZone.html#Std.Time.TimeZone\">TimeZone</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">format</span> : <span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat\">GenericFormat</a> <span class=\"fn\">aw</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">date</span> : <span class=\"fn\"><a href=\"./Std/Time/Zoned/DateTime.html#Std.Time.DateTime\">DateTime</a> <span class=\"fn\">tz</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Formats a `DateTime` value into a string using the given `GenericFormat`.\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.GenericFormat.format","kind":"def","line":1433,"name":"Std.Time.GenericFormat.format","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L1433-L1443"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat.spec!\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">GenericFormat</span>.<span class=\"name\">spec!</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">tz</span> : <a href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness\">Awareness</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">config</span> : <a href=\"./Std/Time/Format/Basic.html#Std.Time.FormatConfig\">FormatConfig</a> := <a href=\"./Std/Time/Format/Basic.html#Std.Time.FormatConfig.mk\">{</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.FormatConfig.mk\">}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat\">GenericFormat</a> <span class=\"fn\">tz</span></span></div></div>","info":{"doc":"Builds a `GenericFormat` from the input string. If parsing fails, it will panic\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.GenericFormat.spec!","kind":"def","line":1425,"name":"Std.Time.GenericFormat.spec!","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L1425-L1431"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat.spec\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">GenericFormat</span>.<span class=\"name\">spec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">tz</span> : <a href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness\">Awareness</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">config</span> : <a href=\"./Std/Time/Format/Basic.html#Std.Time.FormatConfig\">FormatConfig</a> := <a href=\"./Std/Time/Format/Basic.html#Std.Time.FormatConfig.mk\">{</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.FormatConfig.mk\">}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <span class=\"fn\">(<a href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat\">GenericFormat</a> <span class=\"fn\">tz</span>)</span></span></div></div>","info":{"doc":"Constructs a new `GenericFormat` specification for a date-time string. Modifiers can be combined to create\ncustom formats, such as \"YYYY, MMMM, D\".\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.GenericFormat.spec","kind":"def","line":1417,"name":"Std.Time.GenericFormat.spec","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L1417-L1423"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.FormatType\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">FormatType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">result</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.FormatString\">FormatString</a> → <a href=\"./foundational_types.html\">Type</a></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Format/Basic.html#Std.Time.FormatType","kind":"def","line":1276,"name":"Std.Time.FormatType","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L1276-L1280"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.parseMonthShort\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">parseMonthShort</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Internal/Parsec/String.html#Std.Internal.Parsec.String.Parser\">Internal.Parsec.String.Parser</a> <a href=\"./Std/Time/Date/Unit/Month.html#Std.Time.Month.Ordinal\">Month.Ordinal</a></span></div></div>","info":{"doc":"Parses a short value of a `Month.Ordinal`\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.parseMonthShort","kind":"def","line":971,"name":"Std.Time.parseMonthShort","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L971-L986"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.TypeFormat\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">TypeFormat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.Modifier\">Modifier</a> → <a href=\"./foundational_types.html\">Type</a></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Format/Basic.html#Std.Time.TypeFormat","kind":"def","line":774,"name":"Std.Time.TypeFormat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L774-L803"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.instReprGenericFormat.repr\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">instReprGenericFormat</span>.<span class=\"name\">repr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">awareness✝</span> : <a href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness\">Awareness</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat\">GenericFormat</a> <span class=\"fn\">awareness✝</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Std.Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Format/Basic.html#Std.Time.instReprGenericFormat.repr","kind":"def","line":604,"name":"Std.Time.instReprGenericFormat.repr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L604-L604"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.instReprGenericFormat\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">instReprGenericFormat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">awareness✝</span> : <a href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness\">Awareness</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">(<a href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat\">GenericFormat</a> <span class=\"fn\">awareness✝</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Format/Basic.html#Std.Time.instReprGenericFormat","kind":"instance","line":604,"name":"Std.Time.instReprGenericFormat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L604-L604"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.instInhabitedGenericFormat.default\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">instInhabitedGenericFormat</span>.<span class=\"name\">default</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness\">Awareness</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat\">GenericFormat</a> <span class=\"fn\">a✝</span></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Format/Basic.html#Std.Time.instInhabitedGenericFormat.default","kind":"def","line":604,"name":"Std.Time.instInhabitedGenericFormat.default","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L604-L604"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.instInhabitedGenericFormat\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">instInhabitedGenericFormat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness\">Awareness</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat\">GenericFormat</a> <span class=\"fn\">a✝</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Format/Basic.html#Std.Time.instInhabitedGenericFormat","kind":"instance","line":604,"name":"Std.Time.instInhabitedGenericFormat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L604-L604"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat.string\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">GenericFormat</span>.<span class=\"name\">string</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">awareness</span> : <a href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness\">Awareness</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat\">GenericFormat</a> <span class=\"fn\">awareness</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.FormatString\">FormatString</a></div></div>","info":{"doc":"The format string used for parsing and formatting.\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.GenericFormat.string","kind":"def","line":603,"name":"Std.Time.GenericFormat.string","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L603-L603"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat.config\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">GenericFormat</span>.<span class=\"name\">config</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">awareness</span> : <a href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness\">Awareness</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat\">GenericFormat</a> <span class=\"fn\">awareness</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.FormatConfig\">FormatConfig</a></div></div>","info":{"doc":"Configuration options for formatting behavior.\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.GenericFormat.config","kind":"def","line":598,"name":"Std.Time.GenericFormat.config","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L598-L598"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">GenericFormat</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">awareness</span> : <a href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness\">Awareness</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">config</span> : <a href=\"./Std/Time/Format/Basic.html#Std.Time.FormatConfig\">FormatConfig</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">string</span> : <a href=\"./Std/Time/Format/Basic.html#Std.Time.FormatString\">FormatString</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat\">GenericFormat</a> <span class=\"fn\">awareness</span></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Format/Basic.html#Std.Time.GenericFormat.mk","kind":"ctor","line":594,"name":"Std.Time.GenericFormat.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L594-L594"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">GenericFormat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">awareness</span> : <a href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness\">Awareness</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A specification on how to format a data or parse some string.\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.GenericFormat","kind":"structure","line":591,"name":"Std.Time.GenericFormat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L591-L604"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.instReprFormatConfig.repr\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">instReprFormatConfig</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.FormatConfig\">FormatConfig</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Std.Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Format/Basic.html#Std.Time.instReprFormatConfig.repr","kind":"def","line":589,"name":"Std.Time.instReprFormatConfig.repr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L589-L589"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.instReprFormatConfig\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">instReprFormatConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.FormatConfig\">FormatConfig</a></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Format/Basic.html#Std.Time.instReprFormatConfig","kind":"instance","line":589,"name":"Std.Time.instReprFormatConfig","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L589-L589"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.instInhabitedFormatConfig.default\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">instInhabitedFormatConfig</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.FormatConfig\">FormatConfig</a></div></div>","info":{"doc":"","docLink":"./Std/Time/Format/Basic.html#Std.Time.instInhabitedFormatConfig.default","kind":"def","line":589,"name":"Std.Time.instInhabitedFormatConfig.default","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L589-L589"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.instInhabitedFormatConfig\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">instInhabitedFormatConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.FormatConfig\">FormatConfig</a></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Format/Basic.html#Std.Time.instInhabitedFormatConfig","kind":"instance","line":589,"name":"Std.Time.instInhabitedFormatConfig","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L589-L589"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.FormatConfig.allowLeapSeconds\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">FormatConfig</span>.<span class=\"name\">allowLeapSeconds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Std/Time/Format/Basic.html#Std.Time.FormatConfig\">FormatConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Whether to allow leap seconds, such as `2016-12-31T23:59:60Z`.\nDefault is `false`.\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.FormatConfig.allowLeapSeconds","kind":"def","line":587,"name":"Std.Time.FormatConfig.allowLeapSeconds","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L587-L587"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.FormatConfig.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">FormatConfig</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">allowLeapSeconds</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.FormatConfig\">FormatConfig</a></div></div>","info":{"doc":"","docLink":"./Std/Time/Format/Basic.html#Std.Time.FormatConfig.mk","kind":"ctor","line":582,"name":"Std.Time.FormatConfig.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L582-L582"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.FormatConfig\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">FormatConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Configuration options for formatting and parsing date/time strings.\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.FormatConfig","kind":"structure","line":579,"name":"Std.Time.FormatConfig","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L579-L589"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness.type\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Awareness</span>.<span class=\"name\">type</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness\">Awareness</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Std/Time/Format/Basic.html#Std.Time.Awareness.type","kind":"def","line":561,"name":"Std.Time.Awareness.type","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L561-L565"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness.instCoeTimeZone\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Awareness</span>.<span class=\"name\">instCoeTimeZone</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Std/Time/Zoned/TimeZone.html#Std.Time.TimeZone\">TimeZone</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness\">Awareness</a></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Format/Basic.html#Std.Time.Awareness.instCoeTimeZone","kind":"instance","line":557,"name":"Std.Time.Awareness.instCoeTimeZone","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L557-L558"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness.any\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Awareness</span>.<span class=\"name\">any</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness\">Awareness</a></div></div>","info":{"doc":"The format parses any timezone. ","docLink":"./Std/Time/Format/Basic.html#Std.Time.Awareness.any","kind":"ctor","line":552,"name":"Std.Time.Awareness.any","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L552-L553"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness.only\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Awareness</span>.<span class=\"name\">only</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Zoned/TimeZone.html#Std.Time.TimeZone\">TimeZone</a> → <a href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness\">Awareness</a></span></div></div>","info":{"doc":"The format only parses a single timezone. ","docLink":"./Std/Time/Format/Basic.html#Std.Time.Awareness.only","kind":"ctor","line":550,"name":"Std.Time.Awareness.only","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L550-L551"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Awareness</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"If the format is aware of some timezone data it parses or if it parses any timezone.\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.Awareness","kind":"inductive","line":546,"name":"Std.Time.Awareness","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L546-L553"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.FormatString\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">FormatString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The format of date and time string.\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.FormatString","kind":"def","line":541,"name":"Std.Time.FormatString","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L541-L544"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.instCoeModifierFormatPart\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">instCoeModifierFormatPart</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.Modifier\">Modifier</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.FormatPart\">FormatPart</a></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Format/Basic.html#Std.Time.instCoeModifierFormatPart","kind":"instance","line":538,"name":"Std.Time.instCoeModifierFormatPart","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L538-L539"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.instCoeStringFormatPart\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">instCoeStringFormatPart</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.FormatPart\">FormatPart</a></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Format/Basic.html#Std.Time.instCoeStringFormatPart","kind":"instance","line":535,"name":"Std.Time.instCoeStringFormatPart","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L535-L536"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.instReprFormatPart\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">instReprFormatPart</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.FormatPart\">FormatPart</a></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Format/Basic.html#Std.Time.instReprFormatPart","kind":"instance","line":533,"name":"Std.Time.instReprFormatPart","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L533-L533"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.instReprFormatPart.repr\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">instReprFormatPart</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.FormatPart\">FormatPart</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Std.Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Format/Basic.html#Std.Time.instReprFormatPart.repr","kind":"def","line":533,"name":"Std.Time.instReprFormatPart.repr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L533-L533"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.FormatPart.modifier\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">FormatPart</span>.<span class=\"name\">modifier</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">modifier</span> : <a href=\"./Std/Time/Format/Basic.html#Std.Time.Modifier\">Modifier</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.FormatPart\">FormatPart</a></div></div>","info":{"doc":"A modifier that renders some data into text.\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.FormatPart.modifier","kind":"ctor","line":529,"name":"Std.Time.FormatPart.modifier","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L529-L532"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.FormatPart.string\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">FormatPart</span>.<span class=\"name\">string</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.FormatPart\">FormatPart</a></div></div>","info":{"doc":"A string literal.\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.FormatPart.string","kind":"ctor","line":524,"name":"Std.Time.FormatPart.string","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L524-L527"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.FormatPart\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">FormatPart</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The part of a formatting string. A string is just a text and a modifier is in the format described in\nthe `Modifier` type.\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.FormatPart","kind":"inductive","line":519,"name":"Std.Time.FormatPart","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L519-L533"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.instInhabitedModifier.default\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">instInhabitedModifier</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.Modifier\">Modifier</a></div></div>","info":{"doc":"","docLink":"./Std/Time/Format/Basic.html#Std.Time.instInhabitedModifier.default","kind":"def","line":440,"name":"Std.Time.instInhabitedModifier.default","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L440-L440"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.instInhabitedModifier\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">instInhabitedModifier</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.Modifier\">Modifier</a></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Format/Basic.html#Std.Time.instInhabitedModifier","kind":"instance","line":440,"name":"Std.Time.instInhabitedModifier","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L440-L440"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.instReprModifier\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">instReprModifier</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.Modifier\">Modifier</a></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Format/Basic.html#Std.Time.instReprModifier","kind":"instance","line":440,"name":"Std.Time.instReprModifier","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L440-L440"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.instReprModifier.repr\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">instReprModifier</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.Modifier\">Modifier</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Std.Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Format/Basic.html#Std.Time.instReprModifier.repr","kind":"def","line":440,"name":"Std.Time.instReprModifier.repr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L440-L440"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.Modifier.Z\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Modifier</span>.<span class=\"name\">Z</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">presentation</span> : <a href=\"./Std/Time/Format/Basic.html#Std.Time.OffsetZ\">OffsetZ</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.Modifier\">Modifier</a></div></div>","info":{"doc":"`Z`: Zone offset with 'Z' for UTC (e.g., +0000, -0800, -08:00).\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.Modifier.Z","kind":"ctor","line":436,"name":"Std.Time.Modifier.Z","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L436-L439"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.Modifier.x\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Modifier</span>.<span class=\"name\">x</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">presentation</span> : <a href=\"./Std/Time/Format/Basic.html#Std.Time.OffsetX\">OffsetX</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.Modifier\">Modifier</a></div></div>","info":{"doc":"`x`: Zone offset without 'Z' (e.g., +0000, -08, -0830, -08:30).\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.Modifier.x","kind":"ctor","line":431,"name":"Std.Time.Modifier.x","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L431-L434"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.Modifier.X\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Modifier</span>.<span class=\"name\">X</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">presentation</span> : <a href=\"./Std/Time/Format/Basic.html#Std.Time.OffsetX\">OffsetX</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.Modifier\">Modifier</a></div></div>","info":{"doc":"`X`: Zone offset with 'Z' for zero (e.g., Z, -08, -0830, -08:30).\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.Modifier.X","kind":"ctor","line":426,"name":"Std.Time.Modifier.X","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L426-L429"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.Modifier.O\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Modifier</span>.<span class=\"name\">O</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">presentation</span> : <a href=\"./Std/Time/Format/Basic.html#Std.Time.OffsetO\">OffsetO</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.Modifier\">Modifier</a></div></div>","info":{"doc":"`O`: Localized zone offset (e.g., GMT+8, GMT+08:00, UTC-08:00).\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.Modifier.O","kind":"ctor","line":421,"name":"Std.Time.Modifier.O","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L421-L424"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.Modifier.z\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Modifier</span>.<span class=\"name\">z</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">presentation</span> : <a href=\"./Std/Time/Format/Basic.html#Std.Time.ZoneName\">ZoneName</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.Modifier\">Modifier</a></div></div>","info":{"doc":"`z`: Time zone name (e.g., Pacific Standard Time, PST).\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.Modifier.z","kind":"ctor","line":416,"name":"Std.Time.Modifier.z","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L416-L419"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.Modifier.V\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Modifier</span>.<span class=\"name\">V</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.Modifier\">Modifier</a></div></div>","info":{"doc":"`V`: Time zone ID (e.g., America/Los_Angeles, Z, -08:30).\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.Modifier.V","kind":"ctor","line":411,"name":"Std.Time.Modifier.V","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L411-L414"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.Modifier.N\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Modifier</span>.<span class=\"name\">N</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">presentation</span> : <a href=\"./Std/Time/Format/Basic.html#Std.Time.Number\">Number</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.Modifier\">Modifier</a></div></div>","info":{"doc":"`N`: Nanosecond of day (e.g., 1234000000).\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.Modifier.N","kind":"ctor","line":406,"name":"Std.Time.Modifier.N","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L406-L409"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.Modifier.n\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Modifier</span>.<span class=\"name\">n</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">presentation</span> : <a href=\"./Std/Time/Format/Basic.html#Std.Time.Number\">Number</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.Modifier\">Modifier</a></div></div>","info":{"doc":"`n`: Nanosecond of second (e.g., 987654321).\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.Modifier.n","kind":"ctor","line":401,"name":"Std.Time.Modifier.n","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L401-L404"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.Modifier.A\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Modifier</span>.<span class=\"name\">A</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">presentation</span> : <a href=\"./Std/Time/Format/Basic.html#Std.Time.Number\">Number</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.Modifier\">Modifier</a></div></div>","info":{"doc":"`A`: Millisecond of day (e.g., 1234).\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.Modifier.A","kind":"ctor","line":396,"name":"Std.Time.Modifier.A","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L396-L399"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.Modifier.S\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Modifier</span>.<span class=\"name\">S</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">presentation</span> : <a href=\"./Std/Time/Format/Basic.html#Std.Time.Fraction\">Fraction</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.Modifier\">Modifier</a></div></div>","info":{"doc":"`S`: Fraction of second (e.g., 978).\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.Modifier.S","kind":"ctor","line":391,"name":"Std.Time.Modifier.S","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L391-L394"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.Modifier.s\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Modifier</span>.<span class=\"name\">s</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">presentation</span> : <a href=\"./Std/Time/Format/Basic.html#Std.Time.Number\">Number</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.Modifier\">Modifier</a></div></div>","info":{"doc":"`s`: Second of minute (e.g., 55).\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.Modifier.s","kind":"ctor","line":386,"name":"Std.Time.Modifier.s","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L386-L389"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.Modifier.m\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Modifier</span>.<span class=\"name\">m</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">presentation</span> : <a href=\"./Std/Time/Format/Basic.html#Std.Time.Number\">Number</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.Modifier\">Modifier</a></div></div>","info":{"doc":"`m`: Minute of hour (e.g., 30).\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.Modifier.m","kind":"ctor","line":381,"name":"Std.Time.Modifier.m","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L381-L384"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.Modifier.H\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Modifier</span>.<span class=\"name\">H</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">presentation</span> : <a href=\"./Std/Time/Format/Basic.html#Std.Time.Number\">Number</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.Modifier\">Modifier</a></div></div>","info":{"doc":"`H`: Hour of day (0-23) (e.g., 0).\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.Modifier.H","kind":"ctor","line":376,"name":"Std.Time.Modifier.H","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L376-L379"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.Modifier.k\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Modifier</span>.<span class=\"name\">k</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">presentation</span> : <a href=\"./Std/Time/Format/Basic.html#Std.Time.Number\">Number</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.Modifier\">Modifier</a></div></div>","info":{"doc":"`k`: Clock hour of day (1-24) (e.g., 24).\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.Modifier.k","kind":"ctor","line":371,"name":"Std.Time.Modifier.k","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L371-L374"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.Modifier.K\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Modifier</span>.<span class=\"name\">K</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">presentation</span> : <a href=\"./Std/Time/Format/Basic.html#Std.Time.Number\">Number</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.Modifier\">Modifier</a></div></div>","info":{"doc":"`K`: Hour of AM/PM (0-11) (e.g., 0).\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.Modifier.K","kind":"ctor","line":366,"name":"Std.Time.Modifier.K","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L366-L369"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.Modifier.h\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Modifier</span>.<span class=\"name\">h</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">presentation</span> : <a href=\"./Std/Time/Format/Basic.html#Std.Time.Number\">Number</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.Modifier\">Modifier</a></div></div>","info":{"doc":"`h`: Clock hour of AM/PM (1-12) (e.g., 12).\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.Modifier.h","kind":"ctor","line":361,"name":"Std.Time.Modifier.h","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L361-L364"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.Modifier.a\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Modifier</span>.<span class=\"name\">a</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">presentation</span> : <a href=\"./Std/Time/Format/Basic.html#Std.Time.Text\">Text</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.Modifier\">Modifier</a></div></div>","info":{"doc":"`a`: AM/PM of day (e.g., PM).\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.Modifier.a","kind":"ctor","line":356,"name":"Std.Time.Modifier.a","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L356-L359"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.Modifier.F\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Modifier</span>.<span class=\"name\">F</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">presentation</span> : <a href=\"./Std/Time/Format/Basic.html#Std.Time.Number\">Number</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.Modifier\">Modifier</a></div></div>","info":{"doc":"`F`: Aligned week of month (e.g., 3).\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.Modifier.F","kind":"ctor","line":351,"name":"Std.Time.Modifier.F","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L351-L354"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.Modifier.eorc\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Modifier</span>.<span class=\"name\">eorc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">presentation</span> : <a href=\"./Std/Time/Format/Basic.html#Std.Time.Number\">Number</a> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.Text\">Text</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.Modifier\">Modifier</a></div></div>","info":{"doc":"`e`: Localized day of week as number or text (e.g., 2, 02, Tue, Tuesday, T).\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.Modifier.eorc","kind":"ctor","line":346,"name":"Std.Time.Modifier.eorc","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L346-L349"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.Modifier.E\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Modifier</span>.<span class=\"name\">E</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">presentation</span> : <a href=\"./Std/Time/Format/Basic.html#Std.Time.Text\">Text</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.Modifier\">Modifier</a></div></div>","info":{"doc":"`E`: Day of week as text (e.g., Tue, Tuesday, T).\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.Modifier.E","kind":"ctor","line":341,"name":"Std.Time.Modifier.E","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L341-L344"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.Modifier.W\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Modifier</span>.<span class=\"name\">W</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">presentation</span> : <a href=\"./Std/Time/Format/Basic.html#Std.Time.Number\">Number</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.Modifier\">Modifier</a></div></div>","info":{"doc":"`W`: Week of month (e.g., 4).\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.Modifier.W","kind":"ctor","line":336,"name":"Std.Time.Modifier.W","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L336-L339"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.Modifier.w\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Modifier</span>.<span class=\"name\">w</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">presentation</span> : <a href=\"./Std/Time/Format/Basic.html#Std.Time.Number\">Number</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.Modifier\">Modifier</a></div></div>","info":{"doc":"`w`: Week of week-based year (e.g., 27).\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.Modifier.w","kind":"ctor","line":331,"name":"Std.Time.Modifier.w","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L331-L334"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.Modifier.Qorq\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Modifier</span>.<span class=\"name\">Qorq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">presentation</span> : <a href=\"./Std/Time/Format/Basic.html#Std.Time.Number\">Number</a> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.Text\">Text</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.Modifier\">Modifier</a></div></div>","info":{"doc":"`Q`: Quarter of year as number or text (e.g., 3, 03, Q3, 3rd quarter).\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.Modifier.Qorq","kind":"ctor","line":326,"name":"Std.Time.Modifier.Qorq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L326-L329"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.Modifier.d\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Modifier</span>.<span class=\"name\">d</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">presentation</span> : <a href=\"./Std/Time/Format/Basic.html#Std.Time.Number\">Number</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.Modifier\">Modifier</a></div></div>","info":{"doc":"`d`: Day of month (e.g., 10).\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.Modifier.d","kind":"ctor","line":321,"name":"Std.Time.Modifier.d","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L321-L324"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.Modifier.MorL\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Modifier</span>.<span class=\"name\">MorL</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">presentation</span> : <a href=\"./Std/Time/Format/Basic.html#Std.Time.Number\">Number</a> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.Text\">Text</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.Modifier\">Modifier</a></div></div>","info":{"doc":"`M`: Month of year as number or text (e.g., 7, 07, Jul, July, J).\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.Modifier.MorL","kind":"ctor","line":316,"name":"Std.Time.Modifier.MorL","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L316-L319"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.Modifier.D\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Modifier</span>.<span class=\"name\">D</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">presentation</span> : <a href=\"./Std/Time/Format/Basic.html#Std.Time.Number\">Number</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.Modifier\">Modifier</a></div></div>","info":{"doc":"`D`: Day of year (e.g., 189).\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.Modifier.D","kind":"ctor","line":311,"name":"Std.Time.Modifier.D","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L311-L314"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.Modifier.u\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Modifier</span>.<span class=\"name\">u</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">presentation</span> : <a href=\"./Std/Time/Format/Basic.html#Std.Time.Year\">Year</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.Modifier\">Modifier</a></div></div>","info":{"doc":"`u`: Year (e.g., 2004, 04, -0001, -1).\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.Modifier.u","kind":"ctor","line":306,"name":"Std.Time.Modifier.u","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L306-L309"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.Modifier.y\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Modifier</span>.<span class=\"name\">y</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">presentation</span> : <a href=\"./Std/Time/Format/Basic.html#Std.Time.Year\">Year</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.Modifier\">Modifier</a></div></div>","info":{"doc":"`y`: Year of era (e.g., 2004, 04, 0002, 2).\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.Modifier.y","kind":"ctor","line":301,"name":"Std.Time.Modifier.y","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L301-L304"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.Modifier.G\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Modifier</span>.<span class=\"name\">G</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">presentation</span> : <a href=\"./Std/Time/Format/Basic.html#Std.Time.Text\">Text</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.Modifier\">Modifier</a></div></div>","info":{"doc":"`G`: Era (e.g., AD, Anno Domini, A).\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.Modifier.G","kind":"ctor","line":296,"name":"Std.Time.Modifier.G","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L296-L299"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.Modifier\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Modifier</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The `Modifier` inductive type represents various formatting options for date and time components,\nmatching the format symbols used in date and time strings.\nThese modifiers can be applied in formatting functions to generate custom date and time outputs.\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.Modifier","kind":"inductive","line":290,"name":"Std.Time.Modifier","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L290-L440"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.OffsetZ.classify\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">OffsetZ</span>.<span class=\"name\">classify</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">num</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.OffsetZ\">OffsetZ</a></span></div></div>","info":{"doc":"`classify` classifies the number of pattern letters into an `OffsetZ` format.\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.OffsetZ.classify","kind":"def","line":278,"name":"Std.Time.OffsetZ.classify","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L278-L286"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.instInhabitedOffsetZ\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">instInhabitedOffsetZ</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.OffsetZ\">OffsetZ</a></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Format/Basic.html#Std.Time.instInhabitedOffsetZ","kind":"instance","line":274,"name":"Std.Time.instInhabitedOffsetZ","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L274-L274"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.instInhabitedOffsetZ.default\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">instInhabitedOffsetZ</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.OffsetZ\">OffsetZ</a></div></div>","info":{"doc":"","docLink":"./Std/Time/Format/Basic.html#Std.Time.instInhabitedOffsetZ.default","kind":"def","line":274,"name":"Std.Time.instInhabitedOffsetZ.default","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L274-L274"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.instReprOffsetZ\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">instReprOffsetZ</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.OffsetZ\">OffsetZ</a></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Format/Basic.html#Std.Time.instReprOffsetZ","kind":"instance","line":274,"name":"Std.Time.instReprOffsetZ","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L274-L274"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.instReprOffsetZ.repr\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">instReprOffsetZ</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.OffsetZ\">OffsetZ</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Std.Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Format/Basic.html#Std.Time.instReprOffsetZ.repr","kind":"def","line":274,"name":"Std.Time.instReprOffsetZ.repr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L274-L274"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.OffsetZ.hourMinuteSecondColon\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">OffsetZ</span>.<span class=\"name\">hourMinuteSecondColon</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.OffsetZ\">OffsetZ</a></div></div>","info":{"doc":"Hour, minute, and second with colon (e.g., \"+01:30:15\") ","docLink":"./Std/Time/Format/Basic.html#Std.Time.OffsetZ.hourMinuteSecondColon","kind":"ctor","line":272,"name":"Std.Time.OffsetZ.hourMinuteSecondColon","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L272-L273"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.OffsetZ.full\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">OffsetZ</span>.<span class=\"name\">full</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.OffsetZ\">OffsetZ</a></div></div>","info":{"doc":"Localized offset text in full form (e.g., \"GMT+08:00\") ","docLink":"./Std/Time/Format/Basic.html#Std.Time.OffsetZ.full","kind":"ctor","line":270,"name":"Std.Time.OffsetZ.full","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L270-L271"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.OffsetZ.hourMinute\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">OffsetZ</span>.<span class=\"name\">hourMinute</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.OffsetZ\">OffsetZ</a></div></div>","info":{"doc":"Hour and minute without colon (e.g., \"+0130\") ","docLink":"./Std/Time/Format/Basic.html#Std.Time.OffsetZ.hourMinute","kind":"ctor","line":268,"name":"Std.Time.OffsetZ.hourMinute","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L268-L269"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.OffsetZ\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">OffsetZ</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"`OffsetZ` represents different offset formats based on the number of pattern letters (capital 'Z').\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.OffsetZ","kind":"inductive","line":264,"name":"Std.Time.OffsetZ","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L264-L274"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.OffsetO.classify\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">OffsetO</span>.<span class=\"name\">classify</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">num</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.OffsetO\">OffsetO</a></span></div></div>","info":{"doc":"`classify` classifies the number of pattern letters into an `OffsetO` format.\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.OffsetO.classify","kind":"def","line":253,"name":"Std.Time.OffsetO.classify","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L253-L260"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.instInhabitedOffsetO.default\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">instInhabitedOffsetO</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.OffsetO\">OffsetO</a></div></div>","info":{"doc":"","docLink":"./Std/Time/Format/Basic.html#Std.Time.instInhabitedOffsetO.default","kind":"def","line":249,"name":"Std.Time.instInhabitedOffsetO.default","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L249-L249"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.instInhabitedOffsetO\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">instInhabitedOffsetO</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.OffsetO\">OffsetO</a></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Format/Basic.html#Std.Time.instInhabitedOffsetO","kind":"instance","line":249,"name":"Std.Time.instInhabitedOffsetO","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L249-L249"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.instReprOffsetO.repr\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">instReprOffsetO</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.OffsetO\">OffsetO</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Std.Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Format/Basic.html#Std.Time.instReprOffsetO.repr","kind":"def","line":249,"name":"Std.Time.instReprOffsetO.repr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L249-L249"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.instReprOffsetO\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">instReprOffsetO</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.OffsetO\">OffsetO</a></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Format/Basic.html#Std.Time.instReprOffsetO","kind":"instance","line":249,"name":"Std.Time.instReprOffsetO","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L249-L249"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.OffsetO.full\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">OffsetO</span>.<span class=\"name\">full</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.OffsetO\">OffsetO</a></div></div>","info":{"doc":"Full form of the localized offset (e.g., \"GMT+08:00\") ","docLink":"./Std/Time/Format/Basic.html#Std.Time.OffsetO.full","kind":"ctor","line":247,"name":"Std.Time.OffsetO.full","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L247-L248"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.OffsetO.short\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">OffsetO</span>.<span class=\"name\">short</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.OffsetO\">OffsetO</a></div></div>","info":{"doc":"Short form of the localized offset (e.g., \"GMT+8\") ","docLink":"./Std/Time/Format/Basic.html#Std.Time.OffsetO.short","kind":"ctor","line":245,"name":"Std.Time.OffsetO.short","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L245-L246"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.OffsetO\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">OffsetO</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"`OffsetO` represents localized offset text formats based on the number of pattern letters.\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.OffsetO","kind":"inductive","line":241,"name":"Std.Time.OffsetO","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L241-L249"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.OffsetX.classify\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">OffsetX</span>.<span class=\"name\">classify</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">num</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.OffsetX\">OffsetX</a></span></div></div>","info":{"doc":"`classify` classifies the number of pattern letters into an `OffsetX` format.\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.OffsetX.classify","kind":"def","line":222,"name":"Std.Time.OffsetX.classify","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L222-L237"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.instInhabitedOffsetX\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">instInhabitedOffsetX</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.OffsetX\">OffsetX</a></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Format/Basic.html#Std.Time.instInhabitedOffsetX","kind":"instance","line":218,"name":"Std.Time.instInhabitedOffsetX","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L218-L218"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.instInhabitedOffsetX.default\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">instInhabitedOffsetX</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.OffsetX\">OffsetX</a></div></div>","info":{"doc":"","docLink":"./Std/Time/Format/Basic.html#Std.Time.instInhabitedOffsetX.default","kind":"def","line":218,"name":"Std.Time.instInhabitedOffsetX.default","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L218-L218"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.instReprOffsetX.repr\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">instReprOffsetX</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.OffsetX\">OffsetX</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Std.Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Format/Basic.html#Std.Time.instReprOffsetX.repr","kind":"def","line":218,"name":"Std.Time.instReprOffsetX.repr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L218-L218"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.instReprOffsetX\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">instReprOffsetX</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.OffsetX\">OffsetX</a></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Format/Basic.html#Std.Time.instReprOffsetX","kind":"instance","line":218,"name":"Std.Time.instReprOffsetX","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L218-L218"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.OffsetX.hourMinuteSecondColon\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">OffsetX</span>.<span class=\"name\">hourMinuteSecondColon</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.OffsetX\">OffsetX</a></div></div>","info":{"doc":"Hour, minute, and second with colon (e.g., \"+01:30:15\") ","docLink":"./Std/Time/Format/Basic.html#Std.Time.OffsetX.hourMinuteSecondColon","kind":"ctor","line":216,"name":"Std.Time.OffsetX.hourMinuteSecondColon","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L216-L217"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.OffsetX.hourMinuteSecond\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">OffsetX</span>.<span class=\"name\">hourMinuteSecond</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.OffsetX\">OffsetX</a></div></div>","info":{"doc":"Hour, minute, and second without colon (e.g., \"+013015\") ","docLink":"./Std/Time/Format/Basic.html#Std.Time.OffsetX.hourMinuteSecond","kind":"ctor","line":214,"name":"Std.Time.OffsetX.hourMinuteSecond","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L214-L215"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.OffsetX.hourMinuteColon\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">OffsetX</span>.<span class=\"name\">hourMinuteColon</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.OffsetX\">OffsetX</a></div></div>","info":{"doc":"Hour and minute with colon (e.g., \"+01:30\") ","docLink":"./Std/Time/Format/Basic.html#Std.Time.OffsetX.hourMinuteColon","kind":"ctor","line":212,"name":"Std.Time.OffsetX.hourMinuteColon","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L212-L213"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.OffsetX.hourMinute\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">OffsetX</span>.<span class=\"name\">hourMinute</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.OffsetX\">OffsetX</a></div></div>","info":{"doc":"Hour and minute without colon (e.g., \"+0130\") ","docLink":"./Std/Time/Format/Basic.html#Std.Time.OffsetX.hourMinute","kind":"ctor","line":210,"name":"Std.Time.OffsetX.hourMinute","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L210-L211"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.OffsetX.hour\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">OffsetX</span>.<span class=\"name\">hour</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.OffsetX\">OffsetX</a></div></div>","info":{"doc":"Only the hour is output (e.g., \"+01\") ","docLink":"./Std/Time/Format/Basic.html#Std.Time.OffsetX.hour","kind":"ctor","line":208,"name":"Std.Time.OffsetX.hour","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L208-L209"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.OffsetX\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">OffsetX</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"`OffsetX` represents different offset formats based on the number of pattern letters.\nThe output will vary between the number of pattern letters, whether it's the hour, minute, second,\nand whether colons are used.\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.OffsetX","kind":"inductive","line":202,"name":"Std.Time.OffsetX","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L202-L218"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.ZoneName.classify\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">ZoneName</span>.<span class=\"name\">classify</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">letter</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">num</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.ZoneName\">ZoneName</a></span></div></div>","info":{"doc":"`classify` classifies the number of pattern letters and the letter type ('z' or 'v')\ninto a `ZoneName` format.\n- For 'z', if less than 4 letters, it returns the short form; if 4 letters, it returns the full form.\n- For 'v', if 1 letter, it returns the short form; if 4 letters, it returns the full form.\n- Otherwise, it returns none.\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.ZoneName.classify","kind":"def","line":175,"name":"Std.Time.ZoneName.classify","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L175-L198"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.instInhabitedZoneName.default\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">instInhabitedZoneName</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.ZoneName\">ZoneName</a></div></div>","info":{"doc":"","docLink":"./Std/Time/Format/Basic.html#Std.Time.instInhabitedZoneName.default","kind":"def","line":171,"name":"Std.Time.instInhabitedZoneName.default","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L171-L171"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.instInhabitedZoneName\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">instInhabitedZoneName</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.ZoneName\">ZoneName</a></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Format/Basic.html#Std.Time.instInhabitedZoneName","kind":"instance","line":171,"name":"Std.Time.instInhabitedZoneName","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L171-L171"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.instReprZoneName\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">instReprZoneName</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.ZoneName\">ZoneName</a></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Format/Basic.html#Std.Time.instReprZoneName","kind":"instance","line":171,"name":"Std.Time.instReprZoneName","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L171-L171"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.instReprZoneName.repr\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">instReprZoneName</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.ZoneName\">ZoneName</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Std.Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Format/Basic.html#Std.Time.instReprZoneName.repr","kind":"def","line":171,"name":"Std.Time.instReprZoneName.repr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L171-L171"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.ZoneName.full\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">ZoneName</span>.<span class=\"name\">full</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.ZoneName\">ZoneName</a></div></div>","info":{"doc":"Full form of zone name (e.g., \"Pacific Standard Time\") ","docLink":"./Std/Time/Format/Basic.html#Std.Time.ZoneName.full","kind":"ctor","line":169,"name":"Std.Time.ZoneName.full","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L169-L170"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.ZoneName.short\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">ZoneName</span>.<span class=\"name\">short</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.ZoneName\">ZoneName</a></div></div>","info":{"doc":"Short form of zone name (e.g., \"PST\") ","docLink":"./Std/Time/Format/Basic.html#Std.Time.ZoneName.short","kind":"ctor","line":167,"name":"Std.Time.ZoneName.short","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L167-L168"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.ZoneName\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">ZoneName</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"`ZoneName` represents different zone name formats based on the number of pattern letters and\nwhether daylight saving time is considered.\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.ZoneName","kind":"inductive","line":162,"name":"Std.Time.ZoneName","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L162-L171"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.ZoneId.classify\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">ZoneId</span>.<span class=\"name\">classify</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">num</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.ZoneId\">ZoneId</a></span></div></div>","info":{"doc":"`classify` classifies the number of pattern letters into a `ZoneId` format.\n- If 2 letters, it returns the short form.\n- If 4 letters, it returns the full form.\n- Otherwise, it returns none.\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.ZoneId.classify","kind":"def","line":146,"name":"Std.Time.ZoneId.classify","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L146-L158"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.instInhabitedZoneId.default\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">instInhabitedZoneId</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.ZoneId\">ZoneId</a></div></div>","info":{"doc":"","docLink":"./Std/Time/Format/Basic.html#Std.Time.instInhabitedZoneId.default","kind":"def","line":142,"name":"Std.Time.instInhabitedZoneId.default","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L142-L142"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.instInhabitedZoneId\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">instInhabitedZoneId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.ZoneId\">ZoneId</a></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Format/Basic.html#Std.Time.instInhabitedZoneId","kind":"instance","line":142,"name":"Std.Time.instInhabitedZoneId","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L142-L142"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.instReprZoneId\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">instReprZoneId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.ZoneId\">ZoneId</a></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Format/Basic.html#Std.Time.instReprZoneId","kind":"instance","line":142,"name":"Std.Time.instReprZoneId","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L142-L142"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.instReprZoneId.repr\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">instReprZoneId</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.ZoneId\">ZoneId</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Std.Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Format/Basic.html#Std.Time.instReprZoneId.repr","kind":"def","line":142,"name":"Std.Time.instReprZoneId.repr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L142-L142"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.ZoneId.full\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">ZoneId</span>.<span class=\"name\">full</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.ZoneId\">ZoneId</a></div></div>","info":{"doc":"Full form of time zone (e.g., \"Pacific Standard Time\") ","docLink":"./Std/Time/Format/Basic.html#Std.Time.ZoneId.full","kind":"ctor","line":140,"name":"Std.Time.ZoneId.full","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L140-L141"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.ZoneId.short\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">ZoneId</span>.<span class=\"name\">short</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.ZoneId\">ZoneId</a></div></div>","info":{"doc":"Short form of time zone (e.g., \"PST\") ","docLink":"./Std/Time/Format/Basic.html#Std.Time.ZoneId.short","kind":"ctor","line":138,"name":"Std.Time.ZoneId.short","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L138-L139"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.ZoneId\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">ZoneId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"`ZoneId` represents different time zone ID formats based on the number of pattern letters.\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.ZoneId","kind":"inductive","line":134,"name":"Std.Time.ZoneId","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L134-L142"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.Year.classify\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Year</span>.<span class=\"name\">classify</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">num</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.Year\">Year</a></span></div></div>","info":{"doc":"`classify` classifies the number of pattern letters into a `Year` format.\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.Year.classify","kind":"def","line":117,"name":"Std.Time.Year.classify","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L117-L130"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.instInhabitedYear\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">instInhabitedYear</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.Year\">Year</a></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Format/Basic.html#Std.Time.instInhabitedYear","kind":"instance","line":113,"name":"Std.Time.instInhabitedYear","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L113-L113"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.instInhabitedYear.default\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">instInhabitedYear</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.Year\">Year</a></div></div>","info":{"doc":"","docLink":"./Std/Time/Format/Basic.html#Std.Time.instInhabitedYear.default","kind":"def","line":113,"name":"Std.Time.instInhabitedYear.default","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L113-L113"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.instReprYear\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">instReprYear</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.Year\">Year</a></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Format/Basic.html#Std.Time.instReprYear","kind":"instance","line":113,"name":"Std.Time.instReprYear","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L113-L113"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.instReprYear.repr\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">instReprYear</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.Year\">Year</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Std.Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Format/Basic.html#Std.Time.instReprYear.repr","kind":"def","line":113,"name":"Std.Time.instReprYear.repr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L113-L113"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.Year.extended\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Year</span>.<span class=\"name\">extended</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">num</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.Year\">Year</a></div></div>","info":{"doc":"Extended year format for more than 4 digits (e.g., \"002023\") ","docLink":"./Std/Time/Format/Basic.html#Std.Time.Year.extended","kind":"ctor","line":111,"name":"Std.Time.Year.extended","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L111-L112"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.Year.fourDigit\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Year</span>.<span class=\"name\">fourDigit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.Year\">Year</a></div></div>","info":{"doc":"Four-digit year format (e.g., \"2023\") ","docLink":"./Std/Time/Format/Basic.html#Std.Time.Year.fourDigit","kind":"ctor","line":109,"name":"Std.Time.Year.fourDigit","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L109-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.Year.twoDigit\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Year</span>.<span class=\"name\">twoDigit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.Year\">Year</a></div></div>","info":{"doc":"Two-digit year format (e.g., \"23\" for 2023) ","docLink":"./Std/Time/Format/Basic.html#Std.Time.Year.twoDigit","kind":"ctor","line":107,"name":"Std.Time.Year.twoDigit","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L107-L108"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.Year.any\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Year</span>.<span class=\"name\">any</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.Year\">Year</a></div></div>","info":{"doc":"Any size (e.g., \"19000000000000\") ","docLink":"./Std/Time/Format/Basic.html#Std.Time.Year.any","kind":"ctor","line":105,"name":"Std.Time.Year.any","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L105-L106"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.Year\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Year</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"`Year` represents different year formatting styles based on the number of pattern letters.\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.Year","kind":"inductive","line":101,"name":"Std.Time.Year","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L101-L113"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.Fraction.classify\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Fraction</span>.<span class=\"name\">classify</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nat</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.Fraction\">Fraction</a></span></div></div>","info":{"doc":"`classify` classifies the number of pattern letters into either a `Fraction`. It's used for `nano`.\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.Fraction.classify","kind":"def","line":88,"name":"Std.Time.Fraction.classify","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L88-L97"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.instInhabitedFraction\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">instInhabitedFraction</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.Fraction\">Fraction</a></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Format/Basic.html#Std.Time.instInhabitedFraction","kind":"instance","line":84,"name":"Std.Time.instInhabitedFraction","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L84-L84"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.instInhabitedFraction.default\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">instInhabitedFraction</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.Fraction\">Fraction</a></div></div>","info":{"doc":"","docLink":"./Std/Time/Format/Basic.html#Std.Time.instInhabitedFraction.default","kind":"def","line":84,"name":"Std.Time.instInhabitedFraction.default","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L84-L84"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.instReprFraction.repr\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">instReprFraction</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.Fraction\">Fraction</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Std.Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Format/Basic.html#Std.Time.instReprFraction.repr","kind":"def","line":84,"name":"Std.Time.instReprFraction.repr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L84-L84"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.instReprFraction\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">instReprFraction</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.Fraction\">Fraction</a></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Format/Basic.html#Std.Time.instReprFraction","kind":"instance","line":84,"name":"Std.Time.instReprFraction","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L84-L84"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.Fraction.truncated\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Fraction</span>.<span class=\"name\">truncated</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">digits</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.Fraction\">Fraction</a></div></div>","info":{"doc":"Fewer digits (truncated precision) ","docLink":"./Std/Time/Format/Basic.html#Std.Time.Fraction.truncated","kind":"ctor","line":82,"name":"Std.Time.Fraction.truncated","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L82-L83"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.Fraction.nano\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Fraction</span>.<span class=\"name\">nano</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.Fraction\">Fraction</a></div></div>","info":{"doc":"Nanosecond precision (up to 9 digits) ","docLink":"./Std/Time/Format/Basic.html#Std.Time.Fraction.nano","kind":"ctor","line":80,"name":"Std.Time.Fraction.nano","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L80-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.Fraction\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Fraction</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"`Fraction` represents the fraction of a second, which can either be full nanoseconds\nor a truncated form with fewer digits.\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.Fraction","kind":"inductive","line":75,"name":"Std.Time.Fraction","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L75-L84"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.classifyNumberText\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">classifyNumberText</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Std/Time/Format/Basic.html#Std.Time.Number\">Number</a> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.Text\">Text</a>)</span></span></div></div>","info":{"doc":"`classifyNumberText` classifies the number of pattern letters into either a `Number` or `Text`.\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.classifyNumberText","kind":"def","line":69,"name":"Std.Time.classifyNumberText","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L69-L73"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.instInhabitedNumber.default\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">instInhabitedNumber</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.Number\">Number</a></div></div>","info":{"doc":"","docLink":"./Std/Time/Format/Basic.html#Std.Time.instInhabitedNumber.default","kind":"def","line":67,"name":"Std.Time.instInhabitedNumber.default","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L67-L67"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.instInhabitedNumber\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">instInhabitedNumber</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.Number\">Number</a></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Format/Basic.html#Std.Time.instInhabitedNumber","kind":"instance","line":67,"name":"Std.Time.instInhabitedNumber","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L67-L67"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.instReprNumber.repr\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">instReprNumber</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.Number\">Number</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Std.Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Format/Basic.html#Std.Time.instReprNumber.repr","kind":"def","line":67,"name":"Std.Time.instReprNumber.repr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L67-L67"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.instReprNumber\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">instReprNumber</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.Number\">Number</a></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Format/Basic.html#Std.Time.instReprNumber","kind":"instance","line":67,"name":"Std.Time.instReprNumber","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L67-L67"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.Number.padding\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Number</span>.<span class=\"name\">padding</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Std/Time/Format/Basic.html#Std.Time.Number\">Number</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"The number of digits to pad, based on the count of pattern letters.\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.Number.padding","kind":"def","line":66,"name":"Std.Time.Number.padding","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L66-L66"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.Number.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Number</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">padding</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.Number\">Number</a></div></div>","info":{"doc":"","docLink":"./Std/Time/Format/Basic.html#Std.Time.Number.mk","kind":"ctor","line":62,"name":"Std.Time.Number.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L62-L62"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.Number\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Number</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"`Number` represents different number formatting styles.\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.Number","kind":"structure","line":59,"name":"Std.Time.Number","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L59-L67"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.Text.classify\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Text</span>.<span class=\"name\">classify</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">num</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.Text\">Text</a></span></div></div>","info":{"doc":"`classify` classifies the number of pattern letters into a `Text` type.\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.Text.classify","kind":"def","line":44,"name":"Std.Time.Text.classify","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L44-L55"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.instInhabitedText.default\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">instInhabitedText</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.Text\">Text</a></div></div>","info":{"doc":"","docLink":"./Std/Time/Format/Basic.html#Std.Time.instInhabitedText.default","kind":"def","line":40,"name":"Std.Time.instInhabitedText.default","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L40-L40"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.instInhabitedText\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">instInhabitedText</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.Text\">Text</a></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Format/Basic.html#Std.Time.instInhabitedText","kind":"instance","line":40,"name":"Std.Time.instInhabitedText","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L40-L40"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.instReprText.repr\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">instReprText</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.Text\">Text</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Std.Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Format/Basic.html#Std.Time.instReprText.repr","kind":"def","line":40,"name":"Std.Time.instReprText.repr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L40-L40"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.instReprText\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">instReprText</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.Text\">Text</a></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Format/Basic.html#Std.Time.instReprText","kind":"instance","line":40,"name":"Std.Time.instReprText","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L40-L40"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.Text.narrow\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Text</span>.<span class=\"name\">narrow</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.Text\">Text</a></div></div>","info":{"doc":"Narrow form (e.g., \"T\") ","docLink":"./Std/Time/Format/Basic.html#Std.Time.Text.narrow","kind":"ctor","line":38,"name":"Std.Time.Text.narrow","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L38-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.Text.full\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Text</span>.<span class=\"name\">full</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.Text\">Text</a></div></div>","info":{"doc":"Full form (e.g., \"Tuesday\") ","docLink":"./Std/Time/Format/Basic.html#Std.Time.Text.full","kind":"ctor","line":36,"name":"Std.Time.Text.full","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L36-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.Text.short\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Text</span>.<span class=\"name\">short</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.Text\">Text</a></div></div>","info":{"doc":"Short form (e.g., \"Tue\") ","docLink":"./Std/Time/Format/Basic.html#Std.Time.Text.short","kind":"ctor","line":34,"name":"Std.Time.Text.short","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L34-L35"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format/Basic.html#Std.Time.Text\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Text</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"`Text` represents different text formatting styles.\n","docLink":"./Std/Time/Format/Basic.html#Std.Time.Text","kind":"inductive","line":30,"name":"Std.Time.Text","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format/Basic.lean#L30-L40"}}],"imports":["Std.Internal.Parsec","Std.Time.Date","Std.Time.Time","Std.Time.Zoned","Std.Time.DateTime"],"instances":[{"className":"Repr","name":"Std.Time.instReprText","typeNames":["Std.Time.Text"]},{"className":"Inhabited","name":"Std.Time.instInhabitedText","typeNames":["Std.Time.Text"]},{"className":"Repr","name":"Std.Time.instReprNumber","typeNames":["Std.Time.Number"]},{"className":"Inhabited","name":"Std.Time.instInhabitedNumber","typeNames":["Std.Time.Number"]},{"className":"Repr","name":"Std.Time.instReprFraction","typeNames":["Std.Time.Fraction"]},{"className":"Inhabited","name":"Std.Time.instInhabitedFraction","typeNames":["Std.Time.Fraction"]},{"className":"Repr","name":"Std.Time.instReprYear","typeNames":["Std.Time.Year"]},{"className":"Inhabited","name":"Std.Time.instInhabitedYear","typeNames":["Std.Time.Year"]},{"className":"Repr","name":"Std.Time.instReprZoneId","typeNames":["Std.Time.ZoneId"]},{"className":"Inhabited","name":"Std.Time.instInhabitedZoneId","typeNames":["Std.Time.ZoneId"]},{"className":"Repr","name":"Std.Time.instReprZoneName","typeNames":["Std.Time.ZoneName"]},{"className":"Inhabited","name":"Std.Time.instInhabitedZoneName","typeNames":["Std.Time.ZoneName"]},{"className":"Repr","name":"Std.Time.instReprOffsetX","typeNames":["Std.Time.OffsetX"]},{"className":"Inhabited","name":"Std.Time.instInhabitedOffsetX","typeNames":["Std.Time.OffsetX"]},{"className":"Repr","name":"Std.Time.instReprOffsetO","typeNames":["Std.Time.OffsetO"]},{"className":"Inhabited","name":"Std.Time.instInhabitedOffsetO","typeNames":["Std.Time.OffsetO"]},{"className":"Repr","name":"Std.Time.instReprOffsetZ","typeNames":["Std.Time.OffsetZ"]},{"className":"Inhabited","name":"Std.Time.instInhabitedOffsetZ","typeNames":["Std.Time.OffsetZ"]},{"className":"Repr","name":"Std.Time.instReprModifier","typeNames":["Std.Time.Modifier"]},{"className":"Inhabited","name":"Std.Time.instInhabitedModifier","typeNames":["Std.Time.Modifier"]},{"className":"Repr","name":"Std.Time.instReprFormatPart","typeNames":["Std.Time.FormatPart"]},{"className":"Coe","name":"Std.Time.instCoeStringFormatPart","typeNames":["String","Std.Time.FormatPart"]},{"className":"Coe","name":"Std.Time.instCoeModifierFormatPart","typeNames":["Std.Time.Modifier","Std.Time.FormatPart"]},{"className":"Coe","name":"Std.Time.Awareness.instCoeTimeZone","typeNames":["Std.Time.TimeZone","Std.Time.Awareness"]},{"className":"Inhabited","name":"Std.Time.instInhabitedFormatConfig","typeNames":["Std.Time.FormatConfig"]},{"className":"Repr","name":"Std.Time.instReprFormatConfig","typeNames":["Std.Time.FormatConfig"]},{"className":"Inhabited","name":"Std.Time.instInhabitedGenericFormat","typeNames":["Std.Time.GenericFormat"]},{"className":"Repr","name":"Std.Time.instReprGenericFormat","typeNames":["Std.Time.GenericFormat"]},{"className":"Std.Time.Format","name":"Std.Time.instFormatGenericFormatFormatTypeString","typeNames":["Std.Time.GenericFormat"]}],"name":"Std.Time.Format.Basic"}