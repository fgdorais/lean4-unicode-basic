{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.suggestSyntax\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">suggestSyntax</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.StrLit\">StrLit</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.CodeSuggestion\">CodeSuggestion</a>)</span></span></div></div>","info":{"doc":"Suggests the `syntax` role, if applicable.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.suggestSyntax","kind":"def","line":972,"name":"Lean.Doc.suggestSyntax","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L972-L989"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.suggestCat\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">suggestCat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.StrLit\">StrLit</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.CodeSuggestion\">CodeSuggestion</a>)</span></span></div></div>","info":{"doc":"Suggests the `syntaxCat` role, if applicable.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.suggestCat","kind":"def","line":960,"name":"Lean.Doc.suggestCat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L960-L970"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.suggestKw\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">suggestKw</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.StrLit\">StrLit</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.CodeSuggestion\">CodeSuggestion</a>)</span></span></div></div>","info":{"doc":"Suggests the `kw` role, if applicable.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.suggestKw","kind":"def","line":942,"name":"Lean.Doc.suggestKw","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L942-L958"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.suggestOption\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">suggestOption</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.StrLit\">StrLit</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.CodeSuggestion\">CodeSuggestion</a>)</span></span></div></div>","info":{"doc":"Suggests the `option` role, if applicable.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.suggestOption","kind":"def","line":923,"name":"Lean.Doc.suggestOption","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L923-L940"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.suggestAttr\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">suggestAttr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.StrLit\">StrLit</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.CodeSuggestion\">CodeSuggestion</a>)</span></span></div></div>","info":{"doc":"Suggests the `attr` role, if applicable.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.suggestAttr","kind":"def","line":903,"name":"Lean.Doc.suggestAttr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L903-L920"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.suggestTactic\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">suggestTactic</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.StrLit\">StrLit</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.CodeSuggestion\">CodeSuggestion</a>)</span></span></div></div>","info":{"doc":"Suggests the `tactic` role, if applicable.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.suggestTactic","kind":"def","line":885,"name":"Lean.Doc.suggestTactic","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L885-L900"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.suggestLean\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">suggestLean</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.StrLit\">StrLit</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.CodeSuggestion\">CodeSuggestion</a>)</span></span></div></div>","info":{"doc":"Suggests the `lean` role, if applicable.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.suggestLean","kind":"def","line":873,"name":"Lean.Doc.suggestLean","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L873-L883"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.suggestName\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">suggestName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.StrLit\">StrLit</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.CodeSuggestion\">CodeSuggestion</a>)</span></span></div></div>","info":{"doc":"Suggests the `name` role, if applicable.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.suggestName","kind":"def","line":858,"name":"Lean.Doc.suggestName","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L858-L871"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.manual\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">manual</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">domain</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Ident\">Ident</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">content</span> : <a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">TSyntaxArray</a> <span class=\"fn\">`inline</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabInline\">ElabInline</a>)</span></span></div></div>","info":{"doc":"Constructs a link to the Lean langauge reference. Two positional arguments are expected:\n* `domain` should be one of the valid domains, such as `section`.\n* `name` should be the content's canonical name in the domain.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.manual","kind":"def","line":841,"name":"Lean.Doc.manual","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L841-L856"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.set_option\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">set_option</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">option</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Ident\">Ident</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">value</span> : <a href=\"./Lean/Data/KVMap.html#Lean.DataValue\">DataValue</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Block\">Block</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabInline\">ElabInline</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabBlock\">ElabBlock</a>)</span></span></div></div>","info":{"doc":"Sets the specified option to the specified value for the remainder of the comment.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.set_option","kind":"def","line":827,"name":"Lean.Doc.set_option","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L827-L839"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.open\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">open</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Ident\">Ident</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">«scoped»</span> : <span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.flag\">flag</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">only</span> : <span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.many\">many</a> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Ident\">Ident</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Block\">Block</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabInline\">ElabInline</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabBlock\">ElabBlock</a>)</span></span></div></div>","info":{"doc":"Opens a namespace in the remainder of the documentation comment.\n\nThe `+scoped` flag causes scoped instances and attributes to be activated, but no identifiers are\nbrought into scope. The named argument `only`, which can be repeated, specifies a subset of names to\nbring into scope from the namespace.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.open","kind":"def","line":800,"name":"Lean.Doc.open","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L800-L825"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.leanTerm\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">leanTerm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">TSyntaxArray</a> <span class=\"fn\">`inline</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabInline\">ElabInline</a>)</span></span></div></div>","info":{"doc":"Treats the provided term as Lean syntax in the documentation's scope.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.leanTerm","kind":"def","line":789,"name":"Lean.Doc.leanTerm","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L789-L798"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.output\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">output</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Ident\">Ident</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">severity</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Lean/Elab/DocString.html#Lean.Doc.WithSyntax\">WithSyntax</a> <a href=\"./Lean/Message.html#Lean.MessageSeverity\">MessageSeverity</a>)</span></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.StrLit\">StrLit</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Block\">Block</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabInline\">ElabInline</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabBlock\">ElabBlock</a>)</span></span></div></div>","info":{"doc":"Displays output from a named Lean code block.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.output","kind":"def","line":749,"name":"Lean.Doc.output","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L749-L786"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.lean\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">lean</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Ident\">Ident</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">error </span><span class=\"fn\">warning</span> : <span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.flag\">flag</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.StrLit\">StrLit</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Block\">Block</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabInline\">ElabInline</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabBlock\">ElabBlock</a>)</span></span></div></div>","info":{"doc":"Elaborates a sequence of Lean commands as examples.\n\nTo make examples self-contained, elaboration ignores the surrouncing section scopes. Modifications\nto the environment are preserved during a single documentation comment, and discarded afterwards.\n\nThe named argument `name` allows a name to be assigned to the code block; any messages created by\nelaboration are saved under this name.\n\nThe flags `error` and `warning` indicate that an error or warning is expected in the code.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.lean","kind":"def","line":653,"name":"Lean.Doc.lean","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L653-L747"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.given\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">given</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">TSyntaxArray</a> <span class=\"fn\">`inline</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabInline\">ElabInline</a>)</span></span></div></div>","info":{"doc":"A metavariable to be discussed in the remainder of the docstring.\n\nThere are two syntaxes that can be used:\n* `` {given}`x` `` establishes `x`'s type as a metavariable.\n* `` {given}`x : A`` uses `A` as the type for metavariable `x`.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.given","kind":"def","line":612,"name":"Lean.Doc.given","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L612-L637"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.syntax\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">syntax</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cat</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Ident\">Ident</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">TSyntaxArray</a> <span class=\"fn\">`inline</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabInline\">ElabInline</a>)</span></span></div></div>","info":{"doc":"A description of syntax in the provided category.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.syntax","kind":"def","line":598,"name":"Lean.Doc.syntax","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L598-L610"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.syntaxCat\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">syntaxCat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">TSyntaxArray</a> <span class=\"fn\">`inline</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabInline\">ElabInline</a>)</span></span></div></div>","info":{"doc":"A reference to a syntax category.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.syntaxCat","kind":"def","line":585,"name":"Lean.Doc.syntaxCat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L585-L596"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.kw?\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">kw?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cat </span><span class=\"fn\">of</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Ident\">Ident</a> := <span class=\"fn\"><a href=\"./Init/Meta/Defs.html#Lean.mkIdent\">mkIdent</a> <a href=\"./Init/Prelude.html#Lean.Name.anonymous\">Name.anonymous</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">TSyntaxArray</a> <span class=\"fn\">`inline</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabInline\">ElabInline</a>)</span></span></div></div>","info":{"doc":"A reference to a particular syntax kind, via one of its atoms.\n\nIt is an error if the syntax kind can't be automatically determined to contain the atom, or if\nmultiple syntax kinds contain it. If the parser for the syntax kind is sufficiently complex,\ndetection may fail.\n\nSpecifying the category or kind using the named arguments `cat` and `of` can narrow down the\nprocess.\n\nUse `kw?` to receive a suggestion of a specific kind.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.kw?","kind":"def","line":568,"name":"Lean.Doc.kw?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L568-L571"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.kw\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">kw</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cat </span><span class=\"fn\">of</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Ident\">Ident</a> := <span class=\"fn\"><a href=\"./Init/Meta/Defs.html#Lean.mkIdent\">mkIdent</a> <a href=\"./Init/Prelude.html#Lean.Name.anonymous\">Name.anonymous</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">TSyntaxArray</a> <span class=\"fn\">`inline</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabInline\">ElabInline</a>)</span></span></div></div>","info":{"doc":"A reference to a particular syntax kind, via one of its atoms.\n\nIt is an error if the syntax kind can't be automatically determined to contain the atom, or if\nmultiple syntax kinds contain it. If the parser for the syntax kind is sufficiently complex,\ndetection may fail.\n\nSpecifying the category or kind using the named arguments `cat` and `of` can narrow down the\nprocess.\n\nUse `kw?` to receive a suggestion of a specific kind.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.kw","kind":"def","line":551,"name":"Lean.Doc.kw","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L551-L566"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.option\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">option</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">TSyntaxArray</a> <span class=\"fn\">`inline</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabInline\">ElabInline</a>)</span></span></div></div>","info":{"doc":"A reference to an option.\n\nIn `` {option}`O` ``, `O` can be either:\n* The name of an option (e.g. `pp.all`)\n* Syntax to set an option to a particular value (e.g. `set_option pp.all true`)\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.option","kind":"def","line":353,"name":"Lean.Doc.option","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L353-L414"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.attr\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">attr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">TSyntaxArray</a> <span class=\"fn\">`inline</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabInline\">ElabInline</a>)</span></span></div></div>","info":{"doc":"A reference to an attribute or attribute-application syntax.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.attr","kind":"def","line":296,"name":"Lean.Doc.attr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L296-L337"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.conv\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">conv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">TSyntaxArray</a> <span class=\"fn\">`inline</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabInline\">ElabInline</a>)</span></span></div></div>","info":{"doc":"A reference to a conv tactic.\n\nIn `` {conv}`T` ``, `T` can be any of the following:\n* The name of a conv tactic syntax kind (e.g. `Lean.Parser.Tactic.Conv.lhs`)\n* Valid conv tactic syntax, potentially including antiquotations (e.g. `lhs`)\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.conv","kind":"def","line":266,"name":"Lean.Doc.conv","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L266-L293"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.tactic\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">tactic</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">TSyntaxArray</a> <span class=\"fn\">`inline</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabInline\">ElabInline</a>)</span></span></div></div>","info":{"doc":"A reference to a tactic.\n\nIn `` {tactic}`T` ``, `T` can be any of the following:\n* The name of a tactic syntax kind (e.g. `Lean.Parser.Tactic.induction`)\n* The first token of a tactic (e.g. `induction`)\n* Valid tactic syntax, potentially including antiquotations (e.g. `intro $x*`)\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.tactic","kind":"def","line":201,"name":"Lean.Doc.tactic","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L201-L242"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.name\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">name</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">TSyntaxArray</a> <span class=\"fn\">`inline</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabInline\">ElabInline</a>)</span></span></div></div>","info":{"doc":"Displays a name, without attempting to elaborate implicit arguments.\n","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.name","kind":"def","line":119,"name":"Lean.Doc.name","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L119-L142"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.instTypeNameSyntax\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">instTypeNameSyntax</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Dynamic.html#TypeName\">TypeName</a> <a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Syntax\">Syntax</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.instTypeNameSyntax","kind":"instance","line":109,"name":"Lean.Doc.Data.instTypeNameSyntax","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L109-L109"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Syntax.stx\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">stx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>","info":{"doc":"The parsed syntax. ","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Syntax.stx","kind":"def","line":108,"name":"Lean.Doc.Data.Syntax.stx","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L108-L108"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Syntax.category\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">category</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"The syntax category. ","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Syntax.category","kind":"def","line":106,"name":"Lean.Doc.Data.Syntax.category","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L106-L106"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Syntax.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">category</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Syntax\">Syntax</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Syntax.mk","kind":"ctor","line":104,"name":"Lean.Doc.Data.Syntax.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L104-L104"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Syntax\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">Syntax</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The code represents syntax in a given category. ","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Syntax","kind":"structure","line":103,"name":"Lean.Doc.Data.Syntax","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L103-L109"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.instTypeNameSyntaxCat\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">instTypeNameSyntaxCat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Dynamic.html#TypeName\">TypeName</a> <a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.SyntaxCat\">SyntaxCat</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.instTypeNameSyntaxCat","kind":"instance","line":101,"name":"Lean.Doc.Data.instTypeNameSyntaxCat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L101-L101"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.SyntaxCat.name\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">SyntaxCat</span>.<span class=\"name\">name</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.SyntaxCat\">SyntaxCat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"The syntax category. ","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.SyntaxCat.name","kind":"def","line":100,"name":"Lean.Doc.Data.SyntaxCat.name","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L100-L100"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.SyntaxCat.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">SyntaxCat</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.SyntaxCat\">SyntaxCat</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.SyntaxCat.mk","kind":"ctor","line":98,"name":"Lean.Doc.Data.SyntaxCat.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L98-L98"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.SyntaxCat\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">SyntaxCat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The code represents a syntax category name. ","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.SyntaxCat","kind":"structure","line":97,"name":"Lean.Doc.Data.SyntaxCat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L97-L101"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.instTypeNameAtom\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">instTypeNameAtom</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Dynamic.html#TypeName\">TypeName</a> <a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Atom\">Atom</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.instTypeNameAtom","kind":"instance","line":95,"name":"Lean.Doc.Data.instTypeNameAtom","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L95-L95"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Atom.category\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">Atom</span>.<span class=\"name\">category</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Atom\">Atom</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"The syntax category ","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Atom.category","kind":"def","line":94,"name":"Lean.Doc.Data.Atom.category","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L94-L94"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Atom.name\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">Atom</span>.<span class=\"name\">name</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Atom\">Atom</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"The syntax kind's name. ","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Atom.name","kind":"def","line":92,"name":"Lean.Doc.Data.Atom.name","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L92-L92"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Atom.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">Atom</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name </span><span class=\"fn\">category</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Atom\">Atom</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Atom.mk","kind":"ctor","line":90,"name":"Lean.Doc.Data.Atom.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L90-L90"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Atom\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">Atom</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The code represents an atom drawn from some syntax. ","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Atom","kind":"structure","line":89,"name":"Lean.Doc.Data.Atom","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L89-L95"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.instTypeNameOption\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">instTypeNameOption</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Dynamic.html#TypeName\">TypeName</a> <a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Option\">Option</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.instTypeNameOption","kind":"instance","line":87,"name":"Lean.Doc.Data.instTypeNameOption","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L87-L87"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Option.name\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">Option</span>.<span class=\"name\">name</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Option\">Option</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"The option's name. ","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Option.name","kind":"def","line":86,"name":"Lean.Doc.Data.Option.name","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L86-L86"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Option.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">Option</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Option\">Option</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Option.mk","kind":"ctor","line":84,"name":"Lean.Doc.Data.Option.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L84-L84"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Option\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">Option</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The code represents an option. ","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Option","kind":"structure","line":83,"name":"Lean.Doc.Data.Option","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L83-L87"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.instTypeNameSetOption\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">instTypeNameSetOption</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Dynamic.html#TypeName\">TypeName</a> <a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.SetOption\">SetOption</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.instTypeNameSetOption","kind":"instance","line":81,"name":"Lean.Doc.Data.instTypeNameSetOption","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L81-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.SetOption.stx\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">SetOption</span>.<span class=\"name\">stx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.SetOption\">SetOption</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>","info":{"doc":"The `set_option ...` syntax. ","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.SetOption.stx","kind":"def","line":80,"name":"Lean.Doc.Data.SetOption.stx","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L80-L80"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.SetOption.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">SetOption</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.SetOption\">SetOption</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.SetOption.mk","kind":"ctor","line":78,"name":"Lean.Doc.Data.SetOption.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L78-L78"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.SetOption\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">SetOption</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The code represents syntax to set an option. ","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.SetOption","kind":"structure","line":77,"name":"Lean.Doc.Data.SetOption","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L77-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.instTypeNameAttribute\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">instTypeNameAttribute</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Dynamic.html#TypeName\">TypeName</a> <a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Attribute\">Attribute</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.instTypeNameAttribute","kind":"instance","line":75,"name":"Lean.Doc.Data.instTypeNameAttribute","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L75-L75"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Attribute.stx\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">Attribute</span>.<span class=\"name\">stx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Attribute\">Attribute</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>","info":{"doc":"The attribute syntax. ","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Attribute.stx","kind":"def","line":74,"name":"Lean.Doc.Data.Attribute.stx","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L74-L74"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Attribute.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">Attribute</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Attribute\">Attribute</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Attribute.mk","kind":"ctor","line":72,"name":"Lean.Doc.Data.Attribute.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L72-L72"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Attribute\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">Attribute</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The code represents a single attribute. ","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Attribute","kind":"structure","line":71,"name":"Lean.Doc.Data.Attribute","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L71-L75"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.instTypeNameAttributes\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">instTypeNameAttributes</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Dynamic.html#TypeName\">TypeName</a> <a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Attributes\">Attributes</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.instTypeNameAttributes","kind":"instance","line":69,"name":"Lean.Doc.Data.instTypeNameAttributes","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L69-L69"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Attributes.stx\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">Attributes</span>.<span class=\"name\">stx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Attributes\">Attributes</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></div></div>","info":{"doc":"The attribute syntax. ","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Attributes.stx","kind":"def","line":68,"name":"Lean.Doc.Data.Attributes.stx","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L68-L68"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Attributes.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">Attributes</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Attributes\">Attributes</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Attributes.mk","kind":"ctor","line":66,"name":"Lean.Doc.Data.Attributes.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L66-L66"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Attributes\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">Attributes</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The code represents an attribute application `@[...]`. ","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Attributes","kind":"structure","line":65,"name":"Lean.Doc.Data.Attributes","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L65-L69"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.instTypeNameConvTactic\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">instTypeNameConvTactic</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Dynamic.html#TypeName\">TypeName</a> <a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.ConvTactic\">ConvTactic</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.instTypeNameConvTactic","kind":"instance","line":63,"name":"Lean.Doc.Data.instTypeNameConvTactic","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L63-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.ConvTactic.name\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">ConvTactic</span>.<span class=\"name\">name</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.ConvTactic\">ConvTactic</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"The name of the tactic's syntax kind. ","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.ConvTactic.name","kind":"def","line":62,"name":"Lean.Doc.Data.ConvTactic.name","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L62-L62"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.ConvTactic.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">ConvTactic</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.ConvTactic\">ConvTactic</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.ConvTactic.mk","kind":"ctor","line":60,"name":"Lean.Doc.Data.ConvTactic.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L60-L60"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.ConvTactic\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">ConvTactic</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The code represents a conv tactic. ","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.ConvTactic","kind":"structure","line":59,"name":"Lean.Doc.Data.ConvTactic","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L59-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.instTypeNameTactic\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">instTypeNameTactic</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Dynamic.html#TypeName\">TypeName</a> <a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Tactic\">Tactic</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.instTypeNameTactic","kind":"instance","line":57,"name":"Lean.Doc.Data.instTypeNameTactic","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L57-L57"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Tactic.name\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">name</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Tactic\">Tactic</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"The name of the tactic's syntax kind. ","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Tactic.name","kind":"def","line":56,"name":"Lean.Doc.Data.Tactic.name","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L56-L56"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Tactic.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Tactic\">Tactic</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Tactic.mk","kind":"ctor","line":54,"name":"Lean.Doc.Data.Tactic.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L54-L54"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Tactic\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">Tactic</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The code represents a tactic. ","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Tactic","kind":"structure","line":53,"name":"Lean.Doc.Data.Tactic","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L53-L57"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.instTypeNameLocal\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">instTypeNameLocal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Dynamic.html#TypeName\">TypeName</a> <a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Local\">Local</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.instTypeNameLocal","kind":"instance","line":51,"name":"Lean.Doc.Data.instTypeNameLocal","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L51-L51"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Local.type\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">Local</span>.<span class=\"name\">type</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Local\">Local</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"The local variable's type. ","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Local.type","kind":"def","line":50,"name":"Lean.Doc.Data.Local.type","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L50-L50"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Local.lctx\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">Local</span>.<span class=\"name\">lctx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Local\">Local</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a></div></div>","info":{"doc":"The local variable's context. ","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Local.lctx","kind":"def","line":48,"name":"Lean.Doc.Data.Local.lctx","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L48-L48"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Local.fvarId\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">Local</span>.<span class=\"name\">fvarId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Local\">Local</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></div></div>","info":{"doc":"The local variable's ID. ","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Local.fvarId","kind":"def","line":46,"name":"Lean.Doc.Data.Local.fvarId","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L46-L46"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Local.name\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">Local</span>.<span class=\"name\">name</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Local\">Local</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"The local variable's name. ","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Local.name","kind":"def","line":44,"name":"Lean.Doc.Data.Local.name","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L44-L44"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Local.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">Local</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Local\">Local</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Local.mk","kind":"ctor","line":42,"name":"Lean.Doc.Data.Local.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L42-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Local\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">Local</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The code represents a local variable. ","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Local","kind":"structure","line":41,"name":"Lean.Doc.Data.Local","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L41-L51"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.instTypeNameConst\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">instTypeNameConst</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Dynamic.html#TypeName\">TypeName</a> <a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Const\">Const</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.instTypeNameConst","kind":"instance","line":39,"name":"Lean.Doc.Data.instTypeNameConst","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L39-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Const.name\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">Const</span>.<span class=\"name\">name</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Const\">Const</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"The constant's name. ","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Const.name","kind":"def","line":38,"name":"Lean.Doc.Data.Const.name","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L38-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Const.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">Const</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Const\">Const</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Const.mk","kind":"ctor","line":36,"name":"Lean.Doc.Data.Const.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L36-L36"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Const\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Data</span>.<span class=\"name\">Const</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The code represents a global constant. ","docLink":"./Lean/Elab/DocString/Builtin.html#Lean.Doc.Data.Const","kind":"structure","line":35,"name":"Lean.Doc.Data.Const","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString/Builtin.lean#L35-L39"}}],"imports":["Lean.Elab.DocString","Lean.DocString.Links","Lean.DocString.Syntax","Lean.Elab.InfoTree","Lean.Elab.Term.TermElabM","Lean.Elab.Open","Lean.Parser","Lean.Meta.Hint","Lean.Elab.Tactic.Doc","Lean.Data.EditDistance"],"instances":[{"className":"TypeName","name":"Lean.Doc.Data.instTypeNameConst","typeNames":["Lean.Doc.Data.Const"]},{"className":"TypeName","name":"Lean.Doc.Data.instTypeNameLocal","typeNames":["Lean.Doc.Data.Local"]},{"className":"TypeName","name":"Lean.Doc.Data.instTypeNameTactic","typeNames":["Lean.Doc.Data.Tactic"]},{"className":"TypeName","name":"Lean.Doc.Data.instTypeNameConvTactic","typeNames":["Lean.Doc.Data.ConvTactic"]},{"className":"TypeName","name":"Lean.Doc.Data.instTypeNameAttributes","typeNames":["Lean.Doc.Data.Attributes"]},{"className":"TypeName","name":"Lean.Doc.Data.instTypeNameAttribute","typeNames":["Lean.Doc.Data.Attribute"]},{"className":"TypeName","name":"Lean.Doc.Data.instTypeNameSetOption","typeNames":["Lean.Doc.Data.SetOption"]},{"className":"TypeName","name":"Lean.Doc.Data.instTypeNameOption","typeNames":["Lean.Doc.Data.Option"]},{"className":"TypeName","name":"Lean.Doc.Data.instTypeNameAtom","typeNames":["Lean.Doc.Data.Atom"]},{"className":"TypeName","name":"Lean.Doc.Data.instTypeNameSyntaxCat","typeNames":["Lean.Doc.Data.SyntaxCat"]},{"className":"TypeName","name":"Lean.Doc.Data.instTypeNameSyntax","typeNames":["Lean.Doc.Data.Syntax"]}],"name":"Lean.Elab.DocString.Builtin"}