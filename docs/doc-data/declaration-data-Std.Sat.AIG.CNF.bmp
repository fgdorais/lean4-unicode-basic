{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF_equisat\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">toCNF_equisat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">entry</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Entrypoint\">Entrypoint</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF\">toCNF</a> <span class=\"fn\">entry</span>)</span>.<a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Unsat\">Unsat</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">entry</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Entrypoint.Unsat\">Unsat</a></span></div></div>","info":{"doc":"An AIG is unsat iff its CNF is unsat.\n","docLink":"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF_equisat","kind":"theorem","line":672,"name":"Std.Sat.AIG.toCNF_equisat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/AIG/CNF.lean#L672-L689"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">toCNF</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">entry</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Entrypoint\">Entrypoint</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF\">CNF</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"Convert an AIG into CNF, starting at some entry node.\n","docLink":"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF","kind":"def","line":552,"name":"Std.Sat.AIG.toCNF","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/AIG/CNF.lean#L552-L592"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.unsat_iff\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">toCNF</span>.<span class=\"name\">State</span>.<span class=\"name\">unsat_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aig✝</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">state</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State\">State</a> <span class=\"fn\">aig✝</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">state</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.Unsat\">Unsat</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">state</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.cnf\">cnf</a></span>.<a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Unsat\">Unsat</a></span></div></div>","info":{"doc":"","docLink":"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.unsat_iff","kind":"theorem","line":547,"name":"Std.Sat.AIG.toCNF.State.unsat_iff","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/AIG/CNF.lean#L547-L548"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.sat_iff\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">toCNF</span>.<span class=\"name\">State</span>.<span class=\"name\">sat_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aig✝</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">assign</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig✝</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.CNFVar\">CNFVar</a></span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">state</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State\">State</a> <span class=\"fn\">aig✝</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.Sat\">Sat</a> <span class=\"fn\">assign</span> <span class=\"fn\">state</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Sat\">CNF.Sat</a> <span class=\"fn\">assign</span> <span class=\"fn\"><span class=\"fn\">state</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.cnf\">cnf</a></span></span></div></div>","info":{"doc":"","docLink":"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.sat_iff","kind":"theorem","line":543,"name":"Std.Sat.AIG.toCNF.State.sat_iff","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/AIG/CNF.lean#L543-L545"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.eval_eq\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">toCNF</span>.<span class=\"name\">State</span>.<span class=\"name\">eval_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aig✝</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">assign</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig✝</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.CNFVar\">CNFVar</a></span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">state</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State\">State</a> <span class=\"fn\">aig✝</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.eval\">eval</a> <span class=\"fn\">assign</span> <span class=\"fn\">state</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.eval\">CNF.eval</a> <span class=\"fn\">assign</span> <span class=\"fn\"><span class=\"fn\">state</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.cnf\">cnf</a></span></span></div></div>","info":{"doc":"","docLink":"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.eval_eq","kind":"theorem","line":539,"name":"Std.Sat.AIG.toCNF.State.eval_eq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/AIG/CNF.lean#L539-L541"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.unsat_def\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">toCNF</span>.<span class=\"name\">State</span>.<span class=\"name\">unsat_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">state</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State\">State</a> <span class=\"fn\">aig</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">state</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.Unsat\">Unsat</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">state</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.cnf\">cnf</a></span>.<a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Unsat\">Unsat</a></span></div></div>","info":{"doc":"","docLink":"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.unsat_def","kind":"theorem","line":535,"name":"Std.Sat.AIG.toCNF.State.unsat_def","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/AIG/CNF.lean#L535-L537"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.sat_def\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">toCNF</span>.<span class=\"name\">State</span>.<span class=\"name\">sat_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">assign</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.CNFVar\">CNFVar</a></span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">state</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State\">State</a> <span class=\"fn\">aig</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.Sat\">Sat</a> <span class=\"fn\">assign</span> <span class=\"fn\">state</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Sat\">CNF.Sat</a> <span class=\"fn\">assign</span> <span class=\"fn\"><span class=\"fn\">state</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.cnf\">cnf</a></span></span></div></div>","info":{"doc":"","docLink":"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.sat_def","kind":"theorem","line":531,"name":"Std.Sat.AIG.toCNF.State.sat_def","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/AIG/CNF.lean#L531-L533"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.Unsat\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">toCNF</span>.<span class=\"name\">State</span>.<span class=\"name\">Unsat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">state</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State\">State</a> <span class=\"fn\">aig</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"The CNF within the state is unsat.\n","docLink":"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.Unsat","kind":"def","line":525,"name":"Std.Sat.AIG.toCNF.State.Unsat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/AIG/CNF.lean#L525-L529"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.Sat\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">toCNF</span>.<span class=\"name\">State</span>.<span class=\"name\">Sat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">assign</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.CNFVar\">CNFVar</a></span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">state</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State\">State</a> <span class=\"fn\">aig</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"The CNF within the state is sat.\n","docLink":"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.Sat","kind":"def","line":519,"name":"Std.Sat.AIG.toCNF.State.Sat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/AIG/CNF.lean#L519-L523"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.eval\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">toCNF</span>.<span class=\"name\">State</span>.<span class=\"name\">eval</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">assign</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.CNFVar\">CNFVar</a></span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">state</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State\">State</a> <span class=\"fn\">aig</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Evaluate the CNF contained within the state.\n","docLink":"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.eval","kind":"def","line":513,"name":"Std.Sat.AIG.toCNF.State.eval","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/AIG/CNF.lean#L513-L517"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.addGate\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">toCNF</span>.<span class=\"name\">State</span>.<span class=\"name\">addGate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Fanin\">Fanin</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">state</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State\">State</a> <span class=\"fn\">aig</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hlb</span> : <span class=\"fn\"><span class=\"fn\">lhs</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Fanin.gate\">gate</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">state</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.cache\">cache</a></span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.marks\">marks</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hrb</span> : <span class=\"fn\"><span class=\"fn\">rhs</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Fanin.gate\">gate</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">state</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.cache\">cache</a></span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.marks\">marks</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">htip</span> : <span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">idx</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Decl.gate\">Decl.gate</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">state</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.cache\">cache</a></span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.marks\">marks</a></span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\"><span class=\"fn\">lhs</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Fanin.gate\">gate</a></span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">state</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.cache\">cache</a></span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.marks\">marks</a></span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\"><span class=\"fn\">rhs</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Fanin.gate\">gate</a></span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">out</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State\">State</a> <span class=\"fn\">aig</span></span> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">state</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.IsExtensionBy\">IsExtensionBy</a></span> <span class=\"fn\">out</span> <span class=\"fn\">idx</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Subtype\">}</a></div></div>","info":{"doc":"Add the CNF for a `Decl.gate` to the state.\n","docLink":"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.addGate","kind":"def","line":493,"name":"Std.Sat.AIG.toCNF.State.addGate","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/AIG/CNF.lean#L493-L511"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.addAtom\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">toCNF</span>.<span class=\"name\">State</span>.<span class=\"name\">addAtom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">state</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State\">State</a> <span class=\"fn\">aig</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">htip</span> : <span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">idx</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Decl.atom\">Decl.atom</a> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">out</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State\">State</a> <span class=\"fn\">aig</span></span> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">state</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.IsExtensionBy\">IsExtensionBy</a></span> <span class=\"fn\">out</span> <span class=\"fn\">idx</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Subtype\">}</a></div></div>","info":{"doc":"Add the CNF for a `Decl.atom` to the state.\n","docLink":"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.addAtom","kind":"def","line":481,"name":"Std.Sat.AIG.toCNF.State.addAtom","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/AIG/CNF.lean#L481-L491"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.addFalse\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">toCNF</span>.<span class=\"name\">State</span>.<span class=\"name\">addFalse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">state</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State\">State</a> <span class=\"fn\">aig</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">htip</span> : <span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">idx</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Decl.false\">Decl.false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">out</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State\">State</a> <span class=\"fn\">aig</span></span> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">state</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.IsExtensionBy\">IsExtensionBy</a></span> <span class=\"fn\">out</span> <span class=\"fn\">idx</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Subtype\">}</a></div></div>","info":{"doc":"Add the CNF for a `Decl.false` to the state.\n","docLink":"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.addFalse","kind":"def","line":469,"name":"Std.Sat.AIG.toCNF.State.addFalse","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/AIG/CNF.lean#L469-L479"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.IsExtensionBy_rfl\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">toCNF</span>.<span class=\"name\">State</span>.<span class=\"name\">IsExtensionBy_rfl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">omega</span> : <span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">state</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State\">State</a> <span class=\"fn\">aig</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">state</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.cache\">cache</a></span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.marks\">marks</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hmarked</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">state</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.cache\">cache</a></span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.marks\">marks</a></span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">idx</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">state</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.IsExtensionBy\">IsExtensionBy</a></span> <span class=\"fn\">state</span> <span class=\"fn\">idx</span> <span class=\"fn\">⋯</span></span></div></div>","info":{"doc":"State extension is a reflexive relation.\n","docLink":"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.IsExtensionBy_rfl","kind":"theorem","line":461,"name":"Std.Sat.AIG.toCNF.State.IsExtensionBy_rfl","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/AIG/CNF.lean#L461-L467"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.IsExtensionBy_trans_right\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">toCNF</span>.<span class=\"name\">State</span>.<span class=\"name\">IsExtensionBy_trans_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">new1</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hnew1</span> : <span class=\"fn\">new1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">new2</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hnew2</span> : <span class=\"fn\">new2</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">state1 </span><span class=\"fn\">state2 </span><span class=\"fn\">state3</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State\">State</a> <span class=\"fn\">aig</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h12</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">state1</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.IsExtensionBy\">IsExtensionBy</a></span> <span class=\"fn\">state2</span> <span class=\"fn\">new1</span> <span class=\"fn\">hnew1</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h23</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">state2</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.IsExtensionBy\">IsExtensionBy</a></span> <span class=\"fn\">state3</span> <span class=\"fn\">new2</span> <span class=\"fn\">hnew2</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">state1</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.IsExtensionBy\">IsExtensionBy</a></span> <span class=\"fn\">state3</span> <span class=\"fn\">new2</span> <span class=\"fn\">hnew2</span></span></div></div>","info":{"doc":"","docLink":"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.IsExtensionBy_trans_right","kind":"theorem","line":454,"name":"Std.Sat.AIG.toCNF.State.IsExtensionBy_trans_right","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/AIG/CNF.lean#L454-L459"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.IsExtensionBy_trans_left\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">toCNF</span>.<span class=\"name\">State</span>.<span class=\"name\">IsExtensionBy_trans_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">new1</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hnew1</span> : <span class=\"fn\">new1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">new2</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hnew2</span> : <span class=\"fn\">new2</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">state1 </span><span class=\"fn\">state2 </span><span class=\"fn\">state3</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State\">State</a> <span class=\"fn\">aig</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h12</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">state1</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.IsExtensionBy\">IsExtensionBy</a></span> <span class=\"fn\">state2</span> <span class=\"fn\">new1</span> <span class=\"fn\">hnew1</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h23</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">state2</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.IsExtensionBy\">IsExtensionBy</a></span> <span class=\"fn\">state3</span> <span class=\"fn\">new2</span> <span class=\"fn\">hnew2</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">state1</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.IsExtensionBy\">IsExtensionBy</a></span> <span class=\"fn\">state3</span> <span class=\"fn\">new1</span> <span class=\"fn\">hnew1</span></span></div></div>","info":{"doc":"","docLink":"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.IsExtensionBy_trans_left","kind":"theorem","line":447,"name":"Std.Sat.AIG.toCNF.State.IsExtensionBy_trans_left","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/AIG/CNF.lean#L447-L452"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.IsExtensionBy\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">toCNF</span>.<span class=\"name\">State</span>.<span class=\"name\">IsExtensionBy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">state1 </span><span class=\"fn\">state2</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State\">State</a> <span class=\"fn\">aig</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">new</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hnew</span> : <span class=\"fn\">new</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"State extension are `Cache.IsExtensionBy` for now.\n","docLink":"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.IsExtensionBy","kind":"def","line":440,"name":"Std.Sat.AIG.toCNF.State.IsExtensionBy","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/AIG/CNF.lean#L440-L445"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.empty\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">toCNF</span>.<span class=\"name\">State</span>.<span class=\"name\">empty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State\">State</a> <span class=\"fn\">aig</span></span></div></div>","info":{"doc":"An initial state with no CNF clauses and an empty cache.\n","docLink":"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.empty","kind":"def","line":432,"name":"Std.Sat.AIG.toCNF.State.empty","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/AIG/CNF.lean#L432-L438"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.inv\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">toCNF</span>.<span class=\"name\">State</span>.<span class=\"name\">inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State\">State</a> <span class=\"fn\">aig</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.Inv\">Inv</a> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.cnf\">cnf</a></span></span></div></div>","info":{"doc":"The invariant that `cnf` has to maintain as we build it up.\n","docLink":"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.inv","kind":"theorem","line":430,"name":"Std.Sat.AIG.toCNF.State.inv","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/AIG/CNF.lean#L430-L430"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.cache\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">toCNF</span>.<span class=\"name\">State</span>.<span class=\"name\">cache</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State\">State</a> <span class=\"fn\">aig</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache\">Cache</a> <span class=\"fn\">aig</span> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.cnf\">cnf</a></span></span></div></div>","info":{"doc":"A cache so that we don't generate CNF for an AIG node more than once.\n","docLink":"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.cache","kind":"def","line":426,"name":"Std.Sat.AIG.toCNF.State.cache","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/AIG/CNF.lean#L426-L426"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.cnf\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">toCNF</span>.<span class=\"name\">State</span>.<span class=\"name\">cnf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State\">State</a> <span class=\"fn\">aig</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF\">CNF</a> <span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.CNFVar\">CNFVar</a></span></span></div></div>","info":{"doc":"The CNF clauses so far.\n","docLink":"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.cnf","kind":"def","line":422,"name":"Std.Sat.AIG.toCNF.State.cnf","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/AIG/CNF.lean#L422-L422"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">toCNF</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cnf</span> : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF\">CNF</a> <span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.CNFVar\">CNFVar</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cache</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache\">Cache</a> <span class=\"fn\">aig</span> <span class=\"fn\">cnf</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inv</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.Inv\">Inv</a> <span class=\"fn\">cnf</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State\">State</a> <span class=\"fn\">aig</span></span></div></div>","info":{"doc":"","docLink":"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.mk","kind":"ctor","line":418,"name":"Std.Sat.AIG.toCNF.State.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/AIG/CNF.lean#L418-L418"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">toCNF</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The state to accumulate CNF clauses as we run our Tseitin transformation on the AIG.\n","docLink":"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State","kind":"structure","line":415,"name":"Std.Sat.AIG.toCNF.State","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/AIG/CNF.lean#L415-L430"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.Inv_gateToCNF\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">toCNF</span>.<span class=\"name\">State</span>.<span class=\"name\">Inv_gateToCNF</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">upper</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Fanin\">Fanin</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\">upper</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">heq</span> : <span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">upper</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Decl.gate\">Decl.gate</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.Inv\">Inv</a> <span class=\"fn\">(<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.Decl.gateToCNF\">Decl.gateToCNF</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <a href=\"./Init/Prelude.html#Fin.mk\">⟨</a><span class=\"fn\">upper</span>, <span class=\"fn\">h</span><a href=\"./Init/Prelude.html#Fin.mk\">⟩</a>)</span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <a href=\"./Init/Prelude.html#Fin.mk\">⟨</a><span class=\"fn\"><span class=\"fn\">lhs</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Fanin.gate\">gate</a></span>, <span class=\"fn\">⋯</span><a href=\"./Init/Prelude.html#Fin.mk\">⟩</a>)</span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <a href=\"./Init/Prelude.html#Fin.mk\">⟨</a><span class=\"fn\"><span class=\"fn\">rhs</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Fanin.gate\">gate</a></span>, <span class=\"fn\">⋯</span><a href=\"./Init/Prelude.html#Fin.mk\">⟩</a>)</span> <span class=\"fn\"><span class=\"fn\">lhs</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Fanin.invert\">invert</a></span> <span class=\"fn\"><span class=\"fn\">rhs</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Fanin.invert\">invert</a></span>)</span></span></div></div>","info":{"doc":"`State.Inv` holds for the CNF that we produce for a `Decl.gate`\n","docLink":"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.Inv_gateToCNF","kind":"theorem","line":396,"name":"Std.Sat.AIG.toCNF.State.Inv_gateToCNF","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/AIG/CNF.lean#L396-L413"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.Inv_atomToCNF\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">toCNF</span>.<span class=\"name\">State</span>.<span class=\"name\">Inv_atomToCNF</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">upper</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\">upper</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">heq</span> : <span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">upper</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Decl.atom\">Decl.atom</a> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.Inv\">Inv</a> <span class=\"fn\">(<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.Decl.atomToCNF\">Decl.atomToCNF</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <a href=\"./Init/Prelude.html#Fin.mk\">⟨</a><span class=\"fn\">upper</span>, <span class=\"fn\">h</span><a href=\"./Init/Prelude.html#Fin.mk\">⟩</a>)</span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <span class=\"fn\">a</span>)</span>)</span></span></div></div>","info":{"doc":"`State.Inv` holds for the CNF that we produce for a `Decl.atom`\n","docLink":"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.Inv_atomToCNF","kind":"theorem","line":388,"name":"Std.Sat.AIG.toCNF.State.Inv_atomToCNF","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/AIG/CNF.lean#L388-L394"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.Inv_falseToCNF\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">toCNF</span>.<span class=\"name\">State</span>.<span class=\"name\">Inv_falseToCNF</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">upper</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\">upper</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">heq</span> : <span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">upper</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Decl.false\">Decl.false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.Inv\">Inv</a> <span class=\"fn\">(<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.Decl.falseToCNF\">Decl.falseToCNF</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <a href=\"./Init/Prelude.html#Fin.mk\">⟨</a><span class=\"fn\">upper</span>, <span class=\"fn\">h</span><a href=\"./Init/Prelude.html#Fin.mk\">⟩</a>)</span>)</span></span></div></div>","info":{"doc":"`State.Inv` holds for the CNF that we produce for a `Decl.false`.\n","docLink":"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.Inv_falseToCNF","kind":"theorem","line":380,"name":"Std.Sat.AIG.toCNF.State.Inv_falseToCNF","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/AIG/CNF.lean#L380-L386"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.Inv_append\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">toCNF</span>.<span class=\"name\">State</span>.<span class=\"name\">Inv_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aig✝</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cnf1 </span><span class=\"fn\">cnf2</span> : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF\">CNF</a> <span class=\"fn\"><span class=\"fn\">aig✝</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.CNFVar\">CNFVar</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h1</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.Inv\">Inv</a> <span class=\"fn\">cnf1</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h2</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.Inv\">Inv</a> <span class=\"fn\">cnf2</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.Inv\">Inv</a> (<span class=\"fn\">cnf1</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cnf2</span>)</span></div></div>","info":{"doc":"Combining two CNFs for which `State.Inv` holds preserves `State.Inv`.\n","docLink":"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.Inv_append","kind":"theorem","line":369,"name":"Std.Sat.AIG.toCNF.State.Inv_append","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/AIG/CNF.lean#L369-L378"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.Inv_nil\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">toCNF</span>.<span class=\"name\">State</span>.<span class=\"name\">Inv_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.Inv\">Inv</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span></div></div>","info":{"doc":"The `State` invariant always holds when we have an empty CNF.\n","docLink":"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.Inv_nil","kind":"theorem","line":363,"name":"Std.Sat.AIG.toCNF.State.Inv_nil","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/AIG/CNF.lean#L363-L367"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.Inv\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">toCNF</span>.<span class=\"name\">State</span>.<span class=\"name\">Inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cnf</span> : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF\">CNF</a> <span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.CNFVar\">CNFVar</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"The key invariant about the `State` itself (without cache): The CNF we produce is always satisfiable\nat `cnfSatAssignment`.\n","docLink":"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.State.Inv","kind":"def","line":356,"name":"Std.Sat.AIG.toCNF.State.Inv","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/AIG/CNF.lean#L356-L361"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.addGate\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">toCNF</span>.<span class=\"name\">Cache</span>.<span class=\"name\">addGate</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cnf</span> : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF\">CNF</a> <span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.CNFVar\">CNFVar</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Fanin\">Fanin</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cache</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache\">Cache</a> <span class=\"fn\">aig</span> <span class=\"fn\">cnf</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hlb</span> : <span class=\"fn\"><span class=\"fn\">lhs</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Fanin.gate\">gate</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cache</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.marks\">marks</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hrb</span> : <span class=\"fn\"><span class=\"fn\">rhs</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Fanin.gate\">gate</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cache</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.marks\">marks</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">htip</span> : <span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">idx</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Decl.gate\">Decl.gate</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><span class=\"fn\">cache</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.marks\">marks</a></span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\"><span class=\"fn\">lhs</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Fanin.gate\">gate</a></span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hr</span> : <span class=\"fn\"><span class=\"fn\">cache</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.marks\">marks</a></span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\"><span class=\"fn\">rhs</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Fanin.gate\">gate</a></span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">out</span> <a href=\"./Init/Prelude.html#Subtype\">:</a>   <span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache\">Cache</a> <span class=\"fn\">aig</span>\n    (<span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.Decl.gateToCNF\">Decl.gateToCNF</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <a href=\"./Init/Prelude.html#Fin.mk\">⟨</a><span class=\"fn\">idx</span>, <span class=\"fn\">h</span><a href=\"./Init/Prelude.html#Fin.mk\">⟩</a>)</span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <a href=\"./Init/Prelude.html#Fin.mk\">⟨</a><span class=\"fn\"><span class=\"fn\">lhs</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Fanin.gate\">gate</a></span>, <span class=\"fn\">⋯</span><a href=\"./Init/Prelude.html#Fin.mk\">⟩</a>)</span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <a href=\"./Init/Prelude.html#Fin.mk\">⟨</a><span class=\"fn\"><span class=\"fn\">rhs</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Fanin.gate\">gate</a></span>, <span class=\"fn\">⋯</span><a href=\"./Init/Prelude.html#Fin.mk\">⟩</a>)</span> <span class=\"fn\"><span class=\"fn\">lhs</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Fanin.invert\">invert</a></span> <span class=\"fn\"><span class=\"fn\">rhs</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Fanin.invert\">invert</a></span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cnf</span>)</span> <a href=\"./Init/Prelude.html#Subtype\">//</a>   <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cache</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.IsExtensionBy\">IsExtensionBy</a></span> <span class=\"fn\">out</span> <span class=\"fn\">idx</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Subtype\">}</a></div></div>","info":{"doc":"Add a `Decl.gate` to a cache.\n","docLink":"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.addGate","kind":"def","line":311,"name":"Std.Sat.AIG.toCNF.Cache.addGate","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/AIG/CNF.lean#L311-L354"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.addAtom\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">toCNF</span>.<span class=\"name\">Cache</span>.<span class=\"name\">addAtom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cnf</span> : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF\">CNF</a> <span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.CNFVar\">CNFVar</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cache</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache\">Cache</a> <span class=\"fn\">aig</span> <span class=\"fn\">cnf</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">htip</span> : <span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">idx</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Decl.atom\">Decl.atom</a> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">out</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache\">Cache</a> <span class=\"fn\">aig</span> (<span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.Decl.atomToCNF\">Decl.atomToCNF</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <a href=\"./Init/Prelude.html#Fin.mk\">⟨</a><span class=\"fn\">idx</span>, <span class=\"fn\">h</span><a href=\"./Init/Prelude.html#Fin.mk\">⟩</a>)</span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <span class=\"fn\">a</span>)</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cnf</span>)</span> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cache</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.IsExtensionBy\">IsExtensionBy</a></span> <span class=\"fn\">out</span> <span class=\"fn\">idx</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Subtype\">}</a></div></div>","info":{"doc":"Add a `Decl.atom` to a cache.\n","docLink":"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.addAtom","kind":"def","line":282,"name":"Std.Sat.AIG.toCNF.Cache.addAtom","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/AIG/CNF.lean#L282-L309"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.addFalse\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">toCNF</span>.<span class=\"name\">Cache</span>.<span class=\"name\">addFalse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cnf</span> : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF\">CNF</a> <span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.CNFVar\">CNFVar</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cache</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache\">Cache</a> <span class=\"fn\">aig</span> <span class=\"fn\">cnf</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">htip</span> : <span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">idx</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Decl.false\">Decl.false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">out</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache\">Cache</a> <span class=\"fn\">aig</span> (<span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.Decl.falseToCNF\">Decl.falseToCNF</a> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <a href=\"./Init/Prelude.html#Fin.mk\">⟨</a><span class=\"fn\">idx</span>, <span class=\"fn\">h</span><a href=\"./Init/Prelude.html#Fin.mk\">⟩</a>)</span></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cnf</span>)</span> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cache</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.IsExtensionBy\">IsExtensionBy</a></span> <span class=\"fn\">out</span> <span class=\"fn\">idx</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Subtype\">}</a></div></div>","info":{"doc":"Add a `Decl.false` to a `Cache`.\n","docLink":"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.addFalse","kind":"def","line":252,"name":"Std.Sat.AIG.toCNF.Cache.addFalse","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/AIG/CNF.lean#L252-L280"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.init\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">toCNF</span>.<span class=\"name\">Cache</span>.<span class=\"name\">init</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache\">Cache</a> <span class=\"fn\">aig</span> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span></div></div>","info":{"doc":"A cache with no entries is valid for an empty CNF.\n","docLink":"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.init","kind":"def","line":244,"name":"Std.Sat.AIG.toCNF.Cache.init","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/AIG/CNF.lean#L244-L250"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.IsExtensionBy_set\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">toCNF</span>.<span class=\"name\">Cache</span>.<span class=\"name\">IsExtensionBy_set</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cnf1 </span><span class=\"fn\">cnf2</span> : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF\">CNF</a> <span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.CNFVar\">CNFVar</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cache1</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache\">Cache</a> <span class=\"fn\">aig</span> <span class=\"fn\">cnf1</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cache2</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache\">Cache</a> <span class=\"fn\">aig</span> <span class=\"fn\">cnf2</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hbound</span> : <span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cache1</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.marks\">marks</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">cache2</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.marks\">marks</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cache1</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.marks\">marks</a></span>.<a href=\"./Init/Data/Array/Set.html#Array.set\">set</a></span> <span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <span class=\"fn\">hbound</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cache1</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.IsExtensionBy\">IsExtensionBy</a></span> <span class=\"fn\">cache2</span> <span class=\"fn\">idx</span> <span class=\"fn\">⋯</span></span></div></div>","info":{"doc":"","docLink":"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.IsExtensionBy_set","kind":"theorem","line":236,"name":"Std.Sat.AIG.toCNF.Cache.IsExtensionBy_set","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/AIG/CNF.lean#L236-L242"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.IsExtensionBy_rfl\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">toCNF</span>.<span class=\"name\">Cache</span>.<span class=\"name\">IsExtensionBy_rfl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cnf</span> : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF\">CNF</a> <span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.CNFVar\">CNFVar</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">omega</span> : <span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cache</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache\">Cache</a> <span class=\"fn\">aig</span> <span class=\"fn\">cnf</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cache</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.marks\">marks</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hmarked</span> : <span class=\"fn\"><span class=\"fn\">cache</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.marks\">marks</a></span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">idx</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cache</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.IsExtensionBy\">IsExtensionBy</a></span> <span class=\"fn\">cache</span> <span class=\"fn\">idx</span> <span class=\"fn\">⋯</span></span></div></div>","info":{"doc":"Cache extension is a reflexive relation.\n","docLink":"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.IsExtensionBy_rfl","kind":"theorem","line":226,"name":"Std.Sat.AIG.toCNF.Cache.IsExtensionBy_rfl","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/AIG/CNF.lean#L226-L234"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.IsExtensionBy_trans_right\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">toCNF</span>.<span class=\"name\">Cache</span>.<span class=\"name\">IsExtensionBy_trans_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cnf1 </span><span class=\"fn\">cnf2 </span><span class=\"fn\">cnf3</span> : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF\">CNF</a> <span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.CNFVar\">CNFVar</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">new1</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hnew1</span> : <span class=\"fn\">new1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">new2</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hnew2</span> : <span class=\"fn\">new2</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cache1</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache\">Cache</a> <span class=\"fn\">aig</span> <span class=\"fn\">cnf1</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cache2</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache\">Cache</a> <span class=\"fn\">aig</span> <span class=\"fn\">cnf2</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cache3</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache\">Cache</a> <span class=\"fn\">aig</span> <span class=\"fn\">cnf3</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h12</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cache1</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.IsExtensionBy\">IsExtensionBy</a></span> <span class=\"fn\">cache2</span> <span class=\"fn\">new1</span> <span class=\"fn\">hnew1</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h23</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cache2</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.IsExtensionBy\">IsExtensionBy</a></span> <span class=\"fn\">cache3</span> <span class=\"fn\">new2</span> <span class=\"fn\">hnew2</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cache1</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.IsExtensionBy\">IsExtensionBy</a></span> <span class=\"fn\">cache3</span> <span class=\"fn\">new2</span> <span class=\"fn\">hnew2</span></span></div></div>","info":{"doc":"","docLink":"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.IsExtensionBy_trans_right","kind":"theorem","line":214,"name":"Std.Sat.AIG.toCNF.Cache.IsExtensionBy_trans_right","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/AIG/CNF.lean#L214-L224"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.IsExtensionBy_trans_left\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">toCNF</span>.<span class=\"name\">Cache</span>.<span class=\"name\">IsExtensionBy_trans_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cnf1 </span><span class=\"fn\">cnf2 </span><span class=\"fn\">cnf3</span> : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF\">CNF</a> <span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.CNFVar\">CNFVar</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">new1</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hnew1</span> : <span class=\"fn\">new1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">new2</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hnew2</span> : <span class=\"fn\">new2</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cache1</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache\">Cache</a> <span class=\"fn\">aig</span> <span class=\"fn\">cnf1</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cache2</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache\">Cache</a> <span class=\"fn\">aig</span> <span class=\"fn\">cnf2</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cache3</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache\">Cache</a> <span class=\"fn\">aig</span> <span class=\"fn\">cnf3</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h12</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cache1</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.IsExtensionBy\">IsExtensionBy</a></span> <span class=\"fn\">cache2</span> <span class=\"fn\">new1</span> <span class=\"fn\">hnew1</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h23</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cache2</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.IsExtensionBy\">IsExtensionBy</a></span> <span class=\"fn\">cache3</span> <span class=\"fn\">new2</span> <span class=\"fn\">hnew2</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cache1</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.IsExtensionBy\">IsExtensionBy</a></span> <span class=\"fn\">cache3</span> <span class=\"fn\">new1</span> <span class=\"fn\">hnew1</span></span></div></div>","info":{"doc":"","docLink":"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.IsExtensionBy_trans_left","kind":"theorem","line":200,"name":"Std.Sat.AIG.toCNF.Cache.IsExtensionBy_trans_left","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/AIG/CNF.lean#L200-L212"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.IsExtensionBy.trueAt\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">toCNF</span>.<span class=\"name\">Cache</span>.<span class=\"name\">IsExtensionBy</span>.<span class=\"name\">trueAt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cnf1 </span><span class=\"fn\">cnf2</span> : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF\">CNF</a> <span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.CNFVar\">CNFVar</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cache1</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache\">Cache</a> <span class=\"fn\">aig</span> <span class=\"fn\">cnf1</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cache2</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache\">Cache</a> <span class=\"fn\">aig</span> <span class=\"fn\">cnf2</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">new</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hnew</span> : <span class=\"fn\">new</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cache1</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.IsExtensionBy\">IsExtensionBy</a></span> <span class=\"fn\">cache2</span> <span class=\"fn\">new</span> <span class=\"fn\">hnew</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">cache2</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.marks\">marks</a></span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">new</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>","info":{"doc":"The second cache is true at the new index.\n","docLink":"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.IsExtensionBy.trueAt","kind":"theorem","line":198,"name":"Std.Sat.AIG.toCNF.Cache.IsExtensionBy.trueAt","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/AIG/CNF.lean#L198-L198"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.IsExtensionBy.extension\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">toCNF</span>.<span class=\"name\">Cache</span>.<span class=\"name\">IsExtensionBy</span>.<span class=\"name\">extension</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cnf1 </span><span class=\"fn\">cnf2</span> : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF\">CNF</a> <span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.CNFVar\">CNFVar</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cache1</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache\">Cache</a> <span class=\"fn\">aig</span> <span class=\"fn\">cnf1</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cache2</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache\">Cache</a> <span class=\"fn\">aig</span> <span class=\"fn\">cnf2</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">new</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hnew</span> : <span class=\"fn\">new</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cache1</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.IsExtensionBy\">IsExtensionBy</a></span> <span class=\"fn\">cache2</span> <span class=\"fn\">new</span> <span class=\"fn\">hnew</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hidx</span> : <span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cache1</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.marks\">marks</a></span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">idx</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\">cache2</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.marks\">marks</a></span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">idx</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></div></div>","info":{"doc":"No entry is invalidated.\n","docLink":"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.IsExtensionBy.extension","kind":"theorem","line":191,"name":"Std.Sat.AIG.toCNF.Cache.IsExtensionBy.extension","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/AIG/CNF.lean#L191-L191"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.IsExtensionBy.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">toCNF</span>.<span class=\"name\">Cache</span>.<span class=\"name\">IsExtensionBy</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cnf1 </span><span class=\"fn\">cnf2</span> : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF\">CNF</a> <span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.CNFVar\">CNFVar</a></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cache1</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache\">Cache</a> <span class=\"fn\">aig</span> <span class=\"fn\">cnf1</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cache2</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache\">Cache</a> <span class=\"fn\">aig</span> <span class=\"fn\">cnf2</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">new</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hnew</span> : <span class=\"fn\">new</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">extension</span> : <span class=\"fn\">∀ (<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) (<span class=\"fn\">hidx</span> : <span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cache1</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.marks\">marks</a></span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">idx</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\">cache2</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.marks\">marks</a></span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">idx</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">trueAt</span> : <span class=\"fn\"><span class=\"fn\">cache2</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.marks\">marks</a></span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">new</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">cache1</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.IsExtensionBy\">IsExtensionBy</a></span> <span class=\"fn\">cache2</span> <span class=\"fn\">new</span> <span class=\"fn\">hnew</span></span></div></div>","info":{"doc":"","docLink":"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.IsExtensionBy.mk","kind":"ctor","line":186,"name":"Std.Sat.AIG.toCNF.Cache.IsExtensionBy.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/AIG/CNF.lean#L186-L186"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.IsExtensionBy\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">toCNF</span>.<span class=\"name\">Cache</span>.<span class=\"name\">IsExtensionBy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cnf1 </span><span class=\"fn\">cnf2</span> : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF\">CNF</a> <span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.CNFVar\">CNFVar</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cache1</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache\">Cache</a> <span class=\"fn\">aig</span> <span class=\"fn\">cnf1</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cache2</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache\">Cache</a> <span class=\"fn\">aig</span> <span class=\"fn\">cnf2</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">new</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hnew</span> : <span class=\"fn\">new</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"We say that a cache extends another by an index when it doesn't invalidate any entry and has an\nentry for that index.\n","docLink":"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.IsExtensionBy","kind":"structure","line":182,"name":"Std.Sat.AIG.toCNF.Cache.IsExtensionBy","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/AIG/CNF.lean#L182-L198"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.inv\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">toCNF</span>.<span class=\"name\">Cache</span>.<span class=\"name\">inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cnf</span> : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF\">CNF</a> <span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.CNFVar\">CNFVar</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache\">Cache</a> <span class=\"fn\">aig</span> <span class=\"fn\">cnf</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.Inv\">Inv</a> <span class=\"fn\">cnf</span> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.marks\">marks</a></span> <span class=\"fn\">⋯</span></span></div></div>","info":{"doc":"The invariant to make sure that `marks` is well formed with respect to the `cnf`\n","docLink":"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.inv","kind":"theorem","line":180,"name":"Std.Sat.AIG.toCNF.Cache.inv","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/AIG/CNF.lean#L180-L180"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.hmarks\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">toCNF</span>.<span class=\"name\">Cache</span>.<span class=\"name\">hmarks</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cnf</span> : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF\">CNF</a> <span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.CNFVar\">CNFVar</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache\">Cache</a> <span class=\"fn\">aig</span> <span class=\"fn\">cnf</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.marks\">marks</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span></div></div>","info":{"doc":"There are always as many marks as AIG nodes.\n","docLink":"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.hmarks","kind":"theorem","line":176,"name":"Std.Sat.AIG.toCNF.Cache.hmarks","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/AIG/CNF.lean#L176-L176"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.marks\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">toCNF</span>.<span class=\"name\">Cache</span>.<span class=\"name\">marks</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cnf</span> : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF\">CNF</a> <span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.CNFVar\">CNFVar</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache\">Cache</a> <span class=\"fn\">aig</span> <span class=\"fn\">cnf</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Keeps track of AIG nodes that we already turned into CNF.\n","docLink":"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.marks","kind":"def","line":172,"name":"Std.Sat.AIG.toCNF.Cache.marks","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/AIG/CNF.lean#L172-L172"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">toCNF</span>.<span class=\"name\">Cache</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cnf</span> : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF\">CNF</a> <span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.CNFVar\">CNFVar</a></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">marks</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hmarks</span> : <span class=\"fn\"><span class=\"fn\">marks</span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inv</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.Inv\">Inv</a> <span class=\"fn\">cnf</span> <span class=\"fn\">marks</span> <span class=\"fn\">hmarks</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache\">Cache</a> <span class=\"fn\">aig</span> <span class=\"fn\">cnf</span></span></div></div>","info":{"doc":"","docLink":"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.mk","kind":"ctor","line":168,"name":"Std.Sat.AIG.toCNF.Cache.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/AIG/CNF.lean#L168-L168"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">toCNF</span>.<span class=\"name\">Cache</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cnf</span> : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF\">CNF</a> <span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.CNFVar\">CNFVar</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The CNF cache. It keeps track of AIG nodes that we already turned into CNF to avoid adding the same\nCNF twice.\n","docLink":"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache","kind":"structure","line":164,"name":"Std.Sat.AIG.toCNF.Cache","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/AIG/CNF.lean#L164-L180"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.Inv_init\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">toCNF</span>.<span class=\"name\">Cache</span>.<span class=\"name\">Inv_init</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.Inv\">Inv</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <span class=\"fn\">(<a href=\"./Init/Data/Array/Basic.html#Array.replicate\">Array.replicate</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span> <span class=\"fn\">⋯</span></span></div></div>","info":{"doc":"The `Cache` invariant always holds for an empty CNF when all nodes are unmarked.\n","docLink":"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.Inv_init","kind":"theorem","line":156,"name":"Std.Sat.AIG.toCNF.Cache.Inv_init","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/AIG/CNF.lean#L156-L162"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.Inv\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">toCNF</span>.<span class=\"name\">Cache</span>.<span class=\"name\">Inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cnf</span> : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF\">CNF</a> <span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.CNFVar\">CNFVar</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">marks</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hmarks</span> : <span class=\"fn\"><span class=\"fn\">marks</span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"The central invariant for the `Cache`.\n\nRelate satisfiability results about our produced CNF to satisfiability results about the AIG that\nwe are processing. The intuition for this is: if a node is marked, its CNF is already part of the\ncurrent CNF. Thus the current CNF is already mirroring the semantics of the marked node.\nThis means that if the CNF is satisfiable at some assignment, we can evaluate the marked node under\nthe atom part of that assignment and will get the value that was assigned to the corresponding\nauxiliary variable as a result.\n","docLink":"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.Cache.Inv","kind":"def","line":139,"name":"Std.Sat.AIG.toCNF.Cache.Inv","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/AIG/CNF.lean#L139-L153"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.satAssignment_inr\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">toCNF</span>.<span class=\"name\">satAssignment_inr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">assign1</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.cnfSatAssignment\">cnfSatAssignment</a> <span class=\"fn\">aig</span> <span class=\"fn\">assign1</span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">⟦</a><span class=\"fn\">assign1</span><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">,</a> <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Entrypoint.mk\">{</a> <span class=\"fn\">aig</span> := <span class=\"fn\">aig</span>, <span class=\"fn\">ref</span> := <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Ref.mk\">{</a> <span class=\"fn\">gate</span> := <span class=\"fn\">↑<span class=\"fn\">x</span></span>, <span class=\"fn\">invert</span> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>, <span class=\"fn\">hgate</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Ref.mk\">}</a> <a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Entrypoint.mk\">}</a><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.denote\">⟧</a></div></div>","info":{"doc":"","docLink":"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.satAssignment_inr","kind":"theorem","line":134,"name":"Std.Sat.AIG.toCNF.satAssignment_inr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/AIG/CNF.lean#L134-L137"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.satAssignment_inl\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">toCNF</span>.<span class=\"name\">satAssignment_inl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">assign1</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.cnfSatAssignment\">cnfSatAssignment</a> <span class=\"fn\">aig</span> <span class=\"fn\">assign1</span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">assign1</span> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.satAssignment_inl","kind":"theorem","line":130,"name":"Std.Sat.AIG.toCNF.satAssignment_inl","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/AIG/CNF.lean#L130-L132"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.cnfSatAssignment\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">toCNF</span>.<span class=\"name\">cnfSatAssignment</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">assign1</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.CNFVar\">CNFVar</a></span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Given an atom assignment, produce an assignment that will always satisfy the CNF generated by our\nTseitin transformation. This is done by combining the atom assignment with an assignment for the\nauxiliary variables, that just evaluates the AIG at the corresponding node.\n","docLink":"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.cnfSatAssignment","kind":"def","line":122,"name":"Std.Sat.AIG.toCNF.cnfSatAssignment","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/AIG/CNF.lean#L122-L128"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.projectRightAssign_property\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">toCNF</span>.<span class=\"name\">projectRightAssign_property</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aig✝</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">assign</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig✝</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.CNFVar\">CNFVar</a></span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hx</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig✝</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.projectRightAssign\">projectRightAssign</a> <span class=\"fn\">assign</span> <span class=\"fn\">x</span> <span class=\"fn\">hx</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">assign</span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inr\">Sum.inr</a> <a href=\"./Init/Prelude.html#Fin.mk\">⟨</a><span class=\"fn\">x</span>, <span class=\"fn\">hx</span><a href=\"./Init/Prelude.html#Fin.mk\">⟩</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.projectRightAssign_property","kind":"theorem","line":117,"name":"Std.Sat.AIG.toCNF.projectRightAssign_property","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/AIG/CNF.lean#L117-L120"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.projectLeftAssign_property\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">toCNF</span>.<span class=\"name\">projectLeftAssign_property</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aig✝</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">assign</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig✝</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.CNFVar\">CNFVar</a></span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.projectLeftAssign\">projectLeftAssign</a> <span class=\"fn\">assign</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">assign</span> <span class=\"fn\">(<a href=\"./Init/Core.html#Sum.inl\">Sum.inl</a> <span class=\"fn\">x</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.projectLeftAssign_property","kind":"theorem","line":113,"name":"Std.Sat.AIG.toCNF.projectLeftAssign_property","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/AIG/CNF.lean#L113-L115"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.projectRightAssign\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">toCNF</span>.<span class=\"name\">projectRightAssign</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">assign</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.CNFVar\">CNFVar</a></span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Project the auxiliary variable assignment out of a CNF assignment\n","docLink":"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.projectRightAssign","kind":"def","line":107,"name":"Std.Sat.AIG.toCNF.projectRightAssign","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/AIG/CNF.lean#L107-L111"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.projectLeftAssign\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">toCNF</span>.<span class=\"name\">projectLeftAssign</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">assign</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.CNFVar\">CNFVar</a></span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Project the atom assignment out of a CNF assignment\n","docLink":"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.projectLeftAssign","kind":"def","line":102,"name":"Std.Sat.AIG.toCNF.projectLeftAssign","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/AIG/CNF.lean#L102-L105"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.mixAssigns\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">toCNF</span>.<span class=\"name\">mixAssigns</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">assign1</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">assign2</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span></span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.CNFVar\">CNFVar</a></span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Mix:\n1. An assignment for AIG atoms\n2. An assignment for auxiliary Tseitin variables\ninto an assignment that can be used by a CNF produced by our Tseitin transformation.\n","docLink":"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.toCNF.mixAssigns","kind":"def","line":91,"name":"Std.Sat.AIG.toCNF.mixAssigns","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/AIG/CNF.lean#L91-L100"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.CNFVar\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">CNFVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">AIG</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.CNFVar","kind":"def","line":87,"name":"Std.Sat.AIG.CNFVar","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/AIG/CNF.lean#L87-L87"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.Decl.gateToCNF_eval\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">Decl</span>.<span class=\"name\">gateToCNF_eval</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">output </span><span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <span class=\"fn\">α✝</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">linv </span><span class=\"fn\">rinv</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">assign</span> : <span class=\"fn\"><span class=\"fn\">α✝</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.eval\">CNF.eval</a> <span class=\"fn\">assign</span> <span class=\"fn\">(<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.Decl.gateToCNF\">gateToCNF</a> <span class=\"fn\">output</span> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">linv</span> <span class=\"fn\">rinv</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><span class=\"fn\">assign</span> <span class=\"fn\">output</span></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> ((<span class=\"fn\"><span class=\"fn\">assign</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Data/Bool.html#Bool.xor\">^^</a> <span class=\"fn\">linv</span>) <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> (<span class=\"fn\"><span class=\"fn\">assign</span> <span class=\"fn\">rhs</span></span> <a href=\"./Init/Data/Bool.html#Bool.xor\">^^</a> <span class=\"fn\">rinv</span>)))</div></div>","info":{"doc":"","docLink":"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.Decl.gateToCNF_eval","kind":"theorem","line":71,"name":"Std.Sat.AIG.Decl.gateToCNF_eval","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/AIG/CNF.lean#L71-L83"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.Decl.atomToCNF_eval\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">Decl</span>.<span class=\"name\">atomToCNF_eval</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">output </span><span class=\"fn\">a</span> : <span class=\"fn\">α✝</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">assign</span> : <span class=\"fn\"><span class=\"fn\">α✝</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.eval\">CNF.eval</a> <span class=\"fn\">assign</span> <span class=\"fn\">(<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.Decl.atomToCNF\">atomToCNF</a> <span class=\"fn\">output</span> <span class=\"fn\">a</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><span class=\"fn\">assign</span> <span class=\"fn\">output</span></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><span class=\"fn\">assign</span> <span class=\"fn\">a</span></span>)</div></div>","info":{"doc":"","docLink":"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.Decl.atomToCNF_eval","kind":"theorem","line":62,"name":"Std.Sat.AIG.Decl.atomToCNF_eval","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/AIG/CNF.lean#L62-L69"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.Decl.falseToCNF_eval\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">Decl</span>.<span class=\"name\">falseToCNF_eval</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">output</span> : <span class=\"fn\">α✝</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">assign</span> : <span class=\"fn\"><span class=\"fn\">α✝</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.eval\">CNF.eval</a> <span class=\"fn\">assign</span> <span class=\"fn\">(<a href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.Decl.falseToCNF\">falseToCNF</a> <span class=\"fn\">output</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><span class=\"fn\">assign</span> <span class=\"fn\">output</span></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <a href=\"./Init/Prelude.html#Bool.false\">Bool.false</a>)</div></div>","info":{"doc":"","docLink":"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.Decl.falseToCNF_eval","kind":"theorem","line":55,"name":"Std.Sat.AIG.Decl.falseToCNF_eval","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/AIG/CNF.lean#L55-L60"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.Decl.gateToCNF\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">Decl</span>.<span class=\"name\">gateToCNF</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">output </span><span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">linv </span><span class=\"fn\">rinv</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF\">CNF</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Produce a Tseitin style CNF for a `Decl.gate`, using `output` as the tree node variable.\n","docLink":"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.Decl.gateToCNF","kind":"def","line":41,"name":"Std.Sat.AIG.Decl.gateToCNF","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/AIG/CNF.lean#L41-L53"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.Decl.atomToCNF\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">Decl</span>.<span class=\"name\">atomToCNF</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">output </span><span class=\"fn\">atom</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF\">CNF</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Produce a Tseitin style CNF for a `Decl.atom`, using `output` as the tree node variable.\n","docLink":"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.Decl.atomToCNF","kind":"def","line":35,"name":"Std.Sat.AIG.Decl.atomToCNF","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/AIG/CNF.lean#L35-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.Decl.falseToCNF\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">AIG</span>.<span class=\"name\">Decl</span>.<span class=\"name\">falseToCNF</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">output</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF\">CNF</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Produce a Tseitin style CNF for a `Decl.false`, using `output` as the tree node variable.\n","docLink":"./Std/Sat/AIG/CNF.html#Std.Sat.AIG.Decl.falseToCNF","kind":"def","line":29,"name":"Std.Sat.AIG.Decl.falseToCNF","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/AIG/CNF.lean#L29-L33"}}],"imports":["Std.Sat.CNF","Std.Sat.AIG.Basic","Std.Sat.AIG.Lemmas"],"instances":[],"name":"Std.Sat.AIG.CNF"}