{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.elabBlocks\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">elabBlocks</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">blocks</span> : <a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">TSyntaxArray</a> <span class=\"fn\">`block</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Block\">Block</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabInline\">ElabInline</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabBlock\">ElabBlock</a>)</span></span> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Part\">Part</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabInline\">ElabInline</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabBlock\">ElabBlock</a> <a href=\"./Init/Prelude.html#Empty\">Empty</a>)</span></span>)</span></div></div>","info":{"doc":"Elaborates a sequence of blocks into a document ","docLink":"./Lean/Elab/DocString.html#Lean.Doc.elabBlocks","kind":"def","line":1180,"name":"Lean.Doc.elabBlocks","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString.lean#L1180-L1186"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.elabBlock\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">elabBlock</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`block</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Block\">Block</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabInline\">ElabInline</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabBlock\">ElabBlock</a>)</span></span></div></div>","info":{"doc":"Elaborates the syntax of an block-level document element to an actual block-level document element.\n","docLink":"./Lean/Elab/DocString.html#Lean.Doc.elabBlock","kind":"opaque","line":974,"name":"Lean.Doc.elabBlock","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString.lean#L974-L1056"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.elabInline\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">elabInline</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`inline</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <a href=\"./Lean/DocString/Extension.html#Lean.ElabInline\">ElabInline</a>)</span></span></div></div>","info":{"doc":"Elaborates the syntax of an inline document element to an actual inline document element.\n","docLink":"./Lean/Elab/DocString.html#Lean.Doc.elabInline","kind":"opaque","line":894,"name":"Lean.Doc.elabInline","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString.lean#L894-L972"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.addBuiltinDocCommand\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">addBuiltinDocCommand</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">commandName </span><span class=\"fn\">wrapper</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Adds a builtin documentation command.\n\nShould be run during initialization.\n","docLink":"./Lean/Elab/DocString.html#Lean.Doc.addBuiltinDocCommand","kind":"def","line":783,"name":"Lean.Doc.addBuiltinDocCommand","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString.lean#L783-L789"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.addBuiltinDocDirective\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">addBuiltinDocDirective</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">directiveName </span><span class=\"fn\">wrapper</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Adds a builtin documentation directive.\n\nShould be run during initialization.\n","docLink":"./Lean/Elab/DocString.html#Lean.Doc.addBuiltinDocDirective","kind":"def","line":741,"name":"Lean.Doc.addBuiltinDocDirective","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString.lean#L741-L747"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.addBuiltinDocCodeBlock\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">addBuiltinDocCodeBlock</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">blockName </span><span class=\"fn\">wrapper</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Adds a builtin documentation code block.\n\nShould be run during initialization.\n","docLink":"./Lean/Elab/DocString.html#Lean.Doc.addBuiltinDocCodeBlock","kind":"def","line":700,"name":"Lean.Doc.addBuiltinDocCodeBlock","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString.lean#L700-L706"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.addBuiltinDocRole\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">addBuiltinDocRole</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">roleName </span><span class=\"fn\">wrapper</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Adds a builtin documentation role.\n\nShould be run during initialization.\n","docLink":"./Lean/Elab/DocString.html#Lean.Doc.addBuiltinDocRole","kind":"def","line":659,"name":"Lean.Doc.addBuiltinDocRole","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString.lean#L659-L665"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.addBuiltinCodeSuggestion\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">addBuiltinCodeSuggestion</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Adds a builtin documentation code suggestion provider.\n\nShould be run during initialization.\n","docLink":"./Lean/Elab/DocString.html#Lean.Doc.addBuiltinCodeSuggestion","kind":"def","line":617,"name":"Lean.Doc.addBuiltinCodeSuggestion","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString.lean#L617-L623"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.CodeSuggestion.moreInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">CodeSuggestion</span>.<span class=\"name\">moreInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DocString.html#Lean.Doc.CodeSuggestion\">CodeSuggestion</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"More information to show users ","docLink":"./Lean/Elab/DocString.html#Lean.Doc.CodeSuggestion.moreInfo","kind":"def","line":599,"name":"Lean.Doc.CodeSuggestion.moreInfo","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString.lean#L599-L599"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.CodeSuggestion.args\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">CodeSuggestion</span>.<span class=\"name\">args</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DocString.html#Lean.Doc.CodeSuggestion\">CodeSuggestion</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"The arguments it should receive, as a string. ","docLink":"./Lean/Elab/DocString.html#Lean.Doc.CodeSuggestion.args","kind":"def","line":597,"name":"Lean.Doc.CodeSuggestion.args","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString.lean#L597-L597"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.CodeSuggestion.role\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">CodeSuggestion</span>.<span class=\"name\">role</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DocString.html#Lean.Doc.CodeSuggestion\">CodeSuggestion</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"The name of the role to suggest. ","docLink":"./Lean/Elab/DocString.html#Lean.Doc.CodeSuggestion.role","kind":"def","line":595,"name":"Lean.Doc.CodeSuggestion.role","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString.lean#L595-L595"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.CodeSuggestion.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">CodeSuggestion</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">role</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args </span><span class=\"fn\">moreInfo</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.CodeSuggestion\">CodeSuggestion</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString.html#Lean.Doc.CodeSuggestion.mk","kind":"ctor","line":593,"name":"Lean.Doc.CodeSuggestion.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString.lean#L593-L593"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.CodeSuggestion\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">CodeSuggestion</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A suggestion about an applicable role ","docLink":"./Lean/Elab/DocString.html#Lean.Doc.CodeSuggestion","kind":"structure","line":592,"name":"Lean.Doc.CodeSuggestion","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString.lean#L592-L599"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.done\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">done</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`doc_arg</span>))</span> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Asserts that there are no further arguments to a documentation language extension.\n","docLink":"./Lean/Elab/DocString.html#Lean.Doc.done","kind":"def","line":489,"name":"Lean.Doc.done","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString.lean#L489-L495"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.getFlag\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">getFlag</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">default</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`doc_arg</span>))</span> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Retrieves a flag from the arguments to a documentation extension. Returns `default` if the flag is\nnot explicit set.\n","docLink":"./Lean/Elab/DocString.html#Lean.Doc.getFlag","kind":"def","line":470,"name":"Lean.Doc.getFlag","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString.lean#L470-L487"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.getMany\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">getMany</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.FromDocArg\">FromDocArg</a> <span class=\"fn\">Î±</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`doc_arg</span>))</span> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">Î±</span>)</span></span></div></div>","info":{"doc":"Retrieves a repeated named argument from the arguments to a documentation extension.\n","docLink":"./Lean/Elab/DocString.html#Lean.Doc.getMany","kind":"def","line":451,"name":"Lean.Doc.getMany","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString.lean#L451-L468"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.getNamed\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">getNamed</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.FromDocArg\">FromDocArg</a> <span class=\"fn\">Î±</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">default</span> : <span class=\"fn\">Î±</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`doc_arg</span>))</span> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">Î±</span></span></div></div>","info":{"doc":"Retrieves a named argument from the arguments to a documentation extension. Returns `default` if no\nsuch named argument was provided.\n","docLink":"./Lean/Elab/DocString.html#Lean.Doc.getNamed","kind":"def","line":435,"name":"Lean.Doc.getNamed","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString.lean#L435-L449"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.getPositional\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">getPositional</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.FromDocArg\">FromDocArg</a> <span class=\"fn\">Î±</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`doc_arg</span>))</span> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">Î±</span></span></div></div>","info":{"doc":"Retrieves the next positional argument from the arguments to a documentation extension. Throws\nan error if no positional arguments remain.\n","docLink":"./Lean/Elab/DocString.html#Lean.Doc.getPositional","kind":"def","line":416,"name":"Lean.Doc.getPositional","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString.lean#L416-L428"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.instFromDocArgMessageSeverity\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instFromDocArgMessageSeverity</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.FromDocArg\">FromDocArg</a> <a href=\"./Lean/Message.html#Lean.MessageSeverity\">MessageSeverity</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString.html#Lean.Doc.instFromDocArgMessageSeverity","kind":"instance","line":398,"name":"Lean.Doc.instFromDocArgMessageSeverity","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString.lean#L398-L414"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.instFromDocArgBool\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instFromDocArgBool</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.FromDocArg\">FromDocArg</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString.html#Lean.Doc.instFromDocArgBool","kind":"instance","line":381,"name":"Lean.Doc.instFromDocArgBool","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString.lean#L381-L389"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.instFromDocArgDataValue\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instFromDocArgDataValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.FromDocArg\">FromDocArg</a> <a href=\"./Lean/Data/KVMap.html#Lean.DataValue\">DataValue</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString.html#Lean.Doc.instFromDocArgDataValue","kind":"instance","line":367,"name":"Lean.Doc.instFromDocArgDataValue","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString.lean#L367-L379"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.instFromDocArgNumLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instFromDocArgNumLit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.FromDocArg\">FromDocArg</a> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.NumLit\">NumLit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString.html#Lean.Doc.instFromDocArgNumLit","kind":"instance","line":361,"name":"Lean.Doc.instFromDocArgNumLit","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString.lean#L361-L365"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.instFromDocArgNat\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instFromDocArgNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.FromDocArg\">FromDocArg</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString.html#Lean.Doc.instFromDocArgNat","kind":"instance","line":355,"name":"Lean.Doc.instFromDocArgNat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString.lean#L355-L359"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.instFromDocArgStrLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instFromDocArgStrLit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.FromDocArg\">FromDocArg</a> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.StrLit\">StrLit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString.html#Lean.Doc.instFromDocArgStrLit","kind":"instance","line":349,"name":"Lean.Doc.instFromDocArgStrLit","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString.lean#L349-L353"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.instFromDocArgString\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instFromDocArgString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.FromDocArg\">FromDocArg</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString.html#Lean.Doc.instFromDocArgString","kind":"instance","line":343,"name":"Lean.Doc.instFromDocArgString","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString.lean#L343-L347"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.instFromDocArgIdent\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instFromDocArgIdent</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.FromDocArg\">FromDocArg</a> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Ident\">Ident</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString.html#Lean.Doc.instFromDocArgIdent","kind":"instance","line":337,"name":"Lean.Doc.instFromDocArgIdent","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString.lean#L337-L341"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.instFromDocArgWithSyntax\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instFromDocArgWithSyntax</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.FromDocArg\">FromDocArg</a> <span class=\"fn\">Î±</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.FromDocArg\">FromDocArg</a> <span class=\"fn\">(<a href=\"./Lean/Elab/DocString.html#Lean.Doc.WithSyntax\">WithSyntax</a> <span class=\"fn\">Î±</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString.html#Lean.Doc.instFromDocArgWithSyntax","kind":"instance","line":334,"name":"Lean.Doc.instFromDocArgWithSyntax","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString.lean#L334-L335"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.instFromDocArgOption\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instFromDocArgOption</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.FromDocArg\">FromDocArg</a> <span class=\"fn\">Î±</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.FromDocArg\">FromDocArg</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">Î±</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString.html#Lean.Doc.instFromDocArgOption","kind":"instance","line":331,"name":"Lean.Doc.instFromDocArgOption","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString.lean#L331-L332"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.FromDocArg.fromDocArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">FromDocArg</span>.<span class=\"name\">fromDocArg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.FromDocArg\">FromDocArg</a> <span class=\"fn\">Î±</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocArg\">DocArg</a> â†’ <span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">Elab.TermElabM</a> <span class=\"fn\">Î±</span></span></span></div></div>","info":{"doc":"Converts a documentation extension's argument into a Lean value.\n","docLink":"./Lean/Elab/DocString.html#Lean.Doc.FromDocArg.fromDocArg","kind":"def","line":329,"name":"Lean.Doc.FromDocArg.fromDocArg","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString.lean#L329-L329"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.FromDocArg.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">FromDocArg</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fromDocArg</span> : <span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocArg\">DocArg</a> â†’ <span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">Elab.TermElabM</a> <span class=\"fn\">Î±</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.FromDocArg\">FromDocArg</a> <span class=\"fn\">Î±</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString.html#Lean.Doc.FromDocArg.mk","kind":"ctor","line":325,"name":"Lean.Doc.FromDocArg.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString.lean#L325-L325"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.FromDocArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">FromDocArg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A canonical way to convert a documentation extension's argument into a Lean value of type `Î±`.\n","docLink":"./Lean/Elab/DocString.html#Lean.Doc.FromDocArg","kind":"class","line":322,"name":"Lean.Doc.FromDocArg","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString.lean#L322-L329"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.WithSyntax.stx\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">WithSyntax</span>.<span class=\"name\">stx</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.WithSyntax\">WithSyntax</a> <span class=\"fn\">Î±</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>","info":{"doc":"The syntax that the value was derived from. ","docLink":"./Lean/Elab/DocString.html#Lean.Doc.WithSyntax.stx","kind":"def","line":320,"name":"Lean.Doc.WithSyntax.stx","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString.lean#L320-L320"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.WithSyntax.val\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">WithSyntax</span>.<span class=\"name\">val</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.WithSyntax\">WithSyntax</a> <span class=\"fn\">Î±</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">Î±</span></div></div>","info":{"doc":"The parsed value. ","docLink":"./Lean/Elab/DocString.html#Lean.Doc.WithSyntax.val","kind":"def","line":318,"name":"Lean.Doc.WithSyntax.val","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString.lean#L318-L318"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.WithSyntax.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">WithSyntax</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <span class=\"fn\">Î±</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.WithSyntax\">WithSyntax</a> <span class=\"fn\">Î±</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString.html#Lean.Doc.WithSyntax.mk","kind":"ctor","line":316,"name":"Lean.Doc.WithSyntax.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString.lean#L316-L316"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.WithSyntax\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">WithSyntax</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>","info":{"doc":"A value paired with the syntax it is derived from.\n\nThis can be used to provide hints and code actions.\n","docLink":"./Lean/Elab/DocString.html#Lean.Doc.WithSyntax","kind":"structure","line":311,"name":"Lean.Doc.WithSyntax","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString.lean#L311-L320"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.DocArg.ofSyntax\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">DocArg</span>.<span class=\"name\">ofSyntax</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`arg_val</span> â†’ <span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">Elab.TermElabM</a> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocArg\">DocArg</a></span></span></div></div>","info":{"doc":"Converts the syntax of a documentation argument into a suitable value.\n","docLink":"./Lean/Elab/DocString.html#Lean.Doc.DocArg.ofSyntax","kind":"def","line":302,"name":"Lean.Doc.DocArg.ofSyntax","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString.lean#L302-L309"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.DocArg.syntax\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">DocArg</span>.<span class=\"name\">syntax</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocArg\">DocArg</a> â†’ <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>","info":{"doc":"Returns the syntax from which a documentation argument was drawn, typically used to report errors.\n","docLink":"./Lean/Elab/DocString.html#Lean.Doc.DocArg.syntax","kind":"def","line":294,"name":"Lean.Doc.DocArg.syntax","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString.lean#L294-L300"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.instToMessageDataDocArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instToMessageDataDocArg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">ToMessageData</a> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocArg\">DocArg</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString.html#Lean.Doc.instToMessageDataDocArg","kind":"instance","line":288,"name":"Lean.Doc.instToMessageDataDocArg","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString.lean#L288-L292"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.DocArg.str\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">DocArg</span>.<span class=\"name\">str</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.StrLit\">StrLit</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocArg\">DocArg</a></div></div>","info":{"doc":"A string ","docLink":"./Lean/Elab/DocString.html#Lean.Doc.DocArg.str","kind":"ctor","line":285,"name":"Lean.Doc.DocArg.str","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString.lean#L285-L286"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.DocArg.num\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">DocArg</span>.<span class=\"name\">num</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.NumLit\">NumLit</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocArg\">DocArg</a></div></div>","info":{"doc":"A number ","docLink":"./Lean/Elab/DocString.html#Lean.Doc.DocArg.num","kind":"ctor","line":283,"name":"Lean.Doc.DocArg.num","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString.lean#L283-L284"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.DocArg.ident\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">DocArg</span>.<span class=\"name\">ident</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Ident\">Ident</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocArg\">DocArg</a></div></div>","info":{"doc":"An identifier ","docLink":"./Lean/Elab/DocString.html#Lean.Doc.DocArg.ident","kind":"ctor","line":281,"name":"Lean.Doc.DocArg.ident","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString.lean#L281-L282"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.DocArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">DocArg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"An argument provided to a docstring extension ","docLink":"./Lean/Elab/DocString.html#Lean.Doc.DocArg","kind":"inductive","line":279,"name":"Lean.Doc.DocArg","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString.lean#L279-L286"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.many\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">many</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>","info":{"doc":"Gadget that indicates that a function's parameter should be treated as a repeated (and thus\noptional) named argument when used in a docstring extension.\n","docLink":"./Lean/Elab/DocString.html#Lean.Doc.many","kind":"def","line":271,"name":"Lean.Doc.many","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString.lean#L271-L276"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.flag\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">flag</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">default</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Gadget that indicates that a function's parameter should be treated as a Boolean flag when used in\na docstring extension.\n","docLink":"./Lean/Elab/DocString.html#Lean.Doc.flag","kind":"def","line":265,"name":"Lean.Doc.flag","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString.lean#L265-L269"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM.exec\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">DocM</span>.<span class=\"name\">exec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">binders</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">act</span> : <span class=\"fn\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a> <span class=\"fn\">Î±</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">Elab.TermElabM</a> <span class=\"fn\">Î±</span></span></div></div>","info":{"doc":"Runs a documentation elaborator, discarding changes made to the environment.\n","docLink":"./Lean/Elab/DocString.html#Lean.Doc.DocM.exec","kind":"def","line":198,"name":"Lean.Doc.DocM.exec","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString.lean#L198-L261"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.instMonadLiftTermElabMDocM\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instMonadLiftTermElabMDocM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift\">MonadLift</a> <a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">Elab.TermElabM</a> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString.html#Lean.Doc.instMonadLiftTermElabMDocM","kind":"instance","line":188,"name":"Lean.Doc.instMonadLiftTermElabMDocM","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString.lean#L188-L195"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.instMonadStateOfStateDocM\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instMonadStateOfStateDocM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf\">MonadStateOf</a> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.State\">State</a> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString.html#Lean.Doc.instMonadStateOfStateDocM","kind":"instance","line":184,"name":"Lean.Doc.instMonadStateOfStateDocM","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString.lean#L184-L185"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.instMonadStateOfInternalStateDocM\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instMonadStateOfInternalStateDocM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf\">MonadStateOf</a> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.InternalState\">InternalState</a> <a href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\">DocM</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString.html#Lean.Doc.instMonadStateOfInternalStateDocM","kind":"instance","line":181,"name":"Lean.Doc.instMonadStateOfInternalStateDocM","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString.lean#L181-L182"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.DocM\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">DocM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The monad in which documentation is elaborated.\n","docLink":"./Lean/Elab/DocString.html#Lean.Doc.DocM","kind":"def","line":174,"name":"Lean.Doc.DocM","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString.lean#L174-L177"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.State.options\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">State</span>.<span class=\"name\">options</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DocString.html#Lean.Doc.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Data/Options.html#Lean.Options\">Options</a></div></div>","info":{"doc":"The options.\n\nThe `MonadLift TermElabM DocM` instance runs the lifted action with these options, so elaboration\ncommands that mutate this state cause it to take effect in subsequent commands.\n","docLink":"./Lean/Elab/DocString.html#Lean.Doc.State.options","kind":"def","line":172,"name":"Lean.Doc.State.options","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString.lean#L172-L172"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.State.lctx\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">State</span>.<span class=\"name\">lctx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DocString.html#Lean.Doc.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a></div></div>","info":{"doc":"The local context.\n\nThe `MonadLift TermElabM DocM` instance runs the lifted action in this context, so elaboration\ncommands that mutate this state cause it to take effect in subsequent commands.\n","docLink":"./Lean/Elab/DocString.html#Lean.Doc.State.lctx","kind":"def","line":165,"name":"Lean.Doc.State.lctx","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString.lean#L165-L165"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.State.openDecls\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">State</span>.<span class=\"name\">openDecls</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DocString.html#Lean.Doc.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Data/OpenDecl.html#Lean.OpenDecl\">OpenDecl</a></span></div></div>","info":{"doc":"The set of open declarations presently in force.\n\nThe `MonadLift TermElabM DocM` instance runs the lifted action in a context where these open\ndeclarations are used, so elaboration commands that mutate this state cause it to take effect in\nsubsequent commands.\n","docLink":"./Lean/Elab/DocString.html#Lean.Doc.State.openDecls","kind":"def","line":158,"name":"Lean.Doc.State.openDecls","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString.lean#L158-L158"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.State.scopes\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">State</span>.<span class=\"name\">scopes</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DocString.html#Lean.Doc.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/Command/Scope.html#Lean.Elab.Command.Scope\">Elab.Command.Scope</a></span></div></div>","info":{"doc":"The command elaboration scope stack.\n\nThese scopes are used when running commands inside of documentation. To keep examples\nself-contained, these scopes are initialized for each doc comment as if it were the beginning\nof a Lean file.\n","docLink":"./Lean/Elab/DocString.html#Lean.Doc.State.scopes","kind":"def","line":150,"name":"Lean.Doc.State.scopes","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString.lean#L150-L150"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">scopes</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/Command/Scope.html#Lean.Elab.Command.Scope\">Elab.Command.Scope</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">openDecls</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Data/OpenDecl.html#Lean.OpenDecl\">OpenDecl</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">options</span> : <a href=\"./Lean/Data/Options.html#Lean.Options\">Options</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DocString.html#Lean.Doc.State\">State</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DocString.html#Lean.Doc.State.mk","kind":"ctor","line":142,"name":"Lean.Doc.State.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString.lean#L142-L142"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The state used by `DocM`.\n","docLink":"./Lean/Elab/DocString.html#Lean.Doc.State","kind":"structure","line":139,"name":"Lean.Doc.State","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString.lean#L139-L172"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DocString.html#Lean.Doc.InternalState\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">InternalState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The internal state used by docstring elaboration ","docLink":"./Lean/Elab/DocString.html#Lean.Doc.InternalState","kind":"structure","line":134,"name":"Lean.Doc.InternalState","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DocString.lean#L134-L137"}}],"imports":["Lean.ScopedEnvExtension","Std.Data.HashMap","Lean.DocString.Types","Lean.Elab.Term.TermElabM","Lean.Elab.Command.Scope","Lean.DocString.Syntax","Lean.Meta.Hint"],"instances":[{"className":"MonadStateOf","name":"Lean.Doc.instMonadStateOfInternalStateDocM","typeNames":["Lean.Doc.InternalState","Lean.Doc.DocM"]},{"className":"MonadStateOf","name":"Lean.Doc.instMonadStateOfStateDocM","typeNames":["Lean.Doc.State","Lean.Doc.DocM"]},{"className":"MonadLift","name":"Lean.Doc.instMonadLiftTermElabMDocM","typeNames":["Lean.Elab.Term.TermElabM","Lean.Doc.DocM"]},{"className":"Lean.ToMessageData","name":"Lean.Doc.instToMessageDataDocArg","typeNames":["Lean.Doc.DocArg"]},{"className":"Lean.Doc.FromDocArg","name":"Lean.Doc.instFromDocArgOption","typeNames":["Option"]},{"className":"Lean.Doc.FromDocArg","name":"Lean.Doc.instFromDocArgWithSyntax","typeNames":["Lean.Doc.WithSyntax"]},{"className":"Lean.Doc.FromDocArg","name":"Lean.Doc.instFromDocArgIdent","typeNames":["Lean.Syntax.Ident"]},{"className":"Lean.Doc.FromDocArg","name":"Lean.Doc.instFromDocArgString","typeNames":["String"]},{"className":"Lean.Doc.FromDocArg","name":"Lean.Doc.instFromDocArgStrLit","typeNames":["Lean.Syntax.StrLit"]},{"className":"Lean.Doc.FromDocArg","name":"Lean.Doc.instFromDocArgNat","typeNames":["Nat"]},{"className":"Lean.Doc.FromDocArg","name":"Lean.Doc.instFromDocArgNumLit","typeNames":["Lean.Syntax.NumLit"]},{"className":"Lean.Doc.FromDocArg","name":"Lean.Doc.instFromDocArgDataValue","typeNames":["Lean.DataValue"]},{"className":"Lean.Doc.FromDocArg","name":"Lean.Doc.instFromDocArgBool","typeNames":["Bool"]},{"className":"Lean.Doc.FromDocArg","name":"Lean.Doc.instFromDocArgMessageSeverity","typeNames":["Lean.MessageSeverity"]}],"name":"Lean.Elab.DocString"}