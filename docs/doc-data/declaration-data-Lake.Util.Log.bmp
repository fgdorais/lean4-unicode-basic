{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.LoggerIO.run?'\"><span class=\"name\">Lake</span>.<span class=\"name\">LoggerIO</span>.<span class=\"name\">run?'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.LoggerIO\">LoggerIO</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">logger</span> : <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.LogEntry\">LogEntry</a> → <span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></span> := <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Lake/Util/Log.html#Lake.LogEntry\">LogEntry</a>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <a href=\"./Init/Prelude.html#Unit.unit\">(</a><a href=\"./Init/Prelude.html#Unit.unit\">)</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.LoggerIO.run?'","kind":"def","line":639,"name":"Lake.LoggerIO.run?'","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L639-L642"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.LoggerIO.run?\"><span class=\"name\">Lake</span>.<span class=\"name\">LoggerIO</span>.<span class=\"name\">run?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.LoggerIO\">LoggerIO</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a>)</span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.LoggerIO.run?","kind":"def","line":636,"name":"Lake.LoggerIO.run?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L636-L636"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.LoggerIO.captureLog\"><span class=\"name\">Lake</span>.<span class=\"name\">LoggerIO</span>.<span class=\"name\">captureLog</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.LoggerIO\">LoggerIO</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a>)</span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.LoggerIO.captureLog","kind":"def","line":630,"name":"Lake.LoggerIO.captureLog","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L630-L633"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.LoggerIO.toBaseIO\"><span class=\"name\">Lake</span>.<span class=\"name\">LoggerIO</span>.<span class=\"name\">toBaseIO</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.LoggerIO\">LoggerIO</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">minLv</span> : <a href=\"./Lake/Util/Log.html#Lake.LogLevel\">LogLevel</a> := <a href=\"./Lake/Util/Log.html#Lake.LogLevel.info\">LogLevel.info</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ansiMode</span> : <a href=\"./Lake/Util/Log.html#Lake.AnsiMode\">AnsiMode</a> := <a href=\"./Lake/Util/Log.html#Lake.AnsiMode.auto\">AnsiMode.auto</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">out</span> : <a href=\"./Lake/Util/Log.html#Lake.OutStream\">OutStream</a> := <a href=\"./Lake/Util/Log.html#Lake.OutStream.stderr\">OutStream.stderr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"Runs a `LoggerIO` action in `BaseIO`.\nPrints log entries of at least `minLv` to `out`.\n","docLink":"./Lake/Util/Log.html#Lake.LoggerIO.toBaseIO","kind":"def","line":620,"name":"Lake.LoggerIO.toBaseIO","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L620-L628"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instMonadLiftLogIOLoggerIO\"><span class=\"name\">Lake</span>.<span class=\"name\">instMonadLiftLogIOLoggerIO</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift\">MonadLift</a> <a href=\"./Lake/Util/Log.html#Lake.LogIO\">LogIO</a> <a href=\"./Lake/Util/Log.html#Lake.LoggerIO\">LoggerIO</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.instMonadLiftLogIOLoggerIO","kind":"instance","line":616,"name":"Lake.instMonadLiftLogIOLoggerIO","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L616-L616"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instMonadLiftIOLoggerIO\"><span class=\"name\">Lake</span>.<span class=\"name\">instMonadLiftIOLoggerIO</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift\">MonadLift</a> <a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Lake/Util/Log.html#Lake.LoggerIO\">LoggerIO</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.instMonadLiftIOLoggerIO","kind":"instance","line":615,"name":"Lake.instMonadLiftIOLoggerIO","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L615-L615"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instMonadErrorLoggerIO\"><span class=\"name\">Lake</span>.<span class=\"name\">instMonadErrorLoggerIO</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Error.html#Lake.MonadError\">MonadError</a> <a href=\"./Lake/Util/Log.html#Lake.LoggerIO\">LoggerIO</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.instMonadErrorLoggerIO","kind":"instance","line":614,"name":"Lake.instMonadErrorLoggerIO","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L614-L614"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.LoggerIO\"><span class=\"name\">Lake</span>.<span class=\"name\">LoggerIO</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A monad equipped with a log function and the ability to perform I/O.\nUnlike `LogIO`, log entries are not retained by the monad but instead eagerly\npassed to the log function.\n","docLink":"./Lake/Util/Log.html#Lake.LoggerIO","kind":"def","line":607,"name":"Lake.LoggerIO","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L607-L612"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.LogIO.captureLog\"><span class=\"name\">Lake</span>.<span class=\"name\">LogIO</span>.<span class=\"name\">captureLog</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.ELogT\">ELogT</a> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">log</span> : <a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a> := <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a>)</span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.LogIO.captureLog","kind":"def","line":603,"name":"Lake.LogIO.captureLog","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L603-L603"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.LogIO.toBaseIO\"><span class=\"name\">Lake</span>.<span class=\"name\">LogIO</span>.<span class=\"name\">toBaseIO</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.LogIO\">LogIO</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">minLv</span> : <a href=\"./Lake/Util/Log.html#Lake.LogLevel\">LogLevel</a> := <a href=\"./Lake/Util/Log.html#Lake.LogLevel.info\">LogLevel.info</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ansiMode</span> : <a href=\"./Lake/Util/Log.html#Lake.AnsiMode\">AnsiMode</a> := <a href=\"./Lake/Util/Log.html#Lake.AnsiMode.auto\">AnsiMode.auto</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">out</span> : <a href=\"./Lake/Util/Log.html#Lake.OutStream\">OutStream</a> := <a href=\"./Lake/Util/Log.html#Lake.OutStream.stderr\">OutStream.stderr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"Runs a `LogIO` action in `BaseIO`.\nPrints log entries of at least `minLv` to `out`.\n","docLink":"./Lake/Util/Log.html#Lake.LogIO.toBaseIO","kind":"def","line":586,"name":"Lake.LogIO.toBaseIO","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L586-L600"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instMonadLiftIOLogIO\"><span class=\"name\">Lake</span>.<span class=\"name\">instMonadLiftIOLogIO</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift\">MonadLift</a> <a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Lake/Util/Log.html#Lake.LogIO\">LogIO</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.instMonadLiftIOLogIO","kind":"instance","line":582,"name":"Lake.instMonadLiftIOLogIO","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L582-L582"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.LogIO\"><span class=\"name\">Lake</span>.<span class=\"name\">LogIO</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A monad equipped with a log, a log error position, and the ability to perform I/O. ","docLink":"./Lake/Util/Log.html#Lake.LogIO","kind":"def","line":579,"name":"Lake.LogIO","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L579-L580"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.ELogT.replayLog\"><span class=\"name\">Lake</span>.<span class=\"name\">ELogT</span>.<span class=\"name\">replayLog</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Basic.html#Alternative\">Alternative</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">logger</span> : <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.MonadLog\">MonadLog</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.ELogT\">ELogT</a> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Runs `self` in `n` and then replays the entries of the resulting log\nusing the new monad's `logger`. Translates an exception in this monad to\na `failure` in the new monad.\n","docLink":"./Lake/Util/Log.html#Lake.ELogT.replayLog","kind":"def","line":565,"name":"Lake.ELogT.replayLog","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L565-L575"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.ELogT.replayLog?\"><span class=\"name\">Lake</span>.<span class=\"name\">ELogT</span>.<span class=\"name\">replayLog?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">logger</span> : <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.MonadLog\">MonadLog</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.ELogT\">ELogT</a> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"Runs `self` in `n` and then replays the entries of the resulting log\nusing the new monad's `logger`. Translates an exception in this monad\nto a `none` result.\n","docLink":"./Lake/Util/Log.html#Lake.ELogT.replayLog?","kind":"def","line":553,"name":"Lake.ELogT.replayLog?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L553-L563"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.ELogT.takeAndRun\"><span class=\"name\">Lake</span>.<span class=\"name\">ELogT</span>.<span class=\"name\">takeAndRun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf\">MonadStateOf</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf\">MonadExceptOf</a> <a href=\"./Lake/Util/Log.html#Lake.Log.Pos\">Log.Pos</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.ELogT\">ELogT</a> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Run `self` with the log taken from the state of the monad `n`,\n\n**Warning:** If lifting `self` from `m` to `n` fails, the log will be lost.\nThus, this is best used when the lift cannot fail. This excludes the\nnative log position failure of `ELogT`, which are lifted safely.\n","docLink":"./Lake/Util/Log.html#Lake.ELogT.takeAndRun","kind":"def","line":538,"name":"Lake.ELogT.takeAndRun","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L538-L551"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.ELogT.catchLog\"><span class=\"name\">Lake</span>.<span class=\"name\">ELogT</span>.<span class=\"name\">catchLog</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a> → <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.LogT\">LogT</a> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.ELogT\">ELogT</a> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.LogT\">LogT</a> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.ELogT.catchLog","kind":"def","line":535,"name":"Lake.ELogT.catchLog","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L535-L536"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.ELogT.run?'\"><span class=\"name\">Lake</span>.<span class=\"name\">ELogT</span>.<span class=\"name\">run?'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.ELogT\">ELogT</a> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">log</span> : <a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a> := <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.ELogT.run?'","kind":"def","line":532,"name":"Lake.ELogT.run?'","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L532-L533"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.ELogT.run?\"><span class=\"name\">Lake</span>.<span class=\"name\">ELogT</span>.<span class=\"name\">run?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.ELogT\">ELogT</a> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">log</span> : <a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a> := <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a>)</span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.ELogT.run?","kind":"def","line":529,"name":"Lake.ELogT.run?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L529-L530"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.ELogT.toLogT?\"><span class=\"name\">Lake</span>.<span class=\"name\">ELogT</span>.<span class=\"name\">toLogT?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.ELogT\">ELogT</a> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.LogT\">LogT</a> <span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.ELogT.toLogT?","kind":"def","line":526,"name":"Lake.ELogT.toLogT?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L526-L527"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.ELogT.toLogT\"><span class=\"name\">Lake</span>.<span class=\"name\">ELogT</span>.<span class=\"name\">toLogT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.ELogT\">ELogT</a> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.LogT\">LogT</a> <span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Lake/Util/Log.html#Lake.Log.Pos\">Log.Pos</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.ELogT.toLogT","kind":"def","line":523,"name":"Lake.ELogT.toLogT","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L523-L524"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.ELogT.run'\"><span class=\"name\">Lake</span>.<span class=\"name\">ELogT</span>.<span class=\"name\">run'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.ELogT\">ELogT</a> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">log</span> : <a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a> := <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Lake/Util/Log.html#Lake.Log.Pos\">Log.Pos</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.ELogT.run'","kind":"def","line":520,"name":"Lake.ELogT.run'","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L520-L521"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.ELogT.run\"><span class=\"name\">Lake</span>.<span class=\"name\">ELogT</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.ELogT\">ELogT</a> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">log</span> : <a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a> := <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Lake/Util/Log.html#Lake.ELogResult\">ELogResult</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.ELogT.run","kind":"def","line":517,"name":"Lake.ELogT.run","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L517-L518"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instAlternativeELogTOfMonad\"><span class=\"name\">Lake</span>.<span class=\"name\">instAlternativeELogTOfMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Basic.html#Alternative\">Alternative</a> <span class=\"fn\">(<a href=\"./Lake/Util/Log.html#Lake.ELogT\">ELogT</a> <span class=\"fn\">m</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.instAlternativeELogTOfMonad","kind":"instance","line":513,"name":"Lake.instAlternativeELogTOfMonad","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L513-L513"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instMonadErrorELogTOfMonad\"><span class=\"name\">Lake</span>.<span class=\"name\">instMonadErrorELogTOfMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Error.html#Lake.MonadError\">MonadError</a> <span class=\"fn\">(<a href=\"./Lake/Util/Log.html#Lake.ELogT\">ELogT</a> <span class=\"fn\">m</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.instMonadErrorELogTOfMonad","kind":"instance","line":512,"name":"Lake.instMonadErrorELogTOfMonad","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L512-L512"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instMonadLogELogTOfMonad\"><span class=\"name\">Lake</span>.<span class=\"name\">instMonadLogELogTOfMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.MonadLog\">MonadLog</a> <span class=\"fn\">(<a href=\"./Lake/Util/Log.html#Lake.ELogT\">ELogT</a> <span class=\"fn\">m</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.instMonadLogELogTOfMonad","kind":"instance","line":511,"name":"Lake.instMonadLogELogTOfMonad","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L511-L511"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.ELogResult\"><span class=\"name\">Lake</span>.<span class=\"name\">ELogResult</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u_1</div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.ELogResult","kind":"def","line":509,"name":"Lake.ELogResult","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L509-L509"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.ELogT\"><span class=\"name\">Lake</span>.<span class=\"name\">ELogT</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A monad equipped with a log and the ability to error at some log position. ","docLink":"./Lake/Util/Log.html#Lake.ELogT","kind":"def","line":505,"name":"Lake.ELogT","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L505-L507"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.LogT.replayLog\"><span class=\"name\">Lake</span>.<span class=\"name\">LogT</span>.<span class=\"name\">replayLog</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">logger</span> : <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.MonadLog\">MonadLog</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.LogT\">LogT</a> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Runs `self` in `n` and then replays the entries of the resulting log\nusing the new monad's `logger`.\n","docLink":"./Lake/Util/Log.html#Lake.LogT.replayLog","kind":"def","line":492,"name":"Lake.LogT.replayLog","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L492-L501"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.LogT.takeAndRun\"><span class=\"name\">Lake</span>.<span class=\"name\">LogT</span>.<span class=\"name\">takeAndRun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf\">MonadStateOf</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Except.html#MonadFinally\">MonadFinally</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.LogT\">LogT</a> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Run `self` with the log taken from the state of the monad `n`.\n\n**Warning:** If lifting `self` from `m` to `n` fails, the log will be lost.\nThus, this is best used when the lift cannot fail.\n","docLink":"./Lake/Util/Log.html#Lake.LogT.takeAndRun","kind":"def","line":478,"name":"Lake.LogT.takeAndRun","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L478-L490"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.LogT.run'\"><span class=\"name\">Lake</span>.<span class=\"name\">LogT</span>.<span class=\"name\">run'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.LogT\">LogT</a> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">log</span> : <a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a> := <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.LogT.run'","kind":"def","line":475,"name":"Lake.LogT.run'","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L475-L476"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.LogT.run\"><span class=\"name\">Lake</span>.<span class=\"name\">LogT</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.LogT\">LogT</a> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">log</span> : <a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a> := <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a>)</span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.LogT.run","kind":"def","line":472,"name":"Lake.LogT.run","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L472-L473"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instMonadLogLogTOfMonad\"><span class=\"name\">Lake</span>.<span class=\"name\">instMonadLogLogTOfMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.MonadLog\">MonadLog</a> <span class=\"fn\">(<a href=\"./Lake/Util/Log.html#Lake.LogT\">LogT</a> <span class=\"fn\">m</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.instMonadLogLogTOfMonad","kind":"instance","line":468,"name":"Lake.instMonadLogLogTOfMonad","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L468-L468"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.LogT\"><span class=\"name\">Lake</span>.<span class=\"name\">LogT</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A monad equipped with a log. ","docLink":"./Lake/Util/Log.html#Lake.LogT","kind":"def","line":464,"name":"Lake.LogT","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L464-L466"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.ELog.alternative\"><span class=\"name\">Lake</span>.<span class=\"name\">ELog</span>.<span class=\"name\">alternative</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf\">MonadStateOf</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf\">MonadExceptOf</a> <a href=\"./Lake/Util/Log.html#Lake.Log.Pos\">Log.Pos</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Basic.html#Alternative\">Alternative</a> <span class=\"fn\">m</span></span></div></div>","info":{"doc":"`Alternative` instance for monads with `Log` state and `Log.Pos` errors. ","docLink":"./Lake/Util/Log.html#Lake.ELog.alternative","kind":"def","line":457,"name":"Lake.ELog.alternative","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L457-L462"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.ELog.orElse\"><span class=\"name\">Lake</span>.<span class=\"name\">ELog</span>.<span class=\"name\">orElse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf\">MonadStateOf</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf\">MonadExceptOf</a> <a href=\"./Lake/Util/Log.html#Lake.Log.Pos\">Log.Pos</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Unit\">Unit</a> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Performs `x`. If it fails, drop its log and perform `y`. ","docLink":"./Lake/Util/Log.html#Lake.ELog.orElse","kind":"def","line":451,"name":"Lake.ELog.orElse","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L451-L455"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.ELog.failure\"><span class=\"name\">Lake</span>.<span class=\"name\">ELog</span>.<span class=\"name\">failure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf\">MonadStateOf</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf\">MonadExceptOf</a> <a href=\"./Lake/Util/Log.html#Lake.Log.Pos\">Log.Pos</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Fail without logging anything. ","docLink":"./Lake/Util/Log.html#Lake.ELog.failure","kind":"def","line":446,"name":"Lake.ELog.failure","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L446-L449"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.ELog.monadError\"><span class=\"name\">Lake</span>.<span class=\"name\">ELog</span>.<span class=\"name\">monadError</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.MonadLog\">MonadLog</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf\">MonadStateOf</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf\">MonadExceptOf</a> <a href=\"./Lake/Util/Log.html#Lake.Log.Pos\">Log.Pos</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Error.html#Lake.MonadError\">MonadError</a> <span class=\"fn\">m</span></span></div></div>","info":{"doc":"`MonadError` instance for monads with `Log` state and `Log.Pos` errors. ","docLink":"./Lake/Util/Log.html#Lake.ELog.monadError","kind":"def","line":441,"name":"Lake.ELog.monadError","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L441-L444"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.ELog.error\"><span class=\"name\">Lake</span>.<span class=\"name\">ELog</span>.<span class=\"name\">error</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.MonadLog\">MonadLog</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf\">MonadStateOf</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf\">MonadExceptOf</a> <a href=\"./Lake/Util/Log.html#Lake.Log.Pos\">Log.Pos</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Throw with the logged error `message`. ","docLink":"./Lake/Util/Log.html#Lake.ELog.error","kind":"def","line":435,"name":"Lake.ELog.error","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L435-L439"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.withLoggedIO\"><span class=\"name\">Lake</span>.<span class=\"name\">withLoggedIO</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.MonadLog\">MonadLog</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Except.html#MonadFinally\">MonadFinally</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Captures IO in `x` into an informational log entry. ","docLink":"./Lake/Util/Log.html#Lake.withLoggedIO","kind":"def","line":427,"name":"Lake.withLoggedIO","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L427-L433"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.errorWithLog\"><span class=\"name\">Lake</span>.<span class=\"name\">errorWithLog</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf\">MonadStateOf</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf\">MonadExceptOf</a> <a href=\"./Lake/Util/Log.html#Lake.Log.Pos\">Log.Pos</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"Performs `x` and groups all logs generated into an error block. ","docLink":"./Lake/Util/Log.html#Lake.errorWithLog","kind":"def","line":419,"name":"Lake.errorWithLog","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L419-L425"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.withLogErrorPos\"><span class=\"name\">Lake</span>.<span class=\"name\">withLogErrorPos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf\">MonadStateOf</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf\">MonadExceptOf</a> <a href=\"./Lake/Util/Log.html#Lake.Log.Pos\">Log.Pos</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Performs `x` and backtracks any error to the log position before `x`. ","docLink":"./Lake/Util/Log.html#Lake.withLogErrorPos","kind":"def","line":412,"name":"Lake.withLogErrorPos","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L412-L417"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.withExtractLog\"><span class=\"name\">Lake</span>.<span class=\"name\">withExtractLog</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf\">MonadStateOf</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a>)</span></div></div>","info":{"doc":"Returns the log from `x` and its result while leaving it intact in the monad. ","docLink":"./Lake/Util/Log.html#Lake.withExtractLog","kind":"def","line":405,"name":"Lake.withExtractLog","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L405-L410"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.extractLog\"><span class=\"name\">Lake</span>.<span class=\"name\">extractLog</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf\">MonadStateOf</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a></span></div></div>","info":{"doc":"Returns the log from `x` while leaving it intact in the monad. ","docLink":"./Lake/Util/Log.html#Lake.extractLog","kind":"def","line":398,"name":"Lake.extractLog","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L398-L403"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.dropLogFrom\"><span class=\"name\">Lake</span>.<span class=\"name\">dropLogFrom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf\">MonadStateOf</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <a href=\"./Lake/Util/Log.html#Lake.Log.Pos\">Log.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></div></div>","info":{"doc":"Backtracks the monad's log to `pos`.\nUseful for discarding logged errors after catching an error position\nfrom an `ELogT` (e.g., `LogIO`).\n","docLink":"./Lake/Util/Log.html#Lake.dropLogFrom","kind":"def","line":390,"name":"Lake.dropLogFrom","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L390-L396"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.takeLogFrom\"><span class=\"name\">Lake</span>.<span class=\"name\">takeLogFrom</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf\">MonadStateOf</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <a href=\"./Lake/Util/Log.html#Lake.Log.Pos\">Log.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a></span></div></div>","info":{"doc":"Removes the monad's log starting at `pos` and returns it.\nUseful for extracting logged errors after catching an error position\nfrom an `ELogT` (e.g., `LogIO`).\n","docLink":"./Lake/Util/Log.html#Lake.takeLogFrom","kind":"def","line":382,"name":"Lake.takeLogFrom","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L382-L388"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.takeLog\"><span class=\"name\">Lake</span>.<span class=\"name\">takeLog</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf\">MonadStateOf</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a></span></div></div>","info":{"doc":"Removes the section monad's log starting and returns it. ","docLink":"./Lake/Util/Log.html#Lake.takeLog","kind":"def","line":378,"name":"Lake.takeLog","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L378-L380"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.getLogPos\"><span class=\"name\">Lake</span>.<span class=\"name\">getLogPos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Functor\">Functor</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf\">MonadStateOf</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lake/Util/Log.html#Lake.Log.Pos\">Log.Pos</a></span></div></div>","info":{"doc":"Returns the current end position of the monad's log (i.e., its size). ","docLink":"./Lake/Util/Log.html#Lake.getLogPos","kind":"def","line":374,"name":"Lake.getLogPos","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L374-L376"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.getLog\"><span class=\"name\">Lake</span>.<span class=\"name\">getLog</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf\">MonadStateOf</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a></span></div></div>","info":{"doc":"Returns the monad's log. ","docLink":"./Lake/Util/Log.html#Lake.getLog","kind":"def","line":370,"name":"Lake.getLog","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L370-L372"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.MonadLog.ofMonadState\"><span class=\"name\">Lake</span>.<span class=\"name\">MonadLog</span>.<span class=\"name\">ofMonadState</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf\">MonadStateOf</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.MonadLog\">MonadLog</a> <span class=\"fn\">m</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.MonadLog.ofMonadState","kind":"def","line":368,"name":"Lake.MonadLog.ofMonadState","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L368-L368"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.pushLogEntry\"><span class=\"name\">Lake</span>.<span class=\"name\">pushLogEntry</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf\">MonadStateOf</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lake/Util/Log.html#Lake.LogEntry\">LogEntry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></div></div>","info":{"doc":"Add a `LogEntry` to the end of the monad's `Log`. ","docLink":"./Lake/Util/Log.html#Lake.pushLogEntry","kind":"def","line":363,"name":"Lake.pushLogEntry","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L363-L366"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.Log.maxLv\"><span class=\"name\">Lake</span>.<span class=\"name\">Log</span>.<span class=\"name\">maxLv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">log</span> : <a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Util/Log.html#Lake.LogLevel\">LogLevel</a></div></div>","info":{"doc":"The max log level of entries in this log. If empty, returns `trace`. ","docLink":"./Lake/Util/Log.html#Lake.Log.maxLv","kind":"def","line":357,"name":"Lake.Log.maxLv","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L357-L359"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.Log.any\"><span class=\"name\">Lake</span>.<span class=\"name\">Log</span>.<span class=\"name\">any</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.LogEntry\">LogEntry</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">log</span> : <a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.Log.any","kind":"def","line":354,"name":"Lake.Log.any","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L354-L355"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.Log.filter\"><span class=\"name\">Lake</span>.<span class=\"name\">Log</span>.<span class=\"name\">filter</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.LogEntry\">LogEntry</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">log</span> : <a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.Log.filter","kind":"def","line":351,"name":"Lake.Log.filter","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L351-L352"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.Log.replay\"><span class=\"name\">Lake</span>.<span class=\"name\">Log</span>.<span class=\"name\">replay</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">logger</span> : <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.MonadLog\">MonadLog</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">log</span> : <a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.Log.replay","kind":"def","line":348,"name":"Lake.Log.replay","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L348-L349"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.Log.instToString\"><span class=\"name\">Lake</span>.<span class=\"name\">Log</span>.<span class=\"name\">instToString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.Log.instToString","kind":"instance","line":346,"name":"Lake.Log.instToString","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L346-L346"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.Log.toString\"><span class=\"name\">Lake</span>.<span class=\"name\">Log</span>.<span class=\"name\">toString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">log</span> : <a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.Log.toString","kind":"def","line":343,"name":"Lake.Log.toString","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L343-L344"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.Log.split\"><span class=\"name\">Lake</span>.<span class=\"name\">Log</span>.<span class=\"name\">split</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">log</span> : <a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <a href=\"./Lake/Util/Log.html#Lake.Log.Pos\">Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a></div></div>","info":{"doc":"Splits the log into two from `pos`.\nThe first log is from the start to `pos` (exclusive),\nand the second log is from `pos` (inclusive) to the end.\n","docLink":"./Lake/Util/Log.html#Lake.Log.split","kind":"def","line":335,"name":"Lake.Log.split","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L335-L341"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.Log.takeFrom\"><span class=\"name\">Lake</span>.<span class=\"name\">Log</span>.<span class=\"name\">takeFrom</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">log</span> : <a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <a href=\"./Lake/Util/Log.html#Lake.Log.Pos\">Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a></div></div>","info":{"doc":"Takes log entries before `pos` (exclusive). ","docLink":"./Lake/Util/Log.html#Lake.Log.takeFrom","kind":"def","line":331,"name":"Lake.Log.takeFrom","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L331-L333"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.Log.dropFrom\"><span class=\"name\">Lake</span>.<span class=\"name\">Log</span>.<span class=\"name\">dropFrom</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">log</span> : <a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <a href=\"./Lake/Util/Log.html#Lake.Log.Pos\">Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a></div></div>","info":{"doc":"Removes log entries after `pos` (inclusive). ","docLink":"./Lake/Util/Log.html#Lake.Log.dropFrom","kind":"def","line":327,"name":"Lake.Log.dropFrom","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L327-L329"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.Log.extract\"><span class=\"name\">Lake</span>.<span class=\"name\">Log</span>.<span class=\"name\">extract</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">log</span> : <a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">start </span><span class=\"fn\">stop</span> : <a href=\"./Lake/Util/Log.html#Lake.Log.Pos\">Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a></div></div>","info":{"doc":"Takes log entries between `start` (inclusive) and `stop` (exclusive). ","docLink":"./Lake/Util/Log.html#Lake.Log.extract","kind":"def","line":323,"name":"Lake.Log.extract","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L323-L325"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.Log.instAppend\"><span class=\"name\">Lake</span>.<span class=\"name\">Log</span>.<span class=\"name\">instAppend</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Append\">Append</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.Log.instAppend","kind":"instance","line":321,"name":"Lake.Log.instAppend","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L321-L321"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.Log.append\"><span class=\"name\">Lake</span>.<span class=\"name\">Log</span>.<span class=\"name\">append</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">log </span><span class=\"fn\">o</span> : <a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.Log.append","kind":"def","line":318,"name":"Lake.Log.append","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L318-L319"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.Log.push\"><span class=\"name\">Lake</span>.<span class=\"name\">Log</span>.<span class=\"name\">push</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">log</span> : <a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lake/Util/Log.html#Lake.LogEntry\">LogEntry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.Log.push","kind":"def","line":315,"name":"Lake.Log.push","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L315-L316"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.Log.endPos\"><span class=\"name\">Lake</span>.<span class=\"name\">Log</span>.<span class=\"name\">endPos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">log</span> : <a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Util/Log.html#Lake.Log.Pos\">Pos</a></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.Log.endPos","kind":"def","line":312,"name":"Lake.Log.endPos","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L312-L313"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.Log.hasEntries\"><span class=\"name\">Lake</span>.<span class=\"name\">Log</span>.<span class=\"name\">hasEntries</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">log</span> : <a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.Log.hasEntries","kind":"def","line":309,"name":"Lake.Log.hasEntries","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L309-L310"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.Log.isEmpty\"><span class=\"name\">Lake</span>.<span class=\"name\">Log</span>.<span class=\"name\">isEmpty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">log</span> : <a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.Log.isEmpty","kind":"def","line":306,"name":"Lake.Log.isEmpty","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L306-L307"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.Log.size\"><span class=\"name\">Lake</span>.<span class=\"name\">Log</span>.<span class=\"name\">size</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">log</span> : <a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.Log.size","kind":"def","line":303,"name":"Lake.Log.size","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L303-L304"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.Log.instEmptyCollection\"><span class=\"name\">Lake</span>.<span class=\"name\">Log</span>.<span class=\"name\">instEmptyCollection</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection\">EmptyCollection</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.Log.instEmptyCollection","kind":"instance","line":301,"name":"Lake.Log.instEmptyCollection","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L301-L301"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.Log.empty\"><span class=\"name\">Lake</span>.<span class=\"name\">Log</span>.<span class=\"name\">empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.Log.empty","kind":"def","line":298,"name":"Lake.Log.empty","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L298-L299"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instMaxPos\"><span class=\"name\">Lake</span>.<span class=\"name\">instMaxPos</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Max\">Max</a> <a href=\"./Lake/Util/Log.html#Lake.Log.Pos\">Log.Pos</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.instMaxPos","kind":"instance","line":294,"name":"Lake.instMaxPos","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L294-L294"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instMinPos\"><span class=\"name\">Lake</span>.<span class=\"name\">instMinPos</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Min\">Min</a> <a href=\"./Lake/Util/Log.html#Lake.Log.Pos\">Log.Pos</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.instMinPos","kind":"instance","line":293,"name":"Lake.instMinPos","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L293-L293"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instDecidableRelPosLe\"><span class=\"name\">Lake</span>.<span class=\"name\">instDecidableRelPosLe</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <a href=\"./Init/Prelude.html#LE.le\">LE.le</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.instDecidableRelPosLe","kind":"instance","line":291,"name":"Lake.instDecidableRelPosLe","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L291-L292"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instLEPos\"><span class=\"name\">Lake</span>.<span class=\"name\">instLEPos</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <a href=\"./Lake/Util/Log.html#Lake.Log.Pos\">Log.Pos</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.instLEPos","kind":"instance","line":290,"name":"Lake.instLEPos","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L290-L290"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instDecidableRelPosLt\"><span class=\"name\">Lake</span>.<span class=\"name\">instDecidableRelPosLt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <a href=\"./Init/Prelude.html#LT.lt\">LT.lt</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.instDecidableRelPosLt","kind":"instance","line":288,"name":"Lake.instDecidableRelPosLt","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L288-L289"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instLTPos\"><span class=\"name\">Lake</span>.<span class=\"name\">instLTPos</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <a href=\"./Lake/Util/Log.html#Lake.Log.Pos\">Log.Pos</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.instLTPos","kind":"instance","line":287,"name":"Lake.instLTPos","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L287-L287"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instOrdPos\"><span class=\"name\">Lake</span>.<span class=\"name\">instOrdPos</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <a href=\"./Lake/Util/Log.html#Lake.Log.Pos\">Log.Pos</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.instOrdPos","kind":"instance","line":286,"name":"Lake.instOrdPos","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L286-L286"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instOfNatPos\"><span class=\"name\">Lake</span>.<span class=\"name\">instOfNatPos</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat\">OfNat</a> <a href=\"./Lake/Util/Log.html#Lake.Log.Pos\">Log.Pos</a> <span class=\"fn\">0</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.instOfNatPos","kind":"instance","line":285,"name":"Lake.instOfNatPos","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L285-L285"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.Log.instDecidableEqPos.decEq\"><span class=\"name\">Lake</span>.<span class=\"name\">Log</span>.<span class=\"name\">instDecidableEqPos</span>.<span class=\"name\">decEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x✝ </span><span class=\"fn\">x✝¹</span> : <a href=\"./Lake/Util/Log.html#Lake.Log.Pos\">Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">x✝</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x✝¹</span>)</span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.Log.instDecidableEqPos.decEq","kind":"def","line":283,"name":"Lake.Log.instDecidableEqPos.decEq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L283-L283"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.Log.instDecidableEqPos\"><span class=\"name\">Lake</span>.<span class=\"name\">Log</span>.<span class=\"name\">instDecidableEqPos</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Lake/Util/Log.html#Lake.Log.Pos\">Pos</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.Log.instDecidableEqPos","kind":"instance","line":283,"name":"Lake.Log.instDecidableEqPos","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L283-L283"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.Log.instInhabitedPos.default\"><span class=\"name\">Lake</span>.<span class=\"name\">Log</span>.<span class=\"name\">instInhabitedPos</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Util/Log.html#Lake.Log.Pos\">Pos</a></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.Log.instInhabitedPos.default","kind":"def","line":283,"name":"Lake.Log.instInhabitedPos.default","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L283-L283"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.Log.instInhabitedPos\"><span class=\"name\">Lake</span>.<span class=\"name\">Log</span>.<span class=\"name\">instInhabitedPos</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lake/Util/Log.html#Lake.Log.Pos\">Pos</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.Log.instInhabitedPos","kind":"instance","line":283,"name":"Lake.Log.instInhabitedPos","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L283-L283"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.Log.Pos.val\"><span class=\"name\">Lake</span>.<span class=\"name\">Log</span>.<span class=\"name\">Pos</span>.<span class=\"name\">val</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lake/Util/Log.html#Lake.Log.Pos\">Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.Log.Pos.val","kind":"def","line":282,"name":"Lake.Log.Pos.val","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L282-L282"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.Log.Pos.mk\"><span class=\"name\">Lake</span>.<span class=\"name\">Log</span>.<span class=\"name\">Pos</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Util/Log.html#Lake.Log.Pos\">Pos</a></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.Log.Pos.mk","kind":"ctor","line":281,"name":"Lake.Log.Pos.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L281-L281"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.Log.Pos\"><span class=\"name\">Lake</span>.<span class=\"name\">Log</span>.<span class=\"name\">Pos</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A position in a `Log` (i.e., an array index). Can be past the log's end. ","docLink":"./Lake/Util/Log.html#Lake.Log.Pos","kind":"structure","line":280,"name":"Lake.Log.Pos","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L280-L283"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instFromJsonLog\"><span class=\"name\">Lake</span>.<span class=\"name\">instFromJsonLog</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Json/FromToJson/Basic.html#Lean.FromJson\">Lean.FromJson</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.instFromJsonLog","kind":"instance","line":278,"name":"Lake.instFromJsonLog","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L278-L278"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instToJsonLog\"><span class=\"name\">Lake</span>.<span class=\"name\">instToJsonLog</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Json/FromToJson/Basic.html#Lean.ToJson\">Lean.ToJson</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.instToJsonLog","kind":"instance","line":277,"name":"Lake.instToJsonLog","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L277-L277"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instInhabitedLog.default\"><span class=\"name\">Lake</span>.<span class=\"name\">instInhabitedLog</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.instInhabitedLog.default","kind":"def","line":275,"name":"Lake.instInhabitedLog.default","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L275-L275"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instInhabitedLog\"><span class=\"name\">Lake</span>.<span class=\"name\">instInhabitedLog</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.instInhabitedLog","kind":"instance","line":275,"name":"Lake.instInhabitedLog","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L275-L275"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.Log.entries\"><span class=\"name\">Lake</span>.<span class=\"name\">Log</span>.<span class=\"name\">entries</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lake/Util/Log.html#Lake.LogEntry\">LogEntry</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.Log.entries","kind":"def","line":274,"name":"Lake.Log.entries","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L274-L274"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.Log.mk\"><span class=\"name\">Lake</span>.<span class=\"name\">Log</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">entries</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lake/Util/Log.html#Lake.LogEntry\">LogEntry</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Util/Log.html#Lake.Log\">Log</a></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.Log.mk","kind":"ctor","line":273,"name":"Lake.Log.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L273-L273"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.Log\"><span class=\"name\">Lake</span>.<span class=\"name\">Log</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.Log","kind":"structure","line":273,"name":"Lake.Log","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L273-L275"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.MonadLogT.ignoreLog\"><span class=\"name\">Lake</span>.<span class=\"name\">MonadLogT</span>.<span class=\"name\">ignoreLog</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Pure\">Pure</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.MonadLogT\">MonadLogT</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.MonadLogT.ignoreLog","kind":"def","line":267,"name":"Lake.MonadLogT.ignoreLog","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L267-L268"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.MonadLogT.adaptMethods\"><span class=\"name\">Lake</span>.<span class=\"name\">MonadLogT</span>.<span class=\"name\">adaptMethods</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_3 → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m'</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_4 → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.MonadLog\">MonadLog</a> <span class=\"fn\">m</span></span> → <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.MonadLog\">MonadLog</a> <span class=\"fn\">m'</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.MonadLogT\">MonadLogT</a> <span class=\"fn\">m'</span> <span class=\"fn\">n</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.MonadLogT\">MonadLogT</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.MonadLogT.adaptMethods","kind":"def","line":263,"name":"Lake.MonadLogT.adaptMethods","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L263-L265"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.MonadLogT.instMonadLogOfMonadOfMonadLiftT\"><span class=\"name\">Lake</span>.<span class=\"name\">MonadLogT</span>.<span class=\"name\">instMonadLogOfMonadOfMonadLiftT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.MonadLog\">MonadLog</a> <span class=\"fn\">(<a href=\"./Lake/Util/Log.html#Lake.MonadLogT\">MonadLogT</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.MonadLogT.instMonadLogOfMonadOfMonadLiftT","kind":"instance","line":260,"name":"Lake.MonadLogT.instMonadLogOfMonadOfMonadLiftT","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L260-L261"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.MonadLogT.instInhabitedOfPure\"><span class=\"name\">Lake</span>.<span class=\"name\">MonadLogT</span>.<span class=\"name\">instInhabitedOfPure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_3 → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Pure\">Pure</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Lake/Util/Log.html#Lake.MonadLogT\">MonadLogT</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.MonadLogT.instInhabitedOfPure","kind":"instance","line":257,"name":"Lake.MonadLogT.instInhabitedOfPure","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L257-L258"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.MonadLogT\"><span class=\"name\">Lake</span>.<span class=\"name\">MonadLogT</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> v → <a href=\"./foundational_types.html\">Type</a> w</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max v w)</div></div>","info":{"doc":"A monad equipped with a `MonadLog` instance ","docLink":"./Lake/Util/Log.html#Lake.MonadLogT","kind":"def","line":251,"name":"Lake.MonadLogT","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L251-L253"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.OutStream.getLogger\"><span class=\"name\">Lake</span>.<span class=\"name\">OutStream</span>.<span class=\"name\">getLogger</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">out</span> : <a href=\"./Lake/Util/Log.html#Lake.OutStream\">OutStream</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">minLv</span> : <a href=\"./Lake/Util/Log.html#Lake.LogLevel\">LogLevel</a> := <a href=\"./Lake/Util/Log.html#Lake.LogLevel.info\">LogLevel.info</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ansiMode</span> : <a href=\"./Lake/Util/Log.html#Lake.AnsiMode\">AnsiMode</a> := <a href=\"./Lake/Util/Log.html#Lake.AnsiMode.auto\">AnsiMode.auto</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">(<a href=\"./Lake/Util/Log.html#Lake.MonadLog\">MonadLog</a> <span class=\"fn\">m</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.OutStream.getLogger","kind":"def","line":244,"name":"Lake.OutStream.getLogger","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L244-L249"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.MonadLog.stderr\"><span class=\"name\">Lake</span>.<span class=\"name\">MonadLog</span>.<span class=\"name\">stderr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">minLv</span> : <a href=\"./Lake/Util/Log.html#Lake.LogLevel\">LogLevel</a> := <a href=\"./Lake/Util/Log.html#Lake.LogLevel.info\">LogLevel.info</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ansiMode</span> : <a href=\"./Lake/Util/Log.html#Lake.AnsiMode\">AnsiMode</a> := <a href=\"./Lake/Util/Log.html#Lake.AnsiMode.auto\">AnsiMode.auto</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.MonadLog\">MonadLog</a> <span class=\"fn\">m</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.MonadLog.stderr","kind":"def","line":240,"name":"Lake.MonadLog.stderr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L240-L242"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.MonadLog.stdout\"><span class=\"name\">Lake</span>.<span class=\"name\">MonadLog</span>.<span class=\"name\">stdout</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">minLv</span> : <a href=\"./Lake/Util/Log.html#Lake.LogLevel\">LogLevel</a> := <a href=\"./Lake/Util/Log.html#Lake.LogLevel.info\">LogLevel.info</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ansiMode</span> : <a href=\"./Lake/Util/Log.html#Lake.AnsiMode\">AnsiMode</a> := <a href=\"./Lake/Util/Log.html#Lake.AnsiMode.auto\">AnsiMode.auto</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.MonadLog\">MonadLog</a> <span class=\"fn\">m</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.MonadLog.stdout","kind":"def","line":236,"name":"Lake.MonadLog.stdout","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L236-L238"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.OutStream.logger\"><span class=\"name\">Lake</span>.<span class=\"name\">OutStream</span>.<span class=\"name\">logger</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">out</span> : <a href=\"./Lake/Util/Log.html#Lake.OutStream\">OutStream</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">minLv</span> : <a href=\"./Lake/Util/Log.html#Lake.LogLevel\">LogLevel</a> := <a href=\"./Lake/Util/Log.html#Lake.LogLevel.info\">LogLevel.info</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ansiMode</span> : <a href=\"./Lake/Util/Log.html#Lake.AnsiMode\">AnsiMode</a> := <a href=\"./Lake/Util/Log.html#Lake.AnsiMode.auto\">AnsiMode.auto</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.MonadLog\">MonadLog</a> <span class=\"fn\">m</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.OutStream.logger","kind":"def","line":232,"name":"Lake.OutStream.logger","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L232-L234"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.OutStream.logEntry\"><span class=\"name\">Lake</span>.<span class=\"name\">OutStream</span>.<span class=\"name\">logEntry</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lake/Util/Log.html#Lake.OutStream\">OutStream</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lake/Util/Log.html#Lake.LogEntry\">LogEntry</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">minLv</span> : <a href=\"./Lake/Util/Log.html#Lake.LogLevel\">LogLevel</a> := <a href=\"./Lake/Util/Log.html#Lake.LogLevel.info\">LogLevel.info</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ansiMode</span> : <a href=\"./Lake/Util/Log.html#Lake.AnsiMode\">AnsiMode</a> := <a href=\"./Lake/Util/Log.html#Lake.AnsiMode.auto\">AnsiMode.auto</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.OutStream.logEntry","kind":"def","line":224,"name":"Lake.OutStream.logEntry","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L224-L230"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.MonadLog.error\"><span class=\"name\">Lake</span>.<span class=\"name\">MonadLog</span>.<span class=\"name\">error</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Basic.html#Alternative\">Alternative</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.MonadLog\">MonadLog</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.MonadLog.error","kind":"def","line":219,"name":"Lake.MonadLog.error","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L219-L220"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.MonadLog.stream\"><span class=\"name\">Lake</span>.<span class=\"name\">MonadLog</span>.<span class=\"name\">stream</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">out</span> : <a href=\"./Init/System/IO.html#IO.FS.Stream\">IO.FS.Stream</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">minLv</span> : <a href=\"./Lake/Util/Log.html#Lake.LogLevel\">LogLevel</a> := <a href=\"./Lake/Util/Log.html#Lake.LogLevel.info\">LogLevel.info</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">useAnsi</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.MonadLog\">MonadLog</a> <span class=\"fn\">m</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.MonadLog.stream","kind":"def","line":215,"name":"Lake.MonadLog.stream","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L215-L217"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.MonadLog.instOfMonadLift\"><span class=\"name\">Lake</span>.<span class=\"name\">MonadLog</span>.<span class=\"name\">instOfMonadLift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift\">MonadLift</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">methods</span> : <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.MonadLog\">MonadLog</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.MonadLog\">MonadLog</a> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.MonadLog.instOfMonadLift","kind":"instance","line":213,"name":"Lake.MonadLog.instOfMonadLift","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L213-L213"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.MonadLog.lift\"><span class=\"name\">Lake</span>.<span class=\"name\">MonadLog</span>.<span class=\"name\">lift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.MonadLog\">MonadLog</a> <span class=\"fn\">m</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.MonadLog\">MonadLog</a> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.MonadLog.lift","kind":"def","line":210,"name":"Lake.MonadLog.lift","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L210-L211"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.MonadLog.instInhabitedOfPure\"><span class=\"name\">Lake</span>.<span class=\"name\">MonadLog</span>.<span class=\"name\">instInhabitedOfPure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Pure\">Pure</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Lake/Util/Log.html#Lake.MonadLog\">MonadLog</a> <span class=\"fn\">m</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.MonadLog.instInhabitedOfPure","kind":"instance","line":208,"name":"Lake.MonadLog.instInhabitedOfPure","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L208-L208"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.MonadLog.nop\"><span class=\"name\">Lake</span>.<span class=\"name\">MonadLog</span>.<span class=\"name\">nop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Pure\">Pure</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.MonadLog\">MonadLog</a> <span class=\"fn\">m</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.MonadLog.nop","kind":"def","line":205,"name":"Lake.MonadLog.nop","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L205-L206"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.logToStream\"><span class=\"name\">Lake</span>.<span class=\"name\">logToStream</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lake/Util/Log.html#Lake.LogEntry\">LogEntry</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">out</span> : <a href=\"./Init/System/IO.html#IO.FS.Stream\">IO.FS.Stream</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">minLv</span> : <a href=\"./Lake/Util/Log.html#Lake.LogLevel\">LogLevel</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">useAnsi</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.logToStream","kind":"def","line":197,"name":"Lake.logToStream","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L197-L201"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.logMessage\"><span class=\"name\">Lake</span>.<span class=\"name\">logMessage</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Lean/Message.html#Lean.Message\">Lean.Message</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.MonadLog\">MonadLog</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.logMessage","kind":"def","line":191,"name":"Lake.logMessage","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L191-L195"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.logSerialMessage\"><span class=\"name\">Lake</span>.<span class=\"name\">logSerialMessage</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Lean/Message.html#Lean.SerialMessage\">Lean.SerialMessage</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.MonadLog\">MonadLog</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.logSerialMessage","kind":"def","line":187,"name":"Lake.logSerialMessage","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L187-L189"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.logError\"><span class=\"name\">Lake</span>.<span class=\"name\">logError</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.MonadLog\">MonadLog</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">message</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.logError","kind":"def","line":184,"name":"Lake.logError","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L184-L185"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.logWarning\"><span class=\"name\">Lake</span>.<span class=\"name\">logWarning</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.MonadLog\">MonadLog</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">message</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.logWarning","kind":"def","line":181,"name":"Lake.logWarning","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L181-L182"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.logInfo\"><span class=\"name\">Lake</span>.<span class=\"name\">logInfo</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.MonadLog\">MonadLog</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">message</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.logInfo","kind":"def","line":178,"name":"Lake.logInfo","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L178-L179"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.logVerbose\"><span class=\"name\">Lake</span>.<span class=\"name\">logVerbose</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.MonadLog\">MonadLog</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">message</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.logVerbose","kind":"def","line":175,"name":"Lake.logVerbose","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L175-L176"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.MonadLog.logEntry\"><span class=\"name\">Lake</span>.<span class=\"name\">MonadLog</span>.<span class=\"name\">logEntry</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.MonadLog\">MonadLog</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lake/Util/Log.html#Lake.LogEntry\">LogEntry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.MonadLog.logEntry","kind":"def","line":171,"name":"Lake.MonadLog.logEntry","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L171-L171"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.MonadLog.mk\"><span class=\"name\">Lake</span>.<span class=\"name\">MonadLog</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">logEntry</span> : <span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.LogEntry\">LogEntry</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.MonadLog\">MonadLog</a> <span class=\"fn\">m</span></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.MonadLog.mk","kind":"ctor","line":170,"name":"Lake.MonadLog.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L170-L170"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.MonadLog\"><span class=\"name\">Lake</span>.<span class=\"name\">MonadLog</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> v</div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.MonadLog","kind":"class","line":170,"name":"Lake.MonadLog","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L170-L171"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.LogEntry.ofMessage\"><span class=\"name\">Lake</span>.<span class=\"name\">LogEntry</span>.<span class=\"name\">ofMessage</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Lean/Message.html#Lean.Message\">Lean.Message</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Lake/Util/Log.html#Lake.LogEntry\">LogEntry</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.LogEntry.ofMessage","kind":"def","line":166,"name":"Lake.LogEntry.ofMessage","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L166-L168"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.LogEntry.ofSerialMessage\"><span class=\"name\">Lake</span>.<span class=\"name\">LogEntry</span>.<span class=\"name\">ofSerialMessage</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Lean/Message.html#Lean.SerialMessage\">Lean.SerialMessage</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Util/Log.html#Lake.LogEntry\">LogEntry</a></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.LogEntry.ofSerialMessage","kind":"def","line":158,"name":"Lake.LogEntry.ofSerialMessage","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L158-L164"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.LogEntry.error\"><span class=\"name\">Lake</span>.<span class=\"name\">LogEntry</span>.<span class=\"name\">error</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">message</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Util/Log.html#Lake.LogEntry\">LogEntry</a></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.LogEntry.error","kind":"def","line":155,"name":"Lake.LogEntry.error","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L155-L156"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.LogEntry.warning\"><span class=\"name\">Lake</span>.<span class=\"name\">LogEntry</span>.<span class=\"name\">warning</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">message</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Util/Log.html#Lake.LogEntry\">LogEntry</a></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.LogEntry.warning","kind":"def","line":152,"name":"Lake.LogEntry.warning","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L152-L153"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.LogEntry.info\"><span class=\"name\">Lake</span>.<span class=\"name\">LogEntry</span>.<span class=\"name\">info</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">message</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Util/Log.html#Lake.LogEntry\">LogEntry</a></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.LogEntry.info","kind":"def","line":149,"name":"Lake.LogEntry.info","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L149-L150"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.LogEntry.trace\"><span class=\"name\">Lake</span>.<span class=\"name\">LogEntry</span>.<span class=\"name\">trace</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">message</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Util/Log.html#Lake.LogEntry\">LogEntry</a></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.LogEntry.trace","kind":"def","line":146,"name":"Lake.LogEntry.trace","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L146-L147"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instToStringLogEntry\"><span class=\"name\">Lake</span>.<span class=\"name\">instToStringLogEntry</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Lake/Util/Log.html#Lake.LogEntry\">LogEntry</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.instToStringLogEntry","kind":"instance","line":144,"name":"Lake.instToStringLogEntry","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L144-L144"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.LogEntry.toString\"><span class=\"name\">Lake</span>.<span class=\"name\">LogEntry</span>.<span class=\"name\">toString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lake/Util/Log.html#Lake.LogEntry\">LogEntry</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">useAnsi</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.LogEntry.toString","kind":"def","line":136,"name":"Lake.LogEntry.toString","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L136-L142"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instFromJsonLogEntry\"><span class=\"name\">Lake</span>.<span class=\"name\">instFromJsonLogEntry</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Json/FromToJson/Basic.html#Lean.FromJson\">Lean.FromJson</a> <a href=\"./Lake/Util/Log.html#Lake.LogEntry\">LogEntry</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.instFromJsonLogEntry","kind":"instance","line":134,"name":"Lake.instFromJsonLogEntry","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L134-L134"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instFromJsonLogEntry.fromJson\"><span class=\"name\">Lake</span>.<span class=\"name\">instFromJsonLogEntry</span>.<span class=\"name\">fromJson</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Json/Basic.html#Lean.Json\">Lean.Json</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Lake/Util/Log.html#Lake.LogEntry\">LogEntry</a></span></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.instFromJsonLogEntry.fromJson","kind":"def","line":134,"name":"Lake.instFromJsonLogEntry.fromJson","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L134-L134"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instToJsonLogEntry\"><span class=\"name\">Lake</span>.<span class=\"name\">instToJsonLogEntry</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Json/FromToJson/Basic.html#Lean.ToJson\">Lean.ToJson</a> <a href=\"./Lake/Util/Log.html#Lake.LogEntry\">LogEntry</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.instToJsonLogEntry","kind":"instance","line":134,"name":"Lake.instToJsonLogEntry","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L134-L134"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instToJsonLogEntry.toJson\"><span class=\"name\">Lake</span>.<span class=\"name\">instToJsonLogEntry</span>.<span class=\"name\">toJson</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.LogEntry\">LogEntry</a> → <a href=\"./Lean/Data/Json/Basic.html#Lean.Json\">Lean.Json</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.instToJsonLogEntry.toJson","kind":"def","line":134,"name":"Lake.instToJsonLogEntry.toJson","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L134-L134"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instInhabitedLogEntry.default\"><span class=\"name\">Lake</span>.<span class=\"name\">instInhabitedLogEntry</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Util/Log.html#Lake.LogEntry\">LogEntry</a></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.instInhabitedLogEntry.default","kind":"def","line":134,"name":"Lake.instInhabitedLogEntry.default","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L134-L134"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instInhabitedLogEntry\"><span class=\"name\">Lake</span>.<span class=\"name\">instInhabitedLogEntry</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lake/Util/Log.html#Lake.LogEntry\">LogEntry</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.instInhabitedLogEntry","kind":"instance","line":134,"name":"Lake.instInhabitedLogEntry","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L134-L134"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.LogEntry.message\"><span class=\"name\">Lake</span>.<span class=\"name\">LogEntry</span>.<span class=\"name\">message</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lake/Util/Log.html#Lake.LogEntry\">LogEntry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.LogEntry.message","kind":"def","line":133,"name":"Lake.LogEntry.message","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L133-L133"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.LogEntry.level\"><span class=\"name\">Lake</span>.<span class=\"name\">LogEntry</span>.<span class=\"name\">level</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lake/Util/Log.html#Lake.LogEntry\">LogEntry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Util/Log.html#Lake.LogLevel\">LogLevel</a></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.LogEntry.level","kind":"def","line":132,"name":"Lake.LogEntry.level","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L132-L132"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.LogEntry.mk\"><span class=\"name\">Lake</span>.<span class=\"name\">LogEntry</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">level</span> : <a href=\"./Lake/Util/Log.html#Lake.LogLevel\">LogLevel</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">message</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Util/Log.html#Lake.LogEntry\">LogEntry</a></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.LogEntry.mk","kind":"ctor","line":131,"name":"Lake.LogEntry.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L131-L131"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.LogEntry\"><span class=\"name\">Lake</span>.<span class=\"name\">LogEntry</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.LogEntry","kind":"structure","line":131,"name":"Lake.LogEntry","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L131-L134"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.Verbosity.minLogLv\"><span class=\"name\">Lake</span>.<span class=\"name\">Verbosity</span>.<span class=\"name\">minLogLv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.Verbosity\">Verbosity</a> → <a href=\"./Lake/Util/Log.html#Lake.LogLevel\">LogLevel</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.Verbosity.minLogLv","kind":"def","line":126,"name":"Lake.Verbosity.minLogLv","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L126-L129"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.LogLevel.toMessageSeverity\"><span class=\"name\">Lake</span>.<span class=\"name\">LogLevel</span>.<span class=\"name\">toMessageSeverity</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.LogLevel\">LogLevel</a> → <a href=\"./Lean/Message.html#Lean.MessageSeverity\">Lean.MessageSeverity</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.LogLevel.toMessageSeverity","kind":"def","line":121,"name":"Lake.LogLevel.toMessageSeverity","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L121-L124"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.LogLevel.ofMessageSeverity\"><span class=\"name\">Lake</span>.<span class=\"name\">LogLevel</span>.<span class=\"name\">ofMessageSeverity</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.MessageSeverity\">Lean.MessageSeverity</a> → <a href=\"./Lake/Util/Log.html#Lake.LogLevel\">LogLevel</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.LogLevel.ofMessageSeverity","kind":"def","line":116,"name":"Lake.LogLevel.ofMessageSeverity","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L116-L119"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.LogLevel.toString\"><span class=\"name\">Lake</span>.<span class=\"name\">LogLevel</span>.<span class=\"name\">toString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.LogLevel\">LogLevel</a> → <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.LogLevel.toString","kind":"def","line":108,"name":"Lake.LogLevel.toString","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L108-L112"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.LogLevel.ofString?\"><span class=\"name\">Lake</span>.<span class=\"name\">LogLevel</span>.<span class=\"name\">ofString?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lake/Util/Log.html#Lake.LogLevel\">LogLevel</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.LogLevel.ofString?","kind":"def","line":100,"name":"Lake.LogLevel.ofString?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L100-L106"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.LogLevel.ansiColor\"><span class=\"name\">Lake</span>.<span class=\"name\">LogLevel</span>.<span class=\"name\">ansiColor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.LogLevel\">LogLevel</a> → <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"ANSI escape code for coloring text of at the log level. ","docLink":"./Lake/Util/Log.html#Lake.LogLevel.ansiColor","kind":"def","line":94,"name":"Lake.LogLevel.ansiColor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L94-L98"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.LogLevel.icon\"><span class=\"name\">Lake</span>.<span class=\"name\">LogLevel</span>.<span class=\"name\">icon</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.LogLevel\">LogLevel</a> → <a href=\"./Init/Prelude.html#Char\">Char</a></span></div></div>","info":{"doc":"Unicode icon for representing the log level. ","docLink":"./Lake/Util/Log.html#Lake.LogLevel.icon","kind":"def","line":88,"name":"Lake.LogLevel.icon","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L88-L92"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instMaxLogLevel\"><span class=\"name\">Lake</span>.<span class=\"name\">instMaxLogLevel</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Max\">Max</a> <a href=\"./Lake/Util/Log.html#Lake.LogLevel\">LogLevel</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.instMaxLogLevel","kind":"instance","line":86,"name":"Lake.instMaxLogLevel","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L86-L86"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instMinLogLevel\"><span class=\"name\">Lake</span>.<span class=\"name\">instMinLogLevel</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Min\">Min</a> <a href=\"./Lake/Util/Log.html#Lake.LogLevel\">LogLevel</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.instMinLogLevel","kind":"instance","line":85,"name":"Lake.instMinLogLevel","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L85-L85"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instLELogLevel\"><span class=\"name\">Lake</span>.<span class=\"name\">instLELogLevel</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <a href=\"./Lake/Util/Log.html#Lake.LogLevel\">LogLevel</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.instLELogLevel","kind":"instance","line":84,"name":"Lake.instLELogLevel","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L84-L84"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instLTLogLevel\"><span class=\"name\">Lake</span>.<span class=\"name\">instLTLogLevel</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <a href=\"./Lake/Util/Log.html#Lake.LogLevel\">LogLevel</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.instLTLogLevel","kind":"instance","line":83,"name":"Lake.instLTLogLevel","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L83-L83"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instFromJsonLogLevel\"><span class=\"name\">Lake</span>.<span class=\"name\">instFromJsonLogLevel</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Json/FromToJson/Basic.html#Lean.FromJson\">Lean.FromJson</a> <a href=\"./Lake/Util/Log.html#Lake.LogLevel\">LogLevel</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.instFromJsonLogLevel","kind":"instance","line":81,"name":"Lake.instFromJsonLogLevel","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L81-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instFromJsonLogLevel.fromJson\"><span class=\"name\">Lake</span>.<span class=\"name\">instFromJsonLogLevel</span>.<span class=\"name\">fromJson</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Json/Basic.html#Lean.Json\">Lean.Json</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Lake/Util/Log.html#Lake.LogLevel\">LogLevel</a></span></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.instFromJsonLogLevel.fromJson","kind":"def","line":81,"name":"Lake.instFromJsonLogLevel.fromJson","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L81-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instToJsonLogLevel.toJson\"><span class=\"name\">Lake</span>.<span class=\"name\">instToJsonLogLevel</span>.<span class=\"name\">toJson</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.LogLevel\">LogLevel</a> → <a href=\"./Lean/Data/Json/Basic.html#Lean.Json\">Lean.Json</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.instToJsonLogLevel.toJson","kind":"def","line":81,"name":"Lake.instToJsonLogLevel.toJson","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L81-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instToJsonLogLevel\"><span class=\"name\">Lake</span>.<span class=\"name\">instToJsonLogLevel</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Json/FromToJson/Basic.html#Lean.ToJson\">Lean.ToJson</a> <a href=\"./Lake/Util/Log.html#Lake.LogLevel\">LogLevel</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.instToJsonLogLevel","kind":"instance","line":81,"name":"Lake.instToJsonLogLevel","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L81-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instOrdLogLevel.ord\"><span class=\"name\">Lake</span>.<span class=\"name\">instOrdLogLevel</span>.<span class=\"name\">ord</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.LogLevel\">LogLevel</a> → <a href=\"./Lake/Util/Log.html#Lake.LogLevel\">LogLevel</a> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.instOrdLogLevel.ord","kind":"def","line":81,"name":"Lake.instOrdLogLevel.ord","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L81-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instOrdLogLevel\"><span class=\"name\">Lake</span>.<span class=\"name\">instOrdLogLevel</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <a href=\"./Lake/Util/Log.html#Lake.LogLevel\">LogLevel</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.instOrdLogLevel","kind":"instance","line":81,"name":"Lake.instOrdLogLevel","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L81-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instDecidableEqLogLevel\"><span class=\"name\">Lake</span>.<span class=\"name\">instDecidableEqLogLevel</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Lake/Util/Log.html#Lake.LogLevel\">LogLevel</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.instDecidableEqLogLevel","kind":"instance","line":81,"name":"Lake.instDecidableEqLogLevel","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L81-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instReprLogLevel.repr\"><span class=\"name\">Lake</span>.<span class=\"name\">instReprLogLevel</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.LogLevel\">LogLevel</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Std.Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.instReprLogLevel.repr","kind":"def","line":81,"name":"Lake.instReprLogLevel.repr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L81-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instReprLogLevel\"><span class=\"name\">Lake</span>.<span class=\"name\">instReprLogLevel</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lake/Util/Log.html#Lake.LogLevel\">LogLevel</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.instReprLogLevel","kind":"instance","line":81,"name":"Lake.instReprLogLevel","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L81-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instInhabitedLogLevel.default\"><span class=\"name\">Lake</span>.<span class=\"name\">instInhabitedLogLevel</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Util/Log.html#Lake.LogLevel\">LogLevel</a></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.instInhabitedLogLevel.default","kind":"def","line":81,"name":"Lake.instInhabitedLogLevel.default","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L81-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instInhabitedLogLevel\"><span class=\"name\">Lake</span>.<span class=\"name\">instInhabitedLogLevel</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lake/Util/Log.html#Lake.LogLevel\">LogLevel</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.instInhabitedLogLevel","kind":"instance","line":81,"name":"Lake.instInhabitedLogLevel","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L81-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.LogLevel.error\"><span class=\"name\">Lake</span>.<span class=\"name\">LogLevel</span>.<span class=\"name\">error</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Util/Log.html#Lake.LogLevel\">LogLevel</a></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.LogLevel.error","kind":"ctor","line":80,"name":"Lake.LogLevel.error","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L80-L80"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.LogLevel.warning\"><span class=\"name\">Lake</span>.<span class=\"name\">LogLevel</span>.<span class=\"name\">warning</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Util/Log.html#Lake.LogLevel\">LogLevel</a></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.LogLevel.warning","kind":"ctor","line":79,"name":"Lake.LogLevel.warning","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L79-L79"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.LogLevel.info\"><span class=\"name\">Lake</span>.<span class=\"name\">LogLevel</span>.<span class=\"name\">info</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Util/Log.html#Lake.LogLevel\">LogLevel</a></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.LogLevel.info","kind":"ctor","line":78,"name":"Lake.LogLevel.info","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L78-L78"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.LogLevel.trace\"><span class=\"name\">Lake</span>.<span class=\"name\">LogLevel</span>.<span class=\"name\">trace</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Util/Log.html#Lake.LogLevel\">LogLevel</a></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.LogLevel.trace","kind":"ctor","line":77,"name":"Lake.LogLevel.trace","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L77-L77"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.LogLevel\"><span class=\"name\">Lake</span>.<span class=\"name\">LogLevel</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.LogLevel","kind":"inductive","line":76,"name":"Lake.LogLevel","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L76-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instCoeHandleOutStream\"><span class=\"name\">Lake</span>.<span class=\"name\">instCoeHandleOutStream</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Init/System/IO.html#IO.FS.Handle\">IO.FS.Handle</a> <a href=\"./Lake/Util/Log.html#Lake.OutStream\">OutStream</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.instCoeHandleOutStream","kind":"instance","line":74,"name":"Lake.instCoeHandleOutStream","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L74-L74"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instCoeStreamOutStream\"><span class=\"name\">Lake</span>.<span class=\"name\">instCoeStreamOutStream</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Init/System/IO.html#IO.FS.Stream\">IO.FS.Stream</a> <a href=\"./Lake/Util/Log.html#Lake.OutStream\">OutStream</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.instCoeStreamOutStream","kind":"instance","line":73,"name":"Lake.instCoeStreamOutStream","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L73-L73"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.OutStream.get\"><span class=\"name\">Lake</span>.<span class=\"name\">OutStream</span>.<span class=\"name\">get</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.OutStream\">OutStream</a> → <span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/System/IO.html#IO.FS.Stream\">IO.FS.Stream</a></span></span></div></div>","info":{"doc":"Returns the real output stream associated with `OutStream`. ","docLink":"./Lake/Util/Log.html#Lake.OutStream.get","kind":"def","line":67,"name":"Lake.OutStream.get","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L67-L71"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.OutStream.stream\"><span class=\"name\">Lake</span>.<span class=\"name\">OutStream</span>.<span class=\"name\">stream</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/System/IO.html#IO.FS.Stream\">IO.FS.Stream</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Util/Log.html#Lake.OutStream\">OutStream</a></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.OutStream.stream","kind":"ctor","line":65,"name":"Lake.OutStream.stream","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L65-L65"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.OutStream.stderr\"><span class=\"name\">Lake</span>.<span class=\"name\">OutStream</span>.<span class=\"name\">stderr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Util/Log.html#Lake.OutStream\">OutStream</a></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.OutStream.stderr","kind":"ctor","line":64,"name":"Lake.OutStream.stderr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L64-L64"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.OutStream.stdout\"><span class=\"name\">Lake</span>.<span class=\"name\">OutStream</span>.<span class=\"name\">stdout</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Util/Log.html#Lake.OutStream\">OutStream</a></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.OutStream.stdout","kind":"ctor","line":63,"name":"Lake.OutStream.stdout","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L63-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.OutStream\"><span class=\"name\">Lake</span>.<span class=\"name\">OutStream</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A pure representation of output stream. ","docLink":"./Lake/Util/Log.html#Lake.OutStream","kind":"inductive","line":61,"name":"Lake.OutStream","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L61-L65"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.Ansi.chalk\"><span class=\"name\">Lake</span>.<span class=\"name\">Ansi</span>.<span class=\"name\">chalk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">colorCode </span><span class=\"fn\">text</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Wrap text in ANSI escape sequences to make it bold and color it the ANSI `colorCode`.\nResets all terminal font attributes at the end of the text.\n","docLink":"./Lake/Util/Log.html#Lake.Ansi.chalk","kind":"def","line":54,"name":"Lake.Ansi.chalk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L54-L59"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.AnsiMode.isEnabled\"><span class=\"name\">Lake</span>.<span class=\"name\">AnsiMode</span>.<span class=\"name\">isEnabled</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">out</span> : <a href=\"./Init/System/IO.html#IO.FS.Stream\">IO.FS.Stream</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.AnsiMode\">AnsiMode</a> → <span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>","info":{"doc":"Returns whether to ANSI escape codes with the stream `out`. ","docLink":"./Lake/Util/Log.html#Lake.AnsiMode.isEnabled","kind":"def","line":48,"name":"Lake.AnsiMode.isEnabled","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L48-L52"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instReprAnsiMode.repr\"><span class=\"name\">Lake</span>.<span class=\"name\">instReprAnsiMode</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.AnsiMode\">AnsiMode</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Std.Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.instReprAnsiMode.repr","kind":"def","line":46,"name":"Lake.instReprAnsiMode.repr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L46-L46"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instReprAnsiMode\"><span class=\"name\">Lake</span>.<span class=\"name\">instReprAnsiMode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lake/Util/Log.html#Lake.AnsiMode\">AnsiMode</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.instReprAnsiMode","kind":"instance","line":46,"name":"Lake.instReprAnsiMode","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L46-L46"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.AnsiMode.noAnsi\"><span class=\"name\">Lake</span>.<span class=\"name\">AnsiMode</span>.<span class=\"name\">noAnsi</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Util/Log.html#Lake.AnsiMode\">AnsiMode</a></div></div>","info":{"doc":"Do not use ANSI escape codes. ","docLink":"./Lake/Util/Log.html#Lake.AnsiMode.noAnsi","kind":"ctor","line":44,"name":"Lake.AnsiMode.noAnsi","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L44-L45"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.AnsiMode.ansi\"><span class=\"name\">Lake</span>.<span class=\"name\">AnsiMode</span>.<span class=\"name\">ansi</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Util/Log.html#Lake.AnsiMode\">AnsiMode</a></div></div>","info":{"doc":"Use ANSI escape codes. ","docLink":"./Lake/Util/Log.html#Lake.AnsiMode.ansi","kind":"ctor","line":42,"name":"Lake.AnsiMode.ansi","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L42-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.AnsiMode.auto\"><span class=\"name\">Lake</span>.<span class=\"name\">AnsiMode</span>.<span class=\"name\">auto</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Util/Log.html#Lake.AnsiMode\">AnsiMode</a></div></div>","info":{"doc":"Automatically determine whether to use ANSI escape codes\nbased on whether the stream written to is a terminal.\n","docLink":"./Lake/Util/Log.html#Lake.AnsiMode.auto","kind":"ctor","line":37,"name":"Lake.AnsiMode.auto","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L37-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.AnsiMode\"><span class=\"name\">Lake</span>.<span class=\"name\">AnsiMode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Whether to ANSI escape codes. ","docLink":"./Lake/Util/Log.html#Lake.AnsiMode","kind":"inductive","line":35,"name":"Lake.AnsiMode","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L35-L46"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instInhabitedVerbosity\"><span class=\"name\">Lake</span>.<span class=\"name\">instInhabitedVerbosity</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lake/Util/Log.html#Lake.Verbosity\">Verbosity</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.instInhabitedVerbosity","kind":"instance","line":33,"name":"Lake.instInhabitedVerbosity","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L33-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instMaxVerbosity\"><span class=\"name\">Lake</span>.<span class=\"name\">instMaxVerbosity</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Max\">Max</a> <a href=\"./Lake/Util/Log.html#Lake.Verbosity\">Verbosity</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.instMaxVerbosity","kind":"instance","line":31,"name":"Lake.instMaxVerbosity","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L31-L31"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instMinVerbosity\"><span class=\"name\">Lake</span>.<span class=\"name\">instMinVerbosity</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Min\">Min</a> <a href=\"./Lake/Util/Log.html#Lake.Verbosity\">Verbosity</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.instMinVerbosity","kind":"instance","line":30,"name":"Lake.instMinVerbosity","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L30-L30"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instLEVerbosity\"><span class=\"name\">Lake</span>.<span class=\"name\">instLEVerbosity</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <a href=\"./Lake/Util/Log.html#Lake.Verbosity\">Verbosity</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.instLEVerbosity","kind":"instance","line":29,"name":"Lake.instLEVerbosity","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L29-L29"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instLTVerbosity\"><span class=\"name\">Lake</span>.<span class=\"name\">instLTVerbosity</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <a href=\"./Lake/Util/Log.html#Lake.Verbosity\">Verbosity</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.instLTVerbosity","kind":"instance","line":28,"name":"Lake.instLTVerbosity","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L28-L28"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instOrdVerbosity.ord\"><span class=\"name\">Lake</span>.<span class=\"name\">instOrdVerbosity</span>.<span class=\"name\">ord</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.Verbosity\">Verbosity</a> → <a href=\"./Lake/Util/Log.html#Lake.Verbosity\">Verbosity</a> → <a href=\"./Init/Data/Ord/Basic.html#Ordering\">Ordering</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.instOrdVerbosity.ord","kind":"def","line":26,"name":"Lake.instOrdVerbosity.ord","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L26-L26"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instOrdVerbosity\"><span class=\"name\">Lake</span>.<span class=\"name\">instOrdVerbosity</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <a href=\"./Lake/Util/Log.html#Lake.Verbosity\">Verbosity</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.instOrdVerbosity","kind":"instance","line":26,"name":"Lake.instOrdVerbosity","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L26-L26"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instDecidableEqVerbosity\"><span class=\"name\">Lake</span>.<span class=\"name\">instDecidableEqVerbosity</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Lake/Util/Log.html#Lake.Verbosity\">Verbosity</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.instDecidableEqVerbosity","kind":"instance","line":26,"name":"Lake.instDecidableEqVerbosity","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L26-L26"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instReprVerbosity.repr\"><span class=\"name\">Lake</span>.<span class=\"name\">instReprVerbosity</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lake/Util/Log.html#Lake.Verbosity\">Verbosity</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Std.Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.instReprVerbosity.repr","kind":"def","line":26,"name":"Lake.instReprVerbosity.repr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L26-L26"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.instReprVerbosity\"><span class=\"name\">Lake</span>.<span class=\"name\">instReprVerbosity</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lake/Util/Log.html#Lake.Verbosity\">Verbosity</a></span></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.instReprVerbosity","kind":"instance","line":26,"name":"Lake.instReprVerbosity","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L26-L26"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.Verbosity.verbose\"><span class=\"name\">Lake</span>.<span class=\"name\">Verbosity</span>.<span class=\"name\">verbose</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Util/Log.html#Lake.Verbosity\">Verbosity</a></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.Verbosity.verbose","kind":"ctor","line":25,"name":"Lake.Verbosity.verbose","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L25-L25"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.Verbosity.normal\"><span class=\"name\">Lake</span>.<span class=\"name\">Verbosity</span>.<span class=\"name\">normal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Util/Log.html#Lake.Verbosity\">Verbosity</a></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.Verbosity.normal","kind":"ctor","line":24,"name":"Lake.Verbosity.normal","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L24-L24"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.Verbosity.quiet\"><span class=\"name\">Lake</span>.<span class=\"name\">Verbosity</span>.<span class=\"name\">quiet</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lake/Util/Log.html#Lake.Verbosity\">Verbosity</a></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.Verbosity.quiet","kind":"ctor","line":23,"name":"Lake.Verbosity.quiet","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L23-L23"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lake/Util/Log.html#Lake.Verbosity\"><span class=\"name\">Lake</span>.<span class=\"name\">Verbosity</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lake/Util/Log.html#Lake.Verbosity","kind":"inductive","line":22,"name":"Lake.Verbosity","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/lake/Lake/Util/Log.lean#L22-L26"}}],"imports":["Init.System.IO","Init.Data.Repr","Init.Data.Ord.Basic","Lean.Data.Json","Lake.Util.Error","Lake.Util.EStateT","Lean.Message","Lake.Util.Lift"],"instances":[{"className":"Repr","name":"Lake.instReprVerbosity","typeNames":["Lake.Verbosity"]},{"className":"Decidable","name":"Lake.instDecidableEqVerbosity","typeNames":["Eq"]},{"className":"Ord","name":"Lake.instOrdVerbosity","typeNames":["Lake.Verbosity"]},{"className":"LT","name":"Lake.instLTVerbosity","typeNames":["Lake.Verbosity"]},{"className":"LE","name":"Lake.instLEVerbosity","typeNames":["Lake.Verbosity"]},{"className":"Min","name":"Lake.instMinVerbosity","typeNames":["Lake.Verbosity"]},{"className":"Max","name":"Lake.instMaxVerbosity","typeNames":["Lake.Verbosity"]},{"className":"Inhabited","name":"Lake.instInhabitedVerbosity","typeNames":["Lake.Verbosity"]},{"className":"Repr","name":"Lake.instReprAnsiMode","typeNames":["Lake.AnsiMode"]},{"className":"Coe","name":"Lake.instCoeStreamOutStream","typeNames":["IO.FS.Stream","Lake.OutStream"]},{"className":"Coe","name":"Lake.instCoeHandleOutStream","typeNames":["IO.FS.Handle","Lake.OutStream"]},{"className":"Inhabited","name":"Lake.instInhabitedLogLevel","typeNames":["Lake.LogLevel"]},{"className":"Repr","name":"Lake.instReprLogLevel","typeNames":["Lake.LogLevel"]},{"className":"Decidable","name":"Lake.instDecidableEqLogLevel","typeNames":["Eq"]},{"className":"Ord","name":"Lake.instOrdLogLevel","typeNames":["Lake.LogLevel"]},{"className":"Lean.ToJson","name":"Lake.instToJsonLogLevel","typeNames":["Lake.LogLevel"]},{"className":"Lean.FromJson","name":"Lake.instFromJsonLogLevel","typeNames":["Lake.LogLevel"]},{"className":"LT","name":"Lake.instLTLogLevel","typeNames":["Lake.LogLevel"]},{"className":"LE","name":"Lake.instLELogLevel","typeNames":["Lake.LogLevel"]},{"className":"Min","name":"Lake.instMinLogLevel","typeNames":["Lake.LogLevel"]},{"className":"Max","name":"Lake.instMaxLogLevel","typeNames":["Lake.LogLevel"]},{"className":"Inhabited","name":"Lake.instInhabitedLogEntry","typeNames":["Lake.LogEntry"]},{"className":"Lean.ToJson","name":"Lake.instToJsonLogEntry","typeNames":["Lake.LogEntry"]},{"className":"Lean.FromJson","name":"Lake.instFromJsonLogEntry","typeNames":["Lake.LogEntry"]},{"className":"ToString","name":"Lake.instToStringLogEntry","typeNames":["Lake.LogEntry"]},{"className":"Inhabited","name":"Lake.MonadLog.instInhabitedOfPure","typeNames":["Lake.MonadLog"]},{"className":"Lake.MonadLog","name":"Lake.MonadLog.instOfMonadLift","typeNames":[]},{"className":"Inhabited","name":"Lake.MonadLogT.instInhabitedOfPure","typeNames":["Lake.MonadLogT"]},{"className":"Lake.MonadLog","name":"Lake.MonadLogT.instMonadLogOfMonadOfMonadLiftT","typeNames":["Lake.MonadLogT"]},{"className":"Inhabited","name":"Lake.instInhabitedLog","typeNames":["Lake.Log"]},{"className":"Lean.ToJson","name":"Lake.instToJsonLog","typeNames":["Lake.Log"]},{"className":"Lean.FromJson","name":"Lake.instFromJsonLog","typeNames":["Lake.Log"]},{"className":"Inhabited","name":"Lake.Log.instInhabitedPos","typeNames":["Lake.Log.Pos"]},{"className":"Decidable","name":"Lake.Log.instDecidableEqPos","typeNames":["Eq"]},{"className":"OfNat","name":"Lake.instOfNatPos","typeNames":["Lake.Log.Pos"]},{"className":"Ord","name":"Lake.instOrdPos","typeNames":["Lake.Log.Pos"]},{"className":"LT","name":"Lake.instLTPos","typeNames":["Lake.Log.Pos"]},{"className":"Decidable","name":"Lake.instDecidableRelPosLt","typeNames":["LT.lt"]},{"className":"LE","name":"Lake.instLEPos","typeNames":["Lake.Log.Pos"]},{"className":"Decidable","name":"Lake.instDecidableRelPosLe","typeNames":["LE.le"]},{"className":"Min","name":"Lake.instMinPos","typeNames":["Lake.Log.Pos"]},{"className":"Max","name":"Lake.instMaxPos","typeNames":["Lake.Log.Pos"]},{"className":"EmptyCollection","name":"Lake.Log.instEmptyCollection","typeNames":["Lake.Log"]},{"className":"Append","name":"Lake.Log.instAppend","typeNames":["Lake.Log"]},{"className":"ToString","name":"Lake.Log.instToString","typeNames":["Lake.Log"]},{"className":"Lake.MonadLog","name":"Lake.instMonadLogLogTOfMonad","typeNames":["Lake.LogT"]},{"className":"Lake.MonadLog","name":"Lake.instMonadLogELogTOfMonad","typeNames":["Lake.ELogT"]},{"className":"Lake.MonadError","name":"Lake.instMonadErrorELogTOfMonad","typeNames":["Lake.ELogT"]},{"className":"Alternative","name":"Lake.instAlternativeELogTOfMonad","typeNames":["Lake.ELogT"]},{"className":"MonadLift","name":"Lake.instMonadLiftIOLogIO","typeNames":["IO","Lake.LogIO"]},{"className":"Lake.MonadError","name":"Lake.instMonadErrorLoggerIO","typeNames":["Lake.LoggerIO"]},{"className":"MonadLift","name":"Lake.instMonadLiftIOLoggerIO","typeNames":["IO","Lake.LoggerIO"]},{"className":"MonadLift","name":"Lake.instMonadLiftLogIOLoggerIO","typeNames":["Lake.LogIO","Lake.LoggerIO"]}],"name":"Lake.Util.Log"}