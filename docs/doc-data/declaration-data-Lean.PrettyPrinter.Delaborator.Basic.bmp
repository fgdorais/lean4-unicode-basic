{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.delab\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">delab</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">optionsPerPos</span> : <a href=\"./Lean/PrettyPrinter/Delaborator/SubExpr.html#Lean.PrettyPrinter.Delaborator.OptionsPerPos\">Delaborator.OptionsPerPos</a> := <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Term\">Term</a></span></div></div>","info":{"doc":"\"Delaborate\" the given term into surface-level syntax using the default and given subterm-specific options. ","docLink":"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.delab","kind":"def","line":508,"name":"Lean.PrettyPrinter.delab","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/PrettyPrinter/Delaborator/Basic.lean#L508-L511"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.delabCore\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">delabCore</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">optionsPerPos</span> : <a href=\"./Lean/PrettyPrinter/Delaborator/SubExpr.html#Lean.PrettyPrinter.Delaborator.OptionsPerPos\">Delaborator.OptionsPerPos</a> := <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">∅</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">delab</span> : <span class=\"fn\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\">Delaborator.DelabM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Lean/SubExpr.html#Lean.SubExpr.PosMap\">SubExpr.PosMap</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Elab.Info</a></span>)</span></div></div>","info":{"doc":"","docLink":"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.delabCore","kind":"def","line":476,"name":"Lean.PrettyPrinter.delabCore","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/PrettyPrinter/Delaborator/Basic.lean#L476-L506"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.appUnexpanderAttribute\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">appUnexpanderAttribute</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/KeyedDeclsAttribute.html#Lean.KeyedDeclsAttribute\">KeyedDeclsAttribute</a> <a href=\"./Init/Prelude.html#Lean.PrettyPrinter.Unexpander\">Unexpander</a></span></div></div>","info":{"doc":"Registers an unexpander for applications of a given constant.\n\n`@[app_unexpander c]` registers a `Lean.PrettyPrinter.Unexpander` for applications of the constant\n`c`. The unexpander is passed the result of pre-pretty printing the application *without*\nimplicitly passed arguments. If `pp.explicit` is set to true or `pp.notation` is set to false,\nit will not be called at all.\n\nUnexpanders work as an alternative for delaborators (`@[app_delab]`) that can be used without\nspecial imports. This however also makes them much less capable since they can only transform\nsyntax and don't have access to the expression tree.\n","docLink":"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.appUnexpanderAttribute","kind":"opaque","line":449,"name":"Lean.PrettyPrinter.Delaborator.appUnexpanderAttribute","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/PrettyPrinter/Delaborator/Basic.lean#L449-L469"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.delab\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delab</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a></div></div>","info":{"doc":"","docLink":"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.delab","kind":"opaque","line":421,"name":"Lean.PrettyPrinter.Delaborator.delab","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/PrettyPrinter/Delaborator/Basic.lean#L421-L447"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.delabFor\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delabFor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a></span></div></div>","info":{"doc":"","docLink":"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.delabFor","kind":"opaque","line":414,"name":"Lean.PrettyPrinter.Delaborator.delabFor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/PrettyPrinter/Delaborator/Basic.lean#L414-L419"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.omission\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">omission</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">reason</span> : <a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.OmissionReason\">OmissionReason</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a></div></div>","info":{"doc":"Delaborates the current expression as `⋯` and attaches `Elab.OmissionInfo`, which influences how the\nsubterm omitted by `⋯` is delaborated when hovered over.\n","docLink":"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.omission","kind":"def","line":404,"name":"Lean.PrettyPrinter.Delaborator.omission","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/PrettyPrinter/Delaborator/Basic.lean#L404-L412"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.shouldOmitProof\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">shouldOmitProof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\">DelabM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Returns `true` if the given expression is a proof and should be omitted.\nThis function only returns `true` if `pp.proofs` is set to `false`.\n\n\"Shallow\" proofs are not omitted.\nThe `pp.proofs.threshold` option controls the depth threshold for what constitutes a shallow proof.\nSee `Lean.PrettyPrinter.Delaborator.isShallowExpression`.\n","docLink":"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.shouldOmitProof","kind":"def","line":383,"name":"Lean.PrettyPrinter.Delaborator.shouldOmitProof","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/PrettyPrinter/Delaborator/Basic.lean#L383-L402"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.shouldOmitExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">shouldOmitExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\">DelabM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Returns `true` if, at the current depth, we should omit the term and use `⋯` rather than\ndelaborating it. This function can only return `true` if `pp.deepTerms` is set to `false`.\nIt also contains a heuristic to allow \"shallow terms\" to be delaborated, even if they appear deep in\nan expression, which prevents terms such as atomic expressions or `OfNat.ofNat` literals from being\ndelaborated as `⋯`.\n","docLink":"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.shouldOmitExpr","kind":"def","line":359,"name":"Lean.PrettyPrinter.Delaborator.shouldOmitExpr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/PrettyPrinter/Delaborator/Basic.lean#L359-L381"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.isShallowExpression\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">isShallowExpression</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">threshold</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Returns true if `e` is a \"shallow\" expression.\nLocal variables, constants, and other atomic expressions are always shallow.\nIn general, an expression is considered to be shallow if its depth is at most `threshold`.\n\nSince the implementation uses `Lean.Expr.approxDepth`, the `threshold` is clamped to `[0, 254]`.\n","docLink":"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.isShallowExpression","kind":"def","line":346,"name":"Lean.PrettyPrinter.Delaborator.isShallowExpression","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/PrettyPrinter/Delaborator/Basic.lean#L346-L357"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.withIncDepth\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">withIncDepth</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">act</span> : <span class=\"fn\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\">DelabM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\">DelabM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Runs the delaborator `act` with increased depth.\nThe depth is used when `pp.deepTerms` is `false` to determine what is a deep term.\nSee also `Lean.PrettyPrinter.Delaborator.Context.depth`.\n","docLink":"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.withIncDepth","kind":"def","line":338,"name":"Lean.PrettyPrinter.Delaborator.withIncDepth","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/PrettyPrinter/Delaborator/Basic.lean#L338-L344"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.addOmissionInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">addOmissionInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <a href=\"./Lean/SubExpr.html#Lean.SubExpr.Pos\">SubExpr.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">reason</span> : <a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.OmissionReason\">OmissionReason</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\">DelabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.addOmissionInfo","kind":"def","line":335,"name":"Lean.PrettyPrinter.Delaborator.addOmissionInfo","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/PrettyPrinter/Delaborator/Basic.lean#L335-L336"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.OmissionReason.toString\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">OmissionReason</span>.<span class=\"name\">toString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.OmissionReason\">OmissionReason</a> → <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"","docLink":"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.OmissionReason.toString","kind":"def","line":329,"name":"Lean.PrettyPrinter.Delaborator.OmissionReason.toString","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/PrettyPrinter/Delaborator/Basic.lean#L329-L333"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.OmissionReason.string\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">OmissionReason</span>.<span class=\"name\">string</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.OmissionReason\">OmissionReason</a></div></div>","info":{"doc":"","docLink":"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.OmissionReason.string","kind":"ctor","line":327,"name":"Lean.PrettyPrinter.Delaborator.OmissionReason.string","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/PrettyPrinter/Delaborator/Basic.lean#L327-L327"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.OmissionReason.maxSteps\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">OmissionReason</span>.<span class=\"name\">maxSteps</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.OmissionReason\">OmissionReason</a></div></div>","info":{"doc":"","docLink":"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.OmissionReason.maxSteps","kind":"ctor","line":326,"name":"Lean.PrettyPrinter.Delaborator.OmissionReason.maxSteps","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/PrettyPrinter/Delaborator/Basic.lean#L326-L326"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.OmissionReason.proof\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">OmissionReason</span>.<span class=\"name\">proof</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.OmissionReason\">OmissionReason</a></div></div>","info":{"doc":"","docLink":"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.OmissionReason.proof","kind":"ctor","line":325,"name":"Lean.PrettyPrinter.Delaborator.OmissionReason.proof","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/PrettyPrinter/Delaborator/Basic.lean#L325-L325"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.OmissionReason.deep\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">OmissionReason</span>.<span class=\"name\">deep</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.OmissionReason\">OmissionReason</a></div></div>","info":{"doc":"","docLink":"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.OmissionReason.deep","kind":"ctor","line":324,"name":"Lean.PrettyPrinter.Delaborator.OmissionReason.deep","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/PrettyPrinter/Delaborator/Basic.lean#L324-L324"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.OmissionReason\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">OmissionReason</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.OmissionReason","kind":"inductive","line":323,"name":"Lean.PrettyPrinter.Delaborator.OmissionReason","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/PrettyPrinter/Delaborator/Basic.lean#L323-L327"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.withBindingBodyUnusedName\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">withBindingBodyUnusedName</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> → <span class=\"fn\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\">DelabM</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">preserveName</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\">DelabM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Enters the body of the current expression, which must be a lambda or forall.\nThe binding variable is passed to `d` as `Syntax`, and it is an identifier that has been annotated with the fvar expression\nfor the variable.\n\nIf `preserveName` is `false` (the default), gives the binder an unused name.\nOtherwise, it tries to preserve the textual form of the name, preserving whether it is hygienic.\n","docLink":"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.withBindingBodyUnusedName","kind":"def","line":311,"name":"Lean.PrettyPrinter.Delaborator.withBindingBodyUnusedName","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/PrettyPrinter/Delaborator/Basic.lean#L311-L321"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.mkAnnotatedIdent\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">mkAnnotatedIdent</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\">DelabM</a> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Ident\">Ident</a></span></div></div>","info":{"doc":"Creates an identifier that is annotated with the term `e`, using a fresh position using the `HoleIterator`.\n","docLink":"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.mkAnnotatedIdent","kind":"def","line":302,"name":"Lean.PrettyPrinter.Delaborator.mkAnnotatedIdent","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/PrettyPrinter/Delaborator/Basic.lean#L302-L309"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.getUnusedName\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">getUnusedName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">suggestion</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">body</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">preserveName</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\">DelabM</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"Gets an name based on `suggestion` that is unused in the local context.\nErases macro scopes.\nIf `pp.safeShadowing` is true, then the name is allowed to shadow a name in the local context\nif the name does not appear in `body`.\n\nIf `preserveName` is false, then returns the name, possibly with fresh macro scopes added.\nIf `suggestion` has macro scopes then the result does as well.\n","docLink":"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.getUnusedName","kind":"def","line":268,"name":"Lean.PrettyPrinter.Delaborator.getUnusedName","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/PrettyPrinter/Delaborator/Basic.lean#L268-L300"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.withAnnotateTermInfoUnlessAnnotated\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">withAnnotateTermInfoUnlessAnnotated</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a></div></div>","info":{"doc":"Modifies the delaborator so that it ensures resulting term is annotated using `annotateTermInfoUnlessAnnotated`.\n","docLink":"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.withAnnotateTermInfoUnlessAnnotated","kind":"def","line":261,"name":"Lean.PrettyPrinter.Delaborator.withAnnotateTermInfoUnlessAnnotated","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/PrettyPrinter/Delaborator/Basic.lean#L261-L266"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.withAnnotateTermInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">withAnnotateTermInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a></div></div>","info":{"doc":"Modifies the delaborator so that it annotates the resulting term using `annotateTermInfo`.\n","docLink":"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.withAnnotateTermInfo","kind":"def","line":254,"name":"Lean.PrettyPrinter.Delaborator.withAnnotateTermInfo","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/PrettyPrinter/Delaborator/Basic.lean#L254-L259"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.annotateTermInfoUnlessAnnotated\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">annotateTermInfoUnlessAnnotated</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Term\">Term</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a></div></div>","info":{"doc":"Annotates the term with the current expression position and registers `TermInfo`\nto associate the term to the current expression, unless the syntax has a synthetic position\nand associated `Info` already.\n","docLink":"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.annotateTermInfoUnlessAnnotated","kind":"def","line":243,"name":"Lean.PrettyPrinter.Delaborator.annotateTermInfoUnlessAnnotated","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/PrettyPrinter/Delaborator/Basic.lean#L243-L252"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.annotateTermInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">annotateTermInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Term\">Term</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a></div></div>","info":{"doc":"Annotates the term with the current expression position and registers `TermInfo`\nto associate the term to the current expression.\n","docLink":"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.annotateTermInfo","kind":"def","line":234,"name":"Lean.PrettyPrinter.Delaborator.annotateTermInfo","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/PrettyPrinter/Delaborator/Basic.lean#L234-L241"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.addDelabTermInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">addDelabTermInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <a href=\"./Lean/SubExpr.html#Lean.SubExpr.Pos\">SubExpr.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isBinder</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">location?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Data/DeclarationRange.html#Lean.DeclarationLocation\">DeclarationLocation</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">docString?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">explicit</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\">DelabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.addDelabTermInfo","kind":"def","line":224,"name":"Lean.PrettyPrinter.Delaborator.addDelabTermInfo","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/PrettyPrinter/Delaborator/Basic.lean#L224-L232"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.addFieldInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">addFieldInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <a href=\"./Lean/SubExpr.html#Lean.SubExpr.Pos\">SubExpr.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">projName </span><span class=\"fn\">fieldName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\">DelabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.addFieldInfo","kind":"def","line":212,"name":"Lean.PrettyPrinter.Delaborator.addFieldInfo","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/PrettyPrinter/Delaborator/Basic.lean#L212-L222"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.addTermInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">addTermInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <a href=\"./Lean/SubExpr.html#Lean.SubExpr.Pos\">SubExpr.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isBinder</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\">DelabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.addTermInfo","kind":"def","line":199,"name":"Lean.PrettyPrinter.Delaborator.addTermInfo","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/PrettyPrinter/Delaborator/Basic.lean#L199-L210"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.annotateCurPos\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">annotateCurPos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Term\">Term</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a></div></div>","info":{"doc":"","docLink":"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.annotateCurPos","kind":"def","line":196,"name":"Lean.PrettyPrinter.Delaborator.annotateCurPos","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/PrettyPrinter/Delaborator/Basic.lean#L196-L197"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.annotatePos\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">annotatePos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pos</span> : <a href=\"./Lean/SubExpr.html#Lean.SubExpr.Pos\">SubExpr.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Term\">Term</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta/Defs.html#Lean.Syntax.Term\">Term</a></div></div>","info":{"doc":"","docLink":"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.annotatePos","kind":"def","line":193,"name":"Lean.PrettyPrinter.Delaborator.annotatePos","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/PrettyPrinter/Delaborator/Basic.lean#L193-L194"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.withOptionAtCurrPos\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">withOptionAtCurrPos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <a href=\"./Lean/Data/KVMap.html#Lean.DataValue\">DataValue</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\">DelabM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\">DelabM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Set the given option at the current position and execute `x` in this context. ","docLink":"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.withOptionAtCurrPos","kind":"def","line":184,"name":"Lean.PrettyPrinter.Delaborator.withOptionAtCurrPos","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/PrettyPrinter/Delaborator/Basic.lean#L184-L191"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.whenNotPPOption\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">whenNotPPOption</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">opt</span> : <span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Options\">Options</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a></div></div>","info":{"doc":"","docLink":"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.whenNotPPOption","kind":"def","line":180,"name":"Lean.PrettyPrinter.Delaborator.whenNotPPOption","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/PrettyPrinter/Delaborator/Basic.lean#L180-L182"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.whenPPOption\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">whenPPOption</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">opt</span> : <span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Options\">Options</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a></div></div>","info":{"doc":"","docLink":"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.whenPPOption","kind":"def","line":176,"name":"Lean.PrettyPrinter.Delaborator.whenPPOption","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/PrettyPrinter/Delaborator/Basic.lean#L176-L178"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.getPPOption\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">getPPOption</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">opt</span> : <span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Options\">Options</a> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\">DelabM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Evaluate option accessor, using subterm-specific options if set. ","docLink":"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.getPPOption","kind":"def","line":172,"name":"Lean.PrettyPrinter.Delaborator.getPPOption","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/PrettyPrinter/Delaborator/Basic.lean#L172-L174"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.getOptionsAtCurrPos\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">getOptionsAtCurrPos</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\">DelabM</a> <a href=\"./Lean/Data/Options.html#Lean.Options\">Options</a></span></div></div>","info":{"doc":"","docLink":"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.getOptionsAtCurrPos","kind":"def","line":164,"name":"Lean.PrettyPrinter.Delaborator.getOptionsAtCurrPos","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/PrettyPrinter/Delaborator/Basic.lean#L164-L170"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.getExprKind\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">getExprKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\">DelabM</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"","docLink":"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.getExprKind","kind":"def","line":142,"name":"Lean.PrettyPrinter.Delaborator.getExprKind","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/PrettyPrinter/Delaborator/Basic.lean#L142-L162"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.attrApp_delab_\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">attrApp_delab_</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"`@[app_delab c]` registers a delaborator for applications with head constant `c`.\nSuch delaborators also apply to the constant `c` itself (known as a \"nullary application\").\n\nThis attribute should be applied to definitions of type `Lean.PrettyPrinter.Delaborator.Delab`.\n\nWhen defining delaborators for constant applications, one should prefer this attribute over `@[delab app.c]`,\nas `@[app_delab c]` first performs name resolution on `c` in the current scope.\n","docLink":"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.attrApp_delab_","kind":"def","line":136,"name":"Lean.PrettyPrinter.Delaborator.attrApp_delab_","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/PrettyPrinter/Delaborator/Basic.lean#L136-L140"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.delabAttribute\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delabAttribute</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/KeyedDeclsAttribute.html#Lean.KeyedDeclsAttribute\">KeyedDeclsAttribute</a> <a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\">Delab</a></span></div></div>","info":{"doc":"Registers a delaborator.\n\n`@[delab k]` registers a declaration of type `Lean.PrettyPrinter.Delaborator.Delab` for the\n`Lean.Expr` constructor `k`. Multiple delaborators for a single constructor are tried in turn until\nthe first success. If the term to be delaborated is an application of a constant `c`, elaborators\nfor `app.c` are tried first; this is also done for `Expr.const`s (\"nullary applications\") to reduce\nspecial casing. If the term is an `Expr.mdata` with a single key `k`, `mdata.k` is tried first.\n","docLink":"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.delabAttribute","kind":"opaque","line":101,"name":"Lean.PrettyPrinter.Delaborator.delabAttribute","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/PrettyPrinter/Delaborator/Basic.lean#L101-L125"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.instMonadStateOfHoleIteratorDelabM\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">instMonadStateOfHoleIteratorDelabM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf\">MonadStateOf</a> <a href=\"./Lean/PrettyPrinter/Delaborator/SubExpr.html#Lean.PrettyPrinter.Delaborator.SubExpr.HoleIterator\">SubExpr.HoleIterator</a> <a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\">DelabM</a></span></div></div>","info":{"doc":"","docLink":"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.instMonadStateOfHoleIteratorDelabM","kind":"instance","line":94,"name":"Lean.PrettyPrinter.Delaborator.instMonadStateOfHoleIteratorDelabM","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/PrettyPrinter/Delaborator/Basic.lean#L94-L99"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.instMonadWithReaderOfSubExprDelabM\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">instMonadWithReaderOfSubExprDelabM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadWithReaderOf\">MonadWithReaderOf</a> <a href=\"./Lean/SubExpr.html#Lean.SubExpr\">SubExpr</a> <a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\">DelabM</a></span></div></div>","info":{"doc":"","docLink":"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.instMonadWithReaderOfSubExprDelabM","kind":"instance","line":91,"name":"Lean.PrettyPrinter.Delaborator.instMonadWithReaderOfSubExprDelabM","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/PrettyPrinter/Delaborator/Basic.lean#L91-L92"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.instMonadReaderOfSubExprDelabM\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">instMonadReaderOfSubExprDelabM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadReaderOf\">MonadReaderOf</a> <a href=\"./Lean/SubExpr.html#Lean.SubExpr\">SubExpr</a> <a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\">DelabM</a></span></div></div>","info":{"doc":"","docLink":"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.instMonadReaderOfSubExprDelabM","kind":"instance","line":88,"name":"Lean.PrettyPrinter.Delaborator.instMonadReaderOfSubExprDelabM","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/PrettyPrinter/Delaborator/Basic.lean#L88-L89"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.instOrElseDelabM\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">instOrElseDelabM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OrElse\">OrElse</a> <span class=\"fn\">(<a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\">DelabM</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.instOrElseDelabM","kind":"instance","line":85,"name":"Lean.PrettyPrinter.Delaborator.instOrElseDelabM","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/PrettyPrinter/Delaborator/Basic.lean#L85-L85"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.instAlternativeDelabM\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">instAlternativeDelabM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Control/Basic.html#Alternative\">Alternative</a> <a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\">DelabM</a></span></div></div>","info":{"doc":"","docLink":"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.instAlternativeDelabM","kind":"instance","line":80,"name":"Lean.PrettyPrinter.Delaborator.instAlternativeDelabM","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/PrettyPrinter/Delaborator/Basic.lean#L80-L82"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.failure\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">failure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\">DelabM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.failure","kind":"def","line":77,"name":"Lean.PrettyPrinter.Delaborator.failure","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/PrettyPrinter/Delaborator/Basic.lean#L77-L78"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.orElse\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">orElse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d₁</span> : <span class=\"fn\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\">DelabM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Unit\">Unit</a> → <span class=\"fn\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\">DelabM</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\">DelabM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.orElse","kind":"def","line":74,"name":"Lean.PrettyPrinter.Delaborator.orElse","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/PrettyPrinter/Delaborator/Basic.lean#L74-L75"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.instInhabitedDelabM\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">instInhabitedDelabM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\">DelabM</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.instInhabitedDelabM","kind":"instance","line":71,"name":"Lean.PrettyPrinter.Delaborator.instInhabitedDelabM","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/PrettyPrinter/Delaborator/Basic.lean#L71-L72"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">Delab</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Delab","kind":"def","line":69,"name":"Lean.PrettyPrinter.Delaborator.Delab","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/PrettyPrinter/Delaborator/Basic.lean#L69-L69"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">DelabM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.DelabM","kind":"def","line":68,"name":"Lean.PrettyPrinter.Delaborator.DelabM","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/PrettyPrinter/Delaborator/Basic.lean#L68-L68"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.delabFailureId\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">delabFailureId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/InternalExceptionId.html#Lean.InternalExceptionId\">InternalExceptionId</a></div></div>","info":{"doc":"","docLink":"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.delabFailureId","kind":"opaque","line":66,"name":"Lean.PrettyPrinter.Delaborator.delabFailureId","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/PrettyPrinter/Delaborator/Basic.lean#L66-L66"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.State.holeIter\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">State</span>.<span class=\"name\">holeIter</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/SubExpr.html#Lean.PrettyPrinter.Delaborator.SubExpr.HoleIterator\">SubExpr.HoleIterator</a></div></div>","info":{"doc":"See `SubExpr.nextExtraPos`. ","docLink":"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.State.holeIter","kind":"def","line":62,"name":"Lean.PrettyPrinter.Delaborator.State.holeIter","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/PrettyPrinter/Delaborator/Basic.lean#L62-L62"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.State.infos\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">State</span>.<span class=\"name\">infos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/SubExpr.html#Lean.SubExpr.PosMap\">SubExpr.PosMap</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Elab.Info</a></span></div></div>","info":{"doc":"We attach `Elab.Info` at various locations in the `Syntax` output in order to convey\nits semantics. While the elaborator emits `InfoTree`s, here we have no real text location tree\nto traverse, so we use a flattened map. ","docLink":"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.State.infos","kind":"def","line":60,"name":"Lean.PrettyPrinter.Delaborator.State.infos","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/PrettyPrinter/Delaborator/Basic.lean#L60-L60"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.State.steps\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">State</span>.<span class=\"name\">steps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"The number of `delab` steps so far. Used by `pp.maxSteps` to stop delaboration. ","docLink":"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.State.steps","kind":"def","line":56,"name":"Lean.PrettyPrinter.Delaborator.State.steps","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/PrettyPrinter/Delaborator/Basic.lean#L56-L56"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">steps</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">infos</span> : <span class=\"fn\"><a href=\"./Lean/SubExpr.html#Lean.SubExpr.PosMap\">SubExpr.PosMap</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Elab.Info</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">holeIter</span> : <a href=\"./Lean/PrettyPrinter/Delaborator/SubExpr.html#Lean.PrettyPrinter.Delaborator.SubExpr.HoleIterator\">SubExpr.HoleIterator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.State\">State</a></div></div>","info":{"doc":"","docLink":"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.State.mk","kind":"ctor","line":54,"name":"Lean.PrettyPrinter.Delaborator.State.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/PrettyPrinter/Delaborator/Basic.lean#L54-L54"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.State\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.State","kind":"structure","line":54,"name":"Lean.PrettyPrinter.Delaborator.State","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/PrettyPrinter/Delaborator/Basic.lean#L54-L62"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Context.depth\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">Context</span>.<span class=\"name\">depth</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"Current recursion depth during delaboration. Used by the `pp.deepTerms false` option. ","docLink":"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Context.depth","kind":"def","line":52,"name":"Lean.PrettyPrinter.Delaborator.Context.depth","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/PrettyPrinter/Delaborator/Basic.lean#L52-L52"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Context.subExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">Context</span>.<span class=\"name\">subExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/SubExpr.html#Lean.SubExpr\">SubExpr</a></div></div>","info":{"doc":"","docLink":"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Context.subExpr","kind":"def","line":50,"name":"Lean.PrettyPrinter.Delaborator.Context.subExpr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/PrettyPrinter/Delaborator/Basic.lean#L50-L50"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Context.inPattern\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">Context</span>.<span class=\"name\">inPattern</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Context.inPattern","kind":"def","line":49,"name":"Lean.PrettyPrinter.Delaborator.Context.inPattern","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/PrettyPrinter/Delaborator/Basic.lean#L49-L49"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Context.openDecls\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">Context</span>.<span class=\"name\">openDecls</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Data/OpenDecl.html#Lean.OpenDecl\">OpenDecl</a></span></div></div>","info":{"doc":"","docLink":"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Context.openDecls","kind":"def","line":48,"name":"Lean.PrettyPrinter.Delaborator.Context.openDecls","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/PrettyPrinter/Delaborator/Basic.lean#L48-L48"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Context.currNamespace\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">Context</span>.<span class=\"name\">currNamespace</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"","docLink":"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Context.currNamespace","kind":"def","line":47,"name":"Lean.PrettyPrinter.Delaborator.Context.currNamespace","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/PrettyPrinter/Delaborator/Basic.lean#L47-L47"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Context.optionsPerPos\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">Context</span>.<span class=\"name\">optionsPerPos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/SubExpr.html#Lean.PrettyPrinter.Delaborator.OptionsPerPos\">OptionsPerPos</a></div></div>","info":{"doc":"","docLink":"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Context.optionsPerPos","kind":"def","line":46,"name":"Lean.PrettyPrinter.Delaborator.Context.optionsPerPos","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/PrettyPrinter/Delaborator/Basic.lean#L46-L46"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Context.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">optionsPerPos</span> : <a href=\"./Lean/PrettyPrinter/Delaborator/SubExpr.html#Lean.PrettyPrinter.Delaborator.OptionsPerPos\">OptionsPerPos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">currNamespace</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">openDecls</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Data/OpenDecl.html#Lean.OpenDecl\">OpenDecl</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inPattern</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">subExpr</span> : <a href=\"./Lean/SubExpr.html#Lean.SubExpr\">SubExpr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">depth</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Context\">Context</a></div></div>","info":{"doc":"","docLink":"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Context.mk","kind":"ctor","line":45,"name":"Lean.PrettyPrinter.Delaborator.Context.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/PrettyPrinter/Delaborator/Basic.lean#L45-L45"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Context\"><span class=\"name\">Lean</span>.<span class=\"name\">PrettyPrinter</span>.<span class=\"name\">Delaborator</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/PrettyPrinter/Delaborator/Basic.html#Lean.PrettyPrinter.Delaborator.Context","kind":"structure","line":45,"name":"Lean.PrettyPrinter.Delaborator.Context","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/PrettyPrinter/Delaborator/Basic.lean#L45-L52"}}],"imports":["Lean.KeyedDeclsAttribute","Lean.PrettyPrinter.Delaborator.Options","Lean.PrettyPrinter.Delaborator.SubExpr","Lean.PrettyPrinter.Delaborator.TopDownAnalyze","Lean.Elab.InfoTree.Main","Init.Data.String.Basic","Init.Data.ToString.Name"],"instances":[{"className":"Inhabited","name":"Lean.PrettyPrinter.Delaborator.instInhabitedDelabM","typeNames":["Lean.PrettyPrinter.Delaborator.DelabM"]},{"className":"Alternative","name":"Lean.PrettyPrinter.Delaborator.instAlternativeDelabM","typeNames":["Lean.PrettyPrinter.Delaborator.DelabM"]},{"className":"OrElse","name":"Lean.PrettyPrinter.Delaborator.instOrElseDelabM","typeNames":["Lean.PrettyPrinter.Delaborator.DelabM"]},{"className":"MonadReaderOf","name":"Lean.PrettyPrinter.Delaborator.instMonadReaderOfSubExprDelabM","typeNames":["Lean.SubExpr","Lean.PrettyPrinter.Delaborator.DelabM"]},{"className":"MonadWithReaderOf","name":"Lean.PrettyPrinter.Delaborator.instMonadWithReaderOfSubExprDelabM","typeNames":["Lean.SubExpr","Lean.PrettyPrinter.Delaborator.DelabM"]},{"className":"MonadStateOf","name":"Lean.PrettyPrinter.Delaborator.instMonadStateOfHoleIteratorDelabM","typeNames":["Lean.PrettyPrinter.Delaborator.SubExpr.HoleIterator","Lean.PrettyPrinter.Delaborator.DelabM"]}],"name":"Lean.PrettyPrinter.Delaborator.Basic"}