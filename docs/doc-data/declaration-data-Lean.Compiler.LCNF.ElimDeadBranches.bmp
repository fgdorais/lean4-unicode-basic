{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.elimDeadBranches\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">elimDeadBranches</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/PassManager.html#Lean.Compiler.LCNF.Pass\">Pass</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.elimDeadBranches","kind":"def","line":626,"name":"Lean.Compiler.LCNF.elimDeadBranches","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L626-L627"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.Decl.elimDeadBranches\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Decl</span>.<span class=\"name\">elimDeadBranches</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decls</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.Decl.elimDeadBranches","kind":"def","line":604,"name":"Lean.Compiler.LCNF.Decl.elimDeadBranches","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L604-L624"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.elimDead\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">elimDead</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">assignment</span> : <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Assignment\">Assignment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a></span></div></div>","info":{"doc":"Use the information produced by the abstract interpreter to:\n- Eliminate branches that we know cannot be hit\n- Eliminate values that we know have to be constants.\n","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.elimDead","kind":"def","line":558,"name":"Lean.Compiler.LCNF.UnreachableBranches.elimDead","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L558-L599"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.inferMain\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">inferMain</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpM\">InterpM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Run `inferStep` until it reaches a fix point.\n","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.inferMain","kind":"opaque","line":546,"name":"Lean.Compiler.LCNF.UnreachableBranches.inferMain","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L546-L556"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.inferStep\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">inferStep</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpM\">InterpM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Rerun the abstract interpreter on all declarations except of the unsafe\nones. Return whether any `Value` got updated in the process.\n","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.inferStep","kind":"def","line":524,"name":"Lean.Compiler.LCNF.UnreachableBranches.inferStep","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L524-L544"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.interpCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">interpCode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a> â†’ <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpM\">InterpM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span></div></div>","info":{"doc":"The actual abstract interpreter on a block of `Code`.\n","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.interpCode","kind":"opaque","line":424,"name":"Lean.Compiler.LCNF.UnreachableBranches.interpCode","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L424-L521"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.updateFunDeclParamsTop\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">updateFunDeclParamsTop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">params</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpM\">InterpM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.updateFunDeclParamsTop","kind":"def","line":403,"name":"Lean.Compiler.LCNF.UnreachableBranches.updateFunDeclParamsTop","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L403-L411"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.updateFunDeclParamsAssignment\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">updateFunDeclParamsAssignment</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">params</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpM\">InterpM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Return true if the assignment of at least one parameter has been updated.\nFurthermore if we see that `params.size != args.size` we know that this is\na partial application and set the values of the remaining parameters to\n`top` since it is impossible to track what will happen with them from here on.\n","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.updateFunDeclParamsAssignment","kind":"def","line":376,"name":"Lean.Compiler.LCNF.UnreachableBranches.updateFunDeclParamsAssignment","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L376-L401"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.updateCurrFnSummary\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">updateCurrFnSummary</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpM\">InterpM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Widen the value of the current function by `v`.\n","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.updateCurrFnSummary","kind":"def","line":367,"name":"Lean.Compiler.LCNF.UnreachableBranches.updateCurrFnSummary","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L367-L374"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.resetVarAssignment\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">resetVarAssignment</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">var</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpM\">InterpM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Set the value of `var` to `bot`.\n","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.resetVarAssignment","kind":"def","line":361,"name":"Lean.Compiler.LCNF.UnreachableBranches.resetVarAssignment","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L361-L365"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.updateVarAssignment\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">updateVarAssignment</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">var</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">newVal</span> : <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpM\">InterpM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Update the assignment of `var` by merging the current value with `newVal`.\n","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.updateVarAssignment","kind":"def","line":353,"name":"Lean.Compiler.LCNF.UnreachableBranches.updateVarAssignment","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L353-L359"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.findArgValue\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">findArgValue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arg</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Arg\">Arg</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpM\">InterpM</a> <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a></span></div></div>","info":{"doc":"Find the value of `arg` using the logic of `findVarValue`.\n","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.findArgValue","kind":"def","line":345,"name":"Lean.Compiler.LCNF.UnreachableBranches.findArgValue","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L345-L351"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.findVarValue\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">findVarValue</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">var</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpM\">InterpM</a> <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a></span></div></div>","info":{"doc":"Obtain the `Value` associated with `var` from the context of `InterpM`.\nIf none is available return `Value.bot`.\n","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.findVarValue","kind":"def","line":337,"name":"Lean.Compiler.LCNF.UnreachableBranches.findVarValue","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L337-L343"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.modifyAssignment\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">modifyAssignment</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Assignment\">Assignment</a> â†’ <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Assignment\">Assignment</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpM\">InterpM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Run `f` on the variable `Assignment` of the current function.\n","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.modifyAssignment","kind":"def","line":329,"name":"Lean.Compiler.LCNF.UnreachableBranches.modifyAssignment","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L329-L335"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.findFunVal?\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">findFunVal?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpM\">InterpM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.findFunVal?","kind":"def","line":324,"name":"Lean.Compiler.LCNF.UnreachableBranches.findFunVal?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L324-L327"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.getFunVal\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">getFunVal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">funIdx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpM\">InterpM</a> <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a></span></div></div>","info":{"doc":"Get the `Value` of a certain function in the current block by index.\n","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.getFunVal","kind":"def","line":318,"name":"Lean.Compiler.LCNF.UnreachableBranches.getFunVal","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L318-L322"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.getAssignment\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">getAssignment</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpM\">InterpM</a> <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Assignment\">Assignment</a></span></div></div>","info":{"doc":"Get the variable `Assignment` of the current function.\n","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.getAssignment","kind":"def","line":312,"name":"Lean.Compiler.LCNF.UnreachableBranches.getAssignment","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L312-L316"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpM\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">InterpM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The monad which powers the abstract interpreter.\n","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpM","kind":"def","line":307,"name":"Lean.Compiler.LCNF.UnreachableBranches.InterpM","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L307-L310"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpState.funVals\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">InterpState</span>.<span class=\"name\">funVals</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpState\">InterpState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a></span></div></div>","info":{"doc":"`Value`s of functions in the `InterpContext` use during computation of\nthe fixpoint. Afterwards they are stored into the `Environment`.\n","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpState.funVals","kind":"def","line":305,"name":"Lean.Compiler.LCNF.UnreachableBranches.InterpState.funVals","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L305-L305"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpState.assignments\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">InterpState</span>.<span class=\"name\">assignments</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpState\">InterpState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Assignment\">Assignment</a></span></div></div>","info":{"doc":"`Assignment`s of functions in the `InterpContext`.\n","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpState.assignments","kind":"def","line":300,"name":"Lean.Compiler.LCNF.UnreachableBranches.InterpState.assignments","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L300-L300"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpState.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">InterpState</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">assignments</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Assignment\">Assignment</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">funVals</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpState\">InterpState</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpState.mk","kind":"ctor","line":296,"name":"Lean.Compiler.LCNF.UnreachableBranches.InterpState.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L296-L296"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpState\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">InterpState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpState","kind":"structure","line":296,"name":"Lean.Compiler.LCNF.UnreachableBranches.InterpState","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L296-L305"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpContext.currFnIdx\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">InterpContext</span>.<span class=\"name\">currFnIdx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpContext\">InterpContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"The index of the function we are currently operating on in `decls.`\n","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpContext.currFnIdx","kind":"def","line":294,"name":"Lean.Compiler.LCNF.UnreachableBranches.InterpContext.currFnIdx","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L294-L294"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpContext.decls\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">InterpContext</span>.<span class=\"name\">decls</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpContext\">InterpContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a></span></div></div>","info":{"doc":"The list of `Decl`s we are operating on in `InterpM`. This can be\na single declaration or a mutual block of declarations where their\nanalysis might influence each other as we approach the fixpoint.\n","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpContext.decls","kind":"def","line":290,"name":"Lean.Compiler.LCNF.UnreachableBranches.InterpContext.decls","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L290-L290"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpContext.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">InterpContext</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decls</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">currFnIdx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpContext\">InterpContext</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpContext.mk","kind":"ctor","line":284,"name":"Lean.Compiler.LCNF.UnreachableBranches.InterpContext.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L284-L284"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">InterpContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The context of `InterpM`.\n","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.InterpContext","kind":"structure","line":281,"name":"Lean.Compiler.LCNF.UnreachableBranches.InterpContext","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L281-L294"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Assignment\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Assignment</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A map from variable identifiers to the `Value` produced by the abstract\ninterpreter for them.\n","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Assignment","kind":"def","line":275,"name":"Lean.Compiler.LCNF.UnreachableBranches.Assignment","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L275-L279"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.getFunctionSummary?\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">getFunctionSummary?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fid</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a></span></div></div>","info":{"doc":"Obtain the `Value` for a function name if possible.\n","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.getFunctionSummary?","kind":"def","line":267,"name":"Lean.Compiler.LCNF.UnreachableBranches.getFunctionSummary?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L267-L273"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.addFunctionSummary\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">addFunctionSummary</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fid</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a></div></div>","info":{"doc":"Add a `Value` for a function name.\n","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.addFunctionSummary","kind":"def","line":261,"name":"Lean.Compiler.LCNF.UnreachableBranches.addFunctionSummary","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L261-L265"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.functionSummariesExt\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">functionSummariesExt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/EnvExtension.html#Lean.SimplePersistentEnvExtension\">SimplePersistentEnvExtension</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a>) <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.FunctionSummaries\">FunctionSummaries</a></span></div></div>","info":{"doc":"Storing `FunctionSummaries` for all functions in a `.olean`.\n","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.functionSummariesExt","kind":"opaque","line":246,"name":"Lean.Compiler.LCNF.UnreachableBranches.functionSummariesExt","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L246-L259"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.FunctionSummaries\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">FunctionSummaries</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A map from function names to the `Value` that the abstract interpreter\nproduced for them.\n","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.FunctionSummaries","kind":"def","line":234,"name":"Lean.Compiler.LCNF.UnreachableBranches.FunctionSummaries","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L234-L238"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.getLiteral\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Value</span>.<span class=\"name\">getLiteral</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.CodeDecl\">CodeDecl</a></span> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>))</span></span></div></div>","info":{"doc":"Attempt to turn a `Value` that is representing a literal into a set of\nauxiliary declarations + the final `FVarId` of the declaration that\ncontains the actual literal. If it is not a literal return none.\n","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.getLiteral","kind":"def","line":196,"name":"Lean.Compiler.LCNF.UnreachableBranches.Value.getLiteral","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L196-L230"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.isLiteral\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Value</span>.<span class=\"name\">isLiteral</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a> â†’ <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"We say that a `Value` is a literal iff it is only a tree of `Value.ctor`\nnodes.\n","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.isLiteral","kind":"opaque","line":184,"name":"Lean.Compiler.LCNF.UnreachableBranches.Value.isLiteral","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L184-L190"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.proj\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Value</span>.<span class=\"name\">proj</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a> â†’ <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> â†’ <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.proj","kind":"opaque","line":179,"name":"Lean.Compiler.LCNF.UnreachableBranches.Value.proj","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L179-L182"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.ofLCNFLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Value</span>.<span class=\"name\">ofLCNFLit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LitValue\">LitValue</a> â†’ <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.ofLCNFLit","kind":"def","line":172,"name":"Lean.Compiler.LCNF.UnreachableBranches.Value.ofLCNFLit","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L172-L177"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.ofNat\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Value</span>.<span class=\"name\">ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.ofNat","kind":"def","line":162,"name":"Lean.Compiler.LCNF.UnreachableBranches.Value.ofNat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L162-L170"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.getCtorArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Value</span>.<span class=\"name\">getCtorArgs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a> â†’ <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> â†’ <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a>)</span></span></span></span></div></div>","info":{"doc":"Obtain the arguments of a certain constructor within the `Value`.\n","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.getCtorArgs","kind":"def","line":149,"name":"Lean.Compiler.LCNF.UnreachableBranches.Value.getCtorArgs","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L149-L160"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.containsCtor\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Value</span>.<span class=\"name\">containsCtor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a> â†’ <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> â†’ <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>","info":{"doc":"Check whether a certain constructor is part of a `Value` by name.\nNote that both `top` and `bot` will always true here. For bot this is\nbecause we have no information about the `Value` so just to be sure\nwe don't claim the absence of a certain constructor.\n","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.containsCtor","kind":"opaque","line":137,"name":"Lean.Compiler.LCNF.UnreachableBranches.Value.containsCtor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L137-L147"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.widening\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Value</span>.<span class=\"name\">widening</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v1 </span><span class=\"fn\">v2</span> : <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a></div></div>","info":{"doc":"Widening operator that guarantees termination in our abstract interpreter. ","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.widening","kind":"def","line":133,"name":"Lean.Compiler.LCNF.UnreachableBranches.Value.widening","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L133-L135"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.truncate\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Value</span>.<span class=\"name\">truncate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a></div></div>","info":{"doc":"Make sure constructors of recursive inductive datatypes can only occur once in each path.\nValues at depth > `maxValueDepth` are also approximated at `top`.\nWe use this function to implement a simple widening operation for our abstract interpreter.\nRecall the widening functions is used to ensure termination in abstract interpreters.\n","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.truncate","kind":"def","line":97,"name":"Lean.Compiler.LCNF.UnreachableBranches.Value.truncate","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L97-L131"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.merge\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Value</span>.<span class=\"name\">merge</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v1 </span><span class=\"fn\">v2</span> : <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a></div></div>","info":{"doc":"Merge two values into one. `bot` is the neutral element, `top` the annihilator.\n","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.merge","kind":"opaque","line":78,"name":"Lean.Compiler.LCNF.UnreachableBranches.Value.merge","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L78-L93"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.addChoice\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Value</span>.<span class=\"name\">addChoice</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">vs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a></span></div></div>","info":{"doc":"Fuse `v` into `vs`. That is do not only append but if we see that `v`\nis a constructor that is already contained within `vs` try to detect\nthe difference between these values and merge them accordingly into a\nchoice node further down the tree.\n","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.addChoice","kind":"opaque","line":62,"name":"Lean.Compiler.LCNF.UnreachableBranches.Value.addChoice","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L62-L76"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.instBEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Value</span>.<span class=\"name\">instBEq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.instBEq","kind":"instance","line":58,"name":"Lean.Compiler.LCNF.UnreachableBranches.Value.instBEq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L58-L58"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Value</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a> â†’ <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a> â†’ <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.beq","kind":"opaque","line":48,"name":"Lean.Compiler.LCNF.UnreachableBranches.Value.beq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L48-L56"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.maxValueDepth\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Value</span>.<span class=\"name\">maxValueDepth</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.maxValueDepth","kind":"def","line":46,"name":"Lean.Compiler.LCNF.UnreachableBranches.Value.maxValueDepth","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L46-L46"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.instReprValue.repr\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">instReprValue</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a> â†’ <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> â†’ <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.instReprValue.repr","kind":"opaque","line":41,"name":"Lean.Compiler.LCNF.UnreachableBranches.instReprValue.repr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.instReprValue\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">instReprValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.instReprValue","kind":"instance","line":41,"name":"Lean.Compiler.LCNF.UnreachableBranches.instReprValue","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.instInhabitedValue\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">instInhabitedValue</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.instInhabitedValue","kind":"instance","line":41,"name":"Lean.Compiler.LCNF.UnreachableBranches.instInhabitedValue","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.instInhabitedValue.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">instInhabitedValue</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.instInhabitedValue.default","kind":"def","line":41,"name":"Lean.Compiler.LCNF.UnreachableBranches.instInhabitedValue.default","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.choice\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Value</span>.<span class=\"name\">choice</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">vs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a></div></div>","info":{"doc":"A set of values are possible.\n","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.choice","kind":"ctor","line":37,"name":"Lean.Compiler.LCNF.UnreachableBranches.Value.choice","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L37-L40"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.ctor\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Value</span>.<span class=\"name\">ctor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">vs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a></div></div>","info":{"doc":"A certain constructor with a certain sets of parameters is possible.\n","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.ctor","kind":"ctor","line":33,"name":"Lean.Compiler.LCNF.UnreachableBranches.Value.ctor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L33-L36"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.top\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Value</span>.<span class=\"name\">top</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a></div></div>","info":{"doc":"All values are possible.\n","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.top","kind":"ctor","line":29,"name":"Lean.Compiler.LCNF.UnreachableBranches.Value.top","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L29-L32"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.bot\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Value</span>.<span class=\"name\">bot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\">Value</a></div></div>","info":{"doc":"Undefined, could be anything we have no information.\n","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value.bot","kind":"ctor","line":25,"name":"Lean.Compiler.LCNF.UnreachableBranches.Value.bot","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L25-L28"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">UnreachableBranches</span>.<span class=\"name\">Value</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The abstract domain of the interpreter. Representing sets of values\nof a certain type.\n","docLink":"./Lean/Compiler/LCNF/ElimDeadBranches.html#Lean.Compiler.LCNF.UnreachableBranches.Value","kind":"inductive","line":20,"name":"Lean.Compiler.LCNF.UnreachableBranches.Value","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/ElimDeadBranches.lean#L20-L41"}}],"imports":["Lean.Compiler.LCNF.CompilerM","Lean.Compiler.LCNF.PassManager","Lean.Compiler.LCNF.PhaseExt","Lean.Compiler.LCNF.InferType"],"instances":[{"className":"Inhabited","name":"Lean.Compiler.LCNF.UnreachableBranches.instInhabitedValue","typeNames":["Lean.Compiler.LCNF.UnreachableBranches.Value"]},{"className":"Repr","name":"Lean.Compiler.LCNF.UnreachableBranches.instReprValue","typeNames":["Lean.Compiler.LCNF.UnreachableBranches.Value"]},{"className":"BEq","name":"Lean.Compiler.LCNF.UnreachableBranches.Value.instBEq","typeNames":["Lean.Compiler.LCNF.UnreachableBranches.Value"]}],"name":"Lean.Compiler.LCNF.ElimDeadBranches"}