{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.isExprDefEqAuxImpl\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">isExprDefEqAuxImpl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t </span><span class=\"fn\">s</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.isExprDefEqAuxImpl","kind":"opaque","line":2112,"name":"Lean.Meta.isExprDefEqAuxImpl","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/ExprDefEq.lean#L2112-L2182"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.DefEqCacheKeyInfo.key\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DefEqCacheKeyInfo</span>.<span class=\"name\">key</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.DefEqCacheKeyInfo\">DefEqCacheKeyInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.DefEqCacheKey\">DefEqCacheKey</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.DefEqCacheKeyInfo.key","kind":"def","line":2078,"name":"Lean.Meta.DefEqCacheKeyInfo.key","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/ExprDefEq.lean#L2078-L2078"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.DefEqCacheKeyInfo.kind\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DefEqCacheKeyInfo</span>.<span class=\"name\">kind</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.DefEqCacheKeyInfo\">DefEqCacheKeyInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.DefEqCacheKind\">DefEqCacheKind</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.DefEqCacheKeyInfo.kind","kind":"def","line":2077,"name":"Lean.Meta.DefEqCacheKeyInfo.kind","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/ExprDefEq.lean#L2077-L2077"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.DefEqCacheKeyInfo.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DefEqCacheKeyInfo</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.DefEqCacheKind\">DefEqCacheKind</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">key</span> : <a href=\"./Lean/Meta/Basic.html#Lean.Meta.DefEqCacheKey\">DefEqCacheKey</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.DefEqCacheKeyInfo\">DefEqCacheKeyInfo</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.DefEqCacheKeyInfo.mk","kind":"ctor","line":2076,"name":"Lean.Meta.DefEqCacheKeyInfo.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/ExprDefEq.lean#L2076-L2076"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.DefEqCacheKeyInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DefEqCacheKeyInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Structure for storing defeq cache key information.\n","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.DefEqCacheKeyInfo","kind":"structure","line":2073,"name":"Lean.Meta.DefEqCacheKeyInfo","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/ExprDefEq.lean#L2073-L2078"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.DefEqCacheKind.permanent\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DefEqCacheKind</span>.<span class=\"name\">permanent</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.DefEqCacheKind\">DefEqCacheKind</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.DefEqCacheKind.permanent","kind":"ctor","line":2065,"name":"Lean.Meta.DefEqCacheKind.permanent","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/ExprDefEq.lean#L2065-L2065"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.DefEqCacheKind.transient\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DefEqCacheKind</span>.<span class=\"name\">transient</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.DefEqCacheKind\">DefEqCacheKind</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.DefEqCacheKind.transient","kind":"ctor","line":2064,"name":"Lean.Meta.DefEqCacheKind.transient","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/ExprDefEq.lean#L2064-L2064"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.DefEqCacheKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DefEqCacheKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.DefEqCacheKind","kind":"inductive","line":2063,"name":"Lean.Meta.DefEqCacheKind","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/ExprDefEq.lean#L2063-L2065"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.DeltaStepResult.diff\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DeltaStepResult</span>.<span class=\"name\">diff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t </span><span class=\"fn\">s</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.DeltaStepResult\">DeltaStepResult</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.DeltaStepResult.diff","kind":"ctor","line":1874,"name":"Lean.Meta.DeltaStepResult.diff","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/ExprDefEq.lean#L1874-L1874"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.DeltaStepResult.cont\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DeltaStepResult</span>.<span class=\"name\">cont</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t </span><span class=\"fn\">s</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.DeltaStepResult\">DeltaStepResult</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.DeltaStepResult.cont","kind":"ctor","line":1873,"name":"Lean.Meta.DeltaStepResult.cont","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/ExprDefEq.lean#L1873-L1873"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.DeltaStepResult.unknown\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DeltaStepResult</span>.<span class=\"name\">unknown</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.DeltaStepResult\">DeltaStepResult</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.DeltaStepResult.unknown","kind":"ctor","line":1872,"name":"Lean.Meta.DeltaStepResult.unknown","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/ExprDefEq.lean#L1872-L1872"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.DeltaStepResult.eq\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DeltaStepResult</span>.<span class=\"name\">eq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.DeltaStepResult\">DeltaStepResult</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.DeltaStepResult.eq","kind":"ctor","line":1872,"name":"Lean.Meta.DeltaStepResult.eq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/ExprDefEq.lean#L1872-L1872"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.DeltaStepResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DeltaStepResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Result type for `isDefEqDelta`\n","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.DeltaStepResult","kind":"inductive","line":1868,"name":"Lean.Meta.DeltaStepResult","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/ExprDefEq.lean#L1868-L1874"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.whenUndefDo\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">whenUndefDo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Data/LBool.html#Lean.LBool\">LBool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.whenUndefDo","kind":"def","line":1819,"name":"Lean.Meta.whenUndefDo","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/ExprDefEq.lean#L1819-L1823"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.checkedAssignImpl\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">checkedAssignImpl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.checkedAssignImpl","kind":"def","line":1051,"name":"Lean.Meta.checkedAssignImpl","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/ExprDefEq.lean#L1051-L1057"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.checkAssignment\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">checkAssignment</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>","info":{"doc":"Auxiliary function for handling constraints of the form `?m a₁ ... aₙ =?= v`.\nIt will check whether we can perform the assignment\n```\n?m := fun fvars => v\n```\nThe result is `none` if the assignment can't be performed.\nThe result is `some newV` where `newV` is a possibly updated `v`. This method may need\nto unfold let-declarations. ","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.checkAssignment","kind":"def","line":1018,"name":"Lean.Meta.checkAssignment","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/ExprDefEq.lean#L1018-L1048"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignmentQuick.check\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CheckAssignmentQuick</span>.<span class=\"name\">check</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hasCtxLocals</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctx</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarDecl</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarDecl\">MetavarDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignmentQuick.check","kind":"def","line":959,"name":"Lean.Meta.CheckAssignmentQuick.check","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/ExprDefEq.lean#L959-L960"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignmentQuick.checkImpl\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CheckAssignmentQuick</span>.<span class=\"name\">checkImpl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hasCtxLocals</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mctx</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarContext\">MetavarContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarDecl</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarDecl\">MetavarDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignmentQuick.checkImpl","kind":"def","line":917,"name":"Lean.Meta.CheckAssignmentQuick.checkImpl","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/ExprDefEq.lean#L917-L957"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.check\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CheckAssignment</span>.<span class=\"name\">check</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.CheckAssignmentM\">CheckAssignmentM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.check","kind":"opaque","line":863,"name":"Lean.Meta.CheckAssignment.check","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/ExprDefEq.lean#L863-L898"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.checkApp\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CheckAssignment</span>.<span class=\"name\">checkApp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.CheckAssignmentM\">CheckAssignmentM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.checkApp","kind":"opaque","line":834,"name":"Lean.Meta.CheckAssignment.checkApp","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/ExprDefEq.lean#L834-L861"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.checkAssignmentAux\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CheckAssignment</span>.<span class=\"name\">checkAssignmentAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hasCtxLocals</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.checkAssignmentAux","kind":"opaque","line":831,"name":"Lean.Meta.CheckAssignment.checkAssignmentAux","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/ExprDefEq.lean#L831-L832"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.assignToConstFun\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CheckAssignment</span>.<span class=\"name\">assignToConstFun</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvar</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">numArgs</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">newMVar</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Auxiliary function used to \"fix\" subterms of the form `?m x_1 ... x_n` where `x_i`s are free variables,\nand one of them is out-of-scope.\nSee `Expr.app` case at `check`.\nIf `ctxApprox` is true, then we solve this case by creating a fresh metavariable ?n with the correct scope,\nan assigning `?m := fun _ ... _ => ?n` ","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.assignToConstFun","kind":"opaque","line":816,"name":"Lean.Meta.CheckAssignment.assignToConstFun","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/ExprDefEq.lean#L816-L828"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.checkMVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CheckAssignment</span>.<span class=\"name\">checkMVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvar</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.CheckAssignmentM\">CheckAssignmentM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.checkMVar","kind":"opaque","line":756,"name":"Lean.Meta.CheckAssignment.checkMVar","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/ExprDefEq.lean#L756-L814"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.checkFVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CheckAssignment</span>.<span class=\"name\">checkFVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvar</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.CheckAssignmentM\">CheckAssignmentM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.checkFVar","kind":"opaque","line":727,"name":"Lean.Meta.CheckAssignment.checkFVar","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/ExprDefEq.lean#L727-L754"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.run\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CheckAssignment</span>.<span class=\"name\">run</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.CheckAssignmentM\">CheckAssignmentM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hasCtxLocals</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.run","kind":"def","line":716,"name":"Lean.Meta.CheckAssignment.run","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/ExprDefEq.lean#L716-L723"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.instMonadCacheExprCheckAssignmentM\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CheckAssignment</span>.<span class=\"name\">instMonadCacheExprCheckAssignmentM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Util/MonadCache.html#Lean.MonadCache\">MonadCache</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.CheckAssignmentM\">CheckAssignmentM</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.instMonadCacheExprCheckAssignmentM","kind":"instance","line":708,"name":"Lean.Meta.CheckAssignment.instMonadCacheExprCheckAssignmentM","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/ExprDefEq.lean#L708-L710"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.throwOutOfScopeFVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CheckAssignment</span>.<span class=\"name\">throwOutOfScopeFVar</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.CheckAssignmentM\">CheckAssignmentM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.throwOutOfScopeFVar","kind":"def","line":699,"name":"Lean.Meta.CheckAssignment.throwOutOfScopeFVar","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/ExprDefEq.lean#L699-L700"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.throwCheckAssignmentFailure\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CheckAssignment</span>.<span class=\"name\">throwCheckAssignmentFailure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.CheckAssignmentM\">CheckAssignmentM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.throwCheckAssignmentFailure","kind":"def","line":696,"name":"Lean.Meta.CheckAssignment.throwCheckAssignmentFailure","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/ExprDefEq.lean#L696-L697"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.CheckAssignmentM\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CheckAssignment</span>.<span class=\"name\">CheckAssignmentM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.CheckAssignmentM","kind":"def","line":694,"name":"Lean.Meta.CheckAssignment.CheckAssignmentM","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/ExprDefEq.lean#L694-L694"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.Context.rhs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CheckAssignment</span>.<span class=\"name\">Context</span>.<span class=\"name\">rhs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.Context.rhs","kind":"def","line":692,"name":"Lean.Meta.CheckAssignment.Context.rhs","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/ExprDefEq.lean#L692-L692"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.Context.hasCtxLocals\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CheckAssignment</span>.<span class=\"name\">Context</span>.<span class=\"name\">hasCtxLocals</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.Context.hasCtxLocals","kind":"def","line":691,"name":"Lean.Meta.CheckAssignment.Context.hasCtxLocals","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/ExprDefEq.lean#L691-L691"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.Context.fvars\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CheckAssignment</span>.<span class=\"name\">Context</span>.<span class=\"name\">fvars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.Context.fvars","kind":"def","line":690,"name":"Lean.Meta.CheckAssignment.Context.fvars","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/ExprDefEq.lean#L690-L690"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.Context.mvarDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CheckAssignment</span>.<span class=\"name\">Context</span>.<span class=\"name\">mvarDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/MetavarContext.html#Lean.MetavarDecl\">MetavarDecl</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.Context.mvarDecl","kind":"def","line":689,"name":"Lean.Meta.CheckAssignment.Context.mvarDecl","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/ExprDefEq.lean#L689-L689"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.Context.mvarId\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CheckAssignment</span>.<span class=\"name\">Context</span>.<span class=\"name\">mvarId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.Context.mvarId","kind":"def","line":688,"name":"Lean.Meta.CheckAssignment.Context.mvarId","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/ExprDefEq.lean#L688-L688"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.Context.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CheckAssignment</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarDecl</span> : <a href=\"./Lean/MetavarContext.html#Lean.MetavarDecl\">MetavarDecl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hasCtxLocals</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rhs</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.Context\">Context</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.Context.mk","kind":"ctor","line":687,"name":"Lean.Meta.CheckAssignment.Context.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/ExprDefEq.lean#L687-L687"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.Context\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CheckAssignment</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.Context","kind":"structure","line":687,"name":"Lean.Meta.CheckAssignment.Context","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/ExprDefEq.lean#L687-L692"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.State.cache\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CheckAssignment</span>.<span class=\"name\">State</span>.<span class=\"name\">cache</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.ExprStructMap\">ExprStructMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.State.cache","kind":"def","line":685,"name":"Lean.Meta.CheckAssignment.State.cache","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/ExprDefEq.lean#L685-L685"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CheckAssignment</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cache</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.ExprStructMap\">ExprStructMap</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.State\">State</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.State.mk","kind":"ctor","line":684,"name":"Lean.Meta.CheckAssignment.State.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/ExprDefEq.lean#L684-L684"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CheckAssignment</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.State","kind":"structure","line":684,"name":"Lean.Meta.CheckAssignment.State","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/ExprDefEq.lean#L684-L685"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.outOfScopeExceptionId\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CheckAssignment</span>.<span class=\"name\">outOfScopeExceptionId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/InternalExceptionId.html#Lean.InternalExceptionId\">InternalExceptionId</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.outOfScopeExceptionId","kind":"opaque","line":682,"name":"Lean.Meta.CheckAssignment.outOfScopeExceptionId","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/ExprDefEq.lean#L682-L682"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.checkAssignmentExceptionId\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CheckAssignment</span>.<span class=\"name\">checkAssignmentExceptionId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/InternalExceptionId.html#Lean.InternalExceptionId\">InternalExceptionId</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.CheckAssignment.checkAssignmentExceptionId","kind":"opaque","line":681,"name":"Lean.Meta.CheckAssignment.checkAssignmentExceptionId","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/ExprDefEq.lean#L681-L681"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.mkAuxMVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">mkAuxMVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lctx</span> : <a href=\"./Lean/LocalContext.html#Lean.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">localInsts</span> : <a href=\"./Lean/MetavarContext.html#Lean.LocalInstances\">LocalInstances</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">numScopeArgs</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.mkAuxMVar","kind":"def","line":676,"name":"Lean.Meta.mkAuxMVar","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/ExprDefEq.lean#L676-L677"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.isDefEqBindingDomain\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">isDefEqBindingDomain</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvars </span><span class=\"fn\">ds₂</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Check whether the types of the free variables at `fvars` are\ndefinitionally equal to the types at `ds₂`.\n\nPre: `fvars.size == ds₂.size`\n\nThis method also updates the set of local instances, and invokes\nthe continuation `k` with the updated set.\n\nWe can't use `withNewLocalInstances` because the `isDefEq fvarType d₂`\nmay use local instances. ","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.isDefEqBindingDomain","kind":"def","line":325,"name":"Lean.Meta.isDefEqBindingDomain","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/ExprDefEq.lean#L325-L351"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.DefEqArgsFirstPassResult.ok\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DefEqArgsFirstPassResult</span>.<span class=\"name\">ok</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">postponedImplicit </span><span class=\"fn\">postponedHO</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.DefEqArgsFirstPassResult\">DefEqArgsFirstPassResult</a></div></div>","info":{"doc":"Succeeded. The array `postponedImplicit` contains the position\nof the implicit arguments for which def-eq has been postponed.\n`postponedHO` contains the higher order output parameters, and parameters\nthat depend on them. They should be processed after the implicit ones.\n`postponedHO` is used to handle applications involving functions that\ncontain higher order output parameters. Example:\n```lean\ngetElem :\n  {cont : Type u_1} → {idx : Type u_2} → {elem : Type u_3} →\n  {dom : cont → idx → Prop} → [self : GetElem cont idx elem dom] →\n  (xs : cont) → (i : idx) → (h : dom xs i) → elem\n```\nThe arguments `dom` and `h` must be processed after all implicit arguments\notherwise higher-order unification problems are generated. See issue #1299,\nwhen trying to solve\n```\ngetElem ?a ?i ?h =?= getElem a i (Fin.val_lt_of_le i ...)\n```\nwe have to solve the constraint\n```\n?dom a i.val =?= LT.lt i.val (Array.size a)\n```\nby solving after the instance has been synthesized, we reduce this constraint to\na simple check.\n","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.DefEqArgsFirstPassResult.ok","kind":"ctor","line":199,"name":"Lean.Meta.DefEqArgsFirstPassResult.ok","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/ExprDefEq.lean#L199-L225"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.DefEqArgsFirstPassResult.failed\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DefEqArgsFirstPassResult</span>.<span class=\"name\">failed</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.DefEqArgsFirstPassResult\">DefEqArgsFirstPassResult</a></div></div>","info":{"doc":"Failed to establish that explicit arguments are def-eq.\nRemark: higher output parameters, and parameters that depend on them\nare postponed.\n","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.DefEqArgsFirstPassResult.failed","kind":"ctor","line":193,"name":"Lean.Meta.DefEqArgsFirstPassResult.failed","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/ExprDefEq.lean#L193-L198"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.DefEqArgsFirstPassResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">DefEqArgsFirstPassResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Result type for `isDefEqArgsFirstPass`.\n","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.DefEqArgsFirstPassResult","kind":"inductive","line":189,"name":"Lean.Meta.DefEqArgsFirstPassResult","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/ExprDefEq.lean#L189-L225"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.isEtaUnassignedMVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">isEtaUnassignedMVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Return `true` if `e` is of the form `fun (x_1 ... x_n) => ?m x_1 ... x_n)`, and `?m` is unassigned.\nRemark: `n` may be 0. ","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.isEtaUnassignedMVar","kind":"def","line":169,"name":"Lean.Meta.isEtaUnassignedMVar","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/ExprDefEq.lean#L169-L181"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.isDefEqStringLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">isDefEqStringLit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s </span><span class=\"fn\">t</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Data/LBool.html#Lean.LBool\">LBool</a></span></div></div>","info":{"doc":"Support for constraints of the form `(\"...\" =?= String.mk cs)` ","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.isDefEqStringLit","kind":"def","line":159,"name":"Lean.Meta.isDefEqStringLit","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/ExprDefEq.lean#L159-L167"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.isDefEqNat\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">isDefEqNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s </span><span class=\"fn\">t</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Data/LBool.html#Lean.LBool\">LBool</a></span></div></div>","info":{"doc":"Support for reducing Nat basic operations. ","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.isDefEqNat","kind":"def","line":145,"name":"Lean.Meta.isDefEqNat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/ExprDefEq.lean#L145-L157"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.isDefEqNative\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">isDefEqNative</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s </span><span class=\"fn\">t</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Data/LBool.html#Lean.LBool\">LBool</a></span></div></div>","info":{"doc":"Support for `Lean.reduceBool` and `Lean.reduceNat` ","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.isDefEqNative","kind":"def","line":134,"name":"Lean.Meta.isDefEqNative","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/ExprDefEq.lean#L134-L143"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.isAbstractedUnassignedMVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">isAbstractedUnassignedMVar</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>","info":{"doc":"Return `true` if `e` is of the form `fun (x_1 ... x_n) => ?m y_1 ... y_k)`, and `?m` is unassigned.\nRemark: `n`, `k` may be 0.\nThis function is used to filter unification problems in\n`isDefEqArgs`/`isDefEqEtaStruct` where we can assign proofs.\nIf one side is of the form described above, then we can likely assign `?m`.\nBut if it's not, we would most likely apply proof irrelevance, which is\nusually very expensive since it needs to unify the types as well.\n","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.isAbstractedUnassignedMVar","kind":"def","line":29,"name":"Lean.Meta.isAbstractedUnassignedMVar","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/ExprDefEq.lean#L29-L48"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.backward.isDefEq.lazyWhnfCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">backward</span>.<span class=\"name\">isDefEq</span>.<span class=\"name\">lazyWhnfCore</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.backward.isDefEq.lazyWhnfCore","kind":"opaque","line":23,"name":"Lean.Meta.backward.isDefEq.lazyWhnfCore","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/ExprDefEq.lean#L23-L27"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/ExprDefEq.html#Lean.Meta.backward.isDefEq.lazyProjDelta\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">backward</span>.<span class=\"name\">isDefEq</span>.<span class=\"name\">lazyProjDelta</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/ExprDefEq.html#Lean.Meta.backward.isDefEq.lazyProjDelta","kind":"opaque","line":17,"name":"Lean.Meta.backward.isDefEq.lazyProjDelta","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/ExprDefEq.lean#L17-L21"}}],"imports":["Lean.Meta.Offset","Lean.Meta.UnificationHint","Lean.Util.OccursCheck"],"instances":[{"className":"Lean.MonadCache","name":"Lean.Meta.CheckAssignment.instMonadCacheExprCheckAssignmentM","typeNames":["Lean.Expr","Lean.Expr","Lean.Meta.CheckAssignment.CheckAssignmentM"]}],"name":"Lean.Meta.ExprDefEq"}