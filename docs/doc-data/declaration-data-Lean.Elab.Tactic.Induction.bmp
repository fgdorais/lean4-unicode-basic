{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.evalFunCases\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">evalFunCases</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.Tactic\">Tactic</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.evalFunCases","kind":"def","line":1095,"name":"Lean.Elab.Tactic.evalFunCases","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Induction.lean#L1095-L1102"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.evalCases\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">evalCases</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.Tactic\">Tactic</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.evalCases","kind":"def","line":1084,"name":"Lean.Elab.Tactic.evalCases","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Induction.lean#L1084-L1093"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.evalCasesCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">evalCasesCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">elimInfo</span> : <a href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.ElimInfo\">Meta.ElimInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">targets</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toTag</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Meta/Defs.html#Lean.Syntax.Ident\">Ident</a> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span> := <a href=\"./Init/Prelude.html#List.toArray\">#[</a><a href=\"./Init/Prelude.html#List.toArray\">]</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"The code path shared between `cases` and `fun_cases`; when we already have an `elimInfo`\nand the `targets` contains the implicit targets\n","docLink":"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.evalCasesCore","kind":"def","line":1054,"name":"Lean.Elab.Tactic.evalCasesCore","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Induction.lean#L1054-L1082"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.evalFunInduction\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">evalFunInduction</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.Tactic\">Tactic</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.evalFunInduction","kind":"def","line":1045,"name":"Lean.Elab.Tactic.evalFunInduction","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Induction.lean#L1045-L1052"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.elabFunTargetCall\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">elabFunTargetCall</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cases</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Elaborates the `foo args` of `fun_induction` or `fun_cases`, inferring the args if omitted from the goal\n","docLink":"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.elabFunTargetCall","kind":"def","line":983,"name":"Lean.Elab.Tactic.elabFunTargetCall","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Induction.lean#L983-L1002"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.tactic.fun_induction.unfolding\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">tactic</span>.<span class=\"name\">fun_induction</span>.<span class=\"name\">unfolding</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.tactic.fun_induction.unfolding","kind":"opaque","line":973,"name":"Lean.Elab.Tactic.tactic.fun_induction.unfolding","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Induction.lean#L973-L981"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.evalInduction\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">evalInduction</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.Tactic\">Tactic</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.evalInduction","kind":"def","line":962,"name":"Lean.Elab.Tactic.evalInduction","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Induction.lean#L962-L970"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.mkInitialTacticInfoForInduction\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">mkInitialTacticInfoForInduction</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> <span class=\"fn\">(<a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Info</a>)</span></span></div></div>","info":{"doc":"If `stx` has a `with` clause, runs `m` within a tactic info node on `induction/cases ... with`.\nThe action `m` returns a list of metavariables to admit. The purpose of this is to let the remaining after goals be recorded\nin the tactic info, while preserving the semantics that when there is a `with` clause, all unhandled alternatives are admitted.\n","docLink":"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.mkInitialTacticInfoForInduction","kind":"def","line":922,"name":"Lean.Elab.Tactic.mkInitialTacticInfoForInduction","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Induction.lean#L922-L930"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.checkInductionTargets\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">checkInductionTargets</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">targets</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.checkInductionTargets","kind":"def","line":913,"name":"Lean.Elab.Tactic.checkInductionTargets","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Induction.lean#L913-L920"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.elabElimTargets\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">elabElimTargets</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">targets</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Meta/Defs.html#Lean.Syntax.Ident\">Ident</a> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span>)</span></div></div>","info":{"doc":"Elaborates the targets (`Lean.Parser.Tactic.elimTarget`),\ngeneralizing them if requested or if otherwise necessary.\n\nReturns\n1. the targets as fvars and\n2. an array of identifier/fvarid pairs so that the `induction`/`cases` tactic can\n   annotate any user-supplied target hypothesis names using `Term.addLocalVarInfo`.\n\nModifies the current goal when generalizing.\n","docLink":"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.elabElimTargets","kind":"def","line":848,"name":"Lean.Elab.Tactic.elabElimTargets","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Induction.lean#L848-L889"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.mkTargetView\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">mkTargetView</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">target</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> <a href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimTargetView\">ElimTargetView</a></span></div></div>","info":{"doc":"Interprets a `Lean.Parser.Tactic.elimTarget`. ","docLink":"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.mkTargetView","kind":"def","line":832,"name":"Lean.Elab.Tactic.mkTargetView","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Induction.lean#L832-L840"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimTargetView.term\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElimTargetView</span>.<span class=\"name\">term</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimTargetView\">ElimTargetView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimTargetView.term","kind":"def","line":830,"name":"Lean.Elab.Tactic.ElimTargetView.term","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Induction.lean#L830-L830"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimTargetView.hIdent?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElimTargetView</span>.<span class=\"name\">hIdent?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimTargetView\">ElimTargetView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Ident\">Ident</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimTargetView.hIdent?","kind":"def","line":829,"name":"Lean.Elab.Tactic.ElimTargetView.hIdent?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Induction.lean#L829-L829"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimTargetView.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElimTargetView</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hIdent?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Ident\">Ident</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">term</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimTargetView\">ElimTargetView</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimTargetView.mk","kind":"ctor","line":828,"name":"Lean.Elab.Tactic.ElimTargetView.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Induction.lean#L828-L828"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimTargetView\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElimTargetView</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"View of `Lean.Parser.Tactic.elimTarget`. ","docLink":"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimTargetView","kind":"structure","line":827,"name":"Lean.Elab.Tactic.ElimTargetView","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Induction.lean#L827-L830"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.tactic.customEliminators\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">tactic</span>.<span class=\"name\">customEliminators</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.tactic.customEliminators","kind":"opaque","line":772,"name":"Lean.Elab.Tactic.tactic.customEliminators","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Induction.lean#L772-L777"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.getInductiveValFromMajor\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">getInductiveValFromMajor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">induction</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">major</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> <a href=\"./Lean/Declaration.html#Lean.InductiveVal\">InductiveVal</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.getInductiveValFromMajor","kind":"def","line":726,"name":"Lean.Elab.Tactic.getInductiveValFromMajor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Induction.lean#L726-L745"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.evalAlts\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElimApp</span>.<span class=\"name\">evalAlts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">elimInfo</span> : <a href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.ElimInfo\">Meta.ElimInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">alts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.Alt\">Alt</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">optPreTac</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">altStxs?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkInfo</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.Info\">Info</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tacStx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">numEqs</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">generalized </span><span class=\"fn\">toClear</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span> := <a href=\"./Init/Prelude.html#List.toArray\">#[</a><a href=\"./Init/Prelude.html#List.toArray\">]</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toTag</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Meta/Defs.html#Lean.Syntax.Ident\">Ident</a> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span> := <a href=\"./Init/Prelude.html#List.toArray\">#[</a><a href=\"./Init/Prelude.html#List.toArray\">]</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.evalAlts","kind":"def","line":335,"name":"Lean.Elab.Tactic.ElimApp.evalAlts","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Induction.lean#L335-L556"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.setMotiveArg\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElimApp</span>.<span class=\"name\">setMotiveArg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId </span><span class=\"fn\">motiveArg</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">targets</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">complexArgs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> := <a href=\"./Init/Prelude.html#List.toArray\">#[</a><a href=\"./Init/Prelude.html#List.toArray\">]</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Given a goal `... targets ... |- C[targets, complexArgs]` associated with `mvarId`,\nwhere `complexArgs` are the the complex (i.e. non-target) arguments to the motive in the conclusion\nof the eliminator, construct `motiveArg := fun targets rs => C[targets, rs]`\n\nThis checks if the type of the complex arguments match what's expected by the motive, and\nignores them otherwise. This limits the ability of `cases` to use unfolding function\nprinciples with dependent types, because after generalization of the targets, the types do\nno longer match. This can likely be improved.\n","docLink":"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.setMotiveArg","kind":"def","line":233,"name":"Lean.Elab.Tactic.ElimApp.setMotiveArg","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Induction.lean#L233-L269"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.mkElimApp\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElimApp</span>.<span class=\"name\">mkElimApp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">elimInfo</span> : <a href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.ElimInfo\">Meta.ElimInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">targets</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tag</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.Result\">Result</a></span></div></div>","info":{"doc":"Construct the an eliminator/recursor application. `targets` contains the explicit and implicit\ntargets for the eliminator, not yet generalized.\nFor example, the indices of builtin recursors are considered implicit targets.\nRemark: the method `addImplicitTargets` may be used to compute the sequence of implicit and\nexplicit targets from the explicit ones.\n","docLink":"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.mkElimApp","kind":"def","line":152,"name":"Lean.Elab.Tactic.ElimApp.mkElimApp","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Induction.lean#L152-L231"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.Result.complexArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElimApp</span>.<span class=\"name\">Result</span>.<span class=\"name\">complexArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.Result\">Result</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.Result.complexArgs","kind":"def","line":150,"name":"Lean.Elab.Tactic.ElimApp.Result.complexArgs","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Induction.lean#L150-L150"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.Result.others\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElimApp</span>.<span class=\"name\">Result</span>.<span class=\"name\">others</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.Result\">Result</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.Result.others","kind":"def","line":149,"name":"Lean.Elab.Tactic.ElimApp.Result.others","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Induction.lean#L149-L149"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.Result.alts\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElimApp</span>.<span class=\"name\">Result</span>.<span class=\"name\">alts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.Result\">Result</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.Alt\">Alt</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.Result.alts","kind":"def","line":148,"name":"Lean.Elab.Tactic.ElimApp.Result.alts","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Induction.lean#L148-L148"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.Result.motive\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElimApp</span>.<span class=\"name\">Result</span>.<span class=\"name\">motive</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.Result\">Result</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.Result.motive","kind":"def","line":147,"name":"Lean.Elab.Tactic.ElimApp.Result.motive","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Induction.lean#L147-L147"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.Result.elimArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElimApp</span>.<span class=\"name\">Result</span>.<span class=\"name\">elimArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.Result\">Result</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.Result.elimArgs","kind":"def","line":146,"name":"Lean.Elab.Tactic.ElimApp.Result.elimArgs","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Induction.lean#L146-L146"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.Result.elimApp\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElimApp</span>.<span class=\"name\">Result</span>.<span class=\"name\">elimApp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.Result\">Result</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.Result.elimApp","kind":"def","line":145,"name":"Lean.Elab.Tactic.ElimApp.Result.elimApp","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Induction.lean#L145-L145"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.Result.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElimApp</span>.<span class=\"name\">Result</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">elimApp</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">elimArgs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">motive</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">alts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.Alt\">Alt</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">others</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">complexArgs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.Result\">Result</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.Result.mk","kind":"ctor","line":144,"name":"Lean.Elab.Tactic.ElimApp.Result.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Induction.lean#L144-L144"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.Result\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElimApp</span>.<span class=\"name\">Result</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.Result","kind":"structure","line":144,"name":"Lean.Elab.Tactic.ElimApp.Result","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Induction.lean#L144-L150"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.M\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElimApp</span>.<span class=\"name\">M</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Î±</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.M","kind":"def","line":129,"name":"Lean.Elab.Tactic.ElimApp.M","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Induction.lean#L129-L129"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.State.insts\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElimApp</span>.<span class=\"name\">State</span>.<span class=\"name\">insts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.State.insts","kind":"def","line":127,"name":"Lean.Elab.Tactic.ElimApp.State.insts","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Induction.lean#L127-L127"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.State.alts\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElimApp</span>.<span class=\"name\">State</span>.<span class=\"name\">alts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.Alt\">Alt</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.State.alts","kind":"def","line":126,"name":"Lean.Elab.Tactic.ElimApp.State.alts","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Induction.lean#L126-L126"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.State.fType\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElimApp</span>.<span class=\"name\">State</span>.<span class=\"name\">fType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.State.fType","kind":"def","line":125,"name":"Lean.Elab.Tactic.ElimApp.State.fType","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Induction.lean#L125-L125"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.State.f\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElimApp</span>.<span class=\"name\">State</span>.<span class=\"name\">f</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.State.f","kind":"def","line":124,"name":"Lean.Elab.Tactic.ElimApp.State.f","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Induction.lean#L124-L124"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.State.motive\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElimApp</span>.<span class=\"name\">State</span>.<span class=\"name\">motive</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.State.motive","kind":"def","line":123,"name":"Lean.Elab.Tactic.ElimApp.State.motive","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Induction.lean#L123-L123"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.State.targetPos\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElimApp</span>.<span class=\"name\">State</span>.<span class=\"name\">targetPos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.State.targetPos","kind":"def","line":122,"name":"Lean.Elab.Tactic.ElimApp.State.targetPos","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Induction.lean#L122-L122"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.State.argPos\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElimApp</span>.<span class=\"name\">State</span>.<span class=\"name\">argPos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.State.argPos","kind":"def","line":121,"name":"Lean.Elab.Tactic.ElimApp.State.argPos","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Induction.lean#L121-L121"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElimApp</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">argPos </span><span class=\"fn\">targetPos</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">motive</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f </span><span class=\"fn\">fType</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">alts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.Alt\">Alt</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">insts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.State\">State</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.State.mk","kind":"ctor","line":120,"name":"Lean.Elab.Tactic.ElimApp.State.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Induction.lean#L120-L120"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElimApp</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.State","kind":"structure","line":120,"name":"Lean.Elab.Tactic.ElimApp.State","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Induction.lean#L120-L127"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.Context.targets\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElimApp</span>.<span class=\"name\">Context</span>.<span class=\"name\">targets</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.Context.targets","kind":"def","line":118,"name":"Lean.Elab.Tactic.ElimApp.Context.targets","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Induction.lean#L118-L118"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.Context.elimInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElimApp</span>.<span class=\"name\">Context</span>.<span class=\"name\">elimInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.ElimInfo\">Meta.ElimInfo</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.Context.elimInfo","kind":"def","line":117,"name":"Lean.Elab.Tactic.ElimApp.Context.elimInfo","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Induction.lean#L117-L117"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.Context.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElimApp</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">elimInfo</span> : <a href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.ElimInfo\">Meta.ElimInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">targets</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.Context\">Context</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.Context.mk","kind":"ctor","line":116,"name":"Lean.Elab.Tactic.ElimApp.Context.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Induction.lean#L116-L116"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.Context\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElimApp</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.Context","kind":"structure","line":116,"name":"Lean.Elab.Tactic.ElimApp.Context","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Induction.lean#L116-L118"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.instInhabitedAlt\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElimApp</span>.<span class=\"name\">instInhabitedAlt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.Alt\">Alt</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.instInhabitedAlt","kind":"instance","line":114,"name":"Lean.Elab.Tactic.ElimApp.instInhabitedAlt","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Induction.lean#L114-L114"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.instInhabitedAlt.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElimApp</span>.<span class=\"name\">instInhabitedAlt</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.Alt\">Alt</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.instInhabitedAlt.default","kind":"def","line":114,"name":"Lean.Elab.Tactic.ElimApp.instInhabitedAlt.default","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Induction.lean#L114-L114"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.Alt.mvarId\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElimApp</span>.<span class=\"name\">Alt</span>.<span class=\"name\">mvarId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.Alt\">Alt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></div></div>","info":{"doc":"The subgoal metavariable for the alternative. ","docLink":"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.Alt.mvarId","kind":"def","line":113,"name":"Lean.Elab.Tactic.ElimApp.Alt.mvarId","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Induction.lean#L113-L113"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.Alt.info\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElimApp</span>.<span class=\"name\">Alt</span>.<span class=\"name\">info</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.Alt\">Alt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.ElimAltInfo\">Meta.ElimAltInfo</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.Alt.info","kind":"def","line":111,"name":"Lean.Elab.Tactic.ElimApp.Alt.info","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Induction.lean#L111-L111"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.Alt.name\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElimApp</span>.<span class=\"name\">Alt</span>.<span class=\"name\">name</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.Alt\">Alt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"The short name of the alternative, used in `| foo =>` cases ","docLink":"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.Alt.name","kind":"def","line":110,"name":"Lean.Elab.Tactic.ElimApp.Alt.name","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Induction.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.Alt.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElimApp</span>.<span class=\"name\">Alt</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">info</span> : <a href=\"./Lean/Meta/Tactic/ElimInfo.html#Lean.Meta.ElimAltInfo\">Meta.ElimAltInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.Alt\">Alt</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.Alt.mk","kind":"ctor","line":108,"name":"Lean.Elab.Tactic.ElimApp.Alt.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Induction.lean#L108-L108"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.Alt\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElimApp</span>.<span class=\"name\">Alt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.ElimApp.Alt","kind":"structure","line":108,"name":"Lean.Elab.Tactic.ElimApp.Alt","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Induction.lean#L108-L114"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.evalAlt\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">evalAlt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">alt</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">addInfo</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.evalAlt","kind":"def","line":77,"name":"Lean.Elab.Tactic.evalAlt","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Induction.lean#L77-L101"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.isHoleRHS\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">isHoleRHS</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rhs</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Induction.html#Lean.Elab.Tactic.isHoleRHS","kind":"def","line":74,"name":"Lean.Elab.Tactic.isHoleRHS","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Induction.lean#L74-L75"}}],"imports":["Lean.Util.CollectFVars","Lean.AuxRecursor","Lean.Parser.Term","Lean.Meta.RecursorInfo","Lean.Meta.CollectMVars","Lean.Meta.Tactic.ElimInfo","Lean.Meta.Tactic.FunIndInfo","Lean.Meta.Tactic.Induction","Lean.Meta.Tactic.Cases","Lean.Meta.Tactic.FunIndCollect","Lean.Meta.GeneralizeVars","Lean.Elab.App","Lean.Elab.Match","Lean.Elab.Tactic.ElabTerm","Lean.Elab.Tactic.Generalize"],"instances":[{"className":"Inhabited","name":"Lean.Elab.Tactic.ElimApp.instInhabitedAlt","typeNames":["Lean.Elab.Tactic.ElimApp.Alt"]}],"name":"Lean.Elab.Tactic.Induction"}