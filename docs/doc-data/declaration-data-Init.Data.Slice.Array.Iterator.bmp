{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Slice/Array/Iterator.html#Subarray.toArray\"><span class=\"name\">Subarray</span>.<span class=\"name\">toArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Init/Data/Array/Subarray.html#Subarray\">Subarray</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Allocates a new array that contains the contents of the subarray.\n","docLink":"./Init/Data/Slice/Array/Iterator.html#Subarray.toArray","kind":"def","line":152,"name":"Subarray.toArray","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Slice/Array/Iterator.lean#L152-L154"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Slice/Array/Iterator.html#Array.instToStringSubarray\"><span class=\"name\">Array</span>.<span class=\"name\">instToStringSubarray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <span class=\"fn\">(<a href=\"./Init/Data/Array/Subarray.html#Subarray\">Subarray</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Slice/Array/Iterator.html#Array.instToStringSubarray","kind":"instance","line":147,"name":"Array.instToStringSubarray","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Slice/Array/Iterator.lean#L147-L148"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Slice/Array/Iterator.html#Array.instReprSubarray\"><span class=\"name\">Array</span>.<span class=\"name\">instReprSubarray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">(<a href=\"./Init/Data/Array/Subarray.html#Subarray\">Subarray</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Slice/Array/Iterator.html#Array.instReprSubarray","kind":"instance","line":144,"name":"Array.instReprSubarray","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Slice/Array/Iterator.lean#L144-L145"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Slice/Array/Iterator.html#Array.Subarray.repr\"><span class=\"name\">Array</span>.<span class=\"name\">Subarray</span>.<span class=\"name\">repr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Init/Data/Array/Subarray.html#Subarray\">Subarray</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Std.Format</a></div></div>","info":{"doc":"`Subarray` representation. ","docLink":"./Init/Data/Slice/Array/Iterator.html#Array.Subarray.repr","kind":"def","line":140,"name":"Array.Subarray.repr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Slice/Array/Iterator.lean#L140-L142"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Slice/Array/Iterator.html#Array.instAppendSubarray\"><span class=\"name\">Array</span>.<span class=\"name\">instAppendSubarray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Append\">Append</a> <span class=\"fn\">(<a href=\"./Init/Data/Array/Subarray.html#Subarray\">Subarray</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Slice/Array/Iterator.html#Array.instAppendSubarray","kind":"instance","line":135,"name":"Array.instAppendSubarray","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Slice/Array/Iterator.lean#L135-L138"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Slice/Array/Iterator.html#Array.instCoeSubarray\"><span class=\"name\">Array</span>.<span class=\"name\">instCoeSubarray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">(<a href=\"./Init/Data/Array/Subarray.html#Subarray\">Subarray</a> <span class=\"fn\">α</span>)</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Slice/Array/Iterator.html#Array.instCoeSubarray","kind":"instance","line":133,"name":"Array.instCoeSubarray","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Slice/Array/Iterator.lean#L133-L133"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Slice/Array/Iterator.html#Array.ofSubarray\"><span class=\"name\">Array</span>.<span class=\"name\">ofSubarray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Init/Data/Array/Subarray.html#Subarray\">Subarray</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Allocates a new array that contains the contents of the subarray.\n","docLink":"./Init/Data/Slice/Array/Iterator.html#Array.ofSubarray","kind":"def","line":126,"name":"Array.ofSubarray","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Slice/Array/Iterator.lean#L126-L131"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Slice/Array/Iterator.html#Subarray.forIn\"><span class=\"name\">Subarray</span>.<span class=\"name\">forIn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> v → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Init/Data/Array/Subarray.html#Subarray\">Subarray</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">β</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"The implementation of `ForIn.forIn` for `Subarray`, which allows it to be used with `for` loops in\n`do`-notation.\n","docLink":"./Init/Data/Slice/Array/Iterator.html#Subarray.forIn","kind":"def","line":116,"name":"Subarray.forIn","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Slice/Array/Iterator.lean#L116-L122"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Slice/Array/Iterator.html#Subarray.foldl\"><span class=\"name\">Subarray</span>.<span class=\"name\">foldl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">as</span> : <span class=\"fn\"><a href=\"./Init/Data/Array/Subarray.html#Subarray\">Subarray</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">β</span></div></div>","info":{"doc":"Folds an operation from left to right over the elements in a subarray.\nAn accumulator of type `β` is constructed by starting with `init` and combining each\nelement of the subarray with the current accumulator value in turn.\nExamples:\n * `#[\"red\", \"green\", \"blue\"].toSubarray.foldl (· + ·.length) 0 = 12`\n * `#[\"red\", \"green\", \"blue\"].toSubarray.popFront.foldl (· + ·.length) 0 = 9`\n","docLink":"./Init/Data/Slice/Array/Iterator.html#Subarray.foldl","kind":"def","line":104,"name":"Subarray.foldl","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Slice/Array/Iterator.lean#L104-L114"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Slice/Array/Iterator.html#Subarray.foldlM\"><span class=\"name\">Subarray</span>.<span class=\"name\">foldlM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> v → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">as</span> : <span class=\"fn\"><a href=\"./Init/Data/Array/Subarray.html#Subarray\">Subarray</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"Folds a monadic operation from left to right over the elements in a subarray.\nAn accumulator of type `β` is constructed by starting with `init` and monadically combining each\nelement of the subarray with the current accumulator value in turn. The monad in question may permit\nearly termination or repetition.\nExamples:\n```lean example\n#eval #[\"red\", \"green\", \"blue\"].toSubarray.foldlM (init := \"\") fun acc x => do\n  let l ← Option.guard (· ≠ 0) x.length\n  return s!\"{acc}({l}){x} \"\n```\n```output\nsome \"(3)red (5)green (4)blue \"\n```\n```lean example\n#eval #[\"red\", \"green\", \"blue\"].toSubarray.foldlM (init := 0) fun acc x => do\n  let l ← Option.guard (· ≠ 5) x.length\n  return s!\"{acc}({l}){x} \"\n```\n```output\nnone\n```\n","docLink":"./Init/Data/Slice/Array/Iterator.html#Subarray.foldlM","kind":"def","line":77,"name":"Subarray.foldlM","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Slice/Array/Iterator.lean#L77-L102"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Slice/Array/Iterator.html#instForInSubarray\"><span class=\"name\">instForInSubarray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> v → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#ForIn\">ForIn</a> <span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Data/Array/Subarray.html#Subarray\">Subarray</a> <span class=\"fn\">α</span>)</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Slice/Array/Iterator.html#instForInSubarray","kind":"instance","line":64,"name":"instForInSubarray","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Slice/Array/Iterator.lean#L64-L67"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Slice/Array/Iterator.html#instIteratorSizePartialStateSubarrayId\"><span class=\"name\">instIteratorSizePartialStateSubarrayId</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Init/Data/Array/Subarray.html#Subarray\">Subarray</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Loop.html#Std.Iterators.IteratorSizePartial\">Std.Iterators.IteratorSizePartial</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/ToIterator.html#Std.Iterators.ToIterator.State\">Std.Iterators.ToIterator.State</a> <span class=\"fn\">s</span> <a href=\"./Init/Control/Id.html#Id\">Id</a>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Slice/Array/Iterator.html#instIteratorSizePartialStateSubarrayId","kind":"instance","line":61,"name":"instIteratorSizePartialStateSubarrayId","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Slice/Array/Iterator.lean#L61-L62"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Slice/Array/Iterator.html#instIteratorSizeStateSubarrayId\"><span class=\"name\">instIteratorSizeStateSubarrayId</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Init/Data/Array/Subarray.html#Subarray\">Subarray</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Loop.html#Std.Iterators.IteratorSize\">Std.Iterators.IteratorSize</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/ToIterator.html#Std.Iterators.ToIterator.State\">Std.Iterators.ToIterator.State</a> <span class=\"fn\">s</span> <a href=\"./Init/Control/Id.html#Id\">Id</a>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Slice/Array/Iterator.html#instIteratorSizeStateSubarrayId","kind":"instance","line":59,"name":"instIteratorSizeStateSubarrayId","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Slice/Array/Iterator.lean#L59-L60"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Slice/Array/Iterator.html#instIteratorLoopPartialStateSubarrayIdOfMonad\"><span class=\"name\">instIteratorLoopPartialStateSubarrayIdOfMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Init/Data/Array/Subarray.html#Subarray\">Subarray</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> v → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Loop.html#Std.Iterators.IteratorLoopPartial\">Std.Iterators.IteratorLoopPartial</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/ToIterator.html#Std.Iterators.ToIterator.State\">Std.Iterators.ToIterator.State</a> <span class=\"fn\">s</span> <a href=\"./Init/Control/Id.html#Id\">Id</a>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">m</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Slice/Array/Iterator.html#instIteratorLoopPartialStateSubarrayIdOfMonad","kind":"instance","line":57,"name":"instIteratorLoopPartialStateSubarrayIdOfMonad","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Slice/Array/Iterator.lean#L57-L58"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Slice/Array/Iterator.html#instIteratorLoopStateSubarrayIdOfMonad\"><span class=\"name\">instIteratorLoopStateSubarrayIdOfMonad</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Init/Data/Array/Subarray.html#Subarray\">Subarray</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> v → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Loop.html#Std.Iterators.IteratorLoop\">Std.Iterators.IteratorLoop</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/ToIterator.html#Std.Iterators.ToIterator.State\">Std.Iterators.ToIterator.State</a> <span class=\"fn\">s</span> <a href=\"./Init/Control/Id.html#Id\">Id</a>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">m</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Slice/Array/Iterator.html#instIteratorLoopStateSubarrayIdOfMonad","kind":"instance","line":55,"name":"instIteratorLoopStateSubarrayIdOfMonad","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Slice/Array/Iterator.lean#L55-L56"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Slice/Array/Iterator.html#instIteratorCollectPartialStateSubarrayId\"><span class=\"name\">instIteratorCollectPartialStateSubarrayId</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Init/Data/Array/Subarray.html#Subarray\">Subarray</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Collect.html#Std.Iterators.IteratorCollectPartial\">Std.Iterators.IteratorCollectPartial</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/ToIterator.html#Std.Iterators.ToIterator.State\">Std.Iterators.ToIterator.State</a> <span class=\"fn\">s</span> <a href=\"./Init/Control/Id.html#Id\">Id</a>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <a href=\"./Init/Control/Id.html#Id\">Id</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Slice/Array/Iterator.html#instIteratorCollectPartialStateSubarrayId","kind":"instance","line":54,"name":"instIteratorCollectPartialStateSubarrayId","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Slice/Array/Iterator.lean#L54-L54"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Slice/Array/Iterator.html#instIteratorCollectStateSubarrayId\"><span class=\"name\">instIteratorCollectStateSubarrayId</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Init/Data/Array/Subarray.html#Subarray\">Subarray</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Collect.html#Std.Iterators.IteratorCollect\">Std.Iterators.IteratorCollect</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/ToIterator.html#Std.Iterators.ToIterator.State\">Std.Iterators.ToIterator.State</a> <span class=\"fn\">s</span> <a href=\"./Init/Control/Id.html#Id\">Id</a>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <a href=\"./Init/Control/Id.html#Id\">Id</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Slice/Array/Iterator.html#instIteratorCollectStateSubarrayId","kind":"instance","line":53,"name":"instIteratorCollectStateSubarrayId","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Slice/Array/Iterator.lean#L53-L53"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Slice/Array/Iterator.html#instFiniteStateSubarrayId\"><span class=\"name\">instFiniteStateSubarrayId</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Init/Data/Array/Subarray.html#Subarray\">Subarray</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Finite\">Std.Iterators.Finite</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/ToIterator.html#Std.Iterators.ToIterator.State\">Std.Iterators.ToIterator.State</a> <span class=\"fn\">s</span> <a href=\"./Init/Control/Id.html#Id\">Id</a>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Slice/Array/Iterator.html#instFiniteStateSubarrayId","kind":"instance","line":52,"name":"instFiniteStateSubarrayId","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Slice/Array/Iterator.lean#L52-L52"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Slice/Array/Iterator.html#instIteratorStateSubarrayId\"><span class=\"name\">instIteratorStateSubarrayId</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Init/Data/Array/Subarray.html#Subarray\">Subarray</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Std.Iterators.Iterator</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/ToIterator.html#Std.Iterators.ToIterator.State\">Std.Iterators.ToIterator.State</a> <span class=\"fn\">s</span> <a href=\"./Init/Control/Id.html#Id\">Id</a>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Slice/Array/Iterator.html#instIteratorStateSubarrayId","kind":"instance","line":51,"name":"instIteratorStateSubarrayId","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Slice/Array/Iterator.lean#L51-L51"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Slice/Array/Iterator.html#instToIteratorSubarrayId\"><span class=\"name\">instToIteratorSubarrayId</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Init/Data/Array/Subarray.html#Subarray\">Subarray</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/ToIterator.html#Std.Iterators.ToIterator\">Std.Iterators.ToIterator</a> <span class=\"fn\">s</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Slice/Array/Iterator.html#instToIteratorSubarrayId","kind":"instance","line":34,"name":"instToIteratorSubarrayId","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Slice/Array/Iterator.lean#L34-L47"}}],"imports":["Init.Core","Init.Data.Slice.Array.Basic","Init.Data.Iterators.Combinators.Attach","Init.Data.Iterators.Combinators.FilterMap","Init.Data.Iterators.Combinators.ULift","Init.Data.Iterators.Consumers.Collect","Init.Data.Iterators.Consumers.Loop","Init.Data.Range.Polymorphic.Basic","Init.Data.Range.Polymorphic.Basic","Init.Data.Range.Polymorphic.Nat","Init.Data.Range.Polymorphic.Iterators","Init.Data.Slice.Operations","Init.Omega"],"instances":[{"className":"Std.Iterators.ToIterator","name":"instToIteratorSubarrayId","typeNames":["Id"]},{"className":"Std.Iterators.Iterator","name":"instIteratorStateSubarrayId","typeNames":["Std.Iterators.ToIterator.State","Id"]},{"className":"Std.Iterators.Finite","name":"instFiniteStateSubarrayId","typeNames":["Std.Iterators.ToIterator.State","Id"]},{"className":"Std.Iterators.IteratorCollect","name":"instIteratorCollectStateSubarrayId","typeNames":["Std.Iterators.ToIterator.State","Id","Id"]},{"className":"Std.Iterators.IteratorCollectPartial","name":"instIteratorCollectPartialStateSubarrayId","typeNames":["Std.Iterators.ToIterator.State","Id","Id"]},{"className":"Std.Iterators.IteratorLoop","name":"instIteratorLoopStateSubarrayIdOfMonad","typeNames":["Std.Iterators.ToIterator.State","Id"]},{"className":"Std.Iterators.IteratorLoopPartial","name":"instIteratorLoopPartialStateSubarrayIdOfMonad","typeNames":["Std.Iterators.ToIterator.State","Id"]},{"className":"Std.Iterators.IteratorSize","name":"instIteratorSizeStateSubarrayId","typeNames":["Std.Iterators.ToIterator.State","Id"]},{"className":"Std.Iterators.IteratorSizePartial","name":"instIteratorSizePartialStateSubarrayId","typeNames":["Std.Iterators.ToIterator.State","Id"]},{"className":"ForIn","name":"instForInSubarray","typeNames":["Subarray"]},{"className":"Coe","name":"Array.instCoeSubarray","typeNames":["Subarray","Array"]},{"className":"Append","name":"Array.instAppendSubarray","typeNames":["Subarray"]},{"className":"Repr","name":"Array.instReprSubarray","typeNames":["Subarray"]},{"className":"ToString","name":"Array.instToStringSubarray","typeNames":["Subarray"]}],"name":"Init.Data.Slice.Array.Iterator"}