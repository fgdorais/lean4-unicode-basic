{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.eagerLambdaLifting\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">eagerLambdaLifting</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/PassManager.html#Lean.Compiler.LCNF.Pass\">Pass</a></div></div>","info":{"doc":"During eager lambda lifting, we lift\n- All local function declarations from instances (motivation: make sure it is cheap to inline them later)\n- Local function declarations that take local instances as parameters (motivation: ensure they are specialized)\n","docLink":"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.eagerLambdaLifting","kind":"def","line":175,"name":"Lean.Compiler.LCNF.eagerLambdaLifting","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/LambdaLifting.lean#L175-L188"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.lambdaLifting\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">lambdaLifting</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/PassManager.html#Lean.Compiler.LCNF.Pass\">Pass</a></div></div>","info":{"doc":"Eliminate all local function declarations.\n","docLink":"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.lambdaLifting","kind":"def","line":166,"name":"Lean.Compiler.LCNF.lambdaLifting","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/LambdaLifting.lean#L166-L173"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.Decl.lambdaLifting\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">Decl</span>.<span class=\"name\">lambdaLifting</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">liftInstParamOnly</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">suffix</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inheritInlineAttrs</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">minSize</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.Decl.lambdaLifting","kind":"def","line":162,"name":"Lean.Compiler.LCNF.Decl.lambdaLifting","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/LambdaLifting.lean#L162-L164"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.main\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">LambdaLifting</span>.<span class=\"name\">main</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.LiftM\">LiftM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.main","kind":"def","line":156,"name":"Lean.Compiler.LCNF.LambdaLifting.main","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/LambdaLifting.lean#L156-L158"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.visitCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">LambdaLifting</span>.<span class=\"name\">visitCode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">code</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.LiftM\">LiftM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Code\">Code</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.visitCode","kind":"opaque","line":127,"name":"Lean.Compiler.LCNF.LambdaLifting.visitCode","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/LambdaLifting.lean#L127-L153"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.visitFunDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">LambdaLifting</span>.<span class=\"name\">visitFunDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">funDecl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">FunDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.LiftM\">LiftM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">FunDecl</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.visitFunDecl","kind":"opaque","line":123,"name":"Lean.Compiler.LCNF.LambdaLifting.visitFunDecl","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/LambdaLifting.lean#L123-L125"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.mkAuxDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">LambdaLifting</span>.<span class=\"name\">mkAuxDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">closure</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Param\">Param</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">FunDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.LiftM\">LiftM</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.LetDecl\">LetDecl</a></span></div></div>","info":{"doc":"Create a new auxiliary declaration. The array `closure` contains all free variables\noccurring in `decl`.\n","docLink":"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.mkAuxDecl","kind":"def","line":89,"name":"Lean.Compiler.LCNF.LambdaLifting.mkAuxDecl","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/LambdaLifting.lean#L89-L120"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.mkAuxDeclName\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">LambdaLifting</span>.<span class=\"name\">mkAuxDeclName</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.LiftM\">LiftM</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.mkAuxDeclName","kind":"opaque","line":82,"name":"Lean.Compiler.LCNF.LambdaLifting.mkAuxDeclName","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/LambdaLifting.lean#L82-L86"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.shouldLift\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">LambdaLifting</span>.<span class=\"name\">shouldLift</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">FunDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.LiftM\">LiftM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Return `true` if the given declaration should be lambda lifted.\n","docLink":"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.shouldLift","kind":"def","line":70,"name":"Lean.Compiler.LCNF.LambdaLifting.shouldLift","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/LambdaLifting.lean#L70-L80"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.hasInstParam\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">LambdaLifting</span>.<span class=\"name\">hasInstParam</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.FunDecl\">FunDecl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Return `true` if the given declaration takes a local instance as a parameter.\nWe lambda lift this kind of local function declaration before specialization.\n","docLink":"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.hasInstParam","kind":"def","line":63,"name":"Lean.Compiler.LCNF.LambdaLifting.hasInstParam","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/LambdaLifting.lean#L63-L68"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.LiftM\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">LambdaLifting</span>.<span class=\"name\">LiftM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Monad for applying lambda lifting. ","docLink":"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.LiftM","kind":"def","line":60,"name":"Lean.Compiler.LCNF.LambdaLifting.LiftM","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/LambdaLifting.lean#L60-L61"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.State.nextIdx\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">LambdaLifting</span>.<span class=\"name\">State</span>.<span class=\"name\">nextIdx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"Next index for generating auxiliary declaration name.\n","docLink":"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.State.nextIdx","kind":"def","line":58,"name":"Lean.Compiler.LCNF.LambdaLifting.State.nextIdx","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/LambdaLifting.lean#L58-L58"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.State.decls\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">LambdaLifting</span>.<span class=\"name\">State</span>.<span class=\"name\">decls</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a></span></div></div>","info":{"doc":"New auxiliary declarations\n","docLink":"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.State.decls","kind":"def","line":54,"name":"Lean.Compiler.LCNF.LambdaLifting.State.decls","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/LambdaLifting.lean#L54-L54"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">LambdaLifting</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decls</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nextIdx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.State\">State</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.State.mk","kind":"ctor","line":50,"name":"Lean.Compiler.LCNF.LambdaLifting.State.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/LambdaLifting.lean#L50-L50"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">LambdaLifting</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"State for the `LiftM` monad. ","docLink":"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.State","kind":"structure","line":49,"name":"Lean.Compiler.LCNF.LambdaLifting.State","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/LambdaLifting.lean#L49-L58"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.Context.minSize\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">LambdaLifting</span>.<span class=\"name\">Context</span>.<span class=\"name\">minSize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"Only local functions with `size > minSize` are lambda lifted.\nWe use this feature to implement `@[inline] instance ...` and `@[always_inline] instance ...`\n","docLink":"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.Context.minSize","kind":"def","line":46,"name":"Lean.Compiler.LCNF.LambdaLifting.Context.minSize","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/LambdaLifting.lean#L46-L46"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.Context.inheritInlineAttrs\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">LambdaLifting</span>.<span class=\"name\">Context</span>.<span class=\"name\">inheritInlineAttrs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"If true, the lambda-lifted functions inherit the inline attribute from `mainDecl`.\nWe use this feature to implement `@[inline] instance ...` and `@[always_inline] instance ...`\n","docLink":"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.Context.inheritInlineAttrs","kind":"def","line":41,"name":"Lean.Compiler.LCNF.LambdaLifting.Context.inheritInlineAttrs","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/LambdaLifting.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.Context.mainDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">LambdaLifting</span>.<span class=\"name\">Context</span>.<span class=\"name\">mainDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a></div></div>","info":{"doc":"Declaration where lambda lifting is being applied.\nWe use it to provide the \"base name\" for auxiliary declarations and the flag `safe`.\n","docLink":"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.Context.mainDecl","kind":"def","line":36,"name":"Lean.Compiler.LCNF.LambdaLifting.Context.mainDecl","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/LambdaLifting.lean#L36-L36"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.Context.suffix\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">LambdaLifting</span>.<span class=\"name\">Context</span>.<span class=\"name\">suffix</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"Suffix for the new auxiliary declarations being created. ","docLink":"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.Context.suffix","kind":"def","line":31,"name":"Lean.Compiler.LCNF.LambdaLifting.Context.suffix","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/LambdaLifting.lean#L31-L31"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.Context.liftInstParamOnly\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">LambdaLifting</span>.<span class=\"name\">Context</span>.<span class=\"name\">liftInstParamOnly</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"If `liftInstParamOnly` is `true`, then only local functions that take\nlocal instances as parameters are lambda lifted.\n","docLink":"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.Context.liftInstParamOnly","kind":"def","line":29,"name":"Lean.Compiler.LCNF.LambdaLifting.Context.liftInstParamOnly","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/LambdaLifting.lean#L29-L29"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.Context.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">LambdaLifting</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">liftInstParamOnly</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">suffix</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mainDecl</span> : <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inheritInlineAttrs</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">minSize</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.Context\">Context</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.Context.mk","kind":"ctor","line":24,"name":"Lean.Compiler.LCNF.LambdaLifting.Context.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/LambdaLifting.lean#L24-L24"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.Context\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">LambdaLifting</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Context for the `LiftM` monad. ","docLink":"./Lean/Compiler/LCNF/LambdaLifting.html#Lean.Compiler.LCNF.LambdaLifting.Context","kind":"structure","line":23,"name":"Lean.Compiler.LCNF.LambdaLifting.Context","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/LambdaLifting.lean#L23-L46"}}],"imports":["Lean.Meta.Instances","Lean.Compiler.InlineAttrs","Lean.Compiler.LCNF.Closure","Lean.Compiler.LCNF.Types","Lean.Compiler.LCNF.MonadScope","Lean.Compiler.LCNF.Internalize","Lean.Compiler.LCNF.Level","Lean.Compiler.LCNF.AuxDeclCache"],"instances":[],"name":"Lean.Compiler.LCNF.LambdaLifting"}