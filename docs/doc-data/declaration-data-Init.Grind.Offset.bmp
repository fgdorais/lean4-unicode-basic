{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Offset.html#Lean.Grind.Nat.le_offset\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Nat</span>.<span class=\"name\">le_offset</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k</span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Offset.html#Lean.Grind.Nat.le_offset","kind":"theorem","line":94,"name":"Lean.Grind.Nat.le_offset","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Offset.lean#L94-L94"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Offset.html#Lean.Grind.Nat.eq_of_le_of_le\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Nat</span>.<span class=\"name\">eq_of_le_of_le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u </span><span class=\"fn\">v</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">v</span> → <span class=\"fn\"><span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">u</span> → <span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">v</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Offset.html#Lean.Grind.Nat.eq_of_le_of_le","kind":"theorem","line":93,"name":"Lean.Grind.Nat.eq_of_le_of_le","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Offset.lean#L93-L93"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Offset.html#Lean.Grind.Nat.le_of_eq_2\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Nat</span>.<span class=\"name\">le_of_eq_2</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u </span><span class=\"fn\">v</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">v</span> → <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">u</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Offset.html#Lean.Grind.Nat.le_of_eq_2","kind":"theorem","line":92,"name":"Lean.Grind.Nat.le_of_eq_2","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Offset.lean#L92-L92"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Offset.html#Lean.Grind.Nat.le_of_eq_1\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Nat</span>.<span class=\"name\">le_of_eq_1</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u </span><span class=\"fn\">v</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">v</span> → <span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">v</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Offset.html#Lean.Grind.Nat.le_of_eq_1","kind":"theorem","line":91,"name":"Lean.Grind.Nat.le_of_eq_1","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Offset.lean#L91-L91"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Offset.html#Lean.Grind.Nat.lo_eq_false_of_ro\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Nat</span>.<span class=\"name\">lo_eq_false_of_ro</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u </span><span class=\"fn\">v </span><span class=\"fn\">k₁ </span><span class=\"fn\">k₂</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Offset.html#Lean.Grind.isLt\">isLt</a> <span class=\"fn\">k₁</span> <span class=\"fn\">k₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k₁</span> → (<span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k₂</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">u</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#False\">False</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Offset.html#Lean.Grind.Nat.lo_eq_false_of_ro","kind":"theorem","line":84,"name":"Lean.Grind.Nat.lo_eq_false_of_ro","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Offset.lean#L84-L85"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Offset.html#Lean.Grind.Nat.ro_eq_false_of_lo\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Nat</span>.<span class=\"name\">ro_eq_false_of_lo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u </span><span class=\"fn\">v </span><span class=\"fn\">k₁ </span><span class=\"fn\">k₂</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Offset.html#Lean.Grind.isLt\">isLt</a> <span class=\"fn\">k₂</span> <span class=\"fn\">k₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">v</span> → (<span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k₂</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#False\">False</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Offset.html#Lean.Grind.Nat.ro_eq_false_of_lo","kind":"theorem","line":82,"name":"Lean.Grind.Nat.ro_eq_false_of_lo","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Offset.lean#L82-L83"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Offset.html#Lean.Grind.Nat.lo_eq_false_of_lo\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Nat</span>.<span class=\"name\">lo_eq_false_of_lo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u </span><span class=\"fn\">v </span><span class=\"fn\">k₁ </span><span class=\"fn\">k₂</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Offset.html#Lean.Grind.isLt\">isLt</a> <span class=\"fn\">0</span> (<span class=\"fn\">k₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k₂</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">v</span> → (<span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k₂</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">u</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#False\">False</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Offset.html#Lean.Grind.Nat.lo_eq_false_of_lo","kind":"theorem","line":80,"name":"Lean.Grind.Nat.lo_eq_false_of_lo","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Offset.lean#L80-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Offset.html#Lean.Grind.Nat.le_eq_false_of_lo\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Nat</span>.<span class=\"name\">le_eq_false_of_lo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u </span><span class=\"fn\">v </span><span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Offset.html#Lean.Grind.isLt\">isLt</a> <span class=\"fn\">0</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">v</span> → (<span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">u</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#False\">False</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Offset.html#Lean.Grind.Nat.le_eq_false_of_lo","kind":"theorem","line":78,"name":"Lean.Grind.Nat.le_eq_false_of_lo","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Offset.lean#L78-L79"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Offset.html#Lean.Grind.Nat.lo_eq_false_of_le\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Nat</span>.<span class=\"name\">lo_eq_false_of_le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u </span><span class=\"fn\">v </span><span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Offset.html#Lean.Grind.isLt\">isLt</a> <span class=\"fn\">0</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">v</span> → (<span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">u</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#False\">False</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Offset.html#Lean.Grind.Nat.lo_eq_false_of_le","kind":"theorem","line":76,"name":"Lean.Grind.Nat.lo_eq_false_of_le","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Offset.lean#L76-L77"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Offset.html#Lean.Grind.Nat.ro_eq_true_of_ro\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Nat</span>.<span class=\"name\">ro_eq_true_of_ro</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u </span><span class=\"fn\">v </span><span class=\"fn\">k₁ </span><span class=\"fn\">k₂</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Offset.html#Lean.Grind.isLE\">isLE</a> <span class=\"fn\">k₁</span> <span class=\"fn\">k₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k₁</span> → (<span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k₂</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#True\">True</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Offset.html#Lean.Grind.Nat.ro_eq_true_of_ro","kind":"theorem","line":69,"name":"Lean.Grind.Nat.ro_eq_true_of_ro","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Offset.lean#L69-L70"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Offset.html#Lean.Grind.Nat.ro_eq_true_of_le\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Nat</span>.<span class=\"name\">ro_eq_true_of_le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u </span><span class=\"fn\">v </span><span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">v</span> → (<span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#True\">True</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Offset.html#Lean.Grind.Nat.ro_eq_true_of_le","kind":"theorem","line":67,"name":"Lean.Grind.Nat.ro_eq_true_of_le","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Offset.lean#L67-L68"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Offset.html#Lean.Grind.Nat.ro_eq_true_of_lo\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Nat</span>.<span class=\"name\">ro_eq_true_of_lo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u </span><span class=\"fn\">v </span><span class=\"fn\">k₁ </span><span class=\"fn\">k₂</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">v</span> → (<span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k₂</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#True\">True</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Offset.html#Lean.Grind.Nat.ro_eq_true_of_lo","kind":"theorem","line":65,"name":"Lean.Grind.Nat.ro_eq_true_of_lo","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Offset.lean#L65-L66"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Offset.html#Lean.Grind.Nat.le_eq_true_of_le\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Nat</span>.<span class=\"name\">le_eq_true_of_le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u </span><span class=\"fn\">v</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">v</span> → (<span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">v</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#True\">True</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Offset.html#Lean.Grind.Nat.le_eq_true_of_le","kind":"theorem","line":63,"name":"Lean.Grind.Nat.le_eq_true_of_le","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Offset.lean#L63-L64"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Offset.html#Lean.Grind.Nat.le_eq_true_of_lo\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Nat</span>.<span class=\"name\">le_eq_true_of_lo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u </span><span class=\"fn\">v </span><span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">v</span> → (<span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">v</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#True\">True</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Offset.html#Lean.Grind.Nat.le_eq_true_of_lo","kind":"theorem","line":61,"name":"Lean.Grind.Nat.le_eq_true_of_lo","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Offset.lean#L61-L62"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Offset.html#Lean.Grind.Nat.lo_eq_true_of_lo\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Nat</span>.<span class=\"name\">lo_eq_true_of_lo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u </span><span class=\"fn\">v </span><span class=\"fn\">k₁ </span><span class=\"fn\">k₂</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Offset.html#Lean.Grind.isLE\">isLE</a> <span class=\"fn\">k₂</span> <span class=\"fn\">k₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">v</span> → (<span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k₂</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">v</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#True\">True</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Offset.html#Lean.Grind.Nat.lo_eq_true_of_lo","kind":"theorem","line":59,"name":"Lean.Grind.Nat.lo_eq_true_of_lo","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Offset.lean#L59-L60"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Offset.html#Lean.Grind.Nat.unsat_lo_ro\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Nat</span>.<span class=\"name\">unsat_lo_ro</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u </span><span class=\"fn\">v </span><span class=\"fn\">k₁ </span><span class=\"fn\">k₂</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Offset.html#Lean.Grind.isLt\">isLt</a> <span class=\"fn\">k₂</span> <span class=\"fn\">k₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">v</span> → <span class=\"fn\"><span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k₂</span> → <a href=\"./Init/Prelude.html#False\">False</a></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Offset.html#Lean.Grind.Nat.unsat_lo_ro","kind":"theorem","line":55,"name":"Lean.Grind.Nat.unsat_lo_ro","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Offset.lean#L55-L56"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Offset.html#Lean.Grind.Nat.unsat_lo_lo\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Nat</span>.<span class=\"name\">unsat_lo_lo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u </span><span class=\"fn\">v </span><span class=\"fn\">k₁ </span><span class=\"fn\">k₂</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Offset.html#Lean.Grind.isLt\">isLt</a> <span class=\"fn\">0</span> (<span class=\"fn\">k₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k₂</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">v</span> → <span class=\"fn\"><span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k₂</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">u</span> → <a href=\"./Init/Prelude.html#False\">False</a></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Offset.html#Lean.Grind.Nat.unsat_lo_lo","kind":"theorem","line":53,"name":"Lean.Grind.Nat.unsat_lo_lo","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Offset.lean#L53-L54"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Offset.html#Lean.Grind.Nat.unsat_le_lo\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Nat</span>.<span class=\"name\">unsat_le_lo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u </span><span class=\"fn\">v </span><span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Offset.html#Lean.Grind.isLt\">isLt</a> <span class=\"fn\">0</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">v</span> → <span class=\"fn\"><span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">u</span> → <a href=\"./Init/Prelude.html#False\">False</a></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Offset.html#Lean.Grind.Nat.unsat_le_lo","kind":"theorem","line":51,"name":"Lean.Grind.Nat.unsat_le_lo","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Offset.lean#L51-L52"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Offset.html#Lean.Grind.Nat.of_ro_eq_false\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Nat</span>.<span class=\"name\">of_ro_eq_false</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u </span><span class=\"fn\">v </span><span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#False\">False</a> → <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">u</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Offset.html#Lean.Grind.Nat.of_ro_eq_false","kind":"theorem","line":47,"name":"Lean.Grind.Nat.of_ro_eq_false","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Offset.lean#L47-L48"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Offset.html#Lean.Grind.Nat.of_lo_eq_false\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Nat</span>.<span class=\"name\">of_lo_eq_false</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u </span><span class=\"fn\">v </span><span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">v</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#False\">False</a> → <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)</span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Offset.html#Lean.Grind.Nat.of_lo_eq_false","kind":"theorem","line":45,"name":"Lean.Grind.Nat.of_lo_eq_false","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Offset.lean#L45-L46"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Offset.html#Lean.Grind.Nat.of_lo_eq_false_1\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Nat</span>.<span class=\"name\">of_lo_eq_false_1</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u </span><span class=\"fn\">v</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">v</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#False\">False</a> → <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">u</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Offset.html#Lean.Grind.Nat.of_lo_eq_false_1","kind":"theorem","line":43,"name":"Lean.Grind.Nat.of_lo_eq_false_1","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Offset.lean#L43-L44"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Offset.html#Lean.Grind.Nat.of_le_eq_false\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Nat</span>.<span class=\"name\">of_le_eq_false</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u </span><span class=\"fn\">v</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">v</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#False\">False</a> → <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">u</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Offset.html#Lean.Grind.Nat.of_le_eq_false","kind":"theorem","line":41,"name":"Lean.Grind.Nat.of_le_eq_false","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Offset.lean#L41-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Offset.html#Lean.Grind.Nat.ro_ro\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Nat</span>.<span class=\"name\">ro_ro</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u </span><span class=\"fn\">w </span><span class=\"fn\">v </span><span class=\"fn\">k₁ </span><span class=\"fn\">k₂</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k₁</span> → <span class=\"fn\"><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k₂</span> → <span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> (<span class=\"fn\">k₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k₂</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Offset.html#Lean.Grind.Nat.ro_ro","kind":"theorem","line":37,"name":"Lean.Grind.Nat.ro_ro","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Offset.lean#L37-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Offset.html#Lean.Grind.Nat.ro_lo_2\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Nat</span>.<span class=\"name\">ro_lo_2</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u </span><span class=\"fn\">w </span><span class=\"fn\">v </span><span class=\"fn\">k₁ </span><span class=\"fn\">k₂</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Offset.html#Lean.Grind.isLt\">isLt</a> <span class=\"fn\">k₁</span> <span class=\"fn\">k₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k₁</span> → <span class=\"fn\"><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k₂</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">v</span> → <span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> (<span class=\"fn\">k₂</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">k₁</span>) <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">v</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Offset.html#Lean.Grind.Nat.ro_lo_2","kind":"theorem","line":35,"name":"Lean.Grind.Nat.ro_lo_2","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Offset.lean#L35-L36"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Offset.html#Lean.Grind.Nat.ro_lo_1\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Nat</span>.<span class=\"name\">ro_lo_1</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u </span><span class=\"fn\">w </span><span class=\"fn\">v </span><span class=\"fn\">k₁ </span><span class=\"fn\">k₂</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k₁</span> → <span class=\"fn\"><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k₂</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">v</span> → <span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> (<span class=\"fn\">k₁</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">k₂</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Offset.html#Lean.Grind.Nat.ro_lo_1","kind":"theorem","line":33,"name":"Lean.Grind.Nat.ro_lo_1","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Offset.lean#L33-L34"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Offset.html#Lean.Grind.Nat.ro_le\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Nat</span>.<span class=\"name\">ro_le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u </span><span class=\"fn\">w </span><span class=\"fn\">v </span><span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k</span> → <span class=\"fn\"><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">v</span> → <span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Offset.html#Lean.Grind.Nat.ro_le","kind":"theorem","line":31,"name":"Lean.Grind.Nat.ro_le","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Offset.lean#L31-L32"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Offset.html#Lean.Grind.Nat.lo_ro_2\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Nat</span>.<span class=\"name\">lo_ro_2</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u </span><span class=\"fn\">w </span><span class=\"fn\">v </span><span class=\"fn\">k₁ </span><span class=\"fn\">k₂</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">w</span> → <span class=\"fn\"><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k₂</span> → <span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> (<span class=\"fn\">k₂</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">k₁</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Offset.html#Lean.Grind.Nat.lo_ro_2","kind":"theorem","line":29,"name":"Lean.Grind.Nat.lo_ro_2","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Offset.lean#L29-L30"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Offset.html#Lean.Grind.Nat.lo_ro_1\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Nat</span>.<span class=\"name\">lo_ro_1</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u </span><span class=\"fn\">w </span><span class=\"fn\">v </span><span class=\"fn\">k₁ </span><span class=\"fn\">k₂</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Offset.html#Lean.Grind.isLt\">isLt</a> <span class=\"fn\">k₂</span> <span class=\"fn\">k₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">w</span> → <span class=\"fn\"><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k₂</span> → <span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> (<span class=\"fn\">k₁</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">k₂</span>) <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">v</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Offset.html#Lean.Grind.Nat.lo_ro_1","kind":"theorem","line":27,"name":"Lean.Grind.Nat.lo_ro_1","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Offset.lean#L27-L28"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Offset.html#Lean.Grind.Nat.lo_lo\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Nat</span>.<span class=\"name\">lo_lo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u </span><span class=\"fn\">w </span><span class=\"fn\">v </span><span class=\"fn\">k₁ </span><span class=\"fn\">k₂</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k₁</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">w</span> → <span class=\"fn\"><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k₂</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">v</span> → <span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> (<span class=\"fn\">k₁</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k₂</span>) <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">v</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Offset.html#Lean.Grind.Nat.lo_lo","kind":"theorem","line":25,"name":"Lean.Grind.Nat.lo_lo","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Offset.lean#L25-L26"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Offset.html#Lean.Grind.Nat.lo_le\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Nat</span>.<span class=\"name\">lo_le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u </span><span class=\"fn\">w </span><span class=\"fn\">v </span><span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">w</span> → <span class=\"fn\"><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">v</span> → <span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">v</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Offset.html#Lean.Grind.Nat.lo_le","kind":"theorem","line":23,"name":"Lean.Grind.Nat.lo_le","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Offset.lean#L23-L24"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Offset.html#Lean.Grind.Nat.le_lo\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Nat</span>.<span class=\"name\">le_lo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u </span><span class=\"fn\">w </span><span class=\"fn\">v </span><span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">w</span> → <span class=\"fn\"><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">v</span> → <span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">v</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Offset.html#Lean.Grind.Nat.le_lo","kind":"theorem","line":21,"name":"Lean.Grind.Nat.le_lo","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Offset.lean#L21-L22"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Offset.html#Lean.Grind.Nat.le_ro\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Nat</span>.<span class=\"name\">le_ro</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u </span><span class=\"fn\">w </span><span class=\"fn\">v </span><span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">w</span> → <span class=\"fn\"><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k</span> → <span class=\"fn\">u</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Offset.html#Lean.Grind.Nat.le_ro","kind":"theorem","line":19,"name":"Lean.Grind.Nat.le_ro","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Offset.lean#L19-L20"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Offset.html#Lean.Grind.isLE\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">isLE</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Offset.html#Lean.Grind.isLE","kind":"def","line":16,"name":"Lean.Grind.isLE","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Offset.lean#L16-L16"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Offset.html#Lean.Grind.isLt\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">isLt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Offset.html#Lean.Grind.isLt","kind":"def","line":15,"name":"Lean.Grind.isLt","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Offset.lean#L15-L15"}}],"imports":["Init.Core","Init.Omega"],"instances":[],"name":"Init.Grind.Offset"}