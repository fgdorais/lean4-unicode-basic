{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.not_gt_eq\"><span class=\"name\">Int</span>.<span class=\"name\">not_gt_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#GT.gt\">&gt;</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.not_gt_eq","kind":"theorem","line":2224,"name":"Int.not_gt_eq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L2224-L2225"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.not_lt_eq\"><span class=\"name\">Int</span>.<span class=\"name\">not_lt_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.not_lt_eq","kind":"theorem","line":2219,"name":"Int.not_lt_eq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L2219-L2222"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.not_ge_eq\"><span class=\"name\">Int</span>.<span class=\"name\">not_ge_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.not_ge_eq","kind":"theorem","line":2216,"name":"Int.not_ge_eq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L2216-L2217"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.not_le_eq\"><span class=\"name\">Int</span>.<span class=\"name\">not_le_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.not_le_eq","kind":"theorem","line":2211,"name":"Int.not_le_eq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L2211-L2214"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.pow_eq\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">pow_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a' </span><span class=\"fn\">b' </span><span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">↑<span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₃</span> : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a'</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\"><span class=\"fn\">b'</span>.<a href=\"./Init/Data/Int/Basic.html#Int.toNat\">toNat</a></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.pow_eq","kind":"theorem","line":2206,"name":"Int.Linear.pow_eq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L2206-L2207"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.mod_eq'\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">mod_eq'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">b' </span><span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">b'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.mod_eq'","kind":"theorem","line":2204,"name":"Int.Linear.mod_eq'","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L2204-L2204"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.div_eq'\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">div_eq'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">b' </span><span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b'</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b'</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.div_eq'","kind":"theorem","line":2203,"name":"Int.Linear.div_eq'","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L2203-L2203"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.mod_eq\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">mod_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">k</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.mod_eq","kind":"theorem","line":2201,"name":"Int.Linear.mod_eq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L2201-L2201"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.div_eq\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">div_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">k</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.div_eq","kind":"theorem","line":2200,"name":"Int.Linear.div_eq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L2200-L2200"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.mul_eq_zero_right\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">mul_eq_zero_right</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.mul_eq_zero_right","kind":"theorem","line":2198,"name":"Int.Linear.mul_eq_zero_right","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L2198-L2198"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.mul_eq_zero_left\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">mul_eq_zero_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.mul_eq_zero_left","kind":"theorem","line":2197,"name":"Int.Linear.mul_eq_zero_left","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L2197-L2197"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.mul_eq_kxk\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">mul_eq_kxk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">k₁ </span><span class=\"fn\">c </span><span class=\"fn\">k₂ </span><span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k₁</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">c</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k₂</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₃</span> : (<span class=\"fn\">k₁</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">k₂</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.mul_eq_kxk","kind":"theorem","line":2195,"name":"Int.Linear.mul_eq_kxk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L2195-L2196"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.mul_eq_kkx\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">mul_eq_kkx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">k₁ </span><span class=\"fn\">k₂ </span><span class=\"fn\">c </span><span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k₁</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k₂</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">c</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₃</span> : (<span class=\"fn\">k₁</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">k₂</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.mul_eq_kkx","kind":"theorem","line":2193,"name":"Int.Linear.mul_eq_kkx","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L2193-L2194"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.mul_eq_kk\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">mul_eq_kk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">k₁ </span><span class=\"fn\">k₂ </span><span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k₁</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k₂</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₃</span> : (<span class=\"fn\">k₁</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">k₂</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">k</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.mul_eq_kk","kind":"theorem","line":2192,"name":"Int.Linear.mul_eq_kk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L2192-L2192"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_one_mul\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">eq_one_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.eq_one_mul","kind":"theorem","line":2191,"name":"Int.Linear.eq_one_mul","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L2191-L2191"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.of_var_eq\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">of_var_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.of_var_eq_cert\">of_var_eq_cert</a> <span class=\"fn\">x</span> <span class=\"fn\">k</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var.denote\">Var.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.of_var_eq","kind":"theorem","line":2187,"name":"Int.Linear.of_var_eq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L2187-L2189"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.of_var_eq_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">of_var_eq_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.of_var_eq_cert","kind":"def","line":2184,"name":"Int.Linear.of_var_eq_cert","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L2184-L2185"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.of_var_eq_var\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">of_var_eq_var</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.of_var_eq_var_cert\">of_var_eq_var_cert</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var.denote\">Var.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var.denote\">Var.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">y</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.of_var_eq_var","kind":"theorem","line":2180,"name":"Int.Linear.of_var_eq_var","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L2180-L2182"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.of_var_eq_var_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">of_var_eq_var_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.of_var_eq_var_cert","kind":"def","line":2177,"name":"Int.Linear.of_var_eq_var_cert","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L2177-L2178"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.of_var_eq_mul\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">of_var_eq_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.of_var_eq_mul_cert\">of_var_eq_mul_cert</a> <span class=\"fn\">x</span> <span class=\"fn\">k</span> <span class=\"fn\">y</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var.denote\">Var.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var.denote\">Var.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">y</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.of_var_eq_mul","kind":"theorem","line":2173,"name":"Int.Linear.of_var_eq_mul","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L2173-L2175"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.of_var_eq_mul_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">of_var_eq_mul_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.of_var_eq_mul_cert","kind":"def","line":2170,"name":"Int.Linear.of_var_eq_mul_cert","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L2170-L2171"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.var_eq\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">var_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.var_eq_cert\">var_eq_cert</a> <span class=\"fn\">x</span> <span class=\"fn\">k</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var.denote\">Var.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.var_eq","kind":"theorem","line":2161,"name":"Int.Linear.var_eq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L2161-L2168"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.var_eq_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">var_eq_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.var_eq_cert","kind":"def","line":2156,"name":"Int.Linear.var_eq_cert","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L2156-L2159"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.natCast_sub\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">natCast_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Cast.html#NatCast.natCast\">↑</a>(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <a href=\"./Init/Data/Cast.html#NatCast.natCast\">↑</a><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Init/Data/Cast.html#NatCast.natCast\">↑</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#ite\">then</a> <a href=\"./Init/Data/Cast.html#NatCast.natCast\">↑</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <a href=\"./Init/Data/Cast.html#NatCast.natCast\">↑</a><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.natCast_sub","kind":"theorem","line":2131,"name":"Int.Linear.natCast_sub","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L2131-L2152"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.not_le_of_le\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">not_le_of_le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.not_le_of_le_cert\">not_le_of_le_cert</a> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> → <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.not_le_of_le","kind":"theorem","line":2126,"name":"Int.Linear.not_le_of_le","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L2126-L2129"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.not_le_of_le'\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">not_le_of_le'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.not_le_of_le_cert\">not_le_of_le_cert</a> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\">∀ (<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">k</span> → <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">k</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.not_le_of_le'","kind":"theorem","line":2112,"name":"Int.Linear.not_le_of_le'","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L2112-L2124"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.not_le_of_le_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">not_le_of_le_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.not_le_of_le_cert","kind":"def","line":2104,"name":"Int.Linear.not_le_of_le_cert","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L2104-L2110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.le_of_le\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">le_of_le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.le_of_le_cert\">le_of_le_cert</a> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.le_of_le","kind":"theorem","line":2101,"name":"Int.Linear.le_of_le","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L2101-L2102"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.le_of_le'\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">le_of_le'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.le_of_le_cert\">le_of_le_cert</a> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\">∀ (<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">k</span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">k</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.le_of_le'","kind":"theorem","line":2087,"name":"Int.Linear.le_of_le'","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L2087-L2099"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.le_of_le_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">le_of_le_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.le_of_le_cert","kind":"def","line":2079,"name":"Int.Linear.le_of_le_cert","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L2079-L2085"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.dvd_norm_poly\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">dvd_norm_poly</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">p'</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p'</span></span> → <span class=\"fn\"><span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> → <span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p'</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.dvd_norm_poly","kind":"theorem","line":2072,"name":"Int.Linear.dvd_norm_poly","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L2072-L2073"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.diseq_norm_poly\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">diseq_norm_poly</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">p'</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p'</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p'</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.diseq_norm_poly","kind":"theorem","line":2069,"name":"Int.Linear.diseq_norm_poly","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L2069-L2070"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.le_norm_poly\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">le_norm_poly</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">p'</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p'</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p'</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.le_norm_poly","kind":"theorem","line":2066,"name":"Int.Linear.le_norm_poly","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L2066-L2067"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_norm_poly\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">eq_norm_poly</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">p'</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p'</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.eq_norm_poly","kind":"theorem","line":2063,"name":"Int.Linear.eq_norm_poly","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L2063-L2064"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_def'_norm\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">eq_def'_norm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ePoly </span><span class=\"fn\">ePoly' </span><span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_def'_norm_cert\">eq_def'_norm_cert</a> <span class=\"fn\">x</span> <span class=\"fn\">e</span> <span class=\"fn\">ePoly</span> <span class=\"fn\">ePoly'</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var.denote\">Var.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">e</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">ePoly</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">ePoly'</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.eq_def'_norm","kind":"theorem","line":2058,"name":"Int.Linear.eq_def'_norm","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L2058-L2061"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_def'_norm_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">eq_def'_norm_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ePoly </span><span class=\"fn\">ePoly' </span><span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.eq_def'_norm_cert","kind":"def","line":2054,"name":"Int.Linear.eq_def'_norm_cert","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L2054-L2056"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_def'\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">eq_def'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_def'_cert\">eq_def'_cert</a> <span class=\"fn\">x</span> <span class=\"fn\">e</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var.denote\">Var.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">e</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.eq_def'","kind":"theorem","line":2049,"name":"Int.Linear.eq_def'","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L2049-L2052"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_def'_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">eq_def'_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.eq_def'_cert","kind":"def","line":2045,"name":"Int.Linear.eq_def'_cert","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L2045-L2047"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_def_norm\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">eq_def_norm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xPoly </span><span class=\"fn\">xPoly' </span><span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_def_cert\">eq_def_cert</a> <span class=\"fn\">x</span> <span class=\"fn\">xPoly'</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var.denote\">Var.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">xPoly</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">xPoly</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">xPoly'</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.eq_def_norm","kind":"theorem","line":2040,"name":"Int.Linear.eq_def_norm","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L2040-L2043"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_def\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">eq_def</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xPoly </span><span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_def_cert\">eq_def_cert</a> <span class=\"fn\">x</span> <span class=\"fn\">xPoly</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var.denote\">Var.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">xPoly</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.eq_def","kind":"theorem","line":2035,"name":"Int.Linear.eq_def","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L2035-L2038"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_def_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">eq_def_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xPoly </span><span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.eq_def_cert","kind":"def","line":2031,"name":"Int.Linear.eq_def_cert","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L2031-L2033"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.of_not_dvd\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">of_not_dvd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Core.html#bne\">!=</a> <span class=\"fn\">0</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\">b</span> → <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#GT.gt\">&gt;</a> <span class=\"fn\">0</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.of_not_dvd","kind":"theorem","line":2025,"name":"Int.Linear.of_not_dvd","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L2025-L2029"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.not_eq_norm_expr\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">not_eq_norm_expr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.norm_eq_cert\">norm_eq_cert</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span> → <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.not_eq_norm_expr","kind":"theorem","line":2019,"name":"Int.Linear.not_eq_norm_expr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L2019-L2023"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_norm_expr\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">eq_norm_expr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.norm_eq_cert\">norm_eq_cert</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.eq_norm_expr","kind":"theorem","line":2015,"name":"Int.Linear.eq_norm_expr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L2015-L2017"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.dvd_norm_expr\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">dvd_norm_expr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.norm\">norm</a></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">e</span></span> → <span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.dvd_norm_expr","kind":"theorem","line":2011,"name":"Int.Linear.dvd_norm_expr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L2011-L2013"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.not_le_norm_expr\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">not_le_norm_expr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.not_le_norm_expr_cert\">not_le_norm_expr_cert</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.not_le_norm_expr","kind":"theorem","line":2002,"name":"Int.Linear.not_le_norm_expr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L2002-L2009"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.not_le_norm_expr_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">not_le_norm_expr_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.not_le_norm_expr_cert","kind":"def","line":1998,"name":"Int.Linear.not_le_norm_expr_cert","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1998-L2000"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.le_norm_expr\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">le_norm_expr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.norm_eq_cert\">norm_eq_cert</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.le_norm_expr","kind":"theorem","line":1994,"name":"Int.Linear.le_norm_expr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1994-L1996"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.dvd_neg_le_tight\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">dvd_neg_le_tight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.dvd_neg_le_tight_cert\">dvd_neg_le_tight_cert</a> <span class=\"fn\">d</span> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.dvd_neg_le_tight","kind":"theorem","line":1973,"name":"Int.Linear.dvd_neg_le_tight","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1973-L1992"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.mul_minus_one_getConst_eq\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">mul_minus_one_getConst_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.mul\">mul</a></span> <span class=\"fn\">(-<span class=\"fn\">1</span>)</span>)</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.getConst\">getConst</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.getConst\">getConst</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.mul_minus_one_getConst_eq","kind":"theorem","line":1969,"name":"Int.Linear.Poly.mul_minus_one_getConst_eq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1969-L1971"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.dvd_neg_le_tight_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">dvd_neg_le_tight_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.dvd_neg_le_tight_cert","kind":"def","line":1960,"name":"Int.Linear.dvd_neg_le_tight_cert","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1960-L1967"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.dvd_le_tight\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">dvd_le_tight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.dvd_le_tight_cert\">dvd_le_tight_cert</a> <span class=\"fn\">d</span> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.dvd_le_tight","kind":"theorem","line":1945,"name":"Int.Linear.dvd_le_tight","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1945-L1958"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.dvd_le_tight_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">dvd_le_tight_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.dvd_le_tight_cert","kind":"def","line":1938,"name":"Int.Linear.dvd_le_tight_cert","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1938-L1943"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.emod_le\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">emod_le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y </span><span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.emod_le_cert\">emod_le_cert</a> <span class=\"fn\">y</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.emod_le","kind":"theorem","line":1885,"name":"Int.Linear.emod_le","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1885-L1909"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.emod_le_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">emod_le_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y </span><span class=\"fn\">n</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.emod_le_cert","kind":"def","line":1881,"name":"Int.Linear.emod_le_cert","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1881-L1883"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.emod_nonneg\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">emod_nonneg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">y</span> <a href=\"./Init/Core.html#bne\">!=</a> <span class=\"fn\">0</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">y</span>) <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.emod_nonneg","kind":"theorem","line":1875,"name":"Int.Linear.emod_nonneg","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1875-L1879"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.ediv_emod\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">ediv_emod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">y</span>) <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.ediv_emod","kind":"theorem","line":1870,"name":"Int.Linear.ediv_emod","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1870-L1873"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_unsat\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cooper_unsat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d </span><span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_unsat_cert\">cooper_unsat_cert</a> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">p₃</span> <span class=\"fn\">d</span> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₃</span></span> → <a href=\"./Init/Prelude.html#False\">False</a></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cooper_unsat","kind":"theorem","line":1854,"name":"Int.Linear.cooper_unsat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1854-L1868"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_unsat_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cooper_unsat_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d </span><span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cooper_unsat_cert","kind":"def","line":1841,"name":"Int.Linear.cooper_unsat_cert","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1841-L1852"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.casesOnNum\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">casesOnNum</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.casesOnNum","kind":"def","line":1838,"name":"Int.Linear.Poly.casesOnNum","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1838-L1839"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.casesOnAdd\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">casesOnAdd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.casesOnAdd","kind":"def","line":1835,"name":"Int.Linear.Poly.casesOnAdd","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1835-L1836"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_right_split_dvd\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cooper_right_split_dvd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p'</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_right_split\">cooper_right_split</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">k</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_right_split_dvd_cert\">cooper_right_split_dvd_cert</a> <span class=\"fn\">p₂</span> <span class=\"fn\">p'</span> <span class=\"fn\">b</span> <span class=\"fn\">↑<span class=\"fn\">k</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p'</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cooper_right_split_dvd","kind":"theorem","line":1755,"name":"Int.Linear.cooper_right_split_dvd","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1755-L1758"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_right_split_dvd_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cooper_right_split_dvd_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₂ </span><span class=\"fn\">p'</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b </span><span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cooper_right_split_dvd_cert","kind":"def","line":1751,"name":"Int.Linear.cooper_right_split_dvd_cert","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1751-L1753"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_right_split_ineq\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cooper_right_split_ineq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p'</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_right_split\">cooper_right_split</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">k</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_right_split_ineq_cert\">cooper_right_split_ineq_cert</a> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">(↑<span class=\"fn\">k</span>)</span> <span class=\"fn\">a</span> <span class=\"fn\">p'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p'</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cooper_right_split_ineq","kind":"theorem","line":1746,"name":"Int.Linear.cooper_right_split_ineq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1746-L1749"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_right_split_ineq_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cooper_right_split_ineq_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k </span><span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p'</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cooper_right_split_ineq_cert","kind":"def","line":1738,"name":"Int.Linear.cooper_right_split_ineq_cert","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1738-L1744"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_right\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cooper_right</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_right_cert\">cooper_right_cert</a> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.OrOver\">OrOver</a> <span class=\"fn\">n</span> <span class=\"fn\">(<a href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_right_split\">cooper_right_split</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span>)</span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cooper_right","kind":"theorem","line":1720,"name":"Int.Linear.cooper_right","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1720-L1736"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_right_split\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cooper_right_split</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cooper_right_split","kind":"def","line":1710,"name":"Int.Linear.cooper_right_split","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1710-L1718"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_right_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cooper_right_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cooper_right_cert","kind":"def","line":1704,"name":"Int.Linear.cooper_right_cert","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1704-L1708"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_right_split_dvd2\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cooper_dvd_right_split_dvd2</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d'</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p'</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_right_split\">cooper_dvd_right_split</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">p₃</span> <span class=\"fn\">d</span> <span class=\"fn\">k</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_right_split_dvd2_cert\">cooper_dvd_right_split_dvd2_cert</a> <span class=\"fn\">p₂</span> <span class=\"fn\">p₃</span> <span class=\"fn\">d</span> <span class=\"fn\">k</span> <span class=\"fn\">d'</span> <span class=\"fn\">p'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\">d'</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p'</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_right_split_dvd2","kind":"theorem","line":1683,"name":"Int.Linear.cooper_dvd_right_split_dvd2","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1683-L1686"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_right_split_dvd2_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cooper_dvd_right_split_dvd2_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d'</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p'</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_right_split_dvd2_cert","kind":"def","line":1674,"name":"Int.Linear.cooper_dvd_right_split_dvd2_cert","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1674-L1681"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_right_split_dvd1\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cooper_dvd_right_split_dvd1</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p'</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_right_split\">cooper_dvd_right_split</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">p₃</span> <span class=\"fn\">d</span> <span class=\"fn\">k</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_right_split_dvd1_cert\">cooper_dvd_right_split_dvd1_cert</a> <span class=\"fn\">p₂</span> <span class=\"fn\">p'</span> <span class=\"fn\">b</span> <span class=\"fn\">↑<span class=\"fn\">k</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p'</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_right_split_dvd1","kind":"theorem","line":1669,"name":"Int.Linear.cooper_dvd_right_split_dvd1","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1669-L1672"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_right_split_dvd1_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cooper_dvd_right_split_dvd1_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₂ </span><span class=\"fn\">p'</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b </span><span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_right_split_dvd1_cert","kind":"def","line":1665,"name":"Int.Linear.cooper_dvd_right_split_dvd1_cert","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1665-L1667"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_right_split_ineq\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cooper_dvd_right_split_ineq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p'</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_right_split\">cooper_dvd_right_split</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">p₃</span> <span class=\"fn\">d</span> <span class=\"fn\">k</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_right_split_ineq_cert\">cooper_dvd_right_split_ineq_cert</a> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">(↑<span class=\"fn\">k</span>)</span> <span class=\"fn\">a</span> <span class=\"fn\">p'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p'</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_right_split_ineq","kind":"theorem","line":1660,"name":"Int.Linear.cooper_dvd_right_split_ineq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1660-L1663"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_right_split_ineq_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cooper_dvd_right_split_ineq_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k </span><span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p'</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_right_split_ineq_cert","kind":"def","line":1652,"name":"Int.Linear.cooper_dvd_right_split_ineq_cert","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1652-L1658"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_right\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cooper_dvd_right</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_right_cert\">cooper_dvd_right_cert</a> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">p₃</span> <span class=\"fn\">d</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₃</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.OrOver\">OrOver</a> <span class=\"fn\">n</span> <span class=\"fn\">(<a href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_right_split\">cooper_dvd_right_split</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">p₃</span> <span class=\"fn\">d</span>)</span></span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_right","kind":"theorem","line":1633,"name":"Int.Linear.cooper_dvd_right","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1633-L1650"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_right_split\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cooper_dvd_right_split</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_right_split","kind":"def","line":1619,"name":"Int.Linear.cooper_dvd_right_split","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1619-L1631"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_right_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cooper_dvd_right_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_right_cert","kind":"def","line":1610,"name":"Int.Linear.cooper_dvd_right_cert","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1610-L1617"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_left_split_dvd\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cooper_left_split_dvd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p'</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_left_split\">cooper_left_split</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">k</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_left_split_dvd_cert\">cooper_left_split_dvd_cert</a> <span class=\"fn\">p₁</span> <span class=\"fn\">p'</span> <span class=\"fn\">a</span> <span class=\"fn\">↑<span class=\"fn\">k</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p'</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cooper_left_split_dvd","kind":"theorem","line":1580,"name":"Int.Linear.cooper_left_split_dvd","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1580-L1583"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_left_split_dvd_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cooper_left_split_dvd_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p'</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cooper_left_split_dvd_cert","kind":"def","line":1576,"name":"Int.Linear.cooper_left_split_dvd_cert","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1576-L1578"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_left_split_ineq\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cooper_left_split_ineq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p'</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_left_split\">cooper_left_split</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">k</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_left_split_ineq_cert\">cooper_left_split_ineq_cert</a> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">(↑<span class=\"fn\">k</span>)</span> <span class=\"fn\">b</span> <span class=\"fn\">p'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p'</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cooper_left_split_ineq","kind":"theorem","line":1571,"name":"Int.Linear.cooper_left_split_ineq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1571-L1574"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_left_split_ineq_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cooper_left_split_ineq_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p'</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cooper_left_split_ineq_cert","kind":"def","line":1563,"name":"Int.Linear.cooper_left_split_ineq_cert","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1563-L1569"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_left\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cooper_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_left_cert\">cooper_left_cert</a> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.OrOver\">OrOver</a> <span class=\"fn\">n</span> <span class=\"fn\">(<a href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_left_split\">cooper_left_split</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span>)</span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cooper_left","kind":"theorem","line":1545,"name":"Int.Linear.cooper_left","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1545-L1561"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_left_split\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cooper_left_split</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cooper_left_split","kind":"def","line":1535,"name":"Int.Linear.cooper_left_split","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1535-L1543"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_left_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cooper_left_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cooper_left_cert","kind":"def","line":1528,"name":"Int.Linear.cooper_left_cert","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1528-L1533"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_left_split_dvd2\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cooper_dvd_left_split_dvd2</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d'</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p'</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_left_split\">cooper_dvd_left_split</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">p₃</span> <span class=\"fn\">d</span> <span class=\"fn\">k</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_left_split_dvd2_cert\">cooper_dvd_left_split_dvd2_cert</a> <span class=\"fn\">p₁</span> <span class=\"fn\">p₃</span> <span class=\"fn\">d</span> <span class=\"fn\">k</span> <span class=\"fn\">d'</span> <span class=\"fn\">p'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\">d'</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p'</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_left_split_dvd2","kind":"theorem","line":1507,"name":"Int.Linear.cooper_dvd_left_split_dvd2","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1507-L1510"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_left_split_dvd2_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cooper_dvd_left_split_dvd2_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d'</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p'</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_left_split_dvd2_cert","kind":"def","line":1498,"name":"Int.Linear.cooper_dvd_left_split_dvd2_cert","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1498-L1505"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_left_split_dvd1\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cooper_dvd_left_split_dvd1</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p'</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_left_split\">cooper_dvd_left_split</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">p₃</span> <span class=\"fn\">d</span> <span class=\"fn\">k</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_left_split_dvd1_cert\">cooper_dvd_left_split_dvd1_cert</a> <span class=\"fn\">p₁</span> <span class=\"fn\">p'</span> <span class=\"fn\">a</span> <span class=\"fn\">↑<span class=\"fn\">k</span></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p'</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_left_split_dvd1","kind":"theorem","line":1493,"name":"Int.Linear.cooper_dvd_left_split_dvd1","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1493-L1496"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_left_split_dvd1_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cooper_dvd_left_split_dvd1_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p'</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_left_split_dvd1_cert","kind":"def","line":1489,"name":"Int.Linear.cooper_dvd_left_split_dvd1_cert","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1489-L1491"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_left_split_ineq\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cooper_dvd_left_split_ineq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p'</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_left_split\">cooper_dvd_left_split</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">p₃</span> <span class=\"fn\">d</span> <span class=\"fn\">k</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_left_split_ineq_cert\">cooper_dvd_left_split_ineq_cert</a> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">(↑<span class=\"fn\">k</span>)</span> <span class=\"fn\">b</span> <span class=\"fn\">p'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p'</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_left_split_ineq","kind":"theorem","line":1484,"name":"Int.Linear.cooper_dvd_left_split_ineq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1484-L1487"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_left_split_ineq_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cooper_dvd_left_split_ineq_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p'</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_left_split_ineq_cert","kind":"def","line":1476,"name":"Int.Linear.cooper_dvd_left_split_ineq_cert","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1476-L1482"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_left\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cooper_dvd_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_left_cert\">cooper_dvd_left_cert</a> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">p₃</span> <span class=\"fn\">d</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₃</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.OrOver\">OrOver</a> <span class=\"fn\">n</span> <span class=\"fn\">(<a href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_left_split\">cooper_dvd_left_split</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">p₃</span> <span class=\"fn\">d</span>)</span></span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_left","kind":"theorem","line":1458,"name":"Int.Linear.cooper_dvd_left","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1458-L1474"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_left_split\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cooper_dvd_left_split</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_left_split","kind":"def","line":1436,"name":"Int.Linear.cooper_dvd_left_split","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1436-L1448"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.tail\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">tail</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.tail","kind":"def","line":1430,"name":"Int.Linear.Poly.tail","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1430-L1434"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_left_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cooper_dvd_left_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cooper_dvd_left_cert","kind":"def","line":1421,"name":"Int.Linear.cooper_dvd_left_cert","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1421-L1428"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.orOver_cases\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">orOver_cases</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.OrOver\">OrOver</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">p</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.OrOver_cases_type\">OrOver_cases_type</a> <span class=\"fn\">n</span> <span class=\"fn\">p</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.orOver_cases","kind":"theorem","line":1367,"name":"Int.Linear.orOver_cases","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1367-L1370"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.OrOver_cases_type\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">OrOver_cases_type</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.OrOver_cases_type","kind":"def","line":1361,"name":"Int.Linear.OrOver_cases_type","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1361-L1365"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.orOver_resolve\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">orOver_resolve</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.OrOver\">OrOver</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">p</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">n</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.OrOver\">OrOver</a> <span class=\"fn\">n</span> <span class=\"fn\">p</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.orOver_resolve","kind":"theorem","line":1354,"name":"Int.Linear.orOver_resolve","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1354-L1359"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.orOver_one\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">orOver_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.OrOver\">OrOver</a> <span class=\"fn\">1</span> <span class=\"fn\">p</span></span> → <span class=\"fn\"><span class=\"fn\">p</span> <span class=\"fn\">0</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.orOver_one","kind":"theorem","line":1352,"name":"Int.Linear.orOver_one","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1352-L1352"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.OrOver\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">OrOver</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.OrOver","kind":"def","line":1346,"name":"Int.Linear.OrOver","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1346-L1350"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.diseq_split_resolve\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">diseq_split_resolve</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.diseq_split_cert\">diseq_split_cert</a> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.diseq_split_resolve","kind":"theorem","line":1341,"name":"Int.Linear.diseq_split_resolve","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1341-L1344"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.diseq_split\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">diseq_split</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.diseq_split_cert\">diseq_split_cert</a> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.diseq_split","kind":"theorem","line":1332,"name":"Int.Linear.diseq_split","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1332-L1339"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.diseq_split_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">diseq_split_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.diseq_split_cert","kind":"def","line":1327,"name":"Int.Linear.diseq_split_cert","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1327-L1330"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.le_of_le_diseq\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">le_of_le_diseq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.le_of_le_diseq_cert\">le_of_le_diseq_cert</a> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.le_of_le_diseq","kind":"theorem","line":1318,"name":"Int.Linear.le_of_le_diseq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1318-L1325"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.le_of_le_diseq_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">le_of_le_diseq_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.le_of_le_diseq_cert","kind":"def","line":1312,"name":"Int.Linear.le_of_le_diseq_cert","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1312-L1316"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_of_le_ge\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">eq_of_le_ge</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_of_le_ge_cert\">eq_of_le_ge_cert</a> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.eq_of_le_ge","kind":"theorem","line":1305,"name":"Int.Linear.eq_of_le_ge","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1305-L1310"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_of_le_ge_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">eq_of_le_ge_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.eq_of_le_ge_cert","kind":"def","line":1301,"name":"Int.Linear.eq_of_le_ge_cert","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1301-L1303"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.diseq_of_core\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">diseq_of_core</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_of_core_cert\">eq_of_core_cert</a> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.diseq_of_core","kind":"theorem","line":1294,"name":"Int.Linear.diseq_of_core","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1294-L1299"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_diseq_subst\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">eq_diseq_subst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.diseq_eq_subst_cert\">diseq_eq_subst_cert</a> <span class=\"fn\">x</span> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.eq_diseq_subst","kind":"theorem","line":1287,"name":"Int.Linear.eq_diseq_subst","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1287-L1292"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.diseq_eq_subst_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">diseq_eq_subst_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.diseq_eq_subst_cert","kind":"def","line":1281,"name":"Int.Linear.diseq_eq_subst_cert","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1281-L1285"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.diseq_unsat\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">diseq_unsat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.isUnsatDiseq_k\">isUnsatDiseq_k</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span> → <a href=\"./Init/Prelude.html#False\">False</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.diseq_unsat","kind":"theorem","line":1278,"name":"Int.Linear.diseq_unsat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1278-L1279"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.diseq_neg\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">diseq_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">p'</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p'</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.beq'\">beq'</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.mul\">mul</a></span> <span class=\"fn\">(-<span class=\"fn\">1</span>)</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p'</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.diseq_neg","kind":"theorem","line":1275,"name":"Int.Linear.diseq_neg","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1275-L1276"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.diseq_coeff\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">diseq_coeff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">p'</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_coeff_cert\">eq_coeff_cert</a> <span class=\"fn\">p</span> <span class=\"fn\">p'</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p'</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.diseq_coeff","kind":"theorem","line":1271,"name":"Int.Linear.diseq_coeff","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1271-L1273"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.diseq_norm\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">diseq_norm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.norm\">norm</a></span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.beq'\">beq'</a></span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.diseq_norm","kind":"theorem","line":1265,"name":"Int.Linear.diseq_norm","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1265-L1269"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.isUnsatDiseq_k\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">isUnsatDiseq_k</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.isUnsatDiseq_k","kind":"def","line":1262,"name":"Int.Linear.Poly.isUnsatDiseq_k","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1262-L1263"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.isUnsatDiseq\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">isUnsatDiseq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.isUnsatDiseq","kind":"def","line":1257,"name":"Int.Linear.Poly.isUnsatDiseq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1257-L1260"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_of_core\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">eq_of_core</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_of_core_cert\">eq_of_core_cert</a> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.eq_of_core","kind":"theorem","line":1251,"name":"Int.Linear.eq_of_core","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1251-L1255"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_of_core_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">eq_of_core_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.eq_of_core_cert","kind":"def","line":1247,"name":"Int.Linear.eq_of_core_cert","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1247-L1249"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_le_subst_nonpos\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">eq_le_subst_nonpos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_le_subst_nonpos_cert\">eq_le_subst_nonpos_cert</a> <span class=\"fn\">x</span> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.eq_le_subst_nonpos","kind":"theorem","line":1236,"name":"Int.Linear.eq_le_subst_nonpos","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1236-L1245"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_le_subst_nonpos_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">eq_le_subst_nonpos_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.eq_le_subst_nonpos_cert","kind":"def","line":1230,"name":"Int.Linear.eq_le_subst_nonpos_cert","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1230-L1234"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_le_subst_nonneg\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">eq_le_subst_nonneg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_le_subst_nonneg_cert\">eq_le_subst_nonneg_cert</a> <span class=\"fn\">x</span> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.eq_le_subst_nonneg","kind":"theorem","line":1220,"name":"Int.Linear.eq_le_subst_nonneg","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1220-L1228"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_le_subst_nonneg_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">eq_le_subst_nonneg_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.eq_le_subst_nonneg_cert","kind":"def","line":1214,"name":"Int.Linear.eq_le_subst_nonneg_cert","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1214-L1218"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_eq_subst'\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">eq_eq_subst'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_eq_subst'_cert\">eq_eq_subst'_cert</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.eq_eq_subst'","kind":"theorem","line":1207,"name":"Int.Linear.eq_eq_subst'","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1207-L1212"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_eq_subst'_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">eq_eq_subst'_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.eq_eq_subst'_cert","kind":"def","line":1204,"name":"Int.Linear.eq_eq_subst'_cert","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1204-L1205"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_eq_subst\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">eq_eq_subst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_eq_subst_cert\">eq_eq_subst_cert</a> <span class=\"fn\">x</span> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.eq_eq_subst","kind":"theorem","line":1197,"name":"Int.Linear.eq_eq_subst","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1197-L1202"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_eq_subst_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">eq_eq_subst_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.eq_eq_subst_cert","kind":"def","line":1191,"name":"Int.Linear.eq_eq_subst_cert","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1191-L1194"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_dvd_subst\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">eq_dvd_subst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d₂</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d₃</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_dvd_subst_cert\">eq_dvd_subst_cert</a> <span class=\"fn\">x</span> <span class=\"fn\">p₁</span> <span class=\"fn\">d₂</span> <span class=\"fn\">p₂</span> <span class=\"fn\">d₃</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\">d₂</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> → <span class=\"fn\">d₃</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₃</span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.eq_dvd_subst","kind":"theorem","line":1169,"name":"Int.Linear.eq_dvd_subst","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1169-L1188"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_dvd_subst_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">eq_dvd_subst_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d₂</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d₃</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.eq_dvd_subst_cert","kind":"def","line":1160,"name":"Int.Linear.eq_dvd_subst_cert","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1160-L1167"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.dvd_of_eq\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">dvd_of_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d₂</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.dvd_of_eq_cert\">dvd_of_eq_cert</a> <span class=\"fn\">x</span> <span class=\"fn\">p₁</span> <span class=\"fn\">d₂</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> → <span class=\"fn\">d₂</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.dvd_of_eq","kind":"theorem","line":1138,"name":"Int.Linear.dvd_of_eq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1138-L1147"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.dvd_of_eq_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">dvd_of_eq_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d₂</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.dvd_of_eq_cert","kind":"def","line":1133,"name":"Int.Linear.dvd_of_eq_cert","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1133-L1136"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.abs\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">abs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.abs","kind":"def","line":1124,"name":"Int.Linear.abs","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1124-L1126"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.coeff_k_eq_coeff\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">coeff_k_eq_coeff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.coeff_k\">coeff_k</a></span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.coeff\">coeff</a></span> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.coeff_k_eq_coeff","kind":"theorem","line":1107,"name":"Int.Linear.Poly.coeff_k_eq_coeff","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1107-L1113"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.coeff_k\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">coeff_k</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.coeff_k","kind":"def","line":1104,"name":"Int.Linear.Poly.coeff_k","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1104-L1105"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.coeff\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">coeff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.coeff","kind":"def","line":1099,"name":"Int.Linear.Poly.coeff","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1099-L1102"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_unsat_coeff\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">eq_unsat_coeff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_unsat_coeff_cert\">eq_unsat_coeff_cert</a> <span class=\"fn\">p</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> → <a href=\"./Init/Prelude.html#False\">False</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.eq_unsat_coeff","kind":"theorem","line":1093,"name":"Int.Linear.eq_unsat_coeff","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1093-L1097"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_unsat_coeff_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">eq_unsat_coeff_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.eq_unsat_coeff_cert","kind":"def","line":1089,"name":"Int.Linear.eq_unsat_coeff_cert","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1089-L1091"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_unsat\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">eq_unsat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.isUnsatEq\">isUnsatEq</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> → <a href=\"./Init/Prelude.html#False\">False</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.eq_unsat","kind":"theorem","line":1086,"name":"Int.Linear.eq_unsat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1086-L1087"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_coeff\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">eq_coeff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">p'</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_coeff_cert\">eq_coeff_cert</a> <span class=\"fn\">p</span> <span class=\"fn\">p'</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.eq_coeff","kind":"theorem","line":1082,"name":"Int.Linear.eq_coeff","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1082-L1084"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_coeff_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">eq_coeff_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">p'</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.eq_coeff_cert","kind":"def","line":1078,"name":"Int.Linear.eq_coeff_cert","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1078-L1080"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_norm\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">eq_norm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.norm\">norm</a></span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.beq'\">beq'</a></span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.eq_norm","kind":"theorem","line":1072,"name":"Int.Linear.eq_norm","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1072-L1076"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.le_unsat\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">le_unsat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.isUnsatLe\">isUnsatLe</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> → <a href=\"./Init/Prelude.html#False\">False</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.le_unsat","kind":"theorem","line":1069,"name":"Int.Linear.le_unsat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1069-L1070"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.le_combine_coeff\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">le_combine_coeff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.le_combine_coeff_cert\">le_combine_coeff_cert</a> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">p₃</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.le_combine_coeff","kind":"theorem","line":1054,"name":"Int.Linear.le_combine_coeff","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1054-L1067"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.le_combine_coeff_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">le_combine_coeff_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.le_combine_coeff_cert","kind":"def","line":1047,"name":"Int.Linear.le_combine_coeff_cert","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1047-L1052"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.le_combine\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">le_combine</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.le_combine_cert\">le_combine_cert</a> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₃</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.le_combine","kind":"theorem","line":1037,"name":"Int.Linear.le_combine","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1037-L1045"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.le_combine_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">le_combine_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">p₃</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.le_combine_cert","kind":"def","line":1031,"name":"Int.Linear.le_combine_cert","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1031-L1035"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.leadCoeff\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">leadCoeff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.leadCoeff","kind":"def","line":1025,"name":"Int.Linear.Poly.leadCoeff","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1025-L1029"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.le_neg\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">le_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.le_neg_cert\">le_neg_cert</a> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.le_neg","kind":"theorem","line":1018,"name":"Int.Linear.le_neg","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1018-L1023"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.le_neg_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">le_neg_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.le_neg_cert","kind":"def","line":1014,"name":"Int.Linear.le_neg_cert","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1014-L1016"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.le_coeff\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">le_coeff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.le_coeff_cert\">le_coeff_cert</a> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.le_coeff","kind":"theorem","line":1009,"name":"Int.Linear.le_coeff","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1009-L1012"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.le_coeff_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">le_coeff_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.le_coeff_cert","kind":"def","line":1005,"name":"Int.Linear.le_coeff_cert","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L1005-L1007"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.le_norm\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">le_norm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.norm\">norm</a></span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.beq'\">beq'</a></span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.le_norm","kind":"theorem","line":999,"name":"Int.Linear.le_norm","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L999-L1003"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.dvd_norm\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">dvd_norm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.norm\">norm</a></span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.beq'\">beq'</a></span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> → <span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.dvd_norm","kind":"theorem","line":993,"name":"Int.Linear.dvd_norm","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L993-L997"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.dvd_solve_elim\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">dvd_solve_elim</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d₁</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d₂</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.dvd_solve_elim_cert\">dvd_solve_elim_cert</a> <span class=\"fn\">d₁</span> <span class=\"fn\">p₁</span> <span class=\"fn\">d₂</span> <span class=\"fn\">p₂</span> <span class=\"fn\">d</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n  <span class=\"fn\"><span class=\"fn\">d₁</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> → <span class=\"fn\"><span class=\"fn\">d₂</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> → <span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.dvd_solve_elim","kind":"theorem","line":982,"name":"Int.Linear.dvd_solve_elim","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L982-L991"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.dvd_solve_elim_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">dvd_solve_elim_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d₁</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d₂</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.dvd_solve_elim_cert","kind":"def","line":973,"name":"Int.Linear.dvd_solve_elim_cert","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L973-L980"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.dvd_solve_combine\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">dvd_solve_combine</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d₁</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d₂</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g </span><span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.dvd_solve_combine_cert\">dvd_solve_combine_cert</a> <span class=\"fn\">d₁</span> <span class=\"fn\">p₁</span> <span class=\"fn\">d₂</span> <span class=\"fn\">p₂</span> <span class=\"fn\">d</span> <span class=\"fn\">p</span> <span class=\"fn\">g</span> <span class=\"fn\">α</span> <span class=\"fn\">β</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> →\n  <span class=\"fn\"><span class=\"fn\">d₁</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> → <span class=\"fn\"><span class=\"fn\">d₂</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span> → <span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.dvd_solve_combine","kind":"theorem","line":961,"name":"Int.Linear.dvd_solve_combine","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L961-L971"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.dvd_solve_combine_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">dvd_solve_combine_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d₁</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d₂</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g </span><span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.dvd_solve_combine_cert","kind":"def","line":949,"name":"Int.Linear.dvd_solve_combine_cert","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L949-L959"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.dvd_elim\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">dvd_elim</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k₁</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k₂</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.dvd_elim_cert\">dvd_elim_cert</a> <span class=\"fn\">k₁</span> <span class=\"fn\">p₁</span> <span class=\"fn\">k₂</span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\">k₁</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> → <span class=\"fn\">k₂</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.dvd_elim","kind":"theorem","line":892,"name":"Int.Linear.dvd_elim","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L892-L898"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.dvd_elim_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">dvd_elim_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k₁</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k₂</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.dvd_elim_cert","kind":"def","line":885,"name":"Int.Linear.dvd_elim_cert","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L885-L890"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.dvd_coeff\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">dvd_coeff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k₁</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k₂</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.dvd_coeff_cert\">dvd_coeff_cert</a> <span class=\"fn\">k₁</span> <span class=\"fn\">p₁</span> <span class=\"fn\">k₂</span> <span class=\"fn\">p₂</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\">k₁</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> → <span class=\"fn\">k₂</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.dvd_coeff","kind":"theorem","line":865,"name":"Int.Linear.dvd_coeff","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L865-L871"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.norm_dvd_gcd\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">norm_dvd_gcd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k₁</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e₁</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k₂</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.norm_dvd_gcd_cert\">norm_dvd_gcd_cert</a> <span class=\"fn\">k₁</span> <span class=\"fn\">e₁</span> <span class=\"fn\">k₂</span> <span class=\"fn\">p₂</span> <span class=\"fn\">g</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → (<span class=\"fn\">k₁</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">e₁</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">k₂</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span>)</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.norm_dvd_gcd","kind":"theorem","line":857,"name":"Int.Linear.norm_dvd_gcd","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L857-L863"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.norm_dvd_gcd_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">norm_dvd_gcd_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k₁</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e₁</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k₂</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.norm_dvd_gcd_cert","kind":"def","line":853,"name":"Int.Linear.norm_dvd_gcd_cert","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L853-L855"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.dvd_coeff_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">dvd_coeff_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k₁</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k₂</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.dvd_coeff_cert","kind":"def","line":849,"name":"Int.Linear.dvd_coeff_cert","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L849-L851"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.dvd_eq_false\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">dvd_eq_false</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.isUnsatDvd\">Poly.isUnsatDvd</a> <span class=\"fn\">k</span> <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.norm\">norm</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">e</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#False\">False</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.dvd_eq_false","kind":"theorem","line":844,"name":"Int.Linear.dvd_eq_false","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L844-L847"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.norm_dvd\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">norm_dvd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.norm\">norm</a></span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.beq'\">beq'</a></span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">e</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span>)</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.norm_dvd","kind":"theorem","line":841,"name":"Int.Linear.norm_dvd","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L841-L842"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.dvd_unsat\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">dvd_unsat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.isUnsatDvd\">Poly.isUnsatDvd</a> <span class=\"fn\">k</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> → <a href=\"./Init/Prelude.html#False\">False</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.dvd_unsat","kind":"theorem","line":824,"name":"Int.Linear.dvd_unsat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L824-L827"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.isUnsatDvd\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">isUnsatDvd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.isUnsatDvd","kind":"def","line":810,"name":"Int.Linear.Poly.isUnsatDvd","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L810-L812"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.gcd_dvd_const\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">gcd_dvd_const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.gcdCoeffs\">gcdCoeffs</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.getConst\">getConst</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.gcd_dvd_const","kind":"theorem","line":804,"name":"Int.Linear.Poly.gcd_dvd_const","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L804-L808"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.gcdCoeffs\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">gcdCoeffs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a> → <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.gcdCoeffs","kind":"def","line":799,"name":"Int.Linear.Poly.gcdCoeffs","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L799-L802"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_eq_false_of_divCoeff\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">eq_eq_false_of_divCoeff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.unsatEqDivCoeffCert\">unsatEqDivCoeffCert</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → (<span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#False\">False</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.eq_eq_false_of_divCoeff","kind":"theorem","line":777,"name":"Int.Linear.eq_eq_false_of_divCoeff","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L777-L783"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.unsatEqDivCoeffCert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">unsatEqDivCoeffCert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.unsatEqDivCoeffCert","kind":"def","line":772,"name":"Int.Linear.unsatEqDivCoeffCert","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L772-L775"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.le_eq_true\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">le_eq_true</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">lhs</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.sub\">sub</a></span> <span class=\"fn\">rhs</span>)</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.norm\">norm</a></span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.isValidLe\">isValidLe</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → (<span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#True\">True</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.le_eq_true","kind":"theorem","line":734,"name":"Int.Linear.le_eq_true","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L734-L745"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.le_eq_false\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">le_eq_false</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">lhs</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.sub\">sub</a></span> <span class=\"fn\">rhs</span>)</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.norm\">norm</a></span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.isUnsatLe\">isUnsatLe</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → (<span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#False\">False</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.le_eq_false","kind":"theorem","line":718,"name":"Int.Linear.le_eq_false","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L718-L732"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.isValidLe\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">isValidLe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.isValidLe","kind":"def","line":711,"name":"Int.Linear.Poly.isValidLe","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L711-L715"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.isUnsatLe\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">isUnsatLe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.isUnsatLe","kind":"def","line":705,"name":"Int.Linear.Poly.isUnsatLe","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L705-L709"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_eq_true\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">eq_eq_true</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">lhs</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.sub\">sub</a></span> <span class=\"fn\">rhs</span>)</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.norm\">norm</a></span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.isValidEq\">isValidEq</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → (<span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#True\">True</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.eq_eq_true","kind":"theorem","line":696,"name":"Int.Linear.eq_eq_true","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L696-L703"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.eq_eq_false\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">eq_eq_false</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">lhs</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.sub\">sub</a></span> <span class=\"fn\">rhs</span>)</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.norm\">norm</a></span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.isUnsatEq_k\">isUnsatEq_k</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → (<span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#False\">False</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.eq_eq_false","kind":"theorem","line":687,"name":"Int.Linear.eq_eq_false","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L687-L694"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.isUnsatEq_k\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">isUnsatEq_k</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.isUnsatEq_k","kind":"def","line":684,"name":"Int.Linear.Poly.isUnsatEq_k","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L684-L685"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.isValidEq\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">isValidEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.isValidEq","kind":"def","line":678,"name":"Int.Linear.Poly.isValidEq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L678-L682"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.isUnsatEq\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">isUnsatEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.isUnsatEq","kind":"def","line":672,"name":"Int.Linear.Poly.isUnsatEq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L672-L676"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.norm_le_coeff_tight\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">norm_le_coeff_tight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.norm_le_coeff_tight_cert\">norm_le_coeff_tight_cert</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">p</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → (<span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span>)</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.norm_le_coeff_tight","kind":"theorem","line":665,"name":"Int.Linear.norm_le_coeff_tight","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L665-L670"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.norm_le_coeff_tight_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">norm_le_coeff_tight_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.norm_le_coeff_tight_cert","kind":"def","line":660,"name":"Int.Linear.norm_le_coeff_tight_cert","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L660-L663"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.norm_le_coeff\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">norm_le_coeff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.norm_eq_coeff_cert\">norm_eq_coeff_cert</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">p</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → (<span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span>)</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.norm_le_coeff","kind":"theorem","line":618,"name":"Int.Linear.norm_le_coeff","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L618-L623"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.norm_eq_coeff\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">norm_eq_coeff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.norm_eq_coeff_cert\">norm_eq_coeff_cert</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">p</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → (<span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>)</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.norm_eq_coeff","kind":"theorem","line":598,"name":"Int.Linear.norm_eq_coeff","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L598-L603"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.norm_eq_coeff_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">norm_eq_coeff_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.norm_eq_coeff_cert","kind":"def","line":594,"name":"Int.Linear.norm_eq_coeff_cert","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L594-L596"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.norm_eq_coeff'\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">norm_eq_coeff'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p </span><span class=\"fn\">p'</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">p</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p'</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.mul\">mul</a></span> <span class=\"fn\">k</span></span> → <span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#GT.gt\">&gt;</a> <span class=\"fn\">0</span> → (<span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.norm_eq_coeff'","kind":"theorem","line":591,"name":"Int.Linear.norm_eq_coeff'","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L591-L592"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.norm_eq_var_const\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">norm_eq_var_const</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.norm_eq_var_const_cert\">norm_eq_var_const_cert</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">x</span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var.denote\">Var.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.norm_eq_var_const","kind":"theorem","line":579,"name":"Int.Linear.norm_eq_var_const","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L579-L584"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.norm_eq_var_const_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">norm_eq_var_const_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.norm_eq_var_const_cert","kind":"def","line":575,"name":"Int.Linear.norm_eq_var_const_cert","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L575-L577"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.norm_eq_var\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">norm_eq_var</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.norm_eq_var_cert\">norm_eq_var_cert</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var.denote\">Var.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var.denote\">Var.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">y</span></span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.norm_eq_var","kind":"theorem","line":568,"name":"Int.Linear.norm_eq_var","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L568-L573"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.norm_eq_var_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">norm_eq_var_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.norm_eq_var_cert","kind":"def","line":564,"name":"Int.Linear.norm_eq_var_cert","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L564-L566"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.norm_le\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">norm_le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.norm_eq_cert\">norm_eq_cert</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.norm_le","kind":"theorem","line":557,"name":"Int.Linear.norm_le","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L557-L562"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.norm_eq\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">norm_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.norm_eq_cert\">norm_eq_cert</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.norm_eq","kind":"theorem","line":552,"name":"Int.Linear.norm_eq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L552-L555"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.norm_eq_cert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">norm_eq_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.norm_eq_cert","kind":"def","line":548,"name":"Int.Linear.norm_eq_cert","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L548-L550"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.eq_of_norm_eq\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Expr</span>.<span class=\"name\">eq_of_norm_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.norm\">norm</a></span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.beq'\">beq'</a></span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">e</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">Poly.denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Expr.eq_of_norm_eq","kind":"theorem","line":542,"name":"Int.Linear.Expr.eq_of_norm_eq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L542-L546"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.instLawfulBEqPoly\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">instLawfulBEqPoly</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.instLawfulBEqPoly","kind":"instance","line":529,"name":"Int.Linear.instLawfulBEqPoly","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L529-L538"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote_norm\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Expr</span>.<span class=\"name\">denote_norm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.norm\">norm</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">e</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote_norm","kind":"theorem","line":524,"name":"Int.Linear.Expr.denote_norm","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L524-L525"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote_toPoly'_go\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Expr</span>.<span class=\"name\">denote_toPoly'_go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.toPoly'.go\">toPoly'.go</a> <span class=\"fn\">k</span> <span class=\"fn\">e</span> <span class=\"fn\">p</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">e</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote\">Poly.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote_toPoly'_go","kind":"theorem","line":496,"name":"Int.Linear.Expr.denote_toPoly'_go","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L496-L522"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote_div_eq_of_divCoeffs\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote_div_eq_of_divCoeffs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.divCoeffs\">divCoeffs</a> <span class=\"fn\">k</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.div\">div</a> <span class=\"fn\">k</span> <span class=\"fn\">p</span>)</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.cmod\">cmod</a> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.getConst\">getConst</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote_div_eq_of_divCoeffs","kind":"theorem","line":485,"name":"Int.Linear.Poly.denote_div_eq_of_divCoeffs","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L485-L492"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote_div_eq_of_divAll\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote_div_eq_of_divAll</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.divAll\">divAll</a> <span class=\"fn\">k</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.div\">div</a> <span class=\"fn\">k</span> <span class=\"fn\">p</span>)</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote_div_eq_of_divAll","kind":"theorem","line":473,"name":"Int.Linear.Poly.denote_div_eq_of_divAll","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L473-L481"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.neg_fold\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">neg_fold</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/Int/Basic.html#Int.neg\">neg</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.neg_fold","kind":"theorem","line":467,"name":"Int.Linear.neg_fold","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L467-L467"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.sub_fold\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">sub_fold</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/Int/Basic.html#Int.sub\">sub</a></span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.sub_fold","kind":"theorem","line":466,"name":"Int.Linear.sub_fold","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L466-L466"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote_combine_mul_k\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote_combine_mul_k</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.combine_mul_k\">combine_mul_k</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote_combine_mul_k","kind":"theorem","line":428,"name":"Int.Linear.Poly.denote_combine_mul_k","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L428-L462"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote_combine\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote_combine</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.combine\">combine</a></span> <span class=\"fn\">p₂</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote_combine","kind":"theorem","line":425,"name":"Int.Linear.Poly.denote_combine","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L425-L426"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote_combine'\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote_combine'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fuel</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.combine'\">combine'</a> <span class=\"fn\">fuel</span> <span class=\"fn\">p₁</span> <span class=\"fn\">p₂</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote_combine'","kind":"theorem","line":421,"name":"Int.Linear.Poly.denote_combine'","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L421-L423"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote_append\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote_append</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.append\">append</a></span> <span class=\"fn\">p₂</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote_append","kind":"theorem","line":416,"name":"Int.Linear.Poly.denote_append","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L416-L417"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote_norm\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote_norm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.norm\">norm</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote_norm","kind":"theorem","line":411,"name":"Int.Linear.Poly.denote_norm","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L411-L412"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote_insert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote_insert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.insert\">insert</a> <span class=\"fn\">k</span> <span class=\"fn\">v</span> <span class=\"fn\">p</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var.denote\">Var.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">v</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote_insert","kind":"theorem","line":404,"name":"Int.Linear.Poly.denote_insert","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L404-L407"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote_addConst\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote_addConst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.addConst\">addConst</a></span> <span class=\"fn\">k</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote_addConst","kind":"theorem","line":399,"name":"Int.Linear.Poly.denote_addConst","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L399-L400"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote_mul\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.mul\">mul</a></span> <span class=\"fn\">k</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote_mul","kind":"theorem","line":388,"name":"Int.Linear.Poly.denote_mul","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L388-L394"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.combine_mul_k\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">combine_mul_k</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.combine_mul_k","kind":"def","line":382,"name":"Int.Linear.Poly.combine_mul_k","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L382-L386"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.combine_mul_k'\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">combine_mul_k'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fuel</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a> → <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a> → <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.combine_mul_k'","kind":"def","line":361,"name":"Int.Linear.Poly.combine_mul_k'","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L361-L380"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.mul_k_eq_mul\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">mul_k_eq_mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.mul_k\">mul_k</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.mul\">mul</a></span> <span class=\"fn\">k</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.mul_k_eq_mul","kind":"theorem","line":349,"name":"Int.Linear.Poly.mul_k_eq_mul","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L349-L359"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.mul_k\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">mul_k</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.mul_k","kind":"def","line":341,"name":"Int.Linear.Poly.mul_k","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L341-L347"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.mul\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.mul","kind":"def","line":334,"name":"Int.Linear.Poly.mul","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L334-L339"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.mul'\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">mul'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a></div></div>","info":{"doc":"`p.mul k` multiplies all coefficients and constant of the polynomial `p` by `k`.\n","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.mul'","kind":"def","line":325,"name":"Int.Linear.Poly.mul'","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L325-L332"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.divCoeffs\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">divCoeffs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Returns `true` if `k` divides all coefficients of the given linear polynomial.\n","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.divCoeffs","kind":"def","line":317,"name":"Int.Linear.Poly.divCoeffs","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L317-L323"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.divAll\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">divAll</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Returns `true` if `k` divides all coefficients and the constant of the given\nlinear polynomial.\n","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.divAll","kind":"def","line":308,"name":"Int.Linear.Poly.divAll","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L308-L315"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.div\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">div</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a> → <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a></span></div></div>","info":{"doc":"`p.div k` divides all coefficients of the polynomial `p` by `k`, but\nrounds up the constant using `cdiv`.\nNotes:\n- We only use this function with `k`s that divides all coefficients.\n- We use `cdiv` for the constant to implement the inequality tightening rule.\n","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.div","kind":"def","line":296,"name":"Int.Linear.Poly.div","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L296-L306"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.getConst\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">getConst</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>","info":{"doc":"Returns the constant of the given linear polynomial. ","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.getConst","kind":"def","line":290,"name":"Int.Linear.Poly.getConst","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L290-L294"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cdiv_eq_div_of_divides\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cdiv_eq_div_of_divides</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.cdiv\">cdiv</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cdiv_eq_div_of_divides","kind":"theorem","line":272,"name":"Int.Linear.cdiv_eq_div_of_divides","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L272-L288"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cmod_eq_zero_iff_emod_eq_zero\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cmod_eq_zero_iff_emod_eq_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.cmod\">cmod</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cmod_eq_zero_iff_emod_eq_zero","kind":"theorem","line":263,"name":"Int.Linear.cmod_eq_zero_iff_emod_eq_zero","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L263-L267"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cmod_nonpos\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cmod_nonpos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.cmod\">cmod</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cmod_nonpos","kind":"theorem","line":259,"name":"Int.Linear.cmod_nonpos","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L259-L261"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cmod_gt_of_pos\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cmod_gt_of_pos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.cmod\">cmod</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#GT.gt\">&gt;</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cmod_gt_of_pos","kind":"theorem","line":256,"name":"Int.Linear.cmod_gt_of_pos","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L256-L257"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cdiv_add_cmod\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cdiv_add_cmod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.cdiv\">cdiv</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.cmod\">cmod</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cdiv_add_cmod","kind":"theorem","line":248,"name":"Int.Linear.cdiv_add_cmod","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L248-L254"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cmod\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cmod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>","info":{"doc":"Returns the ceiling-compatible remainder of the division `a / b`.\nThis function ensures that the remainder is consistent with `cdiv`, meaning:\n```\na = b * cdiv a b + cmod a b\n```\nSee theorem `cdiv_add_cmod`. We also have\n```\n-b < cmod a b ≤ 0\n```\n","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cmod","kind":"def","line":233,"name":"Int.Linear.cmod","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L233-L246"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.cdiv\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">cdiv</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>","info":{"doc":"Returns the ceiling of the division `a / b`. That is, the result is equivalent to `⌈a / b⌉`.\nExamples:\n- `cdiv 7 3` returns `3`\n- `cdiv (-7) 3` returns `-2`.\n","docLink":"./Init/Data/Int/Linear.html#Int.Linear.cdiv","kind":"def","line":223,"name":"Int.Linear.cdiv","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L223-L231"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.norm\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Expr</span>.<span class=\"name\">norm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a></div></div>","info":{"doc":"Converts the given expression into a polynomial, and then normalizes it. ","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Expr.norm","kind":"def","line":218,"name":"Int.Linear.Expr.norm","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L218-L221"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.toPoly'.go\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Expr</span>.<span class=\"name\">toPoly'</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">coeff</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a> → <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Expr.toPoly'.go","kind":"def","line":209,"name":"Int.Linear.Expr.toPoly'.go","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L209-L216"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.toPoly'\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Expr</span>.<span class=\"name\">toPoly'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a></div></div>","info":{"doc":"Converts the given expression into a polynomial. ","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Expr.toPoly'","kind":"def","line":204,"name":"Int.Linear.Expr.toPoly'","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L204-L216"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.combine\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">combine</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.combine","kind":"def","line":200,"name":"Int.Linear.Poly.combine","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L200-L202"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.hugeFuel\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">hugeFuel</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.hugeFuel","kind":"def","line":198,"name":"Int.Linear.hugeFuel","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L198-L198"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.combine'\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">combine'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fuel</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.combine'","kind":"def","line":178,"name":"Int.Linear.Poly.combine'","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L178-L196"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.append\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">append</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.append","kind":"def","line":172,"name":"Int.Linear.Poly.append","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L172-L176"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.norm\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">norm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a></div></div>","info":{"doc":"Normalizes the given polynomial by fusing monomial and constants. ","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.norm","kind":"def","line":165,"name":"Int.Linear.Poly.norm","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L165-L170"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.insert\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">insert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.insert","kind":"def","line":150,"name":"Int.Linear.Poly.insert","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L150-L163"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.addConst_k_eq_addConst\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">addConst_k_eq_addConst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.addConst_k\">addConst_k</a></span> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.addConst\">addConst</a></span> <span class=\"fn\">k</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.addConst_k_eq_addConst","kind":"theorem","line":145,"name":"Int.Linear.Poly.addConst_k_eq_addConst","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L145-L148"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.addConst_k\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">addConst_k</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.addConst_k","kind":"def","line":142,"name":"Int.Linear.Poly.addConst_k","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L142-L143"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.addConst\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">addConst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.addConst","kind":"def","line":136,"name":"Int.Linear.Poly.addConst","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L136-L140"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'_add\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote'_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.add\">add</a> <span class=\"fn\">a</span> <span class=\"fn\">x</span> <span class=\"fn\">p</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var.denote\">Var.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'_add","kind":"theorem","line":133,"name":"Int.Linear.Poly.denote'_add","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L133-L134"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'_eq_denote\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote'_eq_denote</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\">denote'</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'_eq_denote","kind":"theorem","line":124,"name":"Int.Linear.Poly.denote'_eq_denote","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L124-L131"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'_go_eq_denote\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote'_go_eq_denote</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'.go\">denote'.go</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span> <span class=\"fn\">r</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">r</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'_go_eq_denote","kind":"theorem","line":106,"name":"Int.Linear.Poly.denote'_go_eq_denote","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L106-L122"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'.go\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote'</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'.go","kind":"def","line":94,"name":"Int.Linear.Poly.denote'.go","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L94-L104"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>","info":{"doc":"Similar to `Poly.denote`, but produces a denotation better for `simp +arith`.\nRemark: we used to convert `Poly` back into `Expr` to achieve that.\n","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote'","kind":"def","line":82,"name":"Int.Linear.Poly.denote'","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L82-L104"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denote</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.denote","kind":"def","line":76,"name":"Int.Linear.Poly.denote","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L76-L80"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.beq'_eq\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">beq'_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.beq'\">beq'</a></span> <span class=\"fn\">p₂</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">p₁</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">p₂</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.beq'_eq","kind":"theorem","line":69,"name":"Int.Linear.Poly.beq'_eq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L69-L74"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.beq'\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">beq'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.beq'","kind":"def","line":59,"name":"Int.Linear.Poly.beq'","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L59-L67"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.instBEqPoly.beq\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">instBEqPoly</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a> → <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.instBEqPoly.beq","kind":"def","line":57,"name":"Int.Linear.instBEqPoly.beq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L57-L57"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.instBEqPoly\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">instBEqPoly</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.instBEqPoly","kind":"instance","line":57,"name":"Int.Linear.instBEqPoly","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L57-L57"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.add\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.add","kind":"ctor","line":56,"name":"Int.Linear.Poly.add","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L56-L56"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly.num\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">num</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly.num","kind":"ctor","line":55,"name":"Int.Linear.Poly.num","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L55-L55"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Poly","kind":"inductive","line":54,"name":"Int.Linear.Poly","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L54-L57"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Expr</span>.<span class=\"name\">denote</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a> → <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Expr.denote","kind":"def","line":44,"name":"Int.Linear.Expr.denote","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L44-L52"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.instBEqExpr\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">instBEqExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.instBEqExpr","kind":"instance","line":42,"name":"Int.Linear.instBEqExpr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L42-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.instBEqExpr.beq\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">instBEqExpr</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a> → <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.instBEqExpr.beq","kind":"def","line":42,"name":"Int.Linear.instBEqExpr.beq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L42-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.instInhabitedExpr.default\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">instInhabitedExpr</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.instInhabitedExpr.default","kind":"def","line":42,"name":"Int.Linear.instInhabitedExpr.default","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L42-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.instInhabitedExpr\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">instInhabitedExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.instInhabitedExpr","kind":"instance","line":42,"name":"Int.Linear.instInhabitedExpr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L42-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.mulR\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Expr</span>.<span class=\"name\">mulR</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Expr.mulR","kind":"ctor","line":41,"name":"Int.Linear.Expr.mulR","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.mulL\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Expr</span>.<span class=\"name\">mulL</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Expr.mulL","kind":"ctor","line":40,"name":"Int.Linear.Expr.mulL","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L40-L40"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.neg\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Expr</span>.<span class=\"name\">neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Expr.neg","kind":"ctor","line":39,"name":"Int.Linear.Expr.neg","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L39-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.sub\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Expr</span>.<span class=\"name\">sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Expr.sub","kind":"ctor","line":38,"name":"Int.Linear.Expr.sub","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L38-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.add\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Expr</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Expr.add","kind":"ctor","line":37,"name":"Int.Linear.Expr.add","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L37-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.var\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Expr</span>.<span class=\"name\">var</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Expr.var","kind":"ctor","line":36,"name":"Int.Linear.Expr.var","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L36-L36"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr.num\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Expr</span>.<span class=\"name\">num</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Expr.num","kind":"ctor","line":35,"name":"Int.Linear.Expr.num","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L35-L35"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Expr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Expr","kind":"inductive","line":34,"name":"Int.Linear.Expr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L34-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Var.denote\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Var</span>.<span class=\"name\">denote</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\">Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\">Var</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Var.denote","kind":"def","line":30,"name":"Int.Linear.Var.denote","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L30-L32"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Context\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Context","kind":"def","line":28,"name":"Int.Linear.Context","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L28-L28"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Int/Linear.html#Int.Linear.Var\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Var</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Int/Linear.html#Int.Linear.Var","kind":"def","line":27,"name":"Int.Linear.Var","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Int/Linear.lean#L27-L27"}}],"imports":["Init.ByCases","Init.Data.Prod","Init.Data.Int.Lemmas","Init.Data.Int.LemmasAux","Init.Data.Int.DivMod.Bootstrap","Init.Data.Int.Cooper","Init.Data.Int.Gcd","Init.Data.Int.Gcd","Init.Data.RArray","Init.Data.AC","Init.Data.AC"],"instances":[{"className":"Inhabited","name":"Int.Linear.instInhabitedExpr","typeNames":["Int.Linear.Expr"]},{"className":"BEq","name":"Int.Linear.instBEqExpr","typeNames":["Int.Linear.Expr"]},{"className":"BEq","name":"Int.Linear.instBEqPoly","typeNames":["Int.Linear.Poly"]},{"className":"LawfulBEq","name":"Int.Linear.instLawfulBEqPoly","typeNames":["Int.Linear.Poly"]}],"name":"Init.Data.Int.Linear"}