{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Nat/Bitwise/Basic.html#Nat.testBit\"><span class=\"name\">Nat</span>.<span class=\"name\">testBit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Returns `true` if the `(n+1)`th least significant bit is `1`, or `false` if it is `0`.\n","docLink":"./Init/Data/Nat/Bitwise/Basic.html#Nat.testBit","kind":"def","line":137,"name":"Nat.testBit","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Nat/Bitwise/Basic.lean#L137-L142"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Nat/Bitwise/Basic.html#Nat.shiftRight_le\"><span class=\"name\">Nat</span>.<span class=\"name\">shiftRight_le</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">â‰¤</a> <span class=\"fn\">m</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Nat/Bitwise/Basic.html#Nat.shiftRight_le","kind":"theorem","line":127,"name":"Nat.shiftRight_le","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Nat/Bitwise/Basic.lean#L127-L129"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Nat/Bitwise/Basic.html#Nat.shiftRight_eq_zero\"><span class=\"name\">Nat</span>.<span class=\"name\">shiftRight_eq_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hn</span> : <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Nat/Bitwise/Basic.html#Nat.shiftRight_eq_zero","kind":"theorem","line":124,"name":"Nat.shiftRight_eq_zero","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Nat/Bitwise/Basic.lean#L124-L125"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Nat/Bitwise/Basic.html#Nat.shiftRight_eq_div_pow\"><span class=\"name\">Nat</span>.<span class=\"name\">shiftRight_eq_div_pow</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">n</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Nat/Bitwise/Basic.html#Nat.shiftRight_eq_div_pow","kind":"theorem","line":118,"name":"Nat.shiftRight_eq_div_pow","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Nat/Bitwise/Basic.lean#L118-L122"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Nat/Bitwise/Basic.html#Nat.shiftRight_add\"><span class=\"name\">Nat</span>.<span class=\"name\">shiftRight_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n </span><span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">k</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">k</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Nat/Bitwise/Basic.html#Nat.shiftRight_add","kind":"theorem","line":114,"name":"Nat.shiftRight_add","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Nat/Bitwise/Basic.lean#L114-L116"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Nat/Bitwise/Basic.html#Nat.shiftRight_succ\"><span class=\"name\">Nat</span>.<span class=\"name\">shiftRight_succ</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">2</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Nat/Bitwise/Basic.html#Nat.shiftRight_succ","kind":"theorem","line":112,"name":"Nat.shiftRight_succ","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Nat/Bitwise/Basic.lean#L112-L112"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Nat/Bitwise/Basic.html#Nat.shiftRight_zero\"><span class=\"name\">Nat</span>.<span class=\"name\">shiftRight_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Nat/Bitwise/Basic.html#Nat.shiftRight_zero","kind":"theorem","line":110,"name":"Nat.shiftRight_zero","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Nat/Bitwise/Basic.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Nat/Bitwise/Basic.html#Nat.shiftLeft_eq\"><span class=\"name\">Nat</span>.<span class=\"name\">shiftLeft_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Nat/Bitwise/Basic.html#Nat.shiftLeft_eq","kind":"theorem","line":104,"name":"Nat.shiftLeft_eq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Nat/Bitwise/Basic.lean#L104-L108"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Nat/Bitwise/Basic.html#Nat.instShiftRight\"><span class=\"name\">Nat</span>.<span class=\"name\">instShiftRight</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ShiftRight\">ShiftRight</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Nat/Bitwise/Basic.html#Nat.instShiftRight","kind":"instance","line":102,"name":"Nat.instShiftRight","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Nat/Bitwise/Basic.lean#L102-L102"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Nat/Bitwise/Basic.html#Nat.instShiftLeft\"><span class=\"name\">Nat</span>.<span class=\"name\">instShiftLeft</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#ShiftLeft\">ShiftLeft</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Nat/Bitwise/Basic.html#Nat.instShiftLeft","kind":"instance","line":101,"name":"Nat.instShiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Nat/Bitwise/Basic.lean#L101-L101"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Nat/Bitwise/Basic.html#Nat.instXorOp\"><span class=\"name\">Nat</span>.<span class=\"name\">instXorOp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#XorOp\">XorOp</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Nat/Bitwise/Basic.html#Nat.instXorOp","kind":"instance","line":100,"name":"Nat.instXorOp","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Nat/Bitwise/Basic.lean#L100-L100"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Nat/Bitwise/Basic.html#Nat.instOrOp\"><span class=\"name\">Nat</span>.<span class=\"name\">instOrOp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#OrOp\">OrOp</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Nat/Bitwise/Basic.html#Nat.instOrOp","kind":"instance","line":99,"name":"Nat.instOrOp","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Nat/Bitwise/Basic.lean#L99-L99"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Nat/Bitwise/Basic.html#Nat.instAndOp\"><span class=\"name\">Nat</span>.<span class=\"name\">instAndOp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#AndOp\">AndOp</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Nat/Bitwise/Basic.html#Nat.instAndOp","kind":"instance","line":98,"name":"Nat.instAndOp","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Nat/Bitwise/Basic.lean#L98-L98"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Nat/Bitwise/Basic.html#Nat.shiftRight\"><span class=\"name\">Nat</span>.<span class=\"name\">shiftRight</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> â†’ <a href=\"./Init/Prelude.html#Nat\">Nat</a> â†’ <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"Shifts the binary representation of a value right by the specified number of bits. Usually accessed\nvia the `>>>` operator.\n\nExamples:\n * `4 >>> 2 = 1`\n * `8 >>> 2 = 2`\n * `8 >>> 3 = 1`\n * `0 >>> 3 = 0`\n * `0xf13a >>> 8 = 0xf1`\n","docLink":"./Init/Data/Nat/Bitwise/Basic.html#Nat.shiftRight","kind":"def","line":82,"name":"Nat.shiftRight","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Nat/Bitwise/Basic.lean#L82-L96"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Nat/Bitwise/Basic.html#Nat.shiftLeft\"><span class=\"name\">Nat</span>.<span class=\"name\">shiftLeft</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> â†’ <a href=\"./Init/Prelude.html#Nat\">Nat</a> â†’ <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"Shifts the binary representation of a value left by the specified number of bits. Usually accessed\nvia the `<<<` operator.\n\nExamples:\n * `1 <<< 2 = 4`\n * `1 <<< 3 = 8`\n * `0 <<< 3 = 0`\n * `0xf1 <<< 4 = 0xf10`\n","docLink":"./Init/Data/Nat/Bitwise/Basic.html#Nat.shiftLeft","kind":"def","line":67,"name":"Nat.shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Nat/Bitwise/Basic.lean#L67-L80"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Nat/Bitwise/Basic.html#Nat.xor\"><span class=\"name\">Nat</span>.<span class=\"name\">xor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> â†’ <a href=\"./Init/Prelude.html#Nat\">Nat</a> â†’ <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"Bitwise exclusive or. Usually accessed via the `^^^` operator.\n\nEach bit of the resulting value is set if the corresponding bit is set in exactly one of the inputs.\n","docLink":"./Init/Data/Nat/Bitwise/Basic.html#Nat.xor","kind":"def","line":59,"name":"Nat.xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Nat/Bitwise/Basic.lean#L59-L65"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Nat/Bitwise/Basic.html#Nat.lor\"><span class=\"name\">Nat</span>.<span class=\"name\">lor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> â†’ <a href=\"./Init/Prelude.html#Nat\">Nat</a> â†’ <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"Bitwise or. Usually accessed via the `|||` operator.\n\nEach bit of the resulting value is set if the corresponding bit is set in at least one of the inputs.\n","docLink":"./Init/Data/Nat/Bitwise/Basic.html#Nat.lor","kind":"def","line":51,"name":"Nat.lor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Nat/Bitwise/Basic.lean#L51-L57"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Nat/Bitwise/Basic.html#Nat.land\"><span class=\"name\">Nat</span>.<span class=\"name\">land</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> â†’ <a href=\"./Init/Prelude.html#Nat\">Nat</a> â†’ <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"Bitwise and. Usually accessed via the `&&&` operator.\n\nEach bit of the resulting value is set if the corresponding bit is set in both of the inputs.\n","docLink":"./Init/Data/Nat/Bitwise/Basic.html#Nat.land","kind":"def","line":43,"name":"Nat.land","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Nat/Bitwise/Basic.lean#L43-L49"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Nat/Bitwise/Basic.html#Nat.bitwise\"><span class=\"name\">Nat</span>.<span class=\"name\">bitwise</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> â†’ <a href=\"./Init/Prelude.html#Bool\">Bool</a> â†’ <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"A helper for implementing bitwise operators on `Nat`.\n\nEach bit of the resulting `Nat` is the result of applying `f` to the corresponding bits of the input\n`Nat`s, up to the position of the highest set bit in either input.\n","docLink":"./Init/Data/Nat/Bitwise/Basic.html#Nat.bitwise","kind":"def","line":20,"name":"Nat.bitwise","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Nat/Bitwise/Basic.lean#L20-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Nat/Bitwise/Basic.html#Nat.bitwise_rec_lemma\"><span class=\"name\">Nat</span>.<span class=\"name\">bitwise_rec_lemma</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hNe</span> : <span class=\"fn\">n</span> <a href=\"./Init/Core.html#Ne\">â‰ </a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">n</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Nat/Bitwise/Basic.html#Nat.bitwise_rec_lemma","kind":"theorem","line":17,"name":"Nat.bitwise_rec_lemma","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Nat/Bitwise/Basic.lean#L17-L18"}}],"imports":["Init.Data.Nat.Basic","Init.Data.Nat.Div.Basic","Init.Coe"],"instances":[{"className":"AndOp","name":"Nat.instAndOp","typeNames":["Nat"]},{"className":"OrOp","name":"Nat.instOrOp","typeNames":["Nat"]},{"className":"XorOp","name":"Nat.instXorOp","typeNames":["Nat"]},{"className":"ShiftLeft","name":"Nat.instShiftLeft","typeNames":["Nat"]},{"className":"ShiftRight","name":"Nat.instShiftRight","typeNames":["Nat"]}],"name":"Init.Data.Nat.Bitwise.Basic"}