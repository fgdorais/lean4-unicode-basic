{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.instLawfulVecOperatorBinaryRefVecBlastAdd\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">bitblast</span>.<span class=\"name\">instLawfulVecOperatorBinaryRefVecBlastAdd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sat/AIG/LawfulVecOperator.html#Std.Sat.AIG.LawfulVecOperator\">Sat.AIG.LawfulVecOperator</a> <span class=\"fn\">α</span> <a href=\"./Std/Sat/AIG/RefVec.html#Std.Sat.AIG.BinaryRefVec\">Sat.AIG.BinaryRefVec</a> <span class=\"fn\">fun {<span class=\"fn\">len</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>} =&gt; <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastAdd\">blastAdd</a></span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.instLawfulVecOperatorBinaryRefVecBlastAdd","kind":"instance","line":253,"name":"Std.Tactic.BVDecide.BVExpr.bitblast.instLawfulVecOperatorBinaryRefVecBlastAdd","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.lean#L253-L261"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastAdd.instLawfulVecOperatorBinaryRefVecBlast\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">bitblast</span>.<span class=\"name\">blastAdd</span>.<span class=\"name\">instLawfulVecOperatorBinaryRefVecBlast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sat/AIG/LawfulVecOperator.html#Std.Sat.AIG.LawfulVecOperator\">Sat.AIG.LawfulVecOperator</a> <span class=\"fn\">α</span> <a href=\"./Std/Sat/AIG/RefVec.html#Std.Sat.AIG.BinaryRefVec\">Sat.AIG.BinaryRefVec</a> <span class=\"fn\">fun {<span class=\"fn\">len</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>} =&gt; <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastAdd.blast\">blast</a></span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastAdd.instLawfulVecOperatorBinaryRefVecBlast","kind":"instance","line":239,"name":"Std.Tactic.BVDecide.BVExpr.bitblast.blastAdd.instLawfulVecOperatorBinaryRefVecBlast","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.lean#L239-L249"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastAdd.go_decl_eq\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">bitblast</span>.<span class=\"name\">blastAdd</span>.<span class=\"name\">go_decl_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Sat.AIG</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">curr</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hcurr</span> : <span class=\"fn\">curr</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">w</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cin</span> : <span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Ref\">Ref</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.RefVec\">RefVec</a></span> <span class=\"fn\">curr</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.RefVec\">RefVec</a></span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h1</span> : <span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h2</span> : <span class=\"fn\">idx</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastAdd.go\">go</a> <span class=\"fn\">aig</span> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">curr</span> <span class=\"fn\">hcurr</span> <span class=\"fn\">cin</span> <span class=\"fn\">s</span>)</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.RefVecEntry.aig\">aig</a></span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastAdd.go\">go</a> <span class=\"fn\">aig</span> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">curr</span> <span class=\"fn\">hcurr</span> <span class=\"fn\">cin</span> <span class=\"fn\">s</span>)</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.RefVecEntry.aig\">aig</a></span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">idx</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">idx</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastAdd.go_decl_eq","kind":"theorem","line":215,"name":"Std.Tactic.BVDecide.BVExpr.bitblast.blastAdd.go_decl_eq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.lean#L215-L237"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastAdd.go_le_size\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">bitblast</span>.<span class=\"name\">blastAdd</span>.<span class=\"name\">go_le_size</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Sat.AIG</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">curr</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hcurr</span> : <span class=\"fn\">curr</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">w</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cin</span> : <span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Ref\">Ref</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.RefVec\">RefVec</a></span> <span class=\"fn\">curr</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.RefVec\">RefVec</a></span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastAdd.go\">go</a> <span class=\"fn\">aig</span> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span> <span class=\"fn\">curr</span> <span class=\"fn\">hcurr</span> <span class=\"fn\">cin</span> <span class=\"fn\">s</span>)</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.RefVecEntry.aig\">aig</a></span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastAdd.go_le_size","kind":"theorem","line":201,"name":"Std.Tactic.BVDecide.BVExpr.bitblast.blastAdd.go_le_size","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.lean#L201-L213"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastAdd.go\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">bitblast</span>.<span class=\"name\">blastAdd</span>.<span class=\"name\">go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Sat.AIG</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.RefVec\">RefVec</a></span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">curr</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hcurr</span> : <span class=\"fn\">curr</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">w</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cin</span> : <span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Ref\">Ref</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.RefVec\">RefVec</a></span> <span class=\"fn\">curr</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.RefVecEntry\">Sat.AIG.RefVecEntry</a> <span class=\"fn\">α</span> <span class=\"fn\">w</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastAdd.go","kind":"def","line":179,"name":"Std.Tactic.BVDecide.BVExpr.bitblast.blastAdd.go","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.lean#L179-L196"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastAdd.blast\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">bitblast</span>.<span class=\"name\">blastAdd</span>.<span class=\"name\">blast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Sat.AIG</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/RefVec.html#Std.Sat.AIG.BinaryRefVec\">BinaryRefVec</a></span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.RefVecEntry\">Sat.AIG.RefVecEntry</a> <span class=\"fn\">α</span> <span class=\"fn\">w</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastAdd.blast","kind":"def","line":174,"name":"Std.Tactic.BVDecide.BVExpr.bitblast.blastAdd.blast","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.lean#L174-L177"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastAdd\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">bitblast</span>.<span class=\"name\">blastAdd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Sat.AIG</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/RefVec.html#Std.Sat.AIG.BinaryRefVec\">BinaryRefVec</a></span> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.RefVecEntry\">Sat.AIG.RefVecEntry</a> <span class=\"fn\">α</span> <span class=\"fn\">w</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.blastAdd","kind":"def","line":167,"name":"Std.Tactic.BVDecide.BVExpr.bitblast.blastAdd","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.lean#L167-L197"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.mkFullAdder\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">bitblast</span>.<span class=\"name\">mkFullAdder</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Sat.AIG</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderInput\">FullAdderInput</a> <span class=\"fn\">aig</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderOutput\">FullAdderOutput</a> <span class=\"fn\">aig</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.mkFullAdder","kind":"def","line":150,"name":"Std.Tactic.BVDecide.BVExpr.bitblast.mkFullAdder","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.lean#L150-L165"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderOutput.hle\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">bitblast</span>.<span class=\"name\">FullAdderOutput</span>.<span class=\"name\">hle</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">old</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Sat.AIG</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderOutput\">FullAdderOutput</a> <span class=\"fn\">old</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">old</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderOutput.aig\">aig</a></span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderOutput.hle","kind":"theorem","line":148,"name":"Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderOutput.hle","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.lean#L148-L148"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderOutput.cout\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">bitblast</span>.<span class=\"name\">FullAdderOutput</span>.<span class=\"name\">cout</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">old</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Sat.AIG</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderOutput\">FullAdderOutput</a> <span class=\"fn\">old</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderOutput.aig\">aig</a></span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Ref\">Ref</a></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderOutput.cout","kind":"def","line":147,"name":"Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderOutput.cout","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.lean#L147-L147"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderOutput.out\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">bitblast</span>.<span class=\"name\">FullAdderOutput</span>.<span class=\"name\">out</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">old</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Sat.AIG</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderOutput\">FullAdderOutput</a> <span class=\"fn\">old</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderOutput.aig\">aig</a></span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Ref\">Ref</a></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderOutput.out","kind":"def","line":146,"name":"Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderOutput.out","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.lean#L146-L146"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderOutput.aig\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">bitblast</span>.<span class=\"name\">FullAdderOutput</span>.<span class=\"name\">aig</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">old</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Sat.AIG</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderOutput\">FullAdderOutput</a> <span class=\"fn\">old</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Sat.AIG</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderOutput.aig","kind":"def","line":145,"name":"Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderOutput.aig","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.lean#L145-L145"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderOutput.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">bitblast</span>.<span class=\"name\">FullAdderOutput</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">old</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Sat.AIG</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Sat.AIG</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">out </span><span class=\"fn\">cout</span> : <span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Ref\">Ref</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hle</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">old</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderOutput\">FullAdderOutput</a> <span class=\"fn\">old</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderOutput.mk","kind":"ctor","line":144,"name":"Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderOutput.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.lean#L144-L144"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderOutput\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">bitblast</span>.<span class=\"name\">FullAdderOutput</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">old</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Sat.AIG</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderOutput","kind":"structure","line":144,"name":"Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderOutput","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.lean#L144-L148"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.instLawfulOperatorFullAdderInputMkFullAdderCarry\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">bitblast</span>.<span class=\"name\">instLawfulOperatorFullAdderInputMkFullAdderCarry</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sat/AIG/LawfulOperator.html#Std.Sat.AIG.LawfulOperator\">Sat.AIG.LawfulOperator</a> <span class=\"fn\">α</span> <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderInput\">FullAdderInput</a> <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.mkFullAdderCarry\">mkFullAdderCarry</a></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.instLawfulOperatorFullAdderInputMkFullAdderCarry","kind":"instance","line":116,"name":"Std.Tactic.BVDecide.BVExpr.bitblast.instLawfulOperatorFullAdderInputMkFullAdderCarry","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.lean#L116-L142"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.mkFullAdderCarry\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">bitblast</span>.<span class=\"name\">mkFullAdderCarry</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Sat.AIG</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderInput\">FullAdderInput</a> <span class=\"fn\">aig</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Entrypoint\">Sat.AIG.Entrypoint</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.mkFullAdderCarry","kind":"def","line":90,"name":"Std.Tactic.BVDecide.BVExpr.bitblast.mkFullAdderCarry","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.lean#L90-L114"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.instLawfulOperatorFullAdderInputMkFullAdderOut\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">bitblast</span>.<span class=\"name\">instLawfulOperatorFullAdderInputMkFullAdderOut</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sat/AIG/LawfulOperator.html#Std.Sat.AIG.LawfulOperator\">Sat.AIG.LawfulOperator</a> <span class=\"fn\">α</span> <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderInput\">FullAdderInput</a> <a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.mkFullAdderOut\">mkFullAdderOut</a></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.instLawfulOperatorFullAdderInputMkFullAdderOut","kind":"instance","line":74,"name":"Std.Tactic.BVDecide.BVExpr.bitblast.instLawfulOperatorFullAdderInputMkFullAdderOut","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.lean#L74-L88"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.mkFullAdderOut\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">bitblast</span>.<span class=\"name\">mkFullAdderOut</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Sat.AIG</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderInput\">FullAdderInput</a> <span class=\"fn\">aig</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Entrypoint\">Sat.AIG.Entrypoint</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.mkFullAdderOut","kind":"def","line":62,"name":"Std.Tactic.BVDecide.BVExpr.bitblast.mkFullAdderOut","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.lean#L62-L72"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderInput.cin_cast\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">bitblast</span>.<span class=\"name\">FullAdderInput</span>.<span class=\"name\">cin_cast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aig1 </span><span class=\"fn\">aig2</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Sat.AIG</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderInput\">FullAdderInput</a> <span class=\"fn\">aig1</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hcast</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig1</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig2</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderInput.cast\">cast</a></span> <span class=\"fn\">hcast</span>)</span>.<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderInput.cin\">cin</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderInput.cin\">cin</a></span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Ref.cast\">cast</a></span> <span class=\"fn\">hcast</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderInput.cin_cast","kind":"theorem","line":53,"name":"Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderInput.cin_cast","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.lean#L53-L57"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderInput.rhs_cast\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">bitblast</span>.<span class=\"name\">FullAdderInput</span>.<span class=\"name\">rhs_cast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aig1 </span><span class=\"fn\">aig2</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Sat.AIG</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderInput\">FullAdderInput</a> <span class=\"fn\">aig1</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hcast</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig1</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig2</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderInput.cast\">cast</a></span> <span class=\"fn\">hcast</span>)</span>.<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderInput.rhs\">rhs</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderInput.rhs\">rhs</a></span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Ref.cast\">cast</a></span> <span class=\"fn\">hcast</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderInput.rhs_cast","kind":"theorem","line":47,"name":"Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderInput.rhs_cast","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.lean#L47-L51"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderInput.lhs_cast\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">bitblast</span>.<span class=\"name\">FullAdderInput</span>.<span class=\"name\">lhs_cast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aig1 </span><span class=\"fn\">aig2</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Sat.AIG</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderInput\">FullAdderInput</a> <span class=\"fn\">aig1</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hcast</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig1</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig2</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderInput.cast\">cast</a></span> <span class=\"fn\">hcast</span>)</span>.<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderInput.lhs\">lhs</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderInput.lhs\">lhs</a></span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Ref.cast\">cast</a></span> <span class=\"fn\">hcast</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderInput.lhs_cast","kind":"theorem","line":41,"name":"Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderInput.lhs_cast","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.lean#L41-L45"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderInput.cast\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">bitblast</span>.<span class=\"name\">FullAdderInput</span>.<span class=\"name\">cast</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aig1 </span><span class=\"fn\">aig2</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Sat.AIG</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderInput\">FullAdderInput</a> <span class=\"fn\">aig1</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig1</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">aig2</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.decls\">decls</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderInput\">FullAdderInput</a> <span class=\"fn\">aig2</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderInput.cast","kind":"def","line":36,"name":"Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderInput.cast","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.lean#L36-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderInput.cin\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">bitblast</span>.<span class=\"name\">FullAdderInput</span>.<span class=\"name\">cin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Sat.AIG</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderInput\">FullAdderInput</a> <span class=\"fn\">aig</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Ref\">Ref</a></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderInput.cin","kind":"def","line":32,"name":"Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderInput.cin","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.lean#L32-L32"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderInput.rhs\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">bitblast</span>.<span class=\"name\">FullAdderInput</span>.<span class=\"name\">rhs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Sat.AIG</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderInput\">FullAdderInput</a> <span class=\"fn\">aig</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Ref\">Ref</a></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderInput.rhs","kind":"def","line":31,"name":"Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderInput.rhs","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.lean#L31-L31"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderInput.lhs\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">bitblast</span>.<span class=\"name\">FullAdderInput</span>.<span class=\"name\">lhs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Sat.AIG</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderInput\">FullAdderInput</a> <span class=\"fn\">aig</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Ref\">Ref</a></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderInput.lhs","kind":"def","line":30,"name":"Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderInput.lhs","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.lean#L30-L30"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderInput.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">bitblast</span>.<span class=\"name\">FullAdderInput</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Sat.AIG</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs </span><span class=\"fn\">cin</span> : <span class=\"fn\"><span class=\"fn\">aig</span>.<a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG.Ref\">Ref</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderInput\">FullAdderInput</a> <span class=\"fn\">aig</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderInput.mk","kind":"ctor","line":29,"name":"Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderInput.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.lean#L29-L29"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderInput\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">BVExpr</span>.<span class=\"name\">bitblast</span>.<span class=\"name\">FullAdderInput</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">aig</span> : <span class=\"fn\"><a href=\"./Std/Sat/AIG/Basic.html#Std.Sat.AIG\">Sat.AIG</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.html#Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderInput","kind":"structure","line":29,"name":"Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderInput","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Bitblast/BVExpr/Circuit/Impl/Operations/Add.lean#L29-L32"}}],"imports":["Std.Tactic.BVDecide.Bitblast.BVExpr.Basic","Std.Sat.AIG.CachedGatesLemmas","Std.Sat.AIG.LawfulVecOperator"],"instances":[{"className":"Std.Sat.AIG.LawfulOperator","name":"Std.Tactic.BVDecide.BVExpr.bitblast.instLawfulOperatorFullAdderInputMkFullAdderOut","typeNames":["Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderInput","Std.Tactic.BVDecide.BVExpr.bitblast.mkFullAdderOut"]},{"className":"Std.Sat.AIG.LawfulOperator","name":"Std.Tactic.BVDecide.BVExpr.bitblast.instLawfulOperatorFullAdderInputMkFullAdderCarry","typeNames":["Std.Tactic.BVDecide.BVExpr.bitblast.FullAdderInput","Std.Tactic.BVDecide.BVExpr.bitblast.mkFullAdderCarry"]},{"className":"Std.Sat.AIG.LawfulVecOperator","name":"Std.Tactic.BVDecide.BVExpr.bitblast.blastAdd.instLawfulVecOperatorBinaryRefVecBlast","typeNames":["Std.Sat.AIG.BinaryRefVec"]},{"className":"Std.Sat.AIG.LawfulVecOperator","name":"Std.Tactic.BVDecide.BVExpr.bitblast.instLawfulVecOperatorBinaryRefVecBlastAdd","typeNames":["Std.Sat.AIG.BinaryRefVec"]}],"name":"Std.Tactic.BVDecide.Bitblast.BVExpr.Circuit.Impl.Operations.Add"}