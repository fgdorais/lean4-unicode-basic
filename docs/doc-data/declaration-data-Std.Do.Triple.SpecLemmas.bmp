{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.foldlM_array\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">foldlM_array</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inv</span> : <span class=\"fn\"><a href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Invariant\">Invariant</a> <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Prelude.html#Array.toList\">toList</a></span> <span class=\"fn\">β</span> <span class=\"fn\">ps</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">step</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">pref</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>) (<span class=\"fn\">cur</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">suff</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>) (<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Prelude.html#Array.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">pref</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cur</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">suff</span>) (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>),\n    <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">{</a> <span class=\"fn\">«prefix»</span> := <span class=\"fn\">pref</span>, <span class=\"fn\">suffix</span> := <span class=\"fn\">cur</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">suff</span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a>       <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">b</span> <span class=\"fn\">cur</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">b'</span> : <span class=\"fn\">β</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">{</a> <span class=\"fn\">«prefix»</span> := <span class=\"fn\">pref</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">cur</span><a href=\"./Init/Prelude.html#List.cons\">]</a>, <span class=\"fn\">suffix</span> := <span class=\"fn\">suff</span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b'</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">{</a> <span class=\"fn\">«prefix»</span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>, <span class=\"fn\">suffix</span> := <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Prelude.html#Array.toList\">toList</a></span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">init</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a>   <span class=\"fn\"><a href=\"./Init/Data/Array/Basic.html#Array.foldlM\">Array.foldlM</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">xs</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">{</a> <span class=\"fn\">«prefix»</span> := <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Prelude.html#Array.toList\">toList</a></span>, <span class=\"fn\">suffix</span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.foldlM_array","kind":"theorem","line":596,"name":"Std.Do.Spec.foldlM_array","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L596-L609"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.forIn_array\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">forIn_array</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">β</span>)</span></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inv</span> : <span class=\"fn\"><a href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Invariant\">Invariant</a> <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Prelude.html#Array.toList\">toList</a></span> <span class=\"fn\">β</span> <span class=\"fn\">ps</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">step</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">pref</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>) (<span class=\"fn\">cur</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">suff</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>) (<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Prelude.html#Array.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">pref</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cur</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">suff</span>) (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>),\n    <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">{</a> <span class=\"fn\">«prefix»</span> := <span class=\"fn\">pref</span>, <span class=\"fn\">suffix</span> := <span class=\"fn\">cur</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">suff</span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a>       <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">cur</span> <span class=\"fn\">b</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">β</span></span>) =&gt;\n        <span class=\"fn\">match <span class=\"fn\">r</span> with\n        | <span class=\"fn\"><a href=\"./Init/Core.html#ForInStep.yield\">ForInStep.yield</a> <span class=\"fn\">b'</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">{</a> <span class=\"fn\">«prefix»</span> := <span class=\"fn\">pref</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">cur</span><a href=\"./Init/Prelude.html#List.cons\">]</a>, <span class=\"fn\">suffix</span> := <span class=\"fn\">suff</span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b'</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span>\n        | <span class=\"fn\"><a href=\"./Init/Core.html#ForInStep.done\">ForInStep.done</a> <span class=\"fn\">b'</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">{</a> <span class=\"fn\">«prefix»</span> := <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Prelude.html#Array.toList\">toList</a></span>, <span class=\"fn\">suffix</span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b'</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a>         <span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">{</a> <span class=\"fn\">«prefix»</span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>, <span class=\"fn\">suffix</span> := <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Prelude.html#Array.toList\">toList</a></span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">init</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a>   <span class=\"fn\"><a href=\"./Init/Core.html#ForIn.forIn\">forIn</a> <span class=\"fn\">xs</span> <span class=\"fn\">init</span> <span class=\"fn\">f</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">{</a> <span class=\"fn\">«prefix»</span> := <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Prelude.html#Array.toList\">toList</a></span>, <span class=\"fn\">suffix</span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.forIn_array","kind":"theorem","line":579,"name":"Std.Do.Spec.forIn_array","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L579-L594"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.forIn'_array\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">forIn'_array</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">xs</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">β</span>)</span></span></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inv</span> : <span class=\"fn\"><a href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Invariant\">Invariant</a> <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Prelude.html#Array.toList\">toList</a></span> <span class=\"fn\">β</span> <span class=\"fn\">ps</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">step</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">pref</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>) (<span class=\"fn\">cur</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">suff</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>) (<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Prelude.html#Array.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">pref</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cur</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">suff</span>) (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>),\n    <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">{</a> <span class=\"fn\">«prefix»</span> := <span class=\"fn\">pref</span>, <span class=\"fn\">suffix</span> := <span class=\"fn\">cur</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">suff</span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a>       <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">cur</span> <span class=\"fn\">⋯</span> <span class=\"fn\">b</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">β</span></span>) =&gt;\n        <span class=\"fn\">match <span class=\"fn\">r</span> with\n        | <span class=\"fn\"><a href=\"./Init/Core.html#ForInStep.yield\">ForInStep.yield</a> <span class=\"fn\">b'</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">{</a> <span class=\"fn\">«prefix»</span> := <span class=\"fn\">pref</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">cur</span><a href=\"./Init/Prelude.html#List.cons\">]</a>, <span class=\"fn\">suffix</span> := <span class=\"fn\">suff</span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b'</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span>\n        | <span class=\"fn\"><a href=\"./Init/Core.html#ForInStep.done\">ForInStep.done</a> <span class=\"fn\">b'</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">{</a> <span class=\"fn\">«prefix»</span> := <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Prelude.html#Array.toList\">toList</a></span>, <span class=\"fn\">suffix</span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b'</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a>         <span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">{</a> <span class=\"fn\">«prefix»</span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>, <span class=\"fn\">suffix</span> := <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Prelude.html#Array.toList\">toList</a></span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">init</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a>   <span class=\"fn\"><a href=\"./Init/Core.html#ForIn'.forIn'\">forIn'</a> <span class=\"fn\">xs</span> <span class=\"fn\">init</span> <span class=\"fn\">f</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">{</a> <span class=\"fn\">«prefix»</span> := <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Prelude.html#Array.toList\">toList</a></span>, <span class=\"fn\">suffix</span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.forIn'_array","kind":"theorem","line":562,"name":"Std.Do.Spec.forIn'_array","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L562-L577"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.forIn_prange\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">forIn_prange</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">su </span><span class=\"fn\">sl</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">PRange.BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">PRange.UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">PRange.SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound\">PRange.SupportsLowerBound</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.HasFiniteRanges\">PRange.HasFiniteRanges</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundedUpwardEnumerable\">PRange.BoundedUpwardEnumerable</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerable\">PRange.LawfulUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableLowerBound\">PRange.LawfulUpwardEnumerableLowerBound</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableUpperBound\">PRange.LawfulUpwardEnumerableUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange\">PRange</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">{</a> <span class=\"fn\">lower</span> := <span class=\"fn\">sl</span>, <span class=\"fn\">upper</span> := <span class=\"fn\">su</span> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">}</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">β</span>)</span></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inv</span> : <span class=\"fn\"><a href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Invariant\">Invariant</a> <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Data/Range/Polymorphic/Iterators.html#Std.PRange.toList\">toList</a></span> <span class=\"fn\">β</span> <span class=\"fn\">ps</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">step</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">pref</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>) (<span class=\"fn\">cur</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">suff</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>) (<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Data/Range/Polymorphic/Iterators.html#Std.PRange.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">pref</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cur</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">suff</span>) (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>),\n    <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">{</a> <span class=\"fn\">«prefix»</span> := <span class=\"fn\">pref</span>, <span class=\"fn\">suffix</span> := <span class=\"fn\">cur</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">suff</span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a>       <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">cur</span> <span class=\"fn\">b</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">β</span></span>) =&gt;\n        <span class=\"fn\">match <span class=\"fn\">r</span> with\n        | <span class=\"fn\"><a href=\"./Init/Core.html#ForInStep.yield\">ForInStep.yield</a> <span class=\"fn\">b'</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">{</a> <span class=\"fn\">«prefix»</span> := <span class=\"fn\">pref</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">cur</span><a href=\"./Init/Prelude.html#List.cons\">]</a>, <span class=\"fn\">suffix</span> := <span class=\"fn\">suff</span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b'</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span>\n        | <span class=\"fn\"><a href=\"./Init/Core.html#ForInStep.done\">ForInStep.done</a> <span class=\"fn\">b'</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">{</a> <span class=\"fn\">«prefix»</span> := <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Data/Range/Polymorphic/Iterators.html#Std.PRange.toList\">toList</a></span>, <span class=\"fn\">suffix</span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b'</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a>         <span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">{</a> <span class=\"fn\">«prefix»</span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>, <span class=\"fn\">suffix</span> := <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Data/Range/Polymorphic/Iterators.html#Std.PRange.toList\">toList</a></span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">init</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a>   <span class=\"fn\"><a href=\"./Init/Core.html#ForIn.forIn\">forIn</a> <span class=\"fn\">xs</span> <span class=\"fn\">init</span> <span class=\"fn\">f</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">{</a> <span class=\"fn\">«prefix»</span> := <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Data/Range/Polymorphic/Iterators.html#Std.PRange.toList\">toList</a></span>, <span class=\"fn\">suffix</span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.forIn_prange","kind":"theorem","line":542,"name":"Std.Do.Spec.forIn_prange","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L542-L560"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.forIn'_prange\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">forIn'_prange</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">su </span><span class=\"fn\">sl</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">PRange.BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">PRange.UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">PRange.SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound\">PRange.SupportsLowerBound</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.HasFiniteRanges\">PRange.HasFiniteRanges</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundedUpwardEnumerable\">PRange.BoundedUpwardEnumerable</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerable\">PRange.LawfulUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableLowerBound\">PRange.LawfulUpwardEnumerableLowerBound</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableUpperBound\">PRange.LawfulUpwardEnumerableUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange\">PRange</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">{</a> <span class=\"fn\">lower</span> := <span class=\"fn\">sl</span>, <span class=\"fn\">upper</span> := <span class=\"fn\">su</span> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">}</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">xs</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">β</span>)</span></span></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inv</span> : <span class=\"fn\"><a href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Invariant\">Invariant</a> <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Data/Range/Polymorphic/Iterators.html#Std.PRange.toList\">toList</a></span> <span class=\"fn\">β</span> <span class=\"fn\">ps</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">step</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">pref</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>) (<span class=\"fn\">cur</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">suff</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>) (<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Data/Range/Polymorphic/Iterators.html#Std.PRange.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">pref</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cur</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">suff</span>) (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>),\n    <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">{</a> <span class=\"fn\">«prefix»</span> := <span class=\"fn\">pref</span>, <span class=\"fn\">suffix</span> := <span class=\"fn\">cur</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">suff</span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a>       <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">cur</span> <span class=\"fn\">⋯</span> <span class=\"fn\">b</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">β</span></span>) =&gt;\n        <span class=\"fn\">match <span class=\"fn\">r</span> with\n        | <span class=\"fn\"><a href=\"./Init/Core.html#ForInStep.yield\">ForInStep.yield</a> <span class=\"fn\">b'</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">{</a> <span class=\"fn\">«prefix»</span> := <span class=\"fn\">pref</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">cur</span><a href=\"./Init/Prelude.html#List.cons\">]</a>, <span class=\"fn\">suffix</span> := <span class=\"fn\">suff</span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b'</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span>\n        | <span class=\"fn\"><a href=\"./Init/Core.html#ForInStep.done\">ForInStep.done</a> <span class=\"fn\">b'</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">{</a> <span class=\"fn\">«prefix»</span> := <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Data/Range/Polymorphic/Iterators.html#Std.PRange.toList\">toList</a></span>, <span class=\"fn\">suffix</span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b'</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a>         <span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">{</a> <span class=\"fn\">«prefix»</span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>, <span class=\"fn\">suffix</span> := <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Data/Range/Polymorphic/Iterators.html#Std.PRange.toList\">toList</a></span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">init</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a>   <span class=\"fn\"><a href=\"./Init/Core.html#ForIn'.forIn'\">forIn'</a> <span class=\"fn\">xs</span> <span class=\"fn\">init</span> <span class=\"fn\">f</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">{</a> <span class=\"fn\">«prefix»</span> := <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Data/Range/Polymorphic/Iterators.html#Std.PRange.toList\">toList</a></span>, <span class=\"fn\">suffix</span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.forIn'_prange","kind":"theorem","line":521,"name":"Std.Do.Spec.forIn'_prange","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L521-L539"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.forIn_range\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">forIn_range</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <a href=\"./Init/Data/Range/Basic.html#Std.Range\">Range</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">β</span>)</span></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inv</span> : <span class=\"fn\"><a href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Invariant\">Invariant</a> <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Std/Do/Triple/SpecLemmas.html#Std.Range.toList\">toList</a></span> <span class=\"fn\">β</span> <span class=\"fn\">ps</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">step</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">pref</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>) (<span class=\"fn\">cur</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) (<span class=\"fn\">suff</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>) (<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Std/Do/Triple/SpecLemmas.html#Std.Range.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">pref</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cur</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">suff</span>) (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>),\n    <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">{</a> <span class=\"fn\">«prefix»</span> := <span class=\"fn\">pref</span>, <span class=\"fn\">suffix</span> := <span class=\"fn\">cur</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">suff</span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a>       <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">cur</span> <span class=\"fn\">b</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">β</span></span>) =&gt;\n        <span class=\"fn\">match <span class=\"fn\">r</span> with\n        | <span class=\"fn\"><a href=\"./Init/Core.html#ForInStep.yield\">ForInStep.yield</a> <span class=\"fn\">b'</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">{</a> <span class=\"fn\">«prefix»</span> := <span class=\"fn\">pref</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">cur</span><a href=\"./Init/Prelude.html#List.cons\">]</a>, <span class=\"fn\">suffix</span> := <span class=\"fn\">suff</span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b'</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span>\n        | <span class=\"fn\"><a href=\"./Init/Core.html#ForInStep.done\">ForInStep.done</a> <span class=\"fn\">b'</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">{</a> <span class=\"fn\">«prefix»</span> := <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Std/Do/Triple/SpecLemmas.html#Std.Range.toList\">toList</a></span>, <span class=\"fn\">suffix</span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b'</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a>         <span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">{</a> <span class=\"fn\">«prefix»</span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>, <span class=\"fn\">suffix</span> := <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Std/Do/Triple/SpecLemmas.html#Std.Range.toList\">toList</a></span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">init</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a>   <span class=\"fn\"><a href=\"./Init/Core.html#ForIn.forIn\">forIn</a> <span class=\"fn\">xs</span> <span class=\"fn\">init</span> <span class=\"fn\">f</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">{</a> <span class=\"fn\">«prefix»</span> := <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Std/Do/Triple/SpecLemmas.html#Std.Range.toList\">toList</a></span>, <span class=\"fn\">suffix</span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.forIn_range","kind":"theorem","line":504,"name":"Std.Do.Spec.forIn_range","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L504-L518"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.forIn'_range\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">forIn'_range</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <a href=\"./Init/Data/Range/Basic.html#Std.Range\">Range</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">xs</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">β</span>)</span></span></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inv</span> : <span class=\"fn\"><a href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Invariant\">Invariant</a> <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Std/Do/Triple/SpecLemmas.html#Std.Range.toList\">toList</a></span> <span class=\"fn\">β</span> <span class=\"fn\">ps</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">step</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">pref</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>) (<span class=\"fn\">cur</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) (<span class=\"fn\">suff</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>) (<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Std/Do/Triple/SpecLemmas.html#Std.Range.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">pref</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cur</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">suff</span>) (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>),\n    <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">{</a> <span class=\"fn\">«prefix»</span> := <span class=\"fn\">pref</span>, <span class=\"fn\">suffix</span> := <span class=\"fn\">cur</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">suff</span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a>       <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">cur</span> <span class=\"fn\">⋯</span> <span class=\"fn\">b</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">β</span></span>) =&gt;\n        <span class=\"fn\">match <span class=\"fn\">r</span> with\n        | <span class=\"fn\"><a href=\"./Init/Core.html#ForInStep.yield\">ForInStep.yield</a> <span class=\"fn\">b'</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">{</a> <span class=\"fn\">«prefix»</span> := <span class=\"fn\">pref</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">cur</span><a href=\"./Init/Prelude.html#List.cons\">]</a>, <span class=\"fn\">suffix</span> := <span class=\"fn\">suff</span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b'</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span>\n        | <span class=\"fn\"><a href=\"./Init/Core.html#ForInStep.done\">ForInStep.done</a> <span class=\"fn\">b'</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">{</a> <span class=\"fn\">«prefix»</span> := <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Std/Do/Triple/SpecLemmas.html#Std.Range.toList\">toList</a></span>, <span class=\"fn\">suffix</span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b'</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a>         <span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">{</a> <span class=\"fn\">«prefix»</span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>, <span class=\"fn\">suffix</span> := <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Std/Do/Triple/SpecLemmas.html#Std.Range.toList\">toList</a></span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">init</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a>   <span class=\"fn\"><a href=\"./Init/Core.html#ForIn'.forIn'\">forIn'</a> <span class=\"fn\">xs</span> <span class=\"fn\">init</span> <span class=\"fn\">f</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">{</a> <span class=\"fn\">«prefix»</span> := <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Std/Do/Triple/SpecLemmas.html#Std.Range.toList\">toList</a></span>, <span class=\"fn\">suffix</span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.forIn'_range","kind":"theorem","line":488,"name":"Std.Do.Spec.forIn'_range","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L488-L502"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.foldlM_list_const_inv\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">foldlM_list_const_inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inv</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">β</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">step</span> : <span class=\"fn\">∀ (<span class=\"fn\">hd</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>), <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">b</span></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">b</span> <span class=\"fn\">hd</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">b'</span> : <span class=\"fn\">β</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">b'</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">init</span></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\"><a href=\"./Init/Data/List/Control.html#List.foldlM\">List.foldlM</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">xs</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">inv</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.foldlM_list_const_inv","kind":"theorem","line":476,"name":"Std.Do.Spec.foldlM_list_const_inv","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L476-L486"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.foldlM_list\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">foldlM_list</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inv</span> : <span class=\"fn\"><a href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Invariant\">Invariant</a> <span class=\"fn\">xs</span> <span class=\"fn\">β</span> <span class=\"fn\">ps</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">step</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">pref</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>) (<span class=\"fn\">cur</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">suff</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>) (<span class=\"fn\">h</span> : <span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">pref</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cur</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">suff</span>) (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>),\n    <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">{</a> <span class=\"fn\">«prefix»</span> := <span class=\"fn\">pref</span>, <span class=\"fn\">suffix</span> := <span class=\"fn\">cur</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">suff</span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a>       <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">b</span> <span class=\"fn\">cur</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">b'</span> : <span class=\"fn\">β</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">{</a> <span class=\"fn\">«prefix»</span> := <span class=\"fn\">pref</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">cur</span><a href=\"./Init/Prelude.html#List.cons\">]</a>, <span class=\"fn\">suffix</span> := <span class=\"fn\">suff</span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b'</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">{</a> <span class=\"fn\">«prefix»</span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>, <span class=\"fn\">suffix</span> := <span class=\"fn\">xs</span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">init</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a>   <span class=\"fn\"><a href=\"./Init/Data/List/Control.html#List.foldlM\">List.foldlM</a> <span class=\"fn\">f</span> <span class=\"fn\">init</span> <span class=\"fn\">xs</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">{</a> <span class=\"fn\">«prefix»</span> := <span class=\"fn\">xs</span>, <span class=\"fn\">suffix</span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.foldlM_list","kind":"theorem","line":457,"name":"Std.Do.Spec.foldlM_list","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L457-L473"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.forIn_list_const_inv\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">forIn_list_const_inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">β</span>)</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inv</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">β</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">step</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">hd</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>),\n    <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">b</span></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a>       <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">hd</span> <span class=\"fn\">b</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">β</span></span>) =&gt;\n        <span class=\"fn\">match <span class=\"fn\">r</span> with\n        | <span class=\"fn\"><a href=\"./Init/Core.html#ForInStep.yield\">ForInStep.yield</a> <span class=\"fn\">b'</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">b'</span></span>\n        | <span class=\"fn\"><a href=\"./Init/Core.html#ForInStep.done\">ForInStep.done</a> <span class=\"fn\">b'</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">b'</span></span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a>         <span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">init</span></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\"><a href=\"./Init/Core.html#ForIn.forIn\">forIn</a> <span class=\"fn\">xs</span> <span class=\"fn\">init</span> <span class=\"fn\">f</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">inv</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.forIn_list_const_inv","kind":"theorem","line":445,"name":"Std.Do.Spec.forIn_list_const_inv","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L445-L455"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.forIn_list\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">forIn_list</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">β</span>)</span></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inv</span> : <span class=\"fn\"><a href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Invariant\">Invariant</a> <span class=\"fn\">xs</span> <span class=\"fn\">β</span> <span class=\"fn\">ps</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">step</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">pref</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>) (<span class=\"fn\">cur</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">suff</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>) (<span class=\"fn\">h</span> : <span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">pref</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cur</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">suff</span>) (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>),\n    <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">{</a> <span class=\"fn\">«prefix»</span> := <span class=\"fn\">pref</span>, <span class=\"fn\">suffix</span> := <span class=\"fn\">cur</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">suff</span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a>       <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">cur</span> <span class=\"fn\">b</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">β</span></span>) =&gt;\n        <span class=\"fn\">match <span class=\"fn\">r</span> with\n        | <span class=\"fn\"><a href=\"./Init/Core.html#ForInStep.yield\">ForInStep.yield</a> <span class=\"fn\">b'</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">{</a> <span class=\"fn\">«prefix»</span> := <span class=\"fn\">pref</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">cur</span><a href=\"./Init/Prelude.html#List.cons\">]</a>, <span class=\"fn\">suffix</span> := <span class=\"fn\">suff</span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b'</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span>\n        | <span class=\"fn\"><a href=\"./Init/Core.html#ForInStep.done\">ForInStep.done</a> <span class=\"fn\">b'</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">{</a> <span class=\"fn\">«prefix»</span> := <span class=\"fn\">xs</span>, <span class=\"fn\">suffix</span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b'</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a>         <span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">{</a> <span class=\"fn\">«prefix»</span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>, <span class=\"fn\">suffix</span> := <span class=\"fn\">xs</span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">init</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a>   <span class=\"fn\"><a href=\"./Init/Core.html#ForIn.forIn\">forIn</a> <span class=\"fn\">xs</span> <span class=\"fn\">init</span> <span class=\"fn\">f</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">{</a> <span class=\"fn\">«prefix»</span> := <span class=\"fn\">xs</span>, <span class=\"fn\">suffix</span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.forIn_list","kind":"theorem","line":428,"name":"Std.Do.Spec.forIn_list","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L428-L442"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.forIn'_list_const_inv\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">forIn'_list_const_inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">xs</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">β</span>)</span></span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inv</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">β</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">step</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">hx</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">xs</span>) (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>),\n    <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">b</span></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a>       <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span> <span class=\"fn\">hx</span> <span class=\"fn\">b</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">β</span></span>) =&gt;\n        <span class=\"fn\">match <span class=\"fn\">r</span> with\n        | <span class=\"fn\"><a href=\"./Init/Core.html#ForInStep.yield\">ForInStep.yield</a> <span class=\"fn\">b'</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">b'</span></span>\n        | <span class=\"fn\"><a href=\"./Init/Core.html#ForInStep.done\">ForInStep.done</a> <span class=\"fn\">b'</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">b'</span></span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a>         <span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">init</span></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\"><a href=\"./Init/Core.html#ForIn'.forIn'\">forIn'</a> <span class=\"fn\">xs</span> <span class=\"fn\">init</span> <span class=\"fn\">f</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">inv</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.forIn'_list_const_inv","kind":"theorem","line":416,"name":"Std.Do.Spec.forIn'_list_const_inv","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L416-L426"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.forIn'_list\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">forIn'_list</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">β</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">xs</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">β</span>)</span></span></span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inv</span> : <span class=\"fn\"><a href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Invariant\">Invariant</a> <span class=\"fn\">xs</span> <span class=\"fn\">β</span> <span class=\"fn\">ps</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">step</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">pref</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>) (<span class=\"fn\">cur</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">suff</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>) (<span class=\"fn\">h</span> : <span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">pref</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cur</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">suff</span>) (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>),\n    <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">{</a> <span class=\"fn\">«prefix»</span> := <span class=\"fn\">pref</span>, <span class=\"fn\">suffix</span> := <span class=\"fn\">cur</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">suff</span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a>       <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">cur</span> <span class=\"fn\">⋯</span> <span class=\"fn\">b</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">β</span></span>) =&gt;\n        <span class=\"fn\">match <span class=\"fn\">r</span> with\n        | <span class=\"fn\"><a href=\"./Init/Core.html#ForInStep.yield\">ForInStep.yield</a> <span class=\"fn\">b'</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">{</a> <span class=\"fn\">«prefix»</span> := <span class=\"fn\">pref</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <a href=\"./Init/Prelude.html#List.cons\">[</a><span class=\"fn\">cur</span><a href=\"./Init/Prelude.html#List.cons\">]</a>, <span class=\"fn\">suffix</span> := <span class=\"fn\">suff</span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b'</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span>\n        | <span class=\"fn\"><a href=\"./Init/Core.html#ForInStep.done\">ForInStep.done</a> <span class=\"fn\">b'</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">{</a> <span class=\"fn\">«prefix»</span> := <span class=\"fn\">xs</span>, <span class=\"fn\">suffix</span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b'</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a>         <span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">{</a> <span class=\"fn\">«prefix»</span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>, <span class=\"fn\">suffix</span> := <span class=\"fn\">xs</span>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">init</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a>   <span class=\"fn\"><a href=\"./Init/Core.html#ForIn'.forIn'\">forIn'</a> <span class=\"fn\">xs</span> <span class=\"fn\">init</span> <span class=\"fn\">f</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">b</span> : <span class=\"fn\">β</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">{</a> <span class=\"fn\">«prefix»</span> := <span class=\"fn\">xs</span>, <span class=\"fn\">suffix</span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>, <span class=\"fn\">property</span> := <span class=\"fn\">⋯</span> <a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\">}</a><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">b</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">inv</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.forIn'_list","kind":"theorem","line":379,"name":"Std.Do.Spec.forIn'_list","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L379-L413"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Invariant.withEarlyReturn\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Invariant</span>.<span class=\"name\">withEarlyReturn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β </span><span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">onContinue</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor\">Cursor</a></span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.Assertion\">Assertion</a> <span class=\"fn\">ps</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">onReturn</span> : <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.Assertion\">Assertion</a> <span class=\"fn\">ps</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">onExcept</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds\">ExceptConds</a> <span class=\"fn\">ps</span></span> := <a href=\"./Std/Do/PostCond.html#Std.Do.ExceptConds.false\">ExceptConds.false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Invariant\">Invariant</a> <span class=\"fn\">xs</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#MProd\">MProd</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">γ</span>)</span> <span class=\"fn\">β</span>)</span> <span class=\"fn\">ps</span></span></div></div>","info":{"doc":"Helper definition for specifying loop invariants for loops with early return.\n\n`for ... in ...` loops with early return of type `γ` elaborate to a call like this:\n```lean\nforIn (β := MProd (Option γ) ...) (b := ⟨none, ...⟩) collection loopBody\n```\nNote that the first component of the `MProd` state tuple is the optional early return value.\nIt is `none` as long as there was no early return and `some r` if the loop returned early with `r`.\n\nThis function allows to specify different invariants for the loop body depending on whether the loop\nterminated early or not. When there was an early return, the loop has effectively finished, which is\nencoded by the additional `⌜xs.suffix = []⌝` assertion in the invariant. This assertion is vital for\nsuccessfully proving the induction step, as it contradicts with the assumption that\n`xs.suffix = x::rest` of the inductive hypothesis at the start of the loop body, meaning that users\nwon't need to prove anything about the bogus case where the loop has returned early yet takes\nanother iteration of the loop body.\n","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Invariant.withEarlyReturn","kind":"def","line":351,"name":"Std.Do.Invariant.withEarlyReturn","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L351-L377"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Invariant\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Invariant</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>","info":{"doc":"The type of loop invariants used by the specifications of `for ... in ...` loops.\nA loop invariant is a `PostCond` that takes as parameters\n\n* A `List.Cursor xs` representing the iteration state of the loop. It is parameterized by the list\n  of elements `xs` that the `for` loop iterates over.\n* A state tuple of type `β`, which will be a nesting of `MProd`s representing the elaboration of\n  `let mut` variables and early return.\n\nThe loop specification lemmas will use this in the following way:\nBefore entering the loop, the zipper's prefix is empty and the suffix is `xs`.\nAfter leaving the loop, the zipper's suffix is empty and the prefix is `xs`.\nDuring the induction step, the invariant holds for a suffix with head element `x`.\nAfter running the loop body, the invariant then holds after shifting `x` to the prefix.\n","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Invariant","kind":"def","line":333,"name":"Std.Do.Invariant","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L333-L349"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.tryCatch_ExceptT_lift\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">tryCatch_ExceptT_lift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">α </span><span class=\"fn\">ε'</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Control/Except.html#ExceptT\">ExceptT</a> <span class=\"fn\">ε'</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">ε</span> → <span class=\"fn\"><a href=\"./Init/Control/Except.html#ExceptT\">ExceptT</a> <span class=\"fn\">ε'</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf\">MonadExceptOf</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε'</span> <span class=\"fn\">ps</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.tryCatch\">MonadExceptOf.tryCatch</a> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a>\n    <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <span class=\"fn\">ε'</span> <span class=\"fn\">α</span></span>) =&gt;\n      <span class=\"fn\">match <span class=\"fn\">x</span> with\n      | <span class=\"fn\"><a href=\"./Init/Prelude.html#Except.ok\">Except.ok</a> <span class=\"fn\">a</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">a</span></span>\n      | <span class=\"fn\"><a href=\"./Init/Prelude.html#Except.error\">Except.error</a> <span class=\"fn\">e</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">e</span></span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a>       <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a>   <span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.tryCatch\">MonadExceptOf.tryCatch</a> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.tryCatch_ExceptT_lift","kind":"theorem","line":318,"name":"Std.Do.Spec.tryCatch_ExceptT_lift","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L318-L329"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.tryCatch_StateT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">tryCatch_StateT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">ε</span> → <span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf\">MonadExceptOf</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">σ</span> <span class=\"fn\">ps</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">fun</a> (<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>) <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">=&gt;</a>\n  <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.tryCatch\">MonadExceptOf.tryCatch</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Control/State.html#StateT.run\">run</a></span> <span class=\"fn\">s</span>)</span> <span class=\"fn\">fun (<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">h</span> <span class=\"fn\">e</span>)</span>.<a href=\"./Init/Control/State.html#StateT.run\">run</a></span> <span class=\"fn\">s</span></span></span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">xs</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">σ</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a>   <span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.tryCatch\">MonadExceptOf.tryCatch</a> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.tryCatch_StateT","kind":"theorem","line":314,"name":"Std.Do.Spec.tryCatch_StateT","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L314-L316"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.tryCatch_ReaderT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">tryCatch_ReaderT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#ReaderT\">ReaderT</a> <span class=\"fn\">ρ</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">ε</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#ReaderT\">ReaderT</a> <span class=\"fn\">ρ</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf\">MonadExceptOf</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">ρ</span> <span class=\"fn\">ps</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">fun</a> (<span class=\"fn\">r</span> : <span class=\"fn\">ρ</span>) <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">=&gt;</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.tryCatch\">MonadExceptOf.tryCatch</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#ReaderT.run\">run</a></span> <span class=\"fn\">r</span>)</span> <span class=\"fn\">fun (<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">h</span> <span class=\"fn\">e</span>)</span>.<a href=\"./Init/Prelude.html#ReaderT.run\">run</a></span> <span class=\"fn\">r</span></span></span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">a</span> <span class=\"fn\">r</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a>   <span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.tryCatch\">MonadExceptOf.tryCatch</a> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.tryCatch_ReaderT","kind":"theorem","line":310,"name":"Std.Do.Spec.tryCatch_ReaderT","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L310-L312"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.throw_ExceptT_lift\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">throw_ExceptT_lift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">α </span><span class=\"fn\">ε'</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf\">MonadExceptOf</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε'</span> <span class=\"fn\">ps</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.throw\">MonadExceptOf.throw</a> <span class=\"fn\">e</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a>\n    <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <span class=\"fn\">ε'</span> <span class=\"fn\">α</span></span>) =&gt;\n      <span class=\"fn\">match <span class=\"fn\">x</span> with\n      | <span class=\"fn\"><a href=\"./Init/Prelude.html#Except.ok\">Except.ok</a> <span class=\"fn\">a</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">a</span></span>\n      | <span class=\"fn\"><a href=\"./Init/Prelude.html#Except.error\">Except.error</a> <span class=\"fn\">e</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">e</span></span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a>       <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a>   <span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.throw\">MonadExceptOf.throw</a> <span class=\"fn\">e</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.throw_ExceptT_lift","kind":"theorem","line":298,"name":"Std.Do.Spec.throw_ExceptT_lift","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L298-L308"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.throw_StateT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">throw_StateT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf\">MonadExceptOf</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">σ</span> <span class=\"fn\">ps</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift.monadLift\">MonadLift.monadLift</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#MonadExceptOf.throw\">MonadExceptOf.throw</a> <span class=\"fn\">e</span>)</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.throw\">MonadExceptOf.throw</a> <span class=\"fn\">e</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.throw_StateT","kind":"theorem","line":294,"name":"Std.Do.Spec.throw_StateT","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L294-L296"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.throw_ReaderT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">throw_ReaderT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sh</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">ρ</span> <span class=\"fn\">sh</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">sh</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf\">MonadExceptOf</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift.monadLift\">MonadLift.monadLift</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#MonadExceptOf.throw\">MonadExceptOf.throw</a> <span class=\"fn\">e</span>)</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.throw\">MonadExceptOf.throw</a> <span class=\"fn\">e</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.throw_ReaderT","kind":"theorem","line":290,"name":"Std.Do.Spec.throw_ReaderT","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L290-L292"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.tryCatch_MonadExcept\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">tryCatch_MonadExcept</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">ε</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf\">MonadExceptOf</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.tryCatch\">MonadExceptOf.tryCatch</a> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExcept.tryCatch\">tryCatch</a> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.tryCatch_MonadExcept","kind":"theorem","line":286,"name":"Std.Do.Spec.tryCatch_MonadExcept","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L286-L288"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.throw_MonadExcept\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">throw_MonadExcept</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps✝</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf\">MonadExceptOf</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.throw\">MonadExceptOf.throw</a> <span class=\"fn\">e</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExcept.throw\">throw</a> <span class=\"fn\">e</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.throw_MonadExcept","kind":"theorem","line":282,"name":"Std.Do.Spec.throw_MonadExcept","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L282-L284"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.tryCatch_EStateM\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">tryCatch_EStateM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">ε </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">ε</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">σ</span> <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.pure\">PostShape.pure</a>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">fun</a> (<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>) <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">=&gt;</a>\n  <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">x</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a>\n    <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">fun (<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>) (<span class=\"fn\">s'</span> : <span class=\"fn\">σ</span>) =&gt; <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><span class=\"fn\">h</span> <span class=\"fn\">e</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#EStateM.Backtrackable.restore\">EStateM.Backtrackable.restore</a> <span class=\"fn\">s'</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#EStateM.Backtrackable.save\">EStateM.Backtrackable.save</a> <span class=\"fn\">s</span>)</span>)</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a>       <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a>\n    <span class=\"fn\">s</span></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a>   <span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.tryCatch\">MonadExceptOf.tryCatch</a> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.tryCatch_EStateM","kind":"theorem","line":262,"name":"Std.Do.Spec.tryCatch_EStateM","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L262-L265"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.throw_EStateM\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">throw_EStateM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">σ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">σ</span> <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.pure\">PostShape.pure</a>)</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">e</span></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.throw\">MonadExceptOf.throw</a> <span class=\"fn\">e</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.throw_EStateM","kind":"theorem","line":257,"name":"Std.Do.Spec.throw_EStateM","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L257-L259"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.modifyGet_EStateM\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">modifyGet_EStateM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">σ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">σ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">σ</span> <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.pure\">PostShape.pure</a>)</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">fun</a> (<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>) <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">=&gt;</a>\n  <span class=\"fn\">have <span class=\"fn\">t</span> := <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">s</span></span>;\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span></span></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a>   <span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf.modifyGet\">MonadStateOf.modifyGet</a> <span class=\"fn\">f</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.modifyGet_EStateM","kind":"theorem","line":253,"name":"Std.Do.Spec.modifyGet_EStateM","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L253-L255"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.set_EStateM\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">set_EStateM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">σ</span> <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.pure\">PostShape.pure</a>)</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">fun</a> (<span class=\"fn\">x</span> : <span class=\"fn\">σ</span>) <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">=&gt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Unit.unit\">(</a><a href=\"./Init/Prelude.html#Unit.unit\">)</a> <span class=\"fn\">s</span></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf.set\">set</a> <span class=\"fn\">s</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.set_EStateM","kind":"theorem","line":249,"name":"Std.Do.Spec.set_EStateM","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L249-L251"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.get_EStateM\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">get_EStateM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">σ</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">σ</span> <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.pure\">PostShape.pure</a>)</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">fun</a> (<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>) <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">=&gt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">s</span> <span class=\"fn\">s</span></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <a href=\"./Init/Prelude.html#MonadStateOf.get\">MonadStateOf.get</a> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.get_EStateM","kind":"theorem","line":245,"name":"Std.Do.Spec.get_EStateM","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L245-L247"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.tryCatch_Except\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">tryCatch_Except</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">ε</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε</span> <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.pure\">PostShape.pure</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">x</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">fun (<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>) =&gt; <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><span class=\"fn\">h</span> <span class=\"fn\">e</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.tryCatch\">MonadExceptOf.tryCatch</a> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.tryCatch_Except","kind":"theorem","line":238,"name":"Std.Do.Spec.tryCatch_Except","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L238-L241"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.throw_Except\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">throw_Except</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε</span> <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.pure\">PostShape.pure</a>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">e</span></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.throw\">MonadExceptOf.throw</a> <span class=\"fn\">e</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.throw_Except","kind":"theorem","line":234,"name":"Std.Do.Spec.throw_Except","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L234-L236"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.tryCatch_ExceptT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">tryCatch_ExceptT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Control/Except.html#ExceptT\">ExceptT</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">ε</span> → <span class=\"fn\"><a href=\"./Init/Control/Except.html#ExceptT\">ExceptT</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε</span> <span class=\"fn\">ps</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">x</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">fun (<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>) =&gt; <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><span class=\"fn\">h</span> <span class=\"fn\">e</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.tryCatch\">MonadExceptOf.tryCatch</a> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.tryCatch_ExceptT","kind":"theorem","line":227,"name":"Std.Do.Spec.tryCatch_ExceptT","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L227-L230"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.throw_ExceptT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">throw_ExceptT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε</span> <span class=\"fn\">ps</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">e</span></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.throw\">MonadExceptOf.throw</a> <span class=\"fn\">e</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.throw_ExceptT","kind":"theorem","line":222,"name":"Std.Do.Spec.throw_ExceptT","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L222-L225"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.run_ExceptT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">run_ExceptT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Except\">Except</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span>)</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Control/Except.html#ExceptT\">ExceptT</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">x</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Except.ok\">Except.ok</a> <span class=\"fn\">a</span>)</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">fun (<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Except.error\">Except.error</a> <span class=\"fn\">e</span>)</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Control/Except.html#ExceptT.run\">run</a></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.run_ExceptT","kind":"theorem","line":215,"name":"Std.Do.Spec.run_ExceptT","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L215-L220"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.modifyGet_StateT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">modifyGet_StateT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">σ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">σ</span> <span class=\"fn\">ps</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">fun</a> (<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>) <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">=&gt;</a>\n  <span class=\"fn\">have <span class=\"fn\">t</span> := <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">s</span></span>;\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\"><span class=\"fn\">t</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span></span></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a>   <span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf.modifyGet\">MonadStateOf.modifyGet</a> <span class=\"fn\">f</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.modifyGet_StateT","kind":"theorem","line":208,"name":"Std.Do.Spec.modifyGet_StateT","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L208-L211"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.set_StateT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">set_StateT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">psm</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">σ</span> <span class=\"fn\">psm</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">psm</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">fun</a> (<span class=\"fn\">x</span> : <span class=\"fn\">σ</span>) <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">=&gt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#PUnit.unit\">PUnit.unit</a> <span class=\"fn\">s</span></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf.set\">set</a> <span class=\"fn\">s</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.set_StateT","kind":"theorem","line":204,"name":"Std.Do.Spec.set_StateT","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L204-L206"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.get_StateT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">get_StateT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">psm</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">σ</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">σ</span> <span class=\"fn\">psm</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">psm</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">fun</a> (<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>) <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">=&gt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">s</span> <span class=\"fn\">s</span></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <a href=\"./Init/Prelude.html#MonadStateOf.get\">MonadStateOf.get</a> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.get_StateT","kind":"theorem","line":200,"name":"Std.Do.Spec.get_StateT","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L200-L202"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.withReader_ReaderT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">withReader_ReaderT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">psm</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">ρ</span> → <span class=\"fn\">ρ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#ReaderT\">ReaderT</a> <span class=\"fn\">ρ</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">ρ</span> <span class=\"fn\">psm</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">psm</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">fun</a> (<span class=\"fn\">r</span> : <span class=\"fn\">ρ</span>) <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">=&gt;</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">x</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">x</span> : <span class=\"fn\">ρ</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">a</span> <span class=\"fn\">r</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">r</span>)</span></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#MonadWithReaderOf.withReader\">MonadWithReaderOf.withReader</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.withReader_ReaderT","kind":"theorem","line":192,"name":"Std.Do.Spec.withReader_ReaderT","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L192-L194"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.read_ReaderT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">read_ReaderT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">psm</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">ρ</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">ρ</span> <span class=\"fn\">psm</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">psm</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">fun</a> (<span class=\"fn\">r</span> : <span class=\"fn\">ρ</span>) <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">=&gt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">r</span> <span class=\"fn\">r</span></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <a href=\"./Init/Prelude.html#MonadReaderOf.read\">MonadReaderOf.read</a> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.read_ReaderT","kind":"theorem","line":188,"name":"Std.Do.Spec.read_ReaderT","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L188-L190"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.monadMap_refl\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">monadMap_refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#MonadFunctorT.monadMap\">monadMap</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.monadMap_refl","kind":"theorem","line":180,"name":"Std.Do.Spec.monadMap_refl","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L180-L182"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.monadMap_trans\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">monadMap_trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">o</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">o</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadFunctor\">MonadFunctor</a> <span class=\"fn\">n</span> <span class=\"fn\">o</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadFunctorT\">MonadFunctorT</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadFunctor.monadMap\">MonadFunctor.monadMap</a> <span class=\"fn\">(fun {<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#MonadFunctorT.monadMap\">monadMap</a> <span class=\"fn\">fun {<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} =&gt; <span class=\"fn\">f</span></span></span>)</span> <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#MonadFunctorT.monadMap\">monadMap</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.monadMap_trans","kind":"theorem","line":173,"name":"Std.Do.Spec.monadMap_trans","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L173-L178"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.monadMap_ExceptT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">monadMap_ExceptT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Control/Except.html#ExceptT\">ExceptT</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε</span> <span class=\"fn\">ps</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Control/Except.html#ExceptT.run\">run</a></span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a>\n    <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span></span>) =&gt;\n      <span class=\"fn\">match <span class=\"fn\">x</span> with\n      | <span class=\"fn\"><a href=\"./Init/Prelude.html#Except.ok\">Except.ok</a> <span class=\"fn\">a</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">a</span></span>\n      | <span class=\"fn\"><a href=\"./Init/Prelude.html#Except.error\">Except.error</a> <span class=\"fn\">e</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">e</span></span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a>       <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a>   <span class=\"fn\"><a href=\"./Init/Prelude.html#MonadFunctor.monadMap\">MonadFunctor.monadMap</a> <span class=\"fn\">(fun {<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} =&gt; <span class=\"fn\">f</span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.monadMap_ExceptT","kind":"theorem","line":163,"name":"Std.Do.Spec.monadMap_ExceptT","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L163-L169"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.monadMap_ReaderT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">monadMap_ReaderT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#ReaderT\">ReaderT</a> <span class=\"fn\">ρ</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">ρ</span> <span class=\"fn\">ps</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">fun</a> (<span class=\"fn\">s</span> : <span class=\"fn\">ρ</span>) <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">=&gt;</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#ReaderT.run\">run</a></span> <span class=\"fn\">s</span>)</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#MonadFunctor.monadMap\">MonadFunctor.monadMap</a> <span class=\"fn\">(fun {<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} =&gt; <span class=\"fn\">f</span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.monadMap_ReaderT","kind":"theorem","line":158,"name":"Std.Do.Spec.monadMap_ReaderT","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L158-L161"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.monadMap_StateT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">monadMap_StateT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">σ</span> <span class=\"fn\">ps</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">fun</a> (<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>) <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">=&gt;</a>\n  <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Control/State.html#StateT.run\">run</a></span> <span class=\"fn\">s</span>)</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a>\n    <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">σ</span>) =&gt;\n      <span class=\"fn\">match <span class=\"fn\">x</span> with\n      | <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">s</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a>       <span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a>   <span class=\"fn\"><a href=\"./Init/Prelude.html#MonadFunctor.monadMap\">MonadFunctor.monadMap</a> <span class=\"fn\">(fun {<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} =&gt; <span class=\"fn\">f</span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.monadMap_StateT","kind":"theorem","line":153,"name":"Std.Do.Spec.monadMap_StateT","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L153-L156"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.monadLift_ExceptT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">monadLift_ExceptT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε</span> <span class=\"fn\">ps</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">x</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">a</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift.monadLift\">MonadLift.monadLift</a> <span class=\"fn\">x</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.monadLift_ExceptT","kind":"theorem","line":140,"name":"Std.Do.Spec.monadLift_ExceptT","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L140-L145"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.monadLift_ReaderT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">monadLift_ReaderT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">ρ</span> <span class=\"fn\">ps</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">fun</a> (<span class=\"fn\">s</span> : <span class=\"fn\">ρ</span>) <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">=&gt;</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">x</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift.monadLift\">MonadLift.monadLift</a> <span class=\"fn\">x</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.monadLift_ReaderT","kind":"theorem","line":136,"name":"Std.Do.Spec.monadLift_ReaderT","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L136-L138"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.monadLift_StateT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">monadLift_StateT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">σ</span> <span class=\"fn\">ps</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">fun</a> (<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>) <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">=&gt;</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">x</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift.monadLift\">MonadLift.monadLift</a> <span class=\"fn\">x</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.monadLift_StateT","kind":"theorem","line":132,"name":"Std.Do.Spec.monadLift_StateT","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L132-L134"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.seq\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">seq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\">α</span> → <span class=\"fn\">β</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">β</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">x</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>) =&gt; <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">y</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">a</span>)</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\">(<span class=\"fn\">x</span> &lt;*&gt; <span class=\"fn\">y</span>)</span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.seq","kind":"theorem","line":126,"name":"Std.Do.Spec.seq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L126-L128"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.map\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">β</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">x</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">a</span>)</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> (<span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">x</span>) <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.map","kind":"theorem","line":122,"name":"Std.Do.Spec.map","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L122-L124"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.bind\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">β</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">x</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f</span>) <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.bind","kind":"theorem","line":118,"name":"Std.Do.Spec.bind","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L118-L120"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.bind'\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">bind'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.Assertion\">Assertion</a> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">β</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">P</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\">x</span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">P</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f</span>) <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.bind'","kind":"theorem","line":114,"name":"Std.Do.Spec.bind'","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L114-L116"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.pure\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">pure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">a</span></span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">Pure.pure</a> <span class=\"fn\">a</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.pure","kind":"theorem","line":110,"name":"Std.Do.Spec.pure","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L110-L112"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.pure'\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">Spec</span>.<span class=\"name\">pure'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.Assertion\">Assertion</a> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">P</span> <a href=\"./Std/Do/SPred/SPred.html#Std.Do.SPred.entails\">⊢ₛ</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">P</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">Pure.pure</a> <span class=\"fn\">a</span></span> <a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦃</a><span class=\"fn\">Q</span><a href=\"./Std/Do/Triple/Basic.html#Std.Do.Triple\">⦄</a></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Do.Spec.pure'","kind":"theorem","line":106,"name":"Std.Do.Spec.pure'","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L106-L108"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#List.lt_of_range'_eq_append_cons\"><span class=\"name\">List</span>.<span class=\"name\">lt_of_range'_eq_append_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s </span><span class=\"fn\">n </span><span class=\"fn\">step</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">j</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.range'\">range'</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span> <span class=\"fn\">step</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">ys</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hstep</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">step</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hj</span> : <span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">ys</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">j</span></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#List.lt_of_range'_eq_append_cons","kind":"theorem","line":89,"name":"List.lt_of_range'_eq_append_cons","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L89-L95"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#List.gt_of_range'_eq_append_cons\"><span class=\"name\">List</span>.<span class=\"name\">gt_of_range'_eq_append_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s </span><span class=\"fn\">n </span><span class=\"fn\">step</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">j</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.range'\">range'</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span> <span class=\"fn\">step</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">ys</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hstep</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">step</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hj</span> : <span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">xs</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">i</span></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#List.gt_of_range'_eq_append_cons","kind":"theorem","line":79,"name":"List.gt_of_range'_eq_append_cons","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L79-L87"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#List.mem_of_range'_eq_append_cons\"><span class=\"name\">List</span>.<span class=\"name\">mem_of_range'_eq_append_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s </span><span class=\"fn\">n </span><span class=\"fn\">step</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.range'\">range'</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span> <span class=\"fn\">step</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">ys</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.range'\">range'</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span> <span class=\"fn\">step</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#List.mem_of_range'_eq_append_cons","kind":"theorem","line":75,"name":"List.mem_of_range'_eq_append_cons","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L75-L77"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#List.length_of_range'_eq_append_cons\"><span class=\"name\">List</span>.<span class=\"name\">length_of_range'_eq_append_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s </span><span class=\"fn\">n </span><span class=\"fn\">step</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cur</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.range'\">range'</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span> <span class=\"fn\">step</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cur</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">ys</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">ys</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#List.length_of_range'_eq_append_cons","kind":"theorem","line":69,"name":"List.length_of_range'_eq_append_cons","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L69-L73"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#List.eq_of_range'_eq_append_cons\"><span class=\"name\">List</span>.<span class=\"name\">eq_of_range'_eq_append_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s </span><span class=\"fn\">n </span><span class=\"fn\">step</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cur</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ys</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.range'\">range'</a> <span class=\"fn\">s</span> <span class=\"fn\">n</span> <span class=\"fn\">step</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">xs</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cur</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">ys</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">cur</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">step</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#List.eq_of_range'_eq_append_cons","kind":"theorem","line":59,"name":"List.eq_of_range'_eq_append_cons","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L59-L67"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.tail_at\"><span class=\"name\">List</span>.<span class=\"name\">Cursor</span>.<span class=\"name\">tail_at</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.at\">«at»</a> <span class=\"fn\">l</span> <span class=\"fn\">n</span>)</span>.<a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.tail\">tail</a></span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.at\">«at»</a> <span class=\"fn\">l</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#List.Cursor.tail_at","kind":"theorem","line":55,"name":"List.Cursor.tail_at","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L55-L57"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.current_at\"><span class=\"name\">List</span>.<span class=\"name\">Cursor</span>.<span class=\"name\">current_at</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.at\">«at»</a> <span class=\"fn\">l</span> <span class=\"fn\">n</span>)</span>.<a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.current\">current</a></span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">l</span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">n</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#List.Cursor.current_at","kind":"theorem","line":52,"name":"List.Cursor.current_at","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L52-L54"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.suffix_at\"><span class=\"name\">List</span>.<span class=\"name\">Cursor</span>.<span class=\"name\">suffix_at</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.at\">«at»</a> <span class=\"fn\">l</span> <span class=\"fn\">n</span>)</span>.<a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.suffix\">suffix</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.drop\">drop</a> <span class=\"fn\">n</span> <span class=\"fn\">l</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#List.Cursor.suffix_at","kind":"theorem","line":51,"name":"List.Cursor.suffix_at","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L51-L51"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.prefix_at\"><span class=\"name\">List</span>.<span class=\"name\">Cursor</span>.<span class=\"name\">prefix_at</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.at\">«at»</a> <span class=\"fn\">l</span> <span class=\"fn\">n</span>)</span>.<a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.prefix\">prefix</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.take\">take</a> <span class=\"fn\">n</span> <span class=\"fn\">l</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#List.Cursor.prefix_at","kind":"theorem","line":50,"name":"List.Cursor.prefix_at","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L50-L50"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.tail\"><span class=\"name\">List</span>.<span class=\"name\">Cursor</span>.<span class=\"name\">tail</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor\">Cursor</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.suffix\">suffix</a></span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> := by get_elem_tactic)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor\">Cursor</a></span></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#List.Cursor.tail","kind":"def","line":43,"name":"List.Cursor.tail","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L43-L48"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.current\"><span class=\"name\">List</span>.<span class=\"name\">Cursor</span>.<span class=\"name\">current</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor\">Cursor</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.suffix\">suffix</a></span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> := by get_elem_tactic)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#List.Cursor.current","kind":"def","line":40,"name":"List.Cursor.current","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L40-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.end\"><span class=\"name\">List</span>.<span class=\"name\">Cursor</span>.<span class=\"name\">end</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor\">Cursor</a></span></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#List.Cursor.end","kind":"def","line":38,"name":"List.Cursor.end","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L38-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.begin\"><span class=\"name\">List</span>.<span class=\"name\">Cursor</span>.<span class=\"name\">begin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor\">Cursor</a></span></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#List.Cursor.begin","kind":"def","line":37,"name":"List.Cursor.begin","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L37-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.at\"><span class=\"name\">List</span>.<span class=\"name\">Cursor</span>.<span class=\"name\">at</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor\">Cursor</a></span></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#List.Cursor.at","kind":"def","line":36,"name":"List.Cursor.at","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L36-L36"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.property\"><span class=\"name\">List</span>.<span class=\"name\">Cursor</span>.<span class=\"name\">property</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor\">Cursor</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.prefix\">prefix</a></span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.suffix\">suffix</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">l</span></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#List.Cursor.property","kind":"theorem","line":34,"name":"List.Cursor.property","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L34-L34"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.suffix\"><span class=\"name\">List</span>.<span class=\"name\">Cursor</span>.<span class=\"name\">suffix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor\">Cursor</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#List.Cursor.suffix","kind":"def","line":33,"name":"List.Cursor.suffix","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L33-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.prefix\"><span class=\"name\">List</span>.<span class=\"name\">Cursor</span>.<span class=\"name\">prefix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor\">Cursor</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#List.Cursor.prefix","kind":"def","line":32,"name":"List.Cursor.prefix","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L32-L32"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk\"><span class=\"name\">List</span>.<span class=\"name\">Cursor</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">«prefix» </span><span class=\"fn\">suffix</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">property</span> : <span class=\"fn\">«prefix»</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">suffix</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">l</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor\">Cursor</a></span></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#List.Cursor.mk","kind":"ctor","line":31,"name":"List.Cursor.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L31-L31"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.ext_iff\"><span class=\"name\">List</span>.<span class=\"name\">Cursor</span>.<span class=\"name\">ext_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor\">Cursor</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.prefix\">prefix</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.prefix\">prefix</a></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.suffix\">suffix</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.suffix\">suffix</a></span></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#List.Cursor.ext_iff","kind":"theorem","line":30,"name":"List.Cursor.ext_iff","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L30-L30"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.ext\"><span class=\"name\">List</span>.<span class=\"name\">Cursor</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor\">Cursor</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">«prefix»</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.prefix\">prefix</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.prefix\">prefix</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">suffix</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.suffix\">suffix</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor.suffix\">suffix</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#List.Cursor.ext","kind":"theorem","line":30,"name":"List.Cursor.ext","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L30-L30"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#List.Cursor\"><span class=\"name\">List</span>.<span class=\"name\">Cursor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#List.Cursor","kind":"structure","line":30,"name":"List.Cursor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L30-L34"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/Triple/SpecLemmas.html#Std.Range.toList\"><span class=\"name\">Std</span>.<span class=\"name\">Range</span>.<span class=\"name\">toList</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Init/Data/Range/Basic.html#Std.Range\">Range</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"","docLink":"./Std/Do/Triple/SpecLemmas.html#Std.Range.toList","kind":"def","line":23,"name":"Std.Range.toList","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/Triple/SpecLemmas.lean#L23-L24"}}],"imports":["Std.Do.Triple.Basic","Std.Do.WP","Init.Data.Range.Polymorphic"],"instances":[],"name":"Std.Do.Triple.SpecLemmas"}