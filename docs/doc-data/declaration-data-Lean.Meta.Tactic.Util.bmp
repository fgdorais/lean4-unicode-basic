{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Util.html#Lean.Meta.tactic.skipAssignedInstances\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">tactic</span>.<span class=\"name\">skipAssignedInstances</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Util.html#Lean.Meta.tactic.skipAssignedInstances","kind":"opaque","line":177,"name":"Lean.Meta.tactic.skipAssignedInstances","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Util.lean#L177-L181"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Util.html#Lean.MVarId.isSubsingleton\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">isSubsingleton</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Check if a goal is of a subsingleton type. ","docLink":"./Lean/Meta/Tactic/Util.html#Lean.MVarId.isSubsingleton","kind":"def","line":169,"name":"Lean.MVarId.isSubsingleton","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Util.lean#L169-L175"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Util.html#Lean.Meta.TacticResultCNM.modified\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">TacticResultCNM</span>.<span class=\"name\">modified</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Util.html#Lean.Meta.TacticResultCNM\">TacticResultCNM</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Util.html#Lean.Meta.TacticResultCNM.modified","kind":"ctor","line":166,"name":"Lean.Meta.TacticResultCNM.modified","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Util.lean#L166-L166"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Util.html#Lean.Meta.TacticResultCNM.noChange\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">TacticResultCNM</span>.<span class=\"name\">noChange</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Util.html#Lean.Meta.TacticResultCNM\">TacticResultCNM</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Util.html#Lean.Meta.TacticResultCNM.noChange","kind":"ctor","line":165,"name":"Lean.Meta.TacticResultCNM.noChange","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Util.lean#L165-L165"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Util.html#Lean.Meta.TacticResultCNM.closed\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">TacticResultCNM</span>.<span class=\"name\">closed</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Util.html#Lean.Meta.TacticResultCNM\">TacticResultCNM</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Util.html#Lean.Meta.TacticResultCNM.closed","kind":"ctor","line":164,"name":"Lean.Meta.TacticResultCNM.closed","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Util.lean#L164-L164"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Util.html#Lean.Meta.TacticResultCNM\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">TacticResultCNM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Util.html#Lean.Meta.TacticResultCNM","kind":"inductive","line":163,"name":"Lean.Meta.TacticResultCNM","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Util.lean#L163-L166"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Util.html#Lean.MVarId.inferInstance\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">inferInstance</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Util.html#Lean.MVarId.inferInstance","kind":"def","line":157,"name":"Lean.MVarId.inferInstance","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Util.lean#L157-L161"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Util.html#Lean.Meta.getPropHyps\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">getPropHyps</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span></div></div>","info":{"doc":"Return all propositions in the local context. ","docLink":"./Lean/Meta/Tactic/Util.html#Lean.Meta.getPropHyps","kind":"def","line":148,"name":"Lean.Meta.getPropHyps","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Util.lean#L148-L155"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Util.html#Lean.Meta.ensureAtMostOne\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ensureAtMostOne</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarIds</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a> := <span class=\"fn\">(<a href=\"./Lean/Message.html#Lean.MessageData.ofFormat\">MessageData.ofFormat</a> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <a href=\"./Init/Data/Format/Basic.html#Std.ToFormat.format\">format</a>) <span class=\"fn\">&quot;unexpected number of goals&quot;</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Util.html#Lean.Meta.ensureAtMostOne","kind":"def","line":142,"name":"Lean.Meta.ensureAtMostOne","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Util.lean#L142-L146"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Util.html#Lean.Meta.exactlyOne\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">exactlyOne</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarIds</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a> := <span class=\"fn\">(<a href=\"./Lean/Message.html#Lean.MessageData.ofFormat\">MessageData.ofFormat</a> <a href=\"./Init/Prelude.html#Function.comp\">∘</a> <a href=\"./Init/Data/Format/Basic.html#Std.ToFormat.format\">format</a>) <span class=\"fn\">&quot;unexpected number of goals&quot;</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Util.html#Lean.Meta.exactlyOne","kind":"def","line":137,"name":"Lean.Meta.exactlyOne","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Util.lean#L137-L140"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Util.html#Lean.Meta.saturate\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">saturate</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Util.html#Lean.Meta.saturate","kind":"def","line":127,"name":"Lean.Meta.saturate","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Util.lean#L127-L135"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Util.html#Lean.MVarId.getNondepPropHyps\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">getNondepPropHyps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span></div></div>","info":{"doc":"Collect nondependent hypotheses that are propositions. ","docLink":"./Lean/Meta/Tactic/Util.html#Lean.MVarId.getNondepPropHyps","kind":"def","line":99,"name":"Lean.MVarId.getNondepPropHyps","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Util.lean#L99-L125"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Util.html#Lean.MVarId.headBetaType\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">headBetaType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Beta reduce the metavariable type head ","docLink":"./Lean/Meta/Tactic/Util.html#Lean.MVarId.headBetaType","kind":"def","line":95,"name":"Lean.MVarId.headBetaType","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Util.lean#L95-L97"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Util.html#Lean.MVarId.admit\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">admit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">synthetic</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Assign `mvarId` to `sorryAx` ","docLink":"./Lean/Meta/Tactic/Util.html#Lean.MVarId.admit","kind":"def","line":87,"name":"Lean.MVarId.admit","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Util.lean#L87-L93"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Util.html#Lean.MVarId.getType'\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">getType'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Get the type the given metavariable after instantiating metavariables and reducing to\nweak head normal form. ","docLink":"./Lean/Meta/Tactic/Util.html#Lean.MVarId.getType'","kind":"def","line":77,"name":"Lean.MVarId.getType'","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Util.lean#L77-L83"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Util.html#Lean.MVarId.getType\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">getType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Get the type the given metavariable. ","docLink":"./Lean/Meta/Tactic/Util.html#Lean.MVarId.getType","kind":"def","line":73,"name":"Lean.MVarId.getType","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Util.lean#L73-L75"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Util.html#Lean.MVarId.checkNotAssigned\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">checkNotAssigned</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tacticName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Throw a tactic exception with given tactic name if the given metavariable is assigned. ","docLink":"./Lean/Meta/Tactic/Util.html#Lean.MVarId.checkNotAssigned","kind":"def","line":66,"name":"Lean.MVarId.checkNotAssigned","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Util.lean#L66-L71"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Util.html#Lean.Meta.throwNestedTacticEx\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">throwNestedTacticEx</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tacticName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ex</span> : <a href=\"./Lean/Exception.html#Lean.Exception\">Exception</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Rethrows the error as a nested error with the given tactic name prepended.\nIf the error was tagged, prepends `nested` to the tag and preserves it.\n","docLink":"./Lean/Meta/Tactic/Util.html#Lean.Meta.throwNestedTacticEx","kind":"def","line":53,"name":"Lean.Meta.throwNestedTacticEx","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Util.lean#L53-L64"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Util.html#Lean.Meta.throwTacticEx\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">throwTacticEx</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tacticName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Util.html#Lean.Meta.throwTacticEx","kind":"def","line":48,"name":"Lean.Meta.throwTacticEx","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Util.lean#L48-L51"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Util.html#Lean.Meta.mkTacticExMsg\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">mkTacticExMsg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tacticName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msg</span> : <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>","info":{"doc":"Produces an error message indicating that tactic `tacticName` has failed with the message `msg`,\nand displays the state of `mvarId` below the message.\n","docLink":"./Lean/Meta/Tactic/Util.html#Lean.Meta.mkTacticExMsg","kind":"def","line":41,"name":"Lean.Meta.mkTacticExMsg","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Util.lean#L41-L46"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Util.html#Lean.Meta.mkFreshExprSyntheticOpaqueMVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">mkFreshExprSyntheticOpaqueMVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tag</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> := <a href=\"./Init/Prelude.html#Lean.Name.anonymous\">Name.anonymous</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Util.html#Lean.Meta.mkFreshExprSyntheticOpaqueMVar","kind":"def","line":38,"name":"Lean.Meta.mkFreshExprSyntheticOpaqueMVar","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Util.lean#L38-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Util.html#Lean.Meta.appendTagSuffix\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">appendTagSuffix</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">suffix</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Util.html#Lean.Meta.appendTagSuffix","kind":"def","line":34,"name":"Lean.Meta.appendTagSuffix","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Util.lean#L34-L36"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Util.html#Lean.Meta.appendTag\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">appendTag</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tag </span><span class=\"fn\">suffix</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Util.html#Lean.Meta.appendTag","kind":"def","line":31,"name":"Lean.Meta.appendTag","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Util.lean#L31-L32"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Util.html#Lean.MVarId.setTag\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">setTag</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tag</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Util.html#Lean.MVarId.setTag","kind":"def","line":28,"name":"Lean.MVarId.setTag","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Util.lean#L28-L29"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Util.html#Lean.MVarId.getTag\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">getTag</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"Get the user name of the given metavariable. ","docLink":"./Lean/Meta/Tactic/Util.html#Lean.MVarId.getTag","kind":"def","line":24,"name":"Lean.MVarId.getTag","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Util.lean#L24-L26"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Util.html#Lean.Meta.debug.terminalTacticsAsSorry\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">debug</span>.<span class=\"name\">terminalTacticsAsSorry</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Util.html#Lean.Meta.debug.terminalTacticsAsSorry","kind":"opaque","line":18,"name":"Lean.Meta.debug.terminalTacticsAsSorry","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Util.lean#L18-L22"}}],"imports":["Lean.Util.ForEachExprWhere","Lean.Meta.Basic","Lean.Meta.PPGoal","Lean.Meta.AppBuilder"],"instances":[],"name":"Lean.Meta.Tactic.Util"}