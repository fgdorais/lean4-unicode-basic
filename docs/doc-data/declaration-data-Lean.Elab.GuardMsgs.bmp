{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.guardMsgsCodeAction\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">guardMsgsCodeAction</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Server/CodeActions/Attr.html#Lean.CodeAction.CommandCodeAction\">CodeAction.CommandCodeAction</a></div></div>","info":{"doc":"A code action which will update the doc comment on a `#guard_msgs` invocation. ","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.guardMsgsCodeAction","kind":"def","line":228,"name":"Lean.Elab.Tactic.GuardMsgs.guardMsgsCodeAction","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/GuardMsgs.lean#L228-L260"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.elabGuardMsgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">elabGuardMsgs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElab\">Command.CommandElab</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.elabGuardMsgs","kind":"def","line":180,"name":"Lean.Elab.Tactic.GuardMsgs.elabGuardMsgs","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/GuardMsgs.lean#L180-L225"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.MessageOrdering.apply\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">MessageOrdering</span>.<span class=\"name\">apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mode</span> : <a href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.MessageOrdering\">MessageOrdering</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">msgs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"Applies a message ordering mode.\n","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.MessageOrdering.apply","kind":"def","line":172,"name":"Lean.Elab.Tactic.GuardMsgs.MessageOrdering.apply","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/GuardMsgs.lean#L172-L178"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.WhitespaceMode.apply\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">WhitespaceMode</span>.<span class=\"name\">apply</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mode</span> : <a href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.WhitespaceMode\">WhitespaceMode</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Applies a whitespace normalization mode.\n","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.WhitespaceMode.apply","kind":"def","line":163,"name":"Lean.Elab.Tactic.GuardMsgs.WhitespaceMode.apply","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/GuardMsgs.lean#L163-L170"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.removeTrailingWhitespaceMarker\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">removeTrailingWhitespaceMarker</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.removeTrailingWhitespaceMarker","kind":"def","line":160,"name":"Lean.Elab.Tactic.GuardMsgs.removeTrailingWhitespaceMarker","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/GuardMsgs.lean#L160-L161"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.revealTrailingWhitespace\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">revealTrailingWhitespace</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Makes trailing whitespace visible and protects them against trimming by the editor, by appending\nthe symbol ‚èé to such a line (and also to any line that ends with such a symbol, to avoid\nambiguities in the case the message already had that symbol).\n","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.revealTrailingWhitespace","kind":"def","line":151,"name":"Lean.Elab.Tactic.GuardMsgs.revealTrailingWhitespace","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/GuardMsgs.lean#L151-L157"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.instTypeNameGuardMsgFailure\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">instTypeNameGuardMsgFailure</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Dynamic.html#TypeName\">TypeName</a> <a href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.GuardMsgFailure\">GuardMsgFailure</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.instTypeNameGuardMsgFailure","kind":"instance","line":149,"name":"Lean.Elab.Tactic.GuardMsgs.instTypeNameGuardMsgFailure","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/GuardMsgs.lean#L149-L149"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.GuardMsgFailure.res\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">GuardMsgFailure</span>.<span class=\"name\">res</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.GuardMsgFailure\">GuardMsgFailure</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"The result of the nested command ","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.GuardMsgFailure.res","kind":"def","line":148,"name":"Lean.Elab.Tactic.GuardMsgs.GuardMsgFailure.res","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/GuardMsgs.lean#L148-L148"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.GuardMsgFailure.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">GuardMsgFailure</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">res</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.GuardMsgFailure\">GuardMsgFailure</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.GuardMsgFailure.mk","kind":"ctor","line":146,"name":"Lean.Elab.Tactic.GuardMsgs.GuardMsgFailure.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/GuardMsgs.lean#L146-L146"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.GuardMsgFailure\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">GuardMsgFailure</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"An info tree node corresponding to a failed `#guard_msgs` invocation,\nused for code action support. ","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.GuardMsgFailure","kind":"structure","line":144,"name":"Lean.Elab.Tactic.GuardMsgs.GuardMsgFailure","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/GuardMsgs.lean#L144-L149"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.parseGuardMsgsSpec\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">parseGuardMsgsSpec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">spec?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.guardMsgsSpec</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">Command.CommandElabM</a> <a href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.GuardMsgsSpec\">GuardMsgsSpec</a></span></div></div>","info":{"doc":"Parses a `GuardMsgsSpec`.\n- No specification: check everything.\n- With a specification: interpret the spec, and if nothing applies pass it through. ","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.parseGuardMsgsSpec","kind":"def","line":112,"name":"Lean.Elab.Tactic.GuardMsgs.parseGuardMsgsSpec","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/GuardMsgs.lean#L112-L142"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.parseGuardMsgsFilterSeverity\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">parseGuardMsgsFilterSeverity</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.guardMsgsFilterSeverity</span> ‚Üí <span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">Command.CommandElabM</a> <span class=\"fn\">(<a href=\"./Lean/Message.html#Lean.Message\">Message</a> ‚Üí <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.parseGuardMsgsFilterSeverity","kind":"def","line":104,"name":"Lean.Elab.Tactic.GuardMsgs.parseGuardMsgsFilterSeverity","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/GuardMsgs.lean#L104-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.parseGuardMsgsFilterAction\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">parseGuardMsgsFilterAction</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">action?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.guardMsgsFilterAction</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">Command.CommandElabM</a> <a href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.FilterSpec\">FilterSpec</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.parseGuardMsgsFilterAction","kind":"def","line":93,"name":"Lean.Elab.Tactic.GuardMsgs.parseGuardMsgsFilterAction","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/GuardMsgs.lean#L93-L102"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.GuardMsgsSpec.reportPositions\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">GuardMsgsSpec</span>.<span class=\"name\">reportPositions</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.GuardMsgsSpec\">GuardMsgsSpec</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Whether to report position information. ","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.GuardMsgsSpec.reportPositions","kind":"def","line":91,"name":"Lean.Elab.Tactic.GuardMsgs.GuardMsgsSpec.reportPositions","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/GuardMsgs.lean#L91-L91"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.GuardMsgsSpec.ordering\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">GuardMsgsSpec</span>.<span class=\"name\">ordering</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.GuardMsgsSpec\">GuardMsgsSpec</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.MessageOrdering\">MessageOrdering</a></div></div>","info":{"doc":"Method to use when combining multiple messages; see `MessageOrdering`. ","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.GuardMsgsSpec.ordering","kind":"def","line":89,"name":"Lean.Elab.Tactic.GuardMsgs.GuardMsgsSpec.ordering","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/GuardMsgs.lean#L89-L89"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.GuardMsgsSpec.whitespace\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">GuardMsgsSpec</span>.<span class=\"name\">whitespace</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.GuardMsgsSpec\">GuardMsgsSpec</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.WhitespaceMode\">WhitespaceMode</a></div></div>","info":{"doc":"Method to use when normalizing whitespace, after trimming; see `WhitespaceMode`. ","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.GuardMsgsSpec.whitespace","kind":"def","line":87,"name":"Lean.Elab.Tactic.GuardMsgs.GuardMsgsSpec.whitespace","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/GuardMsgs.lean#L87-L87"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.GuardMsgsSpec.filterFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">GuardMsgsSpec</span>.<span class=\"name\">filterFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.GuardMsgsSpec\">GuardMsgsSpec</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.Message\">Message</a> ‚Üí <a href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.FilterSpec\">FilterSpec</a></span></div></div>","info":{"doc":"Method for deciding whether and how to filter messages; see `FilterSpec`. ","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.GuardMsgsSpec.filterFn","kind":"def","line":85,"name":"Lean.Elab.Tactic.GuardMsgs.GuardMsgsSpec.filterFn","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/GuardMsgs.lean#L85-L85"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.GuardMsgsSpec.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">GuardMsgsSpec</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">filterFn</span> : <span class=\"fn\"><a href=\"./Lean/Message.html#Lean.Message\">Message</a> ‚Üí <a href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.FilterSpec\">FilterSpec</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">whitespace</span> : <a href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.WhitespaceMode\">WhitespaceMode</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ordering</span> : <a href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.MessageOrdering\">MessageOrdering</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">reportPositions</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.GuardMsgsSpec\">GuardMsgsSpec</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.GuardMsgsSpec.mk","kind":"ctor","line":83,"name":"Lean.Elab.Tactic.GuardMsgs.GuardMsgsSpec.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/GuardMsgs.lean#L83-L83"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.GuardMsgsSpec\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">GuardMsgsSpec</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The specification options for `#guard_msgs`. The default field values provide the default\nbehavior of `#guard_msgs`. ","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.GuardMsgsSpec","kind":"structure","line":81,"name":"Lean.Elab.Tactic.GuardMsgs.GuardMsgsSpec","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/GuardMsgs.lean#L81-L91"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.MessageOrdering.sorted\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">MessageOrdering</span>.<span class=\"name\">sorted</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.MessageOrdering\">MessageOrdering</a></div></div>","info":{"doc":"Sort the produced messages. ","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.MessageOrdering.sorted","kind":"ctor","line":78,"name":"Lean.Elab.Tactic.GuardMsgs.MessageOrdering.sorted","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/GuardMsgs.lean#L78-L79"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.MessageOrdering.exact\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">MessageOrdering</span>.<span class=\"name\">exact</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.MessageOrdering\">MessageOrdering</a></div></div>","info":{"doc":"Use the exact ordering of the produced messages. ","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.MessageOrdering.exact","kind":"ctor","line":76,"name":"Lean.Elab.Tactic.GuardMsgs.MessageOrdering.exact","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/GuardMsgs.lean#L76-L77"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.MessageOrdering\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">MessageOrdering</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Method to use when combining multiple messages. ","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.MessageOrdering","kind":"inductive","line":74,"name":"Lean.Elab.Tactic.GuardMsgs.MessageOrdering","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/GuardMsgs.lean#L74-L79"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.WhitespaceMode.lax\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">WhitespaceMode</span>.<span class=\"name\">lax</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.WhitespaceMode\">WhitespaceMode</a></div></div>","info":{"doc":"Equality after collapsing whitespace into single spaces. ","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.WhitespaceMode.lax","kind":"ctor","line":71,"name":"Lean.Elab.Tactic.GuardMsgs.WhitespaceMode.lax","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/GuardMsgs.lean#L71-L72"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.WhitespaceMode.normalized\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">WhitespaceMode</span>.<span class=\"name\">normalized</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.WhitespaceMode\">WhitespaceMode</a></div></div>","info":{"doc":"Equality after normalizing newlines into spaces. ","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.WhitespaceMode.normalized","kind":"ctor","line":69,"name":"Lean.Elab.Tactic.GuardMsgs.WhitespaceMode.normalized","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/GuardMsgs.lean#L69-L70"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.WhitespaceMode.exact\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">WhitespaceMode</span>.<span class=\"name\">exact</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.WhitespaceMode\">WhitespaceMode</a></div></div>","info":{"doc":"Exact equality. ","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.WhitespaceMode.exact","kind":"ctor","line":67,"name":"Lean.Elab.Tactic.GuardMsgs.WhitespaceMode.exact","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/GuardMsgs.lean#L67-L68"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.WhitespaceMode\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">WhitespaceMode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The method to use when normalizing whitespace, after trimming. ","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.WhitespaceMode","kind":"inductive","line":65,"name":"Lean.Elab.Tactic.GuardMsgs.WhitespaceMode","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/GuardMsgs.lean#L65-L72"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.FilterSpec.pass\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">FilterSpec</span>.<span class=\"name\">pass</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.FilterSpec\">FilterSpec</a></div></div>","info":{"doc":"Do not capture the message. ","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.FilterSpec.pass","kind":"ctor","line":62,"name":"Lean.Elab.Tactic.GuardMsgs.FilterSpec.pass","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/GuardMsgs.lean#L62-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.FilterSpec.drop\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">FilterSpec</span>.<span class=\"name\">drop</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.FilterSpec\">FilterSpec</a></div></div>","info":{"doc":"Drop the message and delete it. ","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.FilterSpec.drop","kind":"ctor","line":60,"name":"Lean.Elab.Tactic.GuardMsgs.FilterSpec.drop","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/GuardMsgs.lean#L60-L61"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.FilterSpec.check\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">FilterSpec</span>.<span class=\"name\">check</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.FilterSpec\">FilterSpec</a></div></div>","info":{"doc":"Capture the message and check it matches the docstring. ","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.FilterSpec.check","kind":"ctor","line":58,"name":"Lean.Elab.Tactic.GuardMsgs.FilterSpec.check","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/GuardMsgs.lean#L58-L59"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.FilterSpec\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardMsgs</span>.<span class=\"name\">FilterSpec</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The decision made by a specification for a message. ","docLink":"./Lean/Elab/GuardMsgs.html#Lean.Elab.Tactic.GuardMsgs.FilterSpec","kind":"inductive","line":56,"name":"Lean.Elab.Tactic.GuardMsgs.FilterSpec","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/GuardMsgs.lean#L56-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/GuardMsgs.html#guard_msgs.diff\"><span class=\"name\">guard_msgs</span>.<span class=\"name\">diff</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/GuardMsgs.html#guard_msgs.diff","kind":"opaque","line":23,"name":"guard_msgs.diff","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/GuardMsgs.lean#L23-L26"}}],"imports":["Lean.Elab.Notation","Lean.Util.Diff","Lean.Server.CodeActions.Attr"],"instances":[{"className":"TypeName","name":"Lean.Elab.Tactic.GuardMsgs.instTypeNameGuardMsgFailure","typeNames":["Lean.Elab.Tactic.GuardMsgs.GuardMsgFailure"]}],"name":"Lean.Elab.GuardMsgs"}