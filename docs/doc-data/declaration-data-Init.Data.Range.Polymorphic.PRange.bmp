{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulClosedOpenIntersection.mem_intersection_iff\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">LawfulClosedOpenIntersection</span>.<span class=\"name\">mem_intersection_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">shape</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape\">RangeShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.ClosedOpenIntersection\">ClosedOpenIntersection</a> <span class=\"fn\">shape</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝¹</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound\">SupportsLowerBound</a> <span class=\"fn\"><span class=\"fn\">shape</span>.<a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.lower\">lower</a></span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝²</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\"><span class=\"fn\">shape</span>.<a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.upper\">upper</a></span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝³</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound\">SupportsLowerBound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.closed\">BoundShape.closed</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝⁴</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.open\">BoundShape.open</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulClosedOpenIntersection\">LawfulClosedOpenIntersection</a> <span class=\"fn\">shape</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange\">PRange</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">{</a> <span class=\"fn\">lower</span> := <span class=\"fn\"><span class=\"fn\">shape</span>.<a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.lower\">lower</a></span>, <span class=\"fn\">upper</span> := <span class=\"fn\"><span class=\"fn\">shape</span>.<a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.upper\">upper</a></span> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">}</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange\">PRange</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">{</a> <span class=\"fn\">lower</span> := <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.closed\">BoundShape.closed</a>, <span class=\"fn\">upper</span> := <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.open\">BoundShape.open</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">}</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.ClosedOpenIntersection.intersection\">ClosedOpenIntersection.intersection</a> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></div></div>","info":{"doc":"The intersection according to `ClosedOpenIntersection shape α` of two ranges contains exactly\nthose elements that are contained in both ranges.\n","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulClosedOpenIntersection.mem_intersection_iff","kind":"theorem","line":359,"name":"Std.PRange.LawfulClosedOpenIntersection.mem_intersection_iff","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L359-L359"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulClosedOpenIntersection.mk\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">LawfulClosedOpenIntersection</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">shape</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape\">RangeShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.ClosedOpenIntersection\">ClosedOpenIntersection</a> <span class=\"fn\">shape</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound\">SupportsLowerBound</a> <span class=\"fn\"><span class=\"fn\">shape</span>.<a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.lower\">lower</a></span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\"><span class=\"fn\">shape</span>.<a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.upper\">upper</a></span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound\">SupportsLowerBound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.closed\">BoundShape.closed</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.open\">BoundShape.open</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mem_intersection_iff</span> :\n  <span class=\"fn\">∀ {<span class=\"fn\">a</span> : <span class=\"fn\">α</span>} {<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange\">PRange</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">{</a> <span class=\"fn\">lower</span> := <span class=\"fn\"><span class=\"fn\">shape</span>.<a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.lower\">lower</a></span>, <span class=\"fn\">upper</span> := <span class=\"fn\"><span class=\"fn\">shape</span>.<a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.upper\">upper</a></span> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">}</a> <span class=\"fn\">α</span></span>}\n    {<span class=\"fn\">s</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange\">PRange</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">{</a> <span class=\"fn\">lower</span> := <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.closed\">BoundShape.closed</a>, <span class=\"fn\">upper</span> := <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.open\">BoundShape.open</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">}</a> <span class=\"fn\">α</span></span>},\n    <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.ClosedOpenIntersection.intersection\">ClosedOpenIntersection.intersection</a> <span class=\"fn\">r</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">s</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulClosedOpenIntersection\">LawfulClosedOpenIntersection</a> <span class=\"fn\">shape</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulClosedOpenIntersection.mk","kind":"ctor","line":350,"name":"Std.PRange.LawfulClosedOpenIntersection.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L350-L350"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulClosedOpenIntersection\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">LawfulClosedOpenIntersection</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">shape</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape\">RangeShape</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.ClosedOpenIntersection\">ClosedOpenIntersection</a> <span class=\"fn\">shape</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound\">SupportsLowerBound</a> <span class=\"fn\"><span class=\"fn\">shape</span>.<a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.lower\">lower</a></span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\"><span class=\"fn\">shape</span>.<a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.upper\">upper</a></span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound\">SupportsLowerBound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.closed\">BoundShape.closed</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.open\">BoundShape.open</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"This typeclass ensures that the intersection according to `ClosedOpenIntersection shape α`\nof two ranges contains exactly those elements that are contained in both ranges.\n","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulClosedOpenIntersection","kind":"class","line":346,"name":"Std.PRange.LawfulClosedOpenIntersection","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L346-L361"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.ClosedOpenIntersection.intersection\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">ClosedOpenIntersection</span>.<span class=\"name\">intersection</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">shape</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape\">RangeShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.ClosedOpenIntersection\">ClosedOpenIntersection</a> <span class=\"fn\">shape</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange\">PRange</a> <span class=\"fn\">shape</span> <span class=\"fn\">α</span></span> →\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange\">PRange</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">{</a> <span class=\"fn\">lower</span> := <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.closed\">BoundShape.closed</a>, <span class=\"fn\">upper</span> := <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.open\">BoundShape.open</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">}</a> <span class=\"fn\">α</span></span> →\n    <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange\">PRange</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">{</a> <span class=\"fn\">lower</span> := <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.closed\">BoundShape.closed</a>, <span class=\"fn\">upper</span> := <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.open\">BoundShape.open</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">}</a> <span class=\"fn\">α</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.ClosedOpenIntersection.intersection","kind":"def","line":344,"name":"Std.PRange.ClosedOpenIntersection.intersection","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L344-L344"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.ClosedOpenIntersection.mk\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">ClosedOpenIntersection</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">shape</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape\">RangeShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">intersection</span> :\n  <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange\">PRange</a> <span class=\"fn\">shape</span> <span class=\"fn\">α</span></span> →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange\">PRange</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">{</a> <span class=\"fn\">lower</span> := <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.closed\">BoundShape.closed</a>, <span class=\"fn\">upper</span> := <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.open\">BoundShape.open</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">}</a> <span class=\"fn\">α</span></span> →\n      <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange\">PRange</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">{</a> <span class=\"fn\">lower</span> := <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.closed\">BoundShape.closed</a>, <span class=\"fn\">upper</span> := <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.open\">BoundShape.open</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">}</a> <span class=\"fn\">α</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.ClosedOpenIntersection\">ClosedOpenIntersection</a> <span class=\"fn\">shape</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.ClosedOpenIntersection.mk","kind":"ctor","line":343,"name":"Std.PRange.ClosedOpenIntersection.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L343-L343"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.ClosedOpenIntersection\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">ClosedOpenIntersection</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">shape</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape\">RangeShape</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> w</div></div>","info":{"doc":"This typeclass allows taking the intersection of ranges of the given shape and half-open ranges.\n\nAn element should be contained in the intersection if and only if it is contained in both ranges.\nThis is encoded in `LawfulClosedOpenIntersection`.\n","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.ClosedOpenIntersection","kind":"class","line":337,"name":"Std.PRange.ClosedOpenIntersection","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L337-L344"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.instLawfulUnboundedUpperBoundOfUpwardEnumerable\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">instLawfulUnboundedUpperBoundOfUpwardEnumerable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUnboundedUpperBound\">LawfulUnboundedUpperBound</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.instLawfulUnboundedUpperBoundOfUpwardEnumerable","kind":"instance","line":334,"name":"Std.PRange.instLawfulUnboundedUpperBoundOfUpwardEnumerable","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L334-L335"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.instLawfulOpenUpperBoundOfLawfulUpwardEnumerableLT\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">instLawfulOpenUpperBoundOfLawfulUpwardEnumerableLT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableLT\">DecidableLT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerableLT\">LawfulUpwardEnumerableLT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulOpenUpperBound\">LawfulOpenUpperBound</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.instLawfulOpenUpperBoundOfLawfulUpwardEnumerableLT","kind":"instance","line":330,"name":"Std.PRange.instLawfulOpenUpperBoundOfLawfulUpwardEnumerableLT","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L330-L332"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.instLawfulClosedUpperBoundOfLawfulUpwardEnumerableLE\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">instLawfulClosedUpperBoundOfLawfulUpwardEnumerableLE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableLE\">DecidableLE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerableLE\">LawfulUpwardEnumerableLE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulClosedUpperBound\">LawfulClosedUpperBound</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.instLawfulClosedUpperBoundOfLawfulUpwardEnumerableLE","kind":"instance","line":326,"name":"Std.PRange.instLawfulClosedUpperBoundOfLawfulUpwardEnumerableLE","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L326-L328"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.instBoundedUpwardEnumerableClosed\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">instBoundedUpwardEnumerableClosed</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundedUpwardEnumerable\">BoundedUpwardEnumerable</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.closed\">BoundShape.closed</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.instBoundedUpwardEnumerableClosed","kind":"instance","line":323,"name":"Std.PRange.instBoundedUpwardEnumerableClosed","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L323-L324"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.instBoundedUpwardEnumerableOpenOfUpwardEnumerable\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">instBoundedUpwardEnumerableOpenOfUpwardEnumerable</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundedUpwardEnumerable\">BoundedUpwardEnumerable</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.open\">BoundShape.open</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.instBoundedUpwardEnumerableOpenOfUpwardEnumerable","kind":"instance","line":320,"name":"Std.PRange.instBoundedUpwardEnumerableOpenOfUpwardEnumerable","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L320-L321"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.instBoundedUpwardEnumerableUnboundedOfLeast?\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">instBoundedUpwardEnumerableUnboundedOfLeast?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.Least?\">Least?</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundedUpwardEnumerable\">BoundedUpwardEnumerable</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.unbounded\">BoundShape.unbounded</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.instBoundedUpwardEnumerableUnboundedOfLeast?","kind":"instance","line":317,"name":"Std.PRange.instBoundedUpwardEnumerableUnboundedOfLeast?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L317-L318"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.instSupportsUpperBoundClosedOfDecidableLE\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">instSupportsUpperBoundClosedOfDecidableLE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableLE\">DecidableLE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.closed\">BoundShape.closed</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.instSupportsUpperBoundClosedOfDecidableLE","kind":"instance","line":314,"name":"Std.PRange.instSupportsUpperBoundClosedOfDecidableLE","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L314-L315"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.instSupportsLowerBoundClosedOfDecidableLE\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">instSupportsLowerBoundClosedOfDecidableLE</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableLE\">DecidableLE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound\">SupportsLowerBound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.closed\">BoundShape.closed</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.instSupportsLowerBoundClosedOfDecidableLE","kind":"instance","line":311,"name":"Std.PRange.instSupportsLowerBoundClosedOfDecidableLE","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L311-L312"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.instSupportsUpperBoundOpenOfDecidableLT\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">instSupportsUpperBoundOpenOfDecidableLT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableLT\">DecidableLT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.open\">BoundShape.open</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.instSupportsUpperBoundOpenOfDecidableLT","kind":"instance","line":308,"name":"Std.PRange.instSupportsUpperBoundOpenOfDecidableLT","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L308-L309"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.instSupportsLowerBoundOpenOfDecidableLT\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">instSupportsLowerBoundOpenOfDecidableLT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableLT\">DecidableLT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound\">SupportsLowerBound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.open\">BoundShape.open</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.instSupportsLowerBoundOpenOfDecidableLT","kind":"instance","line":305,"name":"Std.PRange.instSupportsLowerBoundOpenOfDecidableLT","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L305-L306"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUnboundedUpperBound.isSatisfied\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">LawfulUnboundedUpperBound</span>.<span class=\"name\">isSatisfied</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.unbounded\">BoundShape.unbounded</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUnboundedUpperBound\">LawfulUnboundedUpperBound</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.unbounded\">BoundShape.unbounded</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound.IsSatisfied\">SupportsUpperBound.IsSatisfied</a> <span class=\"fn\">u</span> <span class=\"fn\">a</span></span></div></div>","info":{"doc":"An unbounded upper bound is satisfied for every element.\n","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUnboundedUpperBound.isSatisfied","kind":"theorem","line":302,"name":"Std.PRange.LawfulUnboundedUpperBound.isSatisfied","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L302-L302"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUnboundedUpperBound.mk\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">LawfulUnboundedUpperBound</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.unbounded\">BoundShape.unbounded</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isSatisfied</span> : <span class=\"fn\">∀ (<span class=\"fn\">u</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.unbounded\">BoundShape.unbounded</a> <span class=\"fn\">α</span></span>) (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound.IsSatisfied\">SupportsUpperBound.IsSatisfied</a> <span class=\"fn\">u</span> <span class=\"fn\">a</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUnboundedUpperBound\">LawfulUnboundedUpperBound</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUnboundedUpperBound.mk","kind":"ctor","line":298,"name":"Std.PRange.LawfulUnboundedUpperBound.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L298-L298"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUnboundedUpperBound\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">LawfulUnboundedUpperBound</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.unbounded\">BoundShape.unbounded</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"This typeclass ensures that according to `SupportsUpperBound .unbounded α`, every element is\nin bounds.\n","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUnboundedUpperBound","kind":"class","line":294,"name":"Std.PRange.LawfulUnboundedUpperBound","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L294-L303"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulOpenUpperBound.isSatisfied_iff_le\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">LawfulOpenUpperBound</span>.<span class=\"name\">isSatisfied_iff_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.open\">BoundShape.open</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝¹</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulOpenUpperBound\">LawfulOpenUpperBound</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.open\">BoundShape.open</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound.IsSatisfied\">SupportsUpperBound.IsSatisfied</a> <span class=\"fn\">u</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.LT\">UpwardEnumerable.LT</a> <span class=\"fn\">a</span> <span class=\"fn\">u</span></span></div></div>","info":{"doc":"An open upper bound is satisfied for `a` if and only if it is greater than to `a`\naccording to `UpwardEnumerable.LT`.\n","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulOpenUpperBound.isSatisfied_iff_le","kind":"theorem","line":291,"name":"Std.PRange.LawfulOpenUpperBound.isSatisfied_iff_le","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L291-L291"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulOpenUpperBound.mk\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">LawfulOpenUpperBound</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.open\">BoundShape.open</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isSatisfied_iff_le</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">u</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.open\">BoundShape.open</a> <span class=\"fn\">α</span></span>) (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound.IsSatisfied\">SupportsUpperBound.IsSatisfied</a> <span class=\"fn\">u</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.LT\">UpwardEnumerable.LT</a> <span class=\"fn\">a</span> <span class=\"fn\">u</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulOpenUpperBound\">LawfulOpenUpperBound</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulOpenUpperBound.mk","kind":"ctor","line":285,"name":"Std.PRange.LawfulOpenUpperBound.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L285-L285"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulOpenUpperBound\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">LawfulOpenUpperBound</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.open\">BoundShape.open</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"This typeclass ensures that `SupportsUpperBound .open α` and `UpwardEnumerable α` instances\nare compatible.\n","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulOpenUpperBound","kind":"class","line":281,"name":"Std.PRange.LawfulOpenUpperBound","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L281-L292"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulClosedUpperBound.isSatisfied_iff_le\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">LawfulClosedUpperBound</span>.<span class=\"name\">isSatisfied_iff_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.closed\">BoundShape.closed</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝¹</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulClosedUpperBound\">LawfulClosedUpperBound</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.closed\">BoundShape.closed</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound.IsSatisfied\">SupportsUpperBound.IsSatisfied</a> <span class=\"fn\">u</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.LE\">UpwardEnumerable.LE</a> <span class=\"fn\">a</span> <span class=\"fn\">u</span></span></div></div>","info":{"doc":"A closed upper bound is satisfied for `a` if and only if it is greater than or equal to `a`\naccording to `UpwardEnumerable.LE`.\n","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulClosedUpperBound.isSatisfied_iff_le","kind":"theorem","line":278,"name":"Std.PRange.LawfulClosedUpperBound.isSatisfied_iff_le","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L278-L278"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulClosedUpperBound.mk\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">LawfulClosedUpperBound</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.closed\">BoundShape.closed</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isSatisfied_iff_le</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">u</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.closed\">BoundShape.closed</a> <span class=\"fn\">α</span></span>) (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound.IsSatisfied\">SupportsUpperBound.IsSatisfied</a> <span class=\"fn\">u</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.LE\">UpwardEnumerable.LE</a> <span class=\"fn\">a</span> <span class=\"fn\">u</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulClosedUpperBound\">LawfulClosedUpperBound</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulClosedUpperBound.mk","kind":"ctor","line":272,"name":"Std.PRange.LawfulClosedUpperBound.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L272-L272"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulClosedUpperBound\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">LawfulClosedUpperBound</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.closed\">BoundShape.closed</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"This typeclass ensures that `SupportsUpperBound .closed α` and `UpwardEnumerable α` instances\nare compatible.\n","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulClosedUpperBound","kind":"class","line":268,"name":"Std.PRange.LawfulClosedUpperBound","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L268-L279"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableLowerBound.isSatisfied_of_le\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">LawfulUpwardEnumerableLowerBound</span>.<span class=\"name\">isSatisfied_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sl</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound\">SupportsLowerBound</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerable\">LawfulUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundedUpwardEnumerable\">BoundedUpwardEnumerable</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableLowerBound\">LawfulUpwardEnumerableLowerBound</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound.IsSatisfied\">SupportsLowerBound.IsSatisfied</a> <span class=\"fn\">l</span> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hle</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.LE\">UpwardEnumerable.LE</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound.IsSatisfied\">SupportsLowerBound.IsSatisfied</a> <span class=\"fn\">l</span> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableLowerBound.isSatisfied_of_le","kind":"theorem","line":258,"name":"Std.PRange.LawfulUpwardEnumerableLowerBound.isSatisfied_of_le","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L258-L266"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableUpperBound.isSatisfied_of_le\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">LawfulUpwardEnumerableUpperBound</span>.<span class=\"name\">isSatisfied_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">su</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝¹</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableUpperBound\">LawfulUpwardEnumerableUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound.IsSatisfied\">SupportsUpperBound.IsSatisfied</a> <span class=\"fn\">u</span> <span class=\"fn\">b</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.LE\">UpwardEnumerable.LE</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound.IsSatisfied\">SupportsUpperBound.IsSatisfied</a> <span class=\"fn\">u</span> <span class=\"fn\">a</span></span></span></span></div></div>","info":{"doc":"If `b` is a transitive successor of `a` and `b` satisfies a certain upper bound, then\n`a` also satisfies the upper bound.\n","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableUpperBound.isSatisfied_of_le","kind":"theorem","line":255,"name":"Std.PRange.LawfulUpwardEnumerableUpperBound.isSatisfied_of_le","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L255-L255"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableUpperBound.mk\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">LawfulUpwardEnumerableUpperBound</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">su</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isSatisfied_of_le</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">u</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>) (<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>),\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound.IsSatisfied\">SupportsUpperBound.IsSatisfied</a> <span class=\"fn\">u</span> <span class=\"fn\">b</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.LE\">UpwardEnumerable.LE</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span> → <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound.IsSatisfied\">SupportsUpperBound.IsSatisfied</a> <span class=\"fn\">u</span> <span class=\"fn\">a</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableUpperBound\">LawfulUpwardEnumerableUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableUpperBound.mk","kind":"ctor","line":250,"name":"Std.PRange.LawfulUpwardEnumerableUpperBound.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L250-L250"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableUpperBound\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">LawfulUpwardEnumerableUpperBound</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">su</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"This typeclass ensures that if `b` is a transitive successor of `a` and `b` satisfies an upper bound\nof the given shape, then `a` also satisfies the upper bound.\n","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableUpperBound","kind":"class","line":246,"name":"Std.PRange.LawfulUpwardEnumerableUpperBound","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L246-L256"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableLowerBound.isSatisfied_iff\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">LawfulUpwardEnumerableLowerBound</span>.<span class=\"name\">isSatisfied_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sl</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝¹</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound\">SupportsLowerBound</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝²</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundedUpwardEnumerable\">BoundedUpwardEnumerable</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableLowerBound\">LawfulUpwardEnumerableLowerBound</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound.IsSatisfied\">SupportsLowerBound.IsSatisfied</a> <span class=\"fn\">l</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">init</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundedUpwardEnumerable.init?\">init?</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">init</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.LE\">UpwardEnumerable.LE</a> <span class=\"fn\">init</span> <span class=\"fn\">a</span></span></div></div>","info":{"doc":"An element `a` satisfies the lower bound `l` if and only if it is\n`init? l` or one of its transitive successors.\n","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableLowerBound.isSatisfied_iff","kind":"theorem","line":243,"name":"Std.PRange.LawfulUpwardEnumerableLowerBound.isSatisfied_iff","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L243-L243"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableLowerBound.mk\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">LawfulUpwardEnumerableLowerBound</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sl</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound\">SupportsLowerBound</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundedUpwardEnumerable\">BoundedUpwardEnumerable</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isSatisfied_iff</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>),\n    <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound.IsSatisfied\">SupportsLowerBound.IsSatisfied</a> <span class=\"fn\">l</span> <span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">init</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundedUpwardEnumerable.init?\">init?</a> <span class=\"fn\">l</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">init</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.LE\">UpwardEnumerable.LE</a> <span class=\"fn\">init</span> <span class=\"fn\">a</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableLowerBound\">LawfulUpwardEnumerableLowerBound</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableLowerBound.mk","kind":"ctor","line":237,"name":"Std.PRange.LawfulUpwardEnumerableLowerBound.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L237-L237"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableLowerBound\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">LawfulUpwardEnumerableLowerBound</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sl</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound\">SupportsLowerBound</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundedUpwardEnumerable\">BoundedUpwardEnumerable</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"This typeclass ensures that the lower bound predicate from `SupportsLowerBound sl α`\ncan be characterized in terms of `UpwardEnumerable α` and `BoundedUpwardEnumerable sl α`.\n","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableLowerBound","kind":"class","line":233,"name":"Std.PRange.LawfulUpwardEnumerableLowerBound","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L233-L244"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundedUpwardEnumerable.init?\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">BoundedUpwardEnumerable</span>.<span class=\"name\">init?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lowerBoundShape</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundedUpwardEnumerable\">BoundedUpwardEnumerable</a> <span class=\"fn\">lowerBoundShape</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <span class=\"fn\">lowerBoundShape</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundedUpwardEnumerable.init?","kind":"def","line":228,"name":"Std.PRange.BoundedUpwardEnumerable.init?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L228-L228"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundedUpwardEnumerable.mk\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">BoundedUpwardEnumerable</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lowerBoundShape</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init?</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <span class=\"fn\">lowerBoundShape</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundedUpwardEnumerable\">BoundedUpwardEnumerable</a> <span class=\"fn\">lowerBoundShape</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundedUpwardEnumerable.mk","kind":"ctor","line":227,"name":"Std.PRange.BoundedUpwardEnumerable.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L227-L227"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundedUpwardEnumerable\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">BoundedUpwardEnumerable</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lowerBoundShape</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>","info":{"doc":"This typeclass will usually be used together with `UpwardEnumerable α`. It provides the starting\npoint from which to enumerate all the values above the given lower bound.\n\nInstances are automatically generated in the following cases:\n\n* `lowerBoundShape` is `.closed`\n* `lowerBoundShape` is `.open` and there is an `UpwardEnumerable α` instance\n* `lowerBoundShape` is `.unbounded` and there is a `Least? α` instance\n","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundedUpwardEnumerable","kind":"class","line":217,"name":"Std.PRange.BoundedUpwardEnumerable","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L217-L228"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.HasFiniteRanges.finite\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">HasFiniteRanges</span>.<span class=\"name\">finite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">shape</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝¹</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">shape</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.HasFiniteRanges\">HasFiniteRanges</a> <span class=\"fn\">shape</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <span class=\"fn\">shape</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">n</span> <a href=\"./Init/Core.html#Exists\">:</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.succMany?\">succMany?</a> <span class=\"fn\">n</span> <span class=\"fn\">init</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.elim\">elim</a></span> <a href=\"./Init/Prelude.html#True\">True</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound.IsSatisfied\">SupportsUpperBound.IsSatisfied</a> <span class=\"fn\">u</span> <span class=\"fn\">x</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.HasFiniteRanges.finite","kind":"theorem","line":214,"name":"Std.PRange.HasFiniteRanges.finite","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L214-L214"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.HasFiniteRanges.mk\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">HasFiniteRanges</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">shape</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">shape</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">finite</span> :\n  <span class=\"fn\">∀ (<span class=\"fn\">init</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">u</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <span class=\"fn\">shape</span> <span class=\"fn\">α</span></span>),\n    <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">n</span> <a href=\"./Init/Core.html#Exists\">:</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.succMany?\">succMany?</a> <span class=\"fn\">n</span> <span class=\"fn\">init</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.elim\">elim</a></span> <a href=\"./Init/Prelude.html#True\">True</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound.IsSatisfied\">SupportsUpperBound.IsSatisfied</a> <span class=\"fn\">u</span> <span class=\"fn\">x</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.HasFiniteRanges\">HasFiniteRanges</a> <span class=\"fn\">shape</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.HasFiniteRanges.mk","kind":"ctor","line":213,"name":"Std.PRange.HasFiniteRanges.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L213-L213"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.HasFiniteRanges\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">HasFiniteRanges</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">shape</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">shape</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"This typeclass ensures that ranges with the given shape of upper bounds are always finite.\nThis is a prerequisite for many functions and instances, such as `PRange.toList` or `ForIn'`.\n","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.HasFiniteRanges","kind":"class","line":209,"name":"Std.PRange.HasFiniteRanges","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L209-L215"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.instDecidableMemMk\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">instDecidableMemMk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sl </span><span class=\"fn\">su</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound\">SupportsLowerBound</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange\">PRange</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">{</a> <span class=\"fn\">lower</span> := <span class=\"fn\">sl</span>, <span class=\"fn\">upper</span> := <span class=\"fn\">su</span> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">}</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">r</span>)</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.instDecidableMemMk","kind":"instance","line":205,"name":"Std.PRange.instDecidableMemMk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L205-L207"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.instMembershipMkOfSupportsLowerBoundOfSupportsUpperBound\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">instMembershipMkOfSupportsLowerBoundOfSupportsUpperBound</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sl </span><span class=\"fn\">su</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound\">SupportsLowerBound</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Membership\">Membership</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange\">PRange</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">{</a> <span class=\"fn\">lower</span> := <span class=\"fn\">sl</span>, <span class=\"fn\">upper</span> := <span class=\"fn\">su</span> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">}</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.instMembershipMkOfSupportsLowerBoundOfSupportsUpperBound","kind":"instance","line":201,"name":"Std.PRange.instMembershipMkOfSupportsLowerBoundOfSupportsUpperBound","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L201-L203"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.instDecidableRelBoundIsSatisfied_1\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">instDecidableRelBoundIsSatisfied_1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">shape</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">shape</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound.IsSatisfied\">SupportsUpperBound.IsSatisfied</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.instDecidableRelBoundIsSatisfied_1","kind":"instance","line":198,"name":"Std.PRange.instDecidableRelBoundIsSatisfied_1","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L198-L199"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.instDecidableRelBoundIsSatisfied\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">instDecidableRelBoundIsSatisfied</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">shape</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound\">SupportsLowerBound</a> <span class=\"fn\">shape</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound.IsSatisfied\">SupportsLowerBound.IsSatisfied</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.instDecidableRelBoundIsSatisfied","kind":"instance","line":195,"name":"Std.PRange.instDecidableRelBoundIsSatisfied","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L195-L196"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.instSupportsUpperBoundUnbounded\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">instSupportsUpperBoundUnbounded</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.unbounded\">BoundShape.unbounded</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.instSupportsUpperBoundUnbounded","kind":"instance","line":192,"name":"Std.PRange.instSupportsUpperBoundUnbounded","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L192-L193"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound.decidableSatisfiesUpperBound\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">SupportsUpperBound</span>.<span class=\"name\">decidableSatisfiesUpperBound</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">shape</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">shape</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound.IsSatisfied\">IsSatisfied</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound.decidableSatisfiesUpperBound","kind":"def","line":188,"name":"Std.PRange.SupportsUpperBound.decidableSatisfiesUpperBound","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L188-L188"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound.IsSatisfied\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">SupportsUpperBound</span>.<span class=\"name\">IsSatisfied</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">shape</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">shape</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <span class=\"fn\">shape</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound.IsSatisfied","kind":"def","line":187,"name":"Std.PRange.SupportsUpperBound.IsSatisfied","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L187-L187"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound.mk\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">SupportsUpperBound</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">shape</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">IsSatisfied</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <span class=\"fn\">shape</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decidableSatisfiesUpperBound</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <span class=\"fn\">IsSatisfied</span></span> := by infer_instance)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">shape</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound.mk","kind":"ctor","line":186,"name":"Std.PRange.SupportsUpperBound.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L186-L186"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">SupportsUpperBound</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">shape</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>","info":{"doc":"This typeclass provides decidable upper bound checks of the given shape.\n\nInstances are automatically provided in the following cases:\n\n* `shape` is `open` and there is an `LT α` instance\n* `shape` is `closed` and there is an `LE α` instance\n* `shape` is `.unbounded`\n","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound","kind":"class","line":177,"name":"Std.PRange.SupportsUpperBound","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L177-L188"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.instSupportsLowerBoundUnbounded\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">instSupportsLowerBoundUnbounded</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound\">SupportsLowerBound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.unbounded\">BoundShape.unbounded</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.instSupportsLowerBoundUnbounded","kind":"instance","line":174,"name":"Std.PRange.instSupportsLowerBoundUnbounded","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L174-L175"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound.decidableSatisfiesLowerBound\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">SupportsLowerBound</span>.<span class=\"name\">decidableSatisfiesLowerBound</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">shape</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound\">SupportsLowerBound</a> <span class=\"fn\">shape</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound.IsSatisfied\">IsSatisfied</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound.decidableSatisfiesLowerBound","kind":"def","line":170,"name":"Std.PRange.SupportsLowerBound.decidableSatisfiesLowerBound","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L170-L170"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound.IsSatisfied\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">SupportsLowerBound</span>.<span class=\"name\">IsSatisfied</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">shape</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound\">SupportsLowerBound</a> <span class=\"fn\">shape</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <span class=\"fn\">shape</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound.IsSatisfied","kind":"def","line":169,"name":"Std.PRange.SupportsLowerBound.IsSatisfied","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L169-L169"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound.mk\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">SupportsLowerBound</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">shape</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">IsSatisfied</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <span class=\"fn\">shape</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decidableSatisfiesLowerBound</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableRel\">DecidableRel</a> <span class=\"fn\">IsSatisfied</span></span> := by infer_instance)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound\">SupportsLowerBound</a> <span class=\"fn\">shape</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound.mk","kind":"ctor","line":168,"name":"Std.PRange.SupportsLowerBound.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L168-L168"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">SupportsLowerBound</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">shape</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>","info":{"doc":"This typeclass provides decidable lower bound checks of the given shape.\n\nInstances are automatically provided in the following cases:\n\n* `shape` is `open` and there is an `LT α` instance\n* `shape` is `closed` and there is an `LE α` instance\n* `shape` is `.unbounded`\n","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound","kind":"class","line":159,"name":"Std.PRange.SupportsLowerBound","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L159-L170"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.«term_&lt;...=_»\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">«term_&lt;</span>.<span class=\"name\"></span>.<span class=\"name\"></span>.<span class=\"name\">=_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>","info":{"doc":"`a<...=b` is the range of elements greater than `a` and less than or equal to `b`.\nSee also `Std.PRange`.\n\n\nConventions for notations in identifiers:\n\n * The recommended spelling of `a<...=b` in identifiers is `Roc`.","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.«term_<...=_»","kind":"def","line":118,"name":"Std.PRange.«term_<...=_»","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L118-L122"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.«term*...=_»\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">«term*</span>.<span class=\"name\"></span>.<span class=\"name\"></span>.<span class=\"name\">=_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"`*...=b` is the range of elements less than or equal to `b`. See also `Std.PRange`. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `*...=b` in identifiers is `Ric`.","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.«term*...=_»","kind":"def","line":116,"name":"Std.PRange.«term*...=_»","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L116-L117"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.«term_...=_»\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">«term_</span>.<span class=\"name\"></span>.<span class=\"name\"></span>.<span class=\"name\">=_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>","info":{"doc":"`a...=b` is the range of elements greater than or equal to `a` and less than or equal to `b`.\nSee also `Std.PRange`.\n\n\nConventions for notations in identifiers:\n\n * The recommended spelling of `a...=b` in identifiers is `Rcc`.","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.«term_...=_»","kind":"def","line":111,"name":"Std.PRange.«term_...=_»","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L111-L115"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.«term_&lt;..._»\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">«term_&lt;</span>.<span class=\"name\"></span>.<span class=\"name\"></span>.<span class=\"name\">_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>","info":{"doc":"`a<...b` is the range of elements greater than `a` and less than `b`.\nSee also `Std.PRange`.\n\n\nConventions for notations in identifiers:\n\n * The recommended spelling of `a<...b` in identifiers is `Roo`.","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.«term_<..._»","kind":"def","line":106,"name":"Std.PRange.«term_<..._»","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L106-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.«term_&lt;...&lt;_»\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">«term_&lt;</span>.<span class=\"name\"></span>.<span class=\"name\"></span>.<span class=\"name\">&lt;_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>","info":{"doc":"`a<...<b` is the range of elements greater than `a` and less than `b`.\nSee also `Std.PRange`.\n\n\nConventions for notations in identifiers:\n\n * The recommended spelling of `a<...b` in identifiers is `Roo`.\n\n * The recommended spelling of `a<...<b` in identifiers is `Roo`.","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.«term_<...<_»","kind":"def","line":101,"name":"Std.PRange.«term_<...<_»","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L101-L105"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.«term*..._»\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">«term*</span>.<span class=\"name\"></span>.<span class=\"name\"></span>.<span class=\"name\">_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"`*...b` is the range of elements less than `b`. See also `Std.PRange`. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `*...b` in identifiers is `Rio`.","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.«term*..._»","kind":"def","line":99,"name":"Std.PRange.«term*..._»","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L99-L100"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.«term*...&lt;_»\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">«term*</span>.<span class=\"name\"></span>.<span class=\"name\"></span>.<span class=\"name\">&lt;_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"`*...<b` is the range of elements less than `b`. See also `Std.PRange`. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `*...b` in identifiers is `Rio`.\n\n * The recommended spelling of `*...<b` in identifiers is `Rio`.","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.«term*...<_»","kind":"def","line":97,"name":"Std.PRange.«term*...<_»","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L97-L98"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.«term_..._»\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">«term_</span>.<span class=\"name\"></span>.<span class=\"name\"></span>.<span class=\"name\">_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>","info":{"doc":"`a...b` is the range of elements greater than or equal to `a` and less than `b`.\nSee also `Std.PRange`.\n\n\nConventions for notations in identifiers:\n\n * The recommended spelling of `a...b` in identifiers is `Rco`.","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.«term_..._»","kind":"def","line":92,"name":"Std.PRange.«term_..._»","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L92-L96"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.«term_...&lt;_»\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">«term_</span>.<span class=\"name\"></span>.<span class=\"name\"></span>.<span class=\"name\">&lt;_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>","info":{"doc":"`a...<b` is the range of elements greater than or equal to `a` and less than `b`.\nSee also `Std.PRange`.\n\n\nConventions for notations in identifiers:\n\n * The recommended spelling of `a...b` in identifiers is `Rco`.\n\n * The recommended spelling of `a...<b` in identifiers is `Rco`.","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.«term_...<_»","kind":"def","line":87,"name":"Std.PRange.«term_...<_»","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L87-L91"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.«term_&lt;...*»\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">«term_&lt;</span>.<span class=\"name\"></span>.<span class=\"name\"></span>.<span class=\"name\">*»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>","info":{"doc":"`a<...*` is the range of elements greater than `a`. See also `Std.PRange`. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `a<...*` in identifiers is `Roi`.","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.«term_<...*»","kind":"def","line":85,"name":"Std.PRange.«term_<...*»","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L85-L86"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.«term*...*»\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">«term*</span>.<span class=\"name\"></span>.<span class=\"name\"></span>.<span class=\"name\">*»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"`*...*` is the range that is unbounded in both directions. See also `Std.PRange`. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `*...*` in identifiers is `Rii`.","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.«term*...*»","kind":"def","line":83,"name":"Std.PRange.«term*...*»","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L83-L84"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.«term_...*»\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">«term_</span>.<span class=\"name\"></span>.<span class=\"name\"></span>.<span class=\"name\">*»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">Lean.TrailingParserDescr</a></div></div>","info":{"doc":"`a...*` is the range of elements greater than or equal to `a`. See also `Std.PRange`. \n\nConventions for notations in identifiers:\n\n * The recommended spelling of `a...*` in identifiers is `Rci`.","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.«term_...*»","kind":"def","line":81,"name":"Std.PRange.«term_...*»","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L81-L82"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.upper\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">upper</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">shape</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape\">RangeShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange\">PRange</a> <span class=\"fn\">shape</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <span class=\"fn\"><span class=\"fn\">shape</span>.<a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.upper\">upper</a></span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"The upper bound of the range. ","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.upper","kind":"def","line":71,"name":"Std.PRange.upper","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L71-L71"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.lower\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">lower</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">shape</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape\">RangeShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange\">PRange</a> <span class=\"fn\">shape</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <span class=\"fn\"><span class=\"fn\">shape</span>.<a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.lower\">lower</a></span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"The lower bound of the range. ","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.lower","kind":"def","line":69,"name":"Std.PRange.lower","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L69-L69"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.mk\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">shape</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape\">RangeShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lower</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <span class=\"fn\"><span class=\"fn\">shape</span>.<a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.lower\">lower</a></span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">upper</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <span class=\"fn\"><span class=\"fn\">shape</span>.<a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.upper\">upper</a></span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange\">PRange</a> <span class=\"fn\">shape</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Creates a new range. For more information about ranges, see `Std.PRange`.\n\nThe implicit `shape` parameter specifies the shape of the explicitly given\nlower and upper bounds.\n\n\nConventions for notations in identifiers:\n\n * The recommended spelling of `a...=b` in identifiers is `Rcc`.\n\n * The recommended spelling of `a...b` in identifiers is `Rco`.\n\n * The recommended spelling of `a...*` in identifiers is `Rci`.\n\n * The recommended spelling of `a<...=b` in identifiers is `Roc`.\n\n * The recommended spelling of `a<...b` in identifiers is `Roo`.\n\n * The recommended spelling of `a<...*` in identifiers is `Roi`.\n\n * The recommended spelling of `*...=b` in identifiers is `Ric`.\n\n * The recommended spelling of `*...b` in identifiers is `Rio`.\n\n * The recommended spelling of `*...*` in identifiers is `Rii`.\n\n * The recommended spelling of `PRange.mk .closed ub` in identifiers is `Rcx`.\n\n * The recommended spelling of `PRange.mk .open ub` in identifiers is `Rox`.\n\n * The recommended spelling of `PRange.mk .unbounded ub` in identifiers is `Rix`.\n\n * The recommended spelling of `PRange.mk lb .closed` in identifiers is `Rxc`.\n\n * The recommended spelling of `PRange.mk lb .open` in identifiers is `Rxo`.\n\n * The recommended spelling of `PRange.mk lb .unbounded` in identifiers is `Rxi`.\n\n * The recommended spelling of `PRange.mk lb ub` in identifiers is `Rxx`.","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.mk","kind":"ctor","line":67,"name":"Std.PRange.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L67-L67"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">shape</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape\">PRange.RangeShape</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>","info":{"doc":"A range of elements of some type `α`. It is characterized by its upper and lower bounds, which\nmay be inclusive, exclusive or absent.\n\n* `a...=b` is the range of elements greater than or equal to `a` and less than or equal to `b`.\n* `a...b` or `a...<b` is the range of elements greater than or equal to `a` and less than `b`.\n* `a...*` is the range of elements greater than or equal to `a`.\n* `a<...=b` is the range of elements greater than `a` and less than or equal to `b`.\n* `a<...b` or `a<...<b` is the range of elements greater than `a` and less than `b`.\n* `a<...*` is the range of elements greater than `a`.\n* `*...=b` is the range of elements less than or equal to `b`.\n* `*...b` or `*...<b` is the range of elements less than `b`.\n* `*...*` contains all elements of `α`.\n\nThe recommended spelling for these ranges can be found in the `PRange.mk` constructor's docstring.\n","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange","kind":"structure","line":51,"name":"Std.PRange","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L51-L71"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">Bound</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">shape</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>","info":{"doc":"An upper or lower bound in `α` of the given shape.\n","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound","kind":"def","line":43,"name":"Std.PRange.Bound","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L43-L49"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.upper\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">RangeShape</span>.<span class=\"name\">upper</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape\">RangeShape</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a></div></div>","info":{"doc":"The shape of the range's upper bound. ","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.upper","kind":"def","line":41,"name":"Std.PRange.RangeShape.upper","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.lower\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">RangeShape</span>.<span class=\"name\">lower</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape\">RangeShape</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a></div></div>","info":{"doc":"The shape of the range's lower bound. ","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.lower","kind":"def","line":39,"name":"Std.PRange.RangeShape.lower","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L39-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">RangeShape</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lower </span><span class=\"fn\">upper</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape\">RangeShape</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk","kind":"ctor","line":37,"name":"Std.PRange.RangeShape.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L37-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">RangeShape</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The shape of a range, consisting of the shape of its upper and lower bounds. ","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape","kind":"structure","line":36,"name":"Std.PRange.RangeShape","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L36-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.unbounded\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">BoundShape</span>.<span class=\"name\">unbounded</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a></div></div>","info":{"doc":"This bound shape signifies the absence of a range bound, so that the range is unbounded in at\nleast one direction.\n","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.unbounded","kind":"ctor","line":30,"name":"Std.PRange.BoundShape.unbounded","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L30-L34"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.closed\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">BoundShape</span>.<span class=\"name\">closed</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a></div></div>","info":{"doc":"A closed upper (or lower) bound of this shape requires elements of a range to be less than or equal\n(or greater than or equal) to the bound.\n","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.closed","kind":"ctor","line":25,"name":"Std.PRange.BoundShape.closed","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L25-L29"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.open\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">BoundShape</span>.<span class=\"name\">open</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a></div></div>","info":{"doc":"An open upper (or lower) bound of this shape requires elements of a range to be less than\n(or greater than) the bound, excluding the bound itself.\n","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.open","kind":"ctor","line":20,"name":"Std.PRange.BoundShape.open","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L20-L24"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">BoundShape</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The shape of a range's upper or lower bound: `open`, `closed` or `unbounded`.\n","docLink":"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape","kind":"inductive","line":16,"name":"Std.PRange.BoundShape","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/PRange.lean#L16-L34"}}],"imports":["Init.Core","Init.Data.Range.Polymorphic.UpwardEnumerable"],"instances":[{"className":"Std.PRange.SupportsLowerBound","name":"Std.PRange.instSupportsLowerBoundUnbounded","typeNames":["Std.PRange.BoundShape.unbounded"]},{"className":"Std.PRange.SupportsUpperBound","name":"Std.PRange.instSupportsUpperBoundUnbounded","typeNames":["Std.PRange.BoundShape.unbounded"]},{"className":"Decidable","name":"Std.PRange.instDecidableRelBoundIsSatisfied","typeNames":["Std.PRange.SupportsLowerBound.IsSatisfied"]},{"className":"Decidable","name":"Std.PRange.instDecidableRelBoundIsSatisfied_1","typeNames":["Std.PRange.SupportsUpperBound.IsSatisfied"]},{"className":"Membership","name":"Std.PRange.instMembershipMkOfSupportsLowerBoundOfSupportsUpperBound","typeNames":["Std.PRange"]},{"className":"Decidable","name":"Std.PRange.instDecidableMemMk","typeNames":["Membership.mem"]},{"className":"Std.PRange.SupportsLowerBound","name":"Std.PRange.instSupportsLowerBoundOpenOfDecidableLT","typeNames":["Std.PRange.BoundShape.open"]},{"className":"Std.PRange.SupportsUpperBound","name":"Std.PRange.instSupportsUpperBoundOpenOfDecidableLT","typeNames":["Std.PRange.BoundShape.open"]},{"className":"Std.PRange.SupportsLowerBound","name":"Std.PRange.instSupportsLowerBoundClosedOfDecidableLE","typeNames":["Std.PRange.BoundShape.closed"]},{"className":"Std.PRange.SupportsUpperBound","name":"Std.PRange.instSupportsUpperBoundClosedOfDecidableLE","typeNames":["Std.PRange.BoundShape.closed"]},{"className":"Std.PRange.BoundedUpwardEnumerable","name":"Std.PRange.instBoundedUpwardEnumerableUnboundedOfLeast?","typeNames":["Std.PRange.BoundShape.unbounded"]},{"className":"Std.PRange.BoundedUpwardEnumerable","name":"Std.PRange.instBoundedUpwardEnumerableOpenOfUpwardEnumerable","typeNames":["Std.PRange.BoundShape.open"]},{"className":"Std.PRange.BoundedUpwardEnumerable","name":"Std.PRange.instBoundedUpwardEnumerableClosed","typeNames":["Std.PRange.BoundShape.closed"]},{"className":"Std.PRange.LawfulClosedUpperBound","name":"Std.PRange.instLawfulClosedUpperBoundOfLawfulUpwardEnumerableLE","typeNames":[]},{"className":"Std.PRange.LawfulOpenUpperBound","name":"Std.PRange.instLawfulOpenUpperBoundOfLawfulUpwardEnumerableLT","typeNames":[]},{"className":"Std.PRange.LawfulUnboundedUpperBound","name":"Std.PRange.instLawfulUnboundedUpperBoundOfUpwardEnumerable","typeNames":[]}],"name":"Init.Data.Range.Polymorphic.PRange"}