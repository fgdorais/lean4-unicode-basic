{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.Std.PRange.eq_succMany?_of_toArray_Rcx_eq_append_append\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">eq_succMany?_of_toArray_Rcx_eq_append_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">su</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerable\">LawfulUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerableLE\">LawfulUpwardEnumerableLE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.HasFiniteRanges\">HasFiniteRanges</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableUpperBound\">LawfulUpwardEnumerableUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange\">PRange</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">{</a> <span class=\"fn\">lower</span> := <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.closed\">BoundShape.closed</a>, <span class=\"fn\">upper</span> := <span class=\"fn\">su</span> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">}</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">pref </span><span class=\"fn\">suff</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cur</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Polymorphic/Iterators.html#Std.PRange.toArray\">toArray</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">pref</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <a href=\"./Init/Prelude.html#List.toArray\">#[</a><span class=\"fn\">cur</span><a href=\"./Init/Prelude.html#List.toArray\">]</a> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">suff</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">cur</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.succMany?\">succMany?</a> <span class=\"fn\"><span class=\"fn\">pref</span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.lower\">lower</a></span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.get\">get</a></span> <span class=\"fn\">⋯</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.Std.PRange.eq_succMany?_of_toArray_Rcx_eq_append_append","kind":"theorem","line":659,"name":"Std.PRange.Std.PRange.eq_succMany?_of_toArray_Rcx_eq_append_append","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/Lemmas.lean#L659-L667"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.Std.PRange.eq_succMany?_of_toList_Rcx_eq_append_cons\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">eq_succMany?_of_toList_Rcx_eq_append_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">su</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerable\">LawfulUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerableLE\">LawfulUpwardEnumerableLE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.HasFiniteRanges\">HasFiniteRanges</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableUpperBound\">LawfulUpwardEnumerableUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange\">PRange</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">{</a> <span class=\"fn\">lower</span> := <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.closed\">BoundShape.closed</a>, <span class=\"fn\">upper</span> := <span class=\"fn\">su</span> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">}</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">pref </span><span class=\"fn\">suff</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">cur</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Polymorphic/Iterators.html#Std.PRange.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">pref</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">cur</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">suff</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">cur</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.succMany?\">succMany?</a> <span class=\"fn\"><span class=\"fn\">pref</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.lower\">lower</a></span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.get\">get</a></span> <span class=\"fn\">⋯</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.Std.PRange.eq_succMany?_of_toList_Rcx_eq_append_cons","kind":"theorem","line":649,"name":"Std.PRange.Std.PRange.eq_succMany?_of_toList_Rcx_eq_append_cons","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/Lemmas.lean#L649-L657"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.Std.PRange.getElem_toArray_Rcx_eq\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">getElem_toArray_Rcx_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">su</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerable\">LawfulUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableUpperBound\">LawfulUpwardEnumerableUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerableLE\">LawfulUpwardEnumerableLE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.HasFiniteRanges\">HasFiniteRanges</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange\">PRange</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">{</a> <span class=\"fn\">lower</span> := <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.closed\">BoundShape.closed</a>, <span class=\"fn\">upper</span> := <span class=\"fn\">su</span> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">}</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Polymorphic/Iterators.html#Std.PRange.toArray\">toArray</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Polymorphic/Iterators.html#Std.PRange.toArray\">toArray</a></span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.succMany?\">succMany?</a> <span class=\"fn\">i</span> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.lower\">lower</a></span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.get\">get</a></span> <span class=\"fn\">⋯</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.Std.PRange.getElem_toArray_Rcx_eq","kind":"theorem","line":641,"name":"Std.PRange.Std.PRange.getElem_toArray_Rcx_eq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/Lemmas.lean#L641-L647"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.Std.PRange.getElem_toList_Rcx_eq\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">getElem_toList_Rcx_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">su</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerable\">LawfulUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableUpperBound\">LawfulUpwardEnumerableUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerableLE\">LawfulUpwardEnumerableLE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.HasFiniteRanges\">HasFiniteRanges</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange\">PRange</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">{</a> <span class=\"fn\">lower</span> := <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.closed\">BoundShape.closed</a>, <span class=\"fn\">upper</span> := <span class=\"fn\">su</span> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">}</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Polymorphic/Iterators.html#Std.PRange.toList\">toList</a></span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Polymorphic/Iterators.html#Std.PRange.toList\">toList</a></span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.succMany?\">succMany?</a> <span class=\"fn\">i</span> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.lower\">lower</a></span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.get\">get</a></span> <span class=\"fn\">⋯</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.Std.PRange.getElem_toList_Rcx_eq","kind":"theorem","line":633,"name":"Std.PRange.Std.PRange.getElem_toList_Rcx_eq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/Lemmas.lean#L633-L639"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.Std.PRange.isSome_succMany?_of_lt_size_toArray_Rcx\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">isSome_succMany?_of_lt_size_toArray_Rcx</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">su</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerable\">LawfulUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableUpperBound\">LawfulUpwardEnumerableUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerableLE\">LawfulUpwardEnumerableLE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.HasFiniteRanges\">HasFiniteRanges</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange\">PRange</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">{</a> <span class=\"fn\">lower</span> := <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.closed\">BoundShape.closed</a>, <span class=\"fn\">upper</span> := <span class=\"fn\">su</span> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">}</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Polymorphic/Iterators.html#Std.PRange.toArray\">toArray</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.succMany?\">succMany?</a> <span class=\"fn\">i</span> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.lower\">lower</a></span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.Std.PRange.isSome_succMany?_of_lt_size_toArray_Rcx","kind":"theorem","line":624,"name":"Std.PRange.Std.PRange.isSome_succMany?_of_lt_size_toArray_Rcx","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/Lemmas.lean#L624-L631"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.Std.PRange.isSome_succMany?_of_lt_length_toList_Rcx\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">isSome_succMany?_of_lt_length_toList_Rcx</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">su</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerable\">LawfulUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableUpperBound\">LawfulUpwardEnumerableUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerableLE\">LawfulUpwardEnumerableLE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.HasFiniteRanges\">HasFiniteRanges</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange\">PRange</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">{</a> <span class=\"fn\">lower</span> := <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.closed\">BoundShape.closed</a>, <span class=\"fn\">upper</span> := <span class=\"fn\">su</span> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">}</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Polymorphic/Iterators.html#Std.PRange.toList\">toList</a></span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.succMany?\">succMany?</a> <span class=\"fn\">i</span> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.lower\">lower</a></span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.Std.PRange.isSome_succMany?_of_lt_length_toList_Rcx","kind":"theorem","line":615,"name":"Std.PRange.Std.PRange.isSome_succMany?_of_lt_length_toList_Rcx","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/Lemmas.lean#L615-L622"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.Std.PRange.getElem?_toArray_Rcx_eq\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">getElem?_toArray_Rcx_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">su</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerable\">LawfulUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableUpperBound\">LawfulUpwardEnumerableUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerableLE\">LawfulUpwardEnumerableLE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.HasFiniteRanges\">HasFiniteRanges</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange\">PRange</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">{</a> <span class=\"fn\">lower</span> := <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.closed\">BoundShape.closed</a>, <span class=\"fn\">upper</span> := <span class=\"fn\">su</span> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">}</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Polymorphic/Iterators.html#Std.PRange.toArray\">toArray</a></span><a href=\"./Init/GetElem.html#GetElem?.getElem?\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem?.getElem?\">]</a><a href=\"./Init/GetElem.html#GetElem?.getElem?\">?</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Option/Basic.html#Option.filter\">Option.filter</a> <span class=\"fn\">(fun (<span class=\"fn\">b</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> <span class=\"fn\">(<a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound.IsSatisfied\">SupportsUpperBound.IsSatisfied</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.upper\">upper</a></span> <span class=\"fn\">b</span>)</span></span>)</span> <span class=\"fn\">(<a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.succMany?\">succMany?</a> <span class=\"fn\">i</span> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.lower\">lower</a></span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.Std.PRange.getElem?_toArray_Rcx_eq","kind":"theorem","line":608,"name":"Std.PRange.Std.PRange.getElem?_toArray_Rcx_eq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/Lemmas.lean#L608-L613"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.Std.PRange.getElem?_toList_Rcx_eq\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">getElem?_toList_Rcx_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">su</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerable\">LawfulUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableUpperBound\">LawfulUpwardEnumerableUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerableLE\">LawfulUpwardEnumerableLE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.HasFiniteRanges\">HasFiniteRanges</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange\">PRange</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">{</a> <span class=\"fn\">lower</span> := <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.closed\">BoundShape.closed</a>, <span class=\"fn\">upper</span> := <span class=\"fn\">su</span> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">}</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Polymorphic/Iterators.html#Std.PRange.toList\">toList</a></span><a href=\"./Init/GetElem.html#GetElem?.getElem?\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem?.getElem?\">]</a><a href=\"./Init/GetElem.html#GetElem?.getElem?\">?</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Option/Basic.html#Option.filter\">Option.filter</a> <span class=\"fn\">(fun (<span class=\"fn\">b</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> <span class=\"fn\">(<a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound.IsSatisfied\">SupportsUpperBound.IsSatisfied</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.upper\">upper</a></span> <span class=\"fn\">b</span>)</span></span>)</span> <span class=\"fn\">(<a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.succMany?\">succMany?</a> <span class=\"fn\">i</span> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.lower\">lower</a></span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.Std.PRange.getElem?_toList_Rcx_eq","kind":"theorem","line":579,"name":"Std.PRange.Std.PRange.getElem?_toList_Rcx_eq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/Lemmas.lean#L579-L606"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.isEmpty_iff_forall_not_mem\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">isEmpty_iff_forall_not_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sl </span><span class=\"fn\">su</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerable\">LawfulUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundedUpwardEnumerable\">BoundedUpwardEnumerable</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound\">SupportsLowerBound</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableLowerBound\">LawfulUpwardEnumerableLowerBound</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableUpperBound\">LawfulUpwardEnumerableUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange\">PRange</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">{</a> <span class=\"fn\">lower</span> := <span class=\"fn\">sl</span>, <span class=\"fn\">upper</span> := <span class=\"fn\">su</span> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">}</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Polymorphic/Basic.html#Std.PRange.isEmpty\">isEmpty</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>), <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">r</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.isEmpty_iff_forall_not_mem","kind":"theorem","line":555,"name":"Std.PRange.isEmpty_iff_forall_not_mem","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/Lemmas.lean#L555-L577"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.size_toArray\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">size_toArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sl </span><span class=\"fn\">su</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/Basic.html#Std.PRange.RangeSize\">RangeSize</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerable\">LawfulUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundedUpwardEnumerable\">BoundedUpwardEnumerable</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.HasFiniteRanges\">HasFiniteRanges</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/Basic.html#Std.PRange.LawfulRangeSize\">LawfulRangeSize</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange\">PRange</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">{</a> <span class=\"fn\">lower</span> := <span class=\"fn\">sl</span>, <span class=\"fn\">upper</span> := <span class=\"fn\">su</span> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">}</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Polymorphic/Iterators.html#Std.PRange.toArray\">toArray</a></span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Polymorphic/Iterators.html#Std.PRange.size\">size</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.size_toArray","kind":"theorem","line":548,"name":"Std.PRange.size_toArray","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/Lemmas.lean#L548-L553"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.length_toList\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">length_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sl </span><span class=\"fn\">su</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/Basic.html#Std.PRange.RangeSize\">RangeSize</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerable\">LawfulUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundedUpwardEnumerable\">BoundedUpwardEnumerable</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.HasFiniteRanges\">HasFiniteRanges</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/Basic.html#Std.PRange.LawfulRangeSize\">LawfulRangeSize</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange\">PRange</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">{</a> <span class=\"fn\">lower</span> := <span class=\"fn\">sl</span>, <span class=\"fn\">upper</span> := <span class=\"fn\">su</span> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">}</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Polymorphic/Iterators.html#Std.PRange.toList\">toList</a></span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Polymorphic/Iterators.html#Std.PRange.size\">size</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.length_toList","kind":"theorem","line":541,"name":"Std.PRange.length_toList","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/Lemmas.lean#L541-L546"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.instLawfulIteratorSizeRangeIteratorOfLawfulRangeSize\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">instLawfulIteratorSizeRangeIteratorOfLawfulRangeSize</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">su</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/Basic.html#Std.PRange.RangeSize\">RangeSize</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerable\">LawfulUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.HasFiniteRanges\">HasFiniteRanges</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/Basic.html#Std.PRange.LawfulRangeSize\">LawfulRangeSize</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Loop.html#Std.Iterators.LawfulIteratorSize\">Iterators.LawfulIteratorSize</a> <span class=\"fn\">(<a href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator\">RangeIterator</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.instLawfulIteratorSizeRangeIteratorOfLawfulRangeSize","kind":"instance","line":503,"name":"Std.PRange.instLawfulIteratorSizeRangeIteratorOfLawfulRangeSize","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/Lemmas.lean#L503-L539"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.forIn'_eq_match\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">forIn'_eq_match</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sl </span><span class=\"fn\">su</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound\">SupportsLowerBound</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.HasFiniteRanges\">HasFiniteRanges</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundedUpwardEnumerable\">BoundedUpwardEnumerable</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerable\">LawfulUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableLowerBound\">LawfulUpwardEnumerableLowerBound</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableUpperBound\">LawfulUpwardEnumerableUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound\">SupportsLowerBound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.open\">BoundShape.open</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableLowerBound\">LawfulUpwardEnumerableLowerBound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.open\">BoundShape.open</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange\">PRange</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">{</a> <span class=\"fn\">lower</span> := <span class=\"fn\">sl</span>, <span class=\"fn\">upper</span> := <span class=\"fn\">su</span> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">}</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">γ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">r</span> → <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">γ</span>)</span></span></span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#ForIn'.forIn'\">forIn'</a> <span class=\"fn\">r</span> <span class=\"fn\">init</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match hi : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundedUpwardEnumerable.init?\">init?</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.lower\">lower</a></span></span> with\n  | <a href=\"./Init/Prelude.html#Option.none\">none</a> =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">init</span></span>\n  | <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">a</span></span> =&gt;\n    <span class=\"fn\">if hu : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound.IsSatisfied\">SupportsUpperBound.IsSatisfied</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.upper\">upper</a></span> <span class=\"fn\">a</span></span> then <span class=\"fn\">do\n      let <span class=\"fn\">__do_lift</span> ← <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">⋯</span> <span class=\"fn\">init</span></span>\n      <span class=\"fn\">match <span class=\"fn\">__do_lift</span> with\n        | <span class=\"fn\"><a href=\"./Init/Core.html#ForInStep.yield\">ForInStep.yield</a> <span class=\"fn\">c</span></span> =&gt;\n          <span class=\"fn\"><a href=\"./Init/Core.html#ForIn'.forIn'\">forIn'</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.mk\">{</a> <span class=\"fn\">lower</span> := <span class=\"fn\">a</span>, <span class=\"fn\">upper</span> := <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.upper\">upper</a></span> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.mk\">}</a> <span class=\"fn\">c</span>\n            <span class=\"fn\">fun (<span class=\"fn\">a_1</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">ha</span> : <span class=\"fn\">a_1</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.mk\">{</a> <span class=\"fn\">lower</span> := <span class=\"fn\">a</span>, <span class=\"fn\">upper</span> := <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.upper\">upper</a></span> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.mk\">}</a>) (<span class=\"fn\">acc</span> : <span class=\"fn\">γ</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a_1</span> <span class=\"fn\">⋯</span> <span class=\"fn\">acc</span></span></span></span>\n        | <span class=\"fn\"><a href=\"./Init/Core.html#ForInStep.done\">ForInStep.done</a> <span class=\"fn\">c</span></span> =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">c</span></span></span></span>\n    else <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">init</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.forIn'_eq_match","kind":"theorem","line":470,"name":"Std.PRange.forIn'_eq_match","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/Lemmas.lean#L470-L501"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.SupportsLowerBound.isSatisfied_init?\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">SupportsLowerBound</span>.<span class=\"name\">isSatisfied_init?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sl</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound\">SupportsLowerBound</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundedUpwardEnumerable\">BoundedUpwardEnumerable</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerable\">LawfulUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableLowerBound\">LawfulUpwardEnumerableLowerBound</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">bound</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundedUpwardEnumerable.init?\">init?</a> <span class=\"fn\">bound</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound.IsSatisfied\">IsSatisfied</a> <span class=\"fn\">bound</span> <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.SupportsLowerBound.isSatisfied_init?","kind":"theorem","line":462,"name":"Std.PRange.SupportsLowerBound.isSatisfied_init?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/Lemmas.lean#L462-L468"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.mem_of_mem_open\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">mem_of_mem_open</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">su </span><span class=\"fn\">sl</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound\">SupportsLowerBound</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.HasFiniteRanges\">HasFiniteRanges</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundedUpwardEnumerable\">BoundedUpwardEnumerable</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerable\">LawfulUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableLowerBound\">LawfulUpwardEnumerableLowerBound</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableUpperBound\">LawfulUpwardEnumerableUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound\">SupportsLowerBound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.open\">BoundShape.open</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableLowerBound\">LawfulUpwardEnumerableLowerBound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.open\">BoundShape.open</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange\">PRange</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">{</a> <span class=\"fn\">lower</span> := <span class=\"fn\">sl</span>, <span class=\"fn\">upper</span> := <span class=\"fn\">su</span> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">}</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hrb</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound.IsSatisfied\">SupportsLowerBound.IsSatisfied</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.lower\">lower</a></span> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hmem</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.mk\">{</a> <span class=\"fn\">lower</span> := <span class=\"fn\">b</span>, <span class=\"fn\">upper</span> := <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.upper\">upper</a></span> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.mk\">}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">r</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.mem_of_mem_open","kind":"theorem","line":445,"name":"Std.PRange.mem_of_mem_open","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/Lemmas.lean#L445-L460"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.forIn'_toArray_eq_forIn'\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">forIn'_toArray_eq_forIn'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">su </span><span class=\"fn\">sl</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound\">SupportsLowerBound</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.HasFiniteRanges\">HasFiniteRanges</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundedUpwardEnumerable\">BoundedUpwardEnumerable</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerable\">LawfulUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableLowerBound\">LawfulUpwardEnumerableLowerBound</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableUpperBound\">LawfulUpwardEnumerableUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange\">PRange</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">{</a> <span class=\"fn\">lower</span> := <span class=\"fn\">sl</span>, <span class=\"fn\">upper</span> := <span class=\"fn\">su</span> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">}</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">γ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Polymorphic/Iterators.html#Std.PRange.toArray\">toArray</a></span> → <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">γ</span>)</span></span></span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#ForIn'.forIn'\">forIn'</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Polymorphic/Iterators.html#Std.PRange.toArray\">toArray</a></span> <span class=\"fn\">init</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Core.html#ForIn'.forIn'\">forIn'</a> <span class=\"fn\">r</span> <span class=\"fn\">init</span> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">r</span>) (<span class=\"fn\">acc</span> : <span class=\"fn\">γ</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">⋯</span> <span class=\"fn\">acc</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.forIn'_toArray_eq_forIn'","kind":"theorem","line":434,"name":"Std.PRange.forIn'_toArray_eq_forIn'","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/Lemmas.lean#L434-L443"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.forIn'_toList_eq_forIn'\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">forIn'_toList_eq_forIn'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">su </span><span class=\"fn\">sl</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound\">SupportsLowerBound</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.HasFiniteRanges\">HasFiniteRanges</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundedUpwardEnumerable\">BoundedUpwardEnumerable</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerable\">LawfulUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableLowerBound\">LawfulUpwardEnumerableLowerBound</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableUpperBound\">LawfulUpwardEnumerableUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange\">PRange</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">{</a> <span class=\"fn\">lower</span> := <span class=\"fn\">sl</span>, <span class=\"fn\">upper</span> := <span class=\"fn\">su</span> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">}</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">γ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Polymorphic/Iterators.html#Std.PRange.toList\">toList</a></span> → <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">γ</span>)</span></span></span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#ForIn'.forIn'\">forIn'</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Polymorphic/Iterators.html#Std.PRange.toList\">toList</a></span> <span class=\"fn\">init</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Core.html#ForIn'.forIn'\">forIn'</a> <span class=\"fn\">r</span> <span class=\"fn\">init</span> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">r</span>) (<span class=\"fn\">acc</span> : <span class=\"fn\">γ</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">⋯</span> <span class=\"fn\">acc</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.forIn'_toList_eq_forIn'","kind":"theorem","line":423,"name":"Std.PRange.forIn'_toList_eq_forIn'","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/Lemmas.lean#L423-L432"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.forIn'_eq_forIn'_toArray\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">forIn'_eq_forIn'_toArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">su </span><span class=\"fn\">sl</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound\">SupportsLowerBound</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.HasFiniteRanges\">HasFiniteRanges</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundedUpwardEnumerable\">BoundedUpwardEnumerable</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerable\">LawfulUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableLowerBound\">LawfulUpwardEnumerableLowerBound</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableUpperBound\">LawfulUpwardEnumerableUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange\">PRange</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">{</a> <span class=\"fn\">lower</span> := <span class=\"fn\">sl</span>, <span class=\"fn\">upper</span> := <span class=\"fn\">su</span> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">}</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">γ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">r</span> → <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">γ</span>)</span></span></span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#ForIn'.forIn'\">forIn'</a> <span class=\"fn\">r</span> <span class=\"fn\">init</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Core.html#ForIn'.forIn'\">forIn'</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Polymorphic/Iterators.html#Std.PRange.toArray\">toArray</a></span> <span class=\"fn\">init</span> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Polymorphic/Iterators.html#Std.PRange.toArray\">toArray</a></span>) (<span class=\"fn\">acc</span> : <span class=\"fn\">γ</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">⋯</span> <span class=\"fn\">acc</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.forIn'_eq_forIn'_toArray","kind":"theorem","line":411,"name":"Std.PRange.forIn'_eq_forIn'_toArray","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/Lemmas.lean#L411-L421"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.forIn'_eq_forIn'_toList\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">forIn'_eq_forIn'_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">su </span><span class=\"fn\">sl</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound\">SupportsLowerBound</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.HasFiniteRanges\">HasFiniteRanges</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundedUpwardEnumerable\">BoundedUpwardEnumerable</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerable\">LawfulUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableLowerBound\">LawfulUpwardEnumerableLowerBound</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableUpperBound\">LawfulUpwardEnumerableUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange\">PRange</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">{</a> <span class=\"fn\">lower</span> := <span class=\"fn\">sl</span>, <span class=\"fn\">upper</span> := <span class=\"fn\">su</span> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">}</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">init</span> : <span class=\"fn\">γ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">r</span> → <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">γ</span>)</span></span></span></span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#ForIn'.forIn'\">forIn'</a> <span class=\"fn\">r</span> <span class=\"fn\">init</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Core.html#ForIn'.forIn'\">forIn'</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Polymorphic/Iterators.html#Std.PRange.toList\">toList</a></span> <span class=\"fn\">init</span> <span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Polymorphic/Iterators.html#Std.PRange.toList\">toList</a></span>) (<span class=\"fn\">acc</span> : <span class=\"fn\">γ</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span> <span class=\"fn\">⋯</span> <span class=\"fn\">acc</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.forIn'_eq_forIn'_toList","kind":"theorem","line":399,"name":"Std.PRange.forIn'_eq_forIn'_toList","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/Lemmas.lean#L399-L409"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.toArray_Rco_succ_succ_eq_map\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">toArray_Rco_succ_succ_eq_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound\">SupportsLowerBound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.closed\">BoundShape.closed</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LinearlyUpwardEnumerable\">LinearlyUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.InfinitelyUpwardEnumerable\">InfinitelyUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.open\">BoundShape.open</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.HasFiniteRanges\">HasFiniteRanges</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.open\">BoundShape.open</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerable\">LawfulUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulOpenUpperBound\">LawfulOpenUpperBound</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableLowerBound\">LawfulUpwardEnumerableLowerBound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.closed\">BoundShape.closed</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableUpperBound\">LawfulUpwardEnumerableUpperBound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.open\">BoundShape.open</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lower</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.closed\">BoundShape.closed</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">upper</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.open\">BoundShape.open</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">(<a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.succ\">succ</a> <span class=\"fn\">lower</span>)</span>...<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.succ\">succ</a> <span class=\"fn\">upper</span></span>)</span>.<a href=\"./Init/Data/Range/Polymorphic/Iterators.html#Std.PRange.toArray\">toArray</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Array/Basic.html#Array.map\">Array.map</a> <a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.succ\">succ</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">lower</span>...<span class=\"fn\">upper</span>)</span>.<a href=\"./Init/Data/Range/Polymorphic/Iterators.html#Std.PRange.toArray\">toArray</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.toArray_Rco_succ_succ_eq_map","kind":"theorem","line":377,"name":"Std.PRange.toArray_Rco_succ_succ_eq_map","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/Lemmas.lean#L377-L386"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.ClosedOpen.toList_succ_succ_eq_map\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">ClosedOpen</span>.<span class=\"name\">toList_succ_succ_eq_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound\">SupportsLowerBound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.closed\">BoundShape.closed</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LinearlyUpwardEnumerable\">LinearlyUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.InfinitelyUpwardEnumerable\">InfinitelyUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.open\">BoundShape.open</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.HasFiniteRanges\">HasFiniteRanges</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.open\">BoundShape.open</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerable\">LawfulUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulOpenUpperBound\">LawfulOpenUpperBound</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableLowerBound\">LawfulUpwardEnumerableLowerBound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.closed\">BoundShape.closed</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableUpperBound\">LawfulUpwardEnumerableUpperBound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.open\">BoundShape.open</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lower</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.closed\">BoundShape.closed</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">upper</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.open\">BoundShape.open</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">(<a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.succ\">succ</a> <span class=\"fn\">lower</span>)</span>...<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.succ\">succ</a> <span class=\"fn\">upper</span></span>)</span>.<a href=\"./Init/Data/Range/Polymorphic/Iterators.html#Std.PRange.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.succ\">succ</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">lower</span>...<span class=\"fn\">upper</span>)</span>.<a href=\"./Init/Data/Range/Polymorphic/Iterators.html#Std.PRange.toList\">toList</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.ClosedOpen.toList_succ_succ_eq_map","kind":"theorem","line":367,"name":"Std.PRange.ClosedOpen.toList_succ_succ_eq_map","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/Lemmas.lean#L367-L375"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.toList_Rco_succ_succ_eq_map\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">toList_Rco_succ_succ_eq_map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound\">SupportsLowerBound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.closed\">BoundShape.closed</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LinearlyUpwardEnumerable\">LinearlyUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.InfinitelyUpwardEnumerable\">InfinitelyUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.open\">BoundShape.open</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.HasFiniteRanges\">HasFiniteRanges</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.open\">BoundShape.open</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerable\">LawfulUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulOpenUpperBound\">LawfulOpenUpperBound</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableLowerBound\">LawfulUpwardEnumerableLowerBound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.closed\">BoundShape.closed</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableUpperBound\">LawfulUpwardEnumerableUpperBound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.open\">BoundShape.open</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lower</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.closed\">BoundShape.closed</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">upper</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.open\">BoundShape.open</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">(<a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.succ\">succ</a> <span class=\"fn\">lower</span>)</span>...<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.succ\">succ</a> <span class=\"fn\">upper</span></span>)</span>.<a href=\"./Init/Data/Range/Polymorphic/Iterators.html#Std.PRange.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.map\">List.map</a> <a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.succ\">succ</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">lower</span>...<span class=\"fn\">upper</span>)</span>.<a href=\"./Init/Data/Range/Polymorphic/Iterators.html#Std.PRange.toList\">toList</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.toList_Rco_succ_succ_eq_map","kind":"theorem","line":344,"name":"Std.PRange.toList_Rco_succ_succ_eq_map","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/Lemmas.lean#L344-L365"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.ClosedOpen.mem_succ_iff\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">ClosedOpen</span>.<span class=\"name\">mem_succ_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LinearlyUpwardEnumerable\">LinearlyUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.InfinitelyUpwardEnumerable\">InfinitelyUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.open\">BoundShape.open</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound\">SupportsLowerBound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.closed\">BoundShape.closed</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableLowerBound\">LawfulUpwardEnumerableLowerBound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.closed\">BoundShape.closed</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.HasFiniteRanges\">HasFiniteRanges</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.open\">BoundShape.open</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerable\">LawfulUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulOpenUpperBound\">LawfulOpenUpperBound</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lower</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.closed\">BoundShape.closed</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">upper</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.open\">BoundShape.open</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.succ\">succ</a> <span class=\"fn\">lower</span>)</span>...<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.succ\">succ</a> <span class=\"fn\">upper</span></span></span>) <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">a'</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.succ\">succ</a> <span class=\"fn\">a'</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">a'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">lower</span>...<span class=\"fn\">upper</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.ClosedOpen.mem_succ_iff","kind":"theorem","line":283,"name":"Std.PRange.ClosedOpen.mem_succ_iff","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/Lemmas.lean#L283-L290"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.mem_Rco_succ_succ_iff\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">mem_Rco_succ_succ_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LinearlyUpwardEnumerable\">LinearlyUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.InfinitelyUpwardEnumerable\">InfinitelyUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.open\">BoundShape.open</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound\">SupportsLowerBound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.closed\">BoundShape.closed</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableLowerBound\">LawfulUpwardEnumerableLowerBound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.closed\">BoundShape.closed</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.HasFiniteRanges\">HasFiniteRanges</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.open\">BoundShape.open</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerable\">LawfulUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulOpenUpperBound\">LawfulOpenUpperBound</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lower</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.closed\">BoundShape.closed</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">upper</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.open\">BoundShape.open</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.succ\">succ</a> <span class=\"fn\">lower</span>)</span>...<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.succ\">succ</a> <span class=\"fn\">upper</span></span></span>) <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">a'</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.succ\">succ</a> <span class=\"fn\">a'</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">a'</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">lower</span>...<span class=\"fn\">upper</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.mem_Rco_succ_succ_iff","kind":"theorem","line":256,"name":"Std.PRange.mem_Rco_succ_succ_iff","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/Lemmas.lean#L256-L281"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.pairwise_toList_le\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">pairwise_toList_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sl </span><span class=\"fn\">su</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LE\">LE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound\">SupportsLowerBound</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.HasFiniteRanges\">HasFiniteRanges</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundedUpwardEnumerable\">BoundedUpwardEnumerable</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerable\">LawfulUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerableLE\">LawfulUpwardEnumerableLE</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableLowerBound\">LawfulUpwardEnumerableLowerBound</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableUpperBound\">LawfulUpwardEnumerableUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange\">PRange</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">{</a> <span class=\"fn\">lower</span> := <span class=\"fn\">sl</span>, <span class=\"fn\">upper</span> := <span class=\"fn\">su</span> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">}</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span>)</span> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Polymorphic/Iterators.html#Std.PRange.toList\">toList</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.pairwise_toList_le","kind":"theorem","line":246,"name":"Std.PRange.pairwise_toList_le","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/Lemmas.lean#L246-L254"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.pairwise_toList_lt\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">pairwise_toList_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sl </span><span class=\"fn\">su</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#LT\">LT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound\">SupportsLowerBound</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.HasFiniteRanges\">HasFiniteRanges</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundedUpwardEnumerable\">BoundedUpwardEnumerable</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerable\">LawfulUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerableLT\">LawfulUpwardEnumerableLT</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableLowerBound\">LawfulUpwardEnumerableLowerBound</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableUpperBound\">LawfulUpwardEnumerableUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange\">PRange</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">{</a> <span class=\"fn\">lower</span> := <span class=\"fn\">sl</span>, <span class=\"fn\">upper</span> := <span class=\"fn\">su</span> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">}</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">b</span>)</span> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Polymorphic/Iterators.html#Std.PRange.toList\">toList</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.pairwise_toList_lt","kind":"theorem","line":237,"name":"Std.PRange.pairwise_toList_lt","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/Lemmas.lean#L237-L244"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.pairwise_toList_ne\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">pairwise_toList_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sl </span><span class=\"fn\">su</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound\">SupportsLowerBound</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.HasFiniteRanges\">HasFiniteRanges</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundedUpwardEnumerable\">BoundedUpwardEnumerable</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerable\">LawfulUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableLowerBound\">LawfulUpwardEnumerableLowerBound</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableUpperBound\">LawfulUpwardEnumerableUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange\">PRange</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">{</a> <span class=\"fn\">lower</span> := <span class=\"fn\">sl</span>, <span class=\"fn\">upper</span> := <span class=\"fn\">su</span> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">}</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">b</span>)</span> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Polymorphic/Iterators.html#Std.PRange.toList\">toList</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.pairwise_toList_ne","kind":"theorem","line":229,"name":"Std.PRange.pairwise_toList_ne","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/Lemmas.lean#L229-L235"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.pairwise_toList_upwardEnumerableLt\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">pairwise_toList_upwardEnumerableLt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sl </span><span class=\"fn\">su</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound\">SupportsLowerBound</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.HasFiniteRanges\">HasFiniteRanges</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundedUpwardEnumerable\">BoundedUpwardEnumerable</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerable\">LawfulUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableLowerBound\">LawfulUpwardEnumerableLowerBound</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableUpperBound\">LawfulUpwardEnumerableUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange\">PRange</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">{</a> <span class=\"fn\">lower</span> := <span class=\"fn\">sl</span>, <span class=\"fn\">upper</span> := <span class=\"fn\">su</span> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">}</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.Pairwise\">List.Pairwise</a> <span class=\"fn\">(fun (<span class=\"fn\">a</span> <span class=\"fn\">b</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.LT\">UpwardEnumerable.LT</a> <span class=\"fn\">a</span> <span class=\"fn\">b</span></span>)</span> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Polymorphic/Iterators.html#Std.PRange.toList\">toList</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.pairwise_toList_upwardEnumerableLt","kind":"theorem","line":203,"name":"Std.PRange.pairwise_toList_upwardEnumerableLt","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/Lemmas.lean#L203-L227"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.BoundedUpwardEnumerable.Closed.init?_succ\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">BoundedUpwardEnumerable</span>.<span class=\"name\">Closed</span>.<span class=\"name\">init?_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerable\">LawfulUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lower </span><span class=\"fn\">lower'</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.closed\">BoundShape.closed</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.succ?\">succ?</a> <span class=\"fn\">lower</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">lower'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundedUpwardEnumerable.init?\">init?</a> <span class=\"fn\">lower'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundedUpwardEnumerable.init?\">init?</a> <span class=\"fn\">lower</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.bind\">bind</a></span> <a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.succ?\">succ?</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.BoundedUpwardEnumerable.Closed.init?_succ","kind":"theorem","line":196,"name":"Std.PRange.BoundedUpwardEnumerable.Closed.init?_succ","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/Lemmas.lean#L196-L201"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.BoundedUpwardEnumerable.init?_succ?_closed\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">BoundedUpwardEnumerable</span>.<span class=\"name\">init?_succ?_closed</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerable\">LawfulUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lower </span><span class=\"fn\">lower'</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.closed\">BoundShape.closed</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.succ?\">succ?</a> <span class=\"fn\">lower</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">lower'</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundedUpwardEnumerable.init?\">init?</a> <span class=\"fn\">lower'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundedUpwardEnumerable.init?\">init?</a> <span class=\"fn\">lower</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.bind\">bind</a></span> <a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.succ?\">succ?</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.BoundedUpwardEnumerable.init?_succ?_closed","kind":"theorem","line":186,"name":"Std.PRange.BoundedUpwardEnumerable.init?_succ?_closed","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/Lemmas.lean#L186-L194"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.mem_toArray_iff_mem\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">mem_toArray_iff_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sl </span><span class=\"fn\">su</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound\">SupportsLowerBound</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.HasFiniteRanges\">HasFiniteRanges</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundedUpwardEnumerable\">BoundedUpwardEnumerable</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerable\">LawfulUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableLowerBound\">LawfulUpwardEnumerableLowerBound</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableUpperBound\">LawfulUpwardEnumerableUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange\">PRange</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">{</a> <span class=\"fn\">lower</span> := <span class=\"fn\">sl</span>, <span class=\"fn\">upper</span> := <span class=\"fn\">su</span> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">}</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Polymorphic/Iterators.html#Std.PRange.toArray\">toArray</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">r</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.mem_toArray_iff_mem","kind":"theorem","line":177,"name":"Std.PRange.mem_toArray_iff_mem","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/Lemmas.lean#L177-L184"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.mem_toList_iff_mem\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">mem_toList_iff_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sl </span><span class=\"fn\">su</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsLowerBound\">SupportsLowerBound</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.HasFiniteRanges\">HasFiniteRanges</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundedUpwardEnumerable\">BoundedUpwardEnumerable</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerable\">LawfulUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableLowerBound\">LawfulUpwardEnumerableLowerBound</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableUpperBound\">LawfulUpwardEnumerableUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange\">PRange</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">{</a> <span class=\"fn\">lower</span> := <span class=\"fn\">sl</span>, <span class=\"fn\">upper</span> := <span class=\"fn\">su</span> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">}</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Polymorphic/Iterators.html#Std.PRange.toList\">toList</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">r</span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.mem_toList_iff_mem","kind":"theorem","line":168,"name":"Std.PRange.mem_toList_iff_mem","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/Lemmas.lean#L168-L175"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.toArray_eq_empty_iff\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">toArray_eq_empty_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sl </span><span class=\"fn\">su</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.HasFiniteRanges\">HasFiniteRanges</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundedUpwardEnumerable\">BoundedUpwardEnumerable</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerable\">LawfulUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange\">PRange</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">{</a> <span class=\"fn\">lower</span> := <span class=\"fn\">sl</span>, <span class=\"fn\">upper</span> := <span class=\"fn\">su</span> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">}</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Polymorphic/Iterators.html#Std.PRange.toArray\">toArray</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.toArray\">#[</a><a href=\"./Init/Prelude.html#List.toArray\">]</a> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Prelude.html#Not\">¬</a><a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundedUpwardEnumerable.init?\">init?</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.lower\">lower</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound.IsSatisfied\">SupportsUpperBound.IsSatisfied</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.upper\">upper</a></span> <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.toArray_eq_empty_iff","kind":"theorem","line":160,"name":"Std.PRange.toArray_eq_empty_iff","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/Lemmas.lean#L160-L166"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.toList_eq_nil_iff\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">toList_eq_nil_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sl </span><span class=\"fn\">su</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.HasFiniteRanges\">HasFiniteRanges</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundedUpwardEnumerable\">BoundedUpwardEnumerable</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerable\">LawfulUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange\">PRange</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">{</a> <span class=\"fn\">lower</span> := <span class=\"fn\">sl</span>, <span class=\"fn\">upper</span> := <span class=\"fn\">su</span> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">}</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Polymorphic/Iterators.html#Std.PRange.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Prelude.html#Not\">¬</a><a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundedUpwardEnumerable.init?\">init?</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.lower\">lower</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound.IsSatisfied\">SupportsUpperBound.IsSatisfied</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.upper\">upper</a></span> <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.toList_eq_nil_iff","kind":"theorem","line":149,"name":"Std.PRange.toList_eq_nil_iff","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/Lemmas.lean#L149-L158"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.toArray_Rox_eq_toList_Rcx_of_isSome_succ?\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">toArray_Rox_eq_toList_Rcx_of_isSome_succ?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">su</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.HasFiniteRanges\">HasFiniteRanges</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerable\">LawfulUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lo</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.open\">BoundShape.open</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hi</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">{</a> <span class=\"fn\">lower</span> := <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.open\">BoundShape.open</a>, <span class=\"fn\">upper</span> := <span class=\"fn\">su</span> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">}</a>.<a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.upper\">upper</a></span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.succ?\">succ?</a> <span class=\"fn\">lo</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.mk\">{</a> <span class=\"fn\">lower</span> := <span class=\"fn\">lo</span>, <span class=\"fn\">upper</span> := <span class=\"fn\">hi</span> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.mk\">}</a>.<a href=\"./Init/Data/Range/Polymorphic/Iterators.html#Std.PRange.toArray\">toArray</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.mk\">{</a> <span class=\"fn\">lower</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.succ?\">succ?</a> <span class=\"fn\">lo</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.get\">get</a></span> <span class=\"fn\">h</span></span>, <span class=\"fn\">upper</span> := <span class=\"fn\">hi</span> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.mk\">}</a>.<a href=\"./Init/Data/Range/Polymorphic/Iterators.html#Std.PRange.toArray\">toArray</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.toArray_Rox_eq_toList_Rcx_of_isSome_succ?","kind":"theorem","line":141,"name":"Std.PRange.toArray_Rox_eq_toList_Rcx_of_isSome_succ?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/Lemmas.lean#L141-L147"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.toList_open_eq_toList_closed_of_isSome_succ?\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">toList_open_eq_toList_closed_of_isSome_succ?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">su</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.HasFiniteRanges\">HasFiniteRanges</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerable\">LawfulUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lo</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.open\">BoundShape.open</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hi</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">{</a> <span class=\"fn\">lower</span> := <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.open\">BoundShape.open</a>, <span class=\"fn\">upper</span> := <span class=\"fn\">su</span> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">}</a>.<a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.upper\">upper</a></span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.succ?\">succ?</a> <span class=\"fn\">lo</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.mk\">{</a> <span class=\"fn\">lower</span> := <span class=\"fn\">lo</span>, <span class=\"fn\">upper</span> := <span class=\"fn\">hi</span> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.mk\">}</a>.<a href=\"./Init/Data/Range/Polymorphic/Iterators.html#Std.PRange.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.mk\">{</a> <span class=\"fn\">lower</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.succ?\">succ?</a> <span class=\"fn\">lo</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.get\">get</a></span> <span class=\"fn\">h</span></span>, <span class=\"fn\">upper</span> := <span class=\"fn\">hi</span> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.mk\">}</a>.<a href=\"./Init/Data/Range/Polymorphic/Iterators.html#Std.PRange.toList\">toList</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.toList_open_eq_toList_closed_of_isSome_succ?","kind":"theorem","line":132,"name":"Std.PRange.toList_open_eq_toList_closed_of_isSome_succ?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/Lemmas.lean#L132-L139"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.toList_Rox_eq_toList_Rcx_of_isSome_succ?\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">toList_Rox_eq_toList_Rcx_of_isSome_succ?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">su</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.HasFiniteRanges\">HasFiniteRanges</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerable\">LawfulUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lo</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.open\">BoundShape.open</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hi</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">{</a> <span class=\"fn\">lower</span> := <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape.open\">BoundShape.open</a>, <span class=\"fn\">upper</span> := <span class=\"fn\">su</span> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">}</a>.<a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.upper\">upper</a></span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.succ?\">succ?</a> <span class=\"fn\">lo</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.mk\">{</a> <span class=\"fn\">lower</span> := <span class=\"fn\">lo</span>, <span class=\"fn\">upper</span> := <span class=\"fn\">hi</span> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.mk\">}</a>.<a href=\"./Init/Data/Range/Polymorphic/Iterators.html#Std.PRange.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.mk\">{</a> <span class=\"fn\">lower</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.succ?\">succ?</a> <span class=\"fn\">lo</span>)</span>.<a href=\"./Init/Data/Option/Basic.html#Option.get\">get</a></span> <span class=\"fn\">h</span></span>, <span class=\"fn\">upper</span> := <span class=\"fn\">hi</span> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.mk\">}</a>.<a href=\"./Init/Data/Range/Polymorphic/Iterators.html#Std.PRange.toList\">toList</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.toList_Rox_eq_toList_Rcx_of_isSome_succ?","kind":"theorem","line":124,"name":"Std.PRange.toList_Rox_eq_toList_Rcx_of_isSome_succ?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/Lemmas.lean#L124-L130"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.toArray_eq_match\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">toArray_eq_match</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sl </span><span class=\"fn\">su</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundedUpwardEnumerable\">BoundedUpwardEnumerable</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.HasFiniteRanges\">HasFiniteRanges</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerable\">LawfulUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange\">PRange</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">{</a> <span class=\"fn\">lower</span> := <span class=\"fn\">sl</span>, <span class=\"fn\">upper</span> := <span class=\"fn\">su</span> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">}</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Polymorphic/Iterators.html#Std.PRange.toArray\">toArray</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundedUpwardEnumerable.init?\">init?</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.lower\">lower</a></span></span> with\n  | <a href=\"./Init/Prelude.html#Option.none\">none</a> =&gt; <a href=\"./Init/Prelude.html#List.toArray\">#[</a><a href=\"./Init/Prelude.html#List.toArray\">]</a>\n  | <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">a</span></span> =&gt; <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound.IsSatisfied\">SupportsUpperBound.IsSatisfied</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.upper\">upper</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#ite\">then</a> <a href=\"./Init/Prelude.html#List.toArray\">#[</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#List.toArray\">]</a> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.mk\">{</a> <span class=\"fn\">lower</span> := <span class=\"fn\">a</span>, <span class=\"fn\">upper</span> := <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.upper\">upper</a></span> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.mk\">}</a>.<a href=\"./Init/Data/Range/Polymorphic/Iterators.html#Std.PRange.toArray\">toArray</a></span> <a href=\"./Init/Prelude.html#ite\">else</a> <a href=\"./Init/Prelude.html#List.toArray\">#[</a><a href=\"./Init/Prelude.html#List.toArray\">]</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.toArray_eq_match","kind":"theorem","line":112,"name":"Std.PRange.toArray_eq_match","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/Lemmas.lean#L112-L122"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.toList_eq_match\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">toList_eq_match</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sl </span><span class=\"fn\">su</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundedUpwardEnumerable\">BoundedUpwardEnumerable</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.HasFiniteRanges\">HasFiniteRanges</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerable\">LawfulUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange\">PRange</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">{</a> <span class=\"fn\">lower</span> := <span class=\"fn\">sl</span>, <span class=\"fn\">upper</span> := <span class=\"fn\">su</span> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">}</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Polymorphic/Iterators.html#Std.PRange.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundedUpwardEnumerable.init?\">init?</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.lower\">lower</a></span></span> with\n  | <a href=\"./Init/Prelude.html#Option.none\">none</a> =&gt; <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>\n  | <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">a</span></span> =&gt; <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound.IsSatisfied\">SupportsUpperBound.IsSatisfied</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.upper\">upper</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.mk\">{</a> <span class=\"fn\">lower</span> := <span class=\"fn\">a</span>, <span class=\"fn\">upper</span> := <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.upper\">upper</a></span> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.mk\">}</a>.<a href=\"./Init/Data/Range/Polymorphic/Iterators.html#Std.PRange.toList\">toList</a></span> <a href=\"./Init/Prelude.html#ite\">else</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.toList_eq_match","kind":"theorem","line":100,"name":"Std.PRange.toList_eq_match","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/Lemmas.lean#L100-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.toArray_toList\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">toArray_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sl </span><span class=\"fn\">su</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundedUpwardEnumerable\">BoundedUpwardEnumerable</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.HasFiniteRanges\">HasFiniteRanges</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerable\">LawfulUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange\">PRange</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">{</a> <span class=\"fn\">lower</span> := <span class=\"fn\">sl</span>, <span class=\"fn\">upper</span> := <span class=\"fn\">su</span> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">}</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Polymorphic/Iterators.html#Std.PRange.toList\">toList</a></span>.<a href=\"./Init/Prelude.html#List.toArray\">toArray</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Polymorphic/Iterators.html#Std.PRange.toArray\">toArray</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.toArray_toList","kind":"theorem","line":93,"name":"Std.PRange.toArray_toList","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/Lemmas.lean#L93-L98"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.toList_toArray\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">toList_toArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sl </span><span class=\"fn\">su</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundedUpwardEnumerable\">BoundedUpwardEnumerable</a> <span class=\"fn\">sl</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.HasFiniteRanges\">HasFiniteRanges</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerable\">LawfulUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange\">PRange</a> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">{</a> <span class=\"fn\">lower</span> := <span class=\"fn\">sl</span>, <span class=\"fn\">upper</span> := <span class=\"fn\">su</span> <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.RangeShape.mk\">}</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Polymorphic/Iterators.html#Std.PRange.toArray\">toArray</a></span>.<a href=\"./Init/Prelude.html#Array.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Range/Polymorphic/Iterators.html#Std.PRange.toList\">toList</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.toList_toArray","kind":"theorem","line":86,"name":"Std.PRange.toList_toArray","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/Lemmas.lean#L86-L91"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.RangeIterator.toArray_eq_match\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">RangeIterator</span>.<span class=\"name\">toArray_eq_match</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">su</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.HasFiniteRanges\">HasFiniteRanges</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerable\">LawfulUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Consumers/Collect.html#Std.Iterators.Iter.toArray\">toArray</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.internalState\">internalState</a></span>.<a href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.next\">next</a></span> with\n  | <a href=\"./Init/Prelude.html#Option.none\">none</a> =&gt; <a href=\"./Init/Prelude.html#List.toArray\">#[</a><a href=\"./Init/Prelude.html#List.toArray\">]</a>\n  | <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">a</span></span> =&gt;\n    <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound.IsSatisfied\">SupportsUpperBound.IsSatisfied</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.internalState\">internalState</a></span>.<a href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.upperBound\">upperBound</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#ite\">then</a>\n      <a href=\"./Init/Prelude.html#List.toArray\">#[</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#List.toArray\">]</a> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.mk\">{</a> <span class=\"fn\">internalState</span> := <a href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.mk\">{</a> <span class=\"fn\">next</span> := <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.succ?\">succ?</a> <span class=\"fn\">a</span></span>, <span class=\"fn\">upperBound</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.internalState\">internalState</a></span>.<a href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.upperBound\">upperBound</a></span> <a href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.mk\">}</a> <a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.mk\">}</a>.<a href=\"./Init/Data/Iterators/Consumers/Collect.html#Std.Iterators.Iter.toArray\">toArray</a></span>\n    <a href=\"./Init/Prelude.html#ite\">else</a> <a href=\"./Init/Prelude.html#List.toArray\">#[</a><a href=\"./Init/Prelude.html#List.toArray\">]</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.RangeIterator.toArray_eq_match","kind":"theorem","line":71,"name":"Std.PRange.RangeIterator.toArray_eq_match","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/Lemmas.lean#L71-L84"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.RangeIterator.toList_eq_match\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">RangeIterator</span>.<span class=\"name\">toList_eq_match</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">su</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.HasFiniteRanges\">HasFiniteRanges</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerable\">LawfulUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Consumers/Collect.html#Std.Iterators.Iter.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.internalState\">internalState</a></span>.<a href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.next\">next</a></span> with\n  | <a href=\"./Init/Prelude.html#Option.none\">none</a> =&gt; <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>\n  | <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">a</span></span> =&gt;\n    <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound.IsSatisfied\">SupportsUpperBound.IsSatisfied</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.internalState\">internalState</a></span>.<a href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.upperBound\">upperBound</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#ite\">then</a>\n      <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.mk\">{</a> <span class=\"fn\">internalState</span> := <a href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.mk\">{</a> <span class=\"fn\">next</span> := <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.succ?\">succ?</a> <span class=\"fn\">a</span></span>, <span class=\"fn\">upperBound</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.internalState\">internalState</a></span>.<a href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.upperBound\">upperBound</a></span> <a href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.mk\">}</a> <a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.mk\">}</a>.<a href=\"./Init/Data/Iterators/Consumers/Collect.html#Std.Iterators.Iter.toList\">toList</a></span>\n    <a href=\"./Init/Prelude.html#ite\">else</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/Lemmas.html#Std.PRange.RangeIterator.toList_eq_match","kind":"theorem","line":54,"name":"Std.PRange.RangeIterator.toList_eq_match","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/Lemmas.lean#L54-L69"}}],"imports":["Init.Data.Iterators","Init.Data.Iterators.Lemmas.Consumers.Collect","Init.Data.Range.Polymorphic.Basic","Init.Data.Range.Polymorphic.Basic","Init.Data.Range.Polymorphic.RangeIterator","Init.Data.Range.Polymorphic.RangeIterator","Init.Data.Range.Polymorphic.Iterators","Init.Data.Range.Polymorphic.Iterators","Init.Data.Iterators.Consumers.Loop","Init.Data.Iterators.Consumers.Loop","Init.Data.Array.Monadic"],"instances":[{"className":"Std.Iterators.LawfulIteratorSize","name":"Std.PRange.instLawfulIteratorSizeRangeIteratorOfLawfulRangeSize","typeNames":["Std.PRange.RangeIterator"]}],"name":"Init.Data.Range.Polymorphic.Lemmas"}