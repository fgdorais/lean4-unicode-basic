{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Main.html#Lean.Compiler.LCNF.main\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">main</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Main.html#Lean.Compiler.LCNF.main","kind":"def","line":146,"name":"Lean.Compiler.LCNF.main","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/Main.lean#L146-L149"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Main.html#Lean.Compiler.LCNF.showDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">showDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">phase</span> : <a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.Phase\">Phase</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Main.html#Lean.Compiler.LCNF.showDecl","kind":"def","line":142,"name":"Lean.Compiler.LCNF.showDecl","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/Main.lean#L142-L144"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Main.html#Lean.Compiler.LCNF.compile\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">compile</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">IR.Decl</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Main.html#Lean.Compiler.LCNF.compile","kind":"def","line":139,"name":"Lean.Compiler.LCNF.compile","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/Main.lean#L139-L140"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Main.html#Lean.Compiler.LCNF.PassManager.run\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">PassManager</span>.<span class=\"name\">run</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">IR.Decl</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Main.html#Lean.Compiler.LCNF.PassManager.run","kind":"def","line":89,"name":"Lean.Compiler.LCNF.PassManager.run","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/Main.lean#L89-L135"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Main.html#Lean.Compiler.LCNF.isValidMainType\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">isValidMainType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/LCNF/Main.html#Lean.Compiler.LCNF.isValidMainType","kind":"def","line":74,"name":"Lean.Compiler.LCNF.isValidMainType","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/Main.lean#L74-L85"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Main.html#Lean.Compiler.LCNF.checkpoint\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">checkpoint</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stepName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decls</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/LCNF/Basic.html#Lean.Compiler.LCNF.Decl\">Decl</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">shouldCheck</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/LCNF/CompilerM.html#Lean.Compiler.LCNF.CompilerM\">CompilerM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"A checkpoint in code generation to print all declarations in between\ncompiler passes in order to ease debugging.\nThe trace can be viewed with `set_option trace.Compiler.step true`.\n","docLink":"./Lean/Compiler/LCNF/Main.html#Lean.Compiler.LCNF.checkpoint","kind":"def","line":57,"name":"Lean.Compiler.LCNF.checkpoint","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/Main.lean#L57-L72"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/LCNF/Main.html#Lean.Compiler.LCNF.shouldGenerateCode\"><span class=\"name\">Lean</span>.<span class=\"name\">Compiler</span>.<span class=\"name\">LCNF</span>.<span class=\"name\">shouldGenerateCode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"We do not generate code for `declName` if\n- Its type is a proposition.\n- Its type is a type former.\n- It is tagged as `[macro_inline]`.\n- It is a type class instance.\n\nRemark: we still generate code for declarations tagged as `[inline]`\nand `[specialize]` since they can be partially applied.\n","docLink":"./Lean/Compiler/LCNF/Main.html#Lean.Compiler.LCNF.shouldGenerateCode","kind":"def","line":28,"name":"Lean.Compiler.LCNF.shouldGenerateCode","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/LCNF/Main.lean#L28-L55"}}],"imports":["Lean.Compiler.Options","Lean.Compiler.ExternAttr","Lean.Compiler.IR","Lean.Compiler.IR.Basic","Lean.Compiler.IR.Checker","Lean.Compiler.IR.ToIR","Lean.Compiler.LCNF.PassManager","Lean.Compiler.LCNF.Passes","Lean.Compiler.LCNF.PrettyPrinter","Lean.Compiler.LCNF.ToDecl","Lean.Compiler.LCNF.Check","Lean.Compiler.LCNF.PullLetDecls","Lean.Compiler.LCNF.PhaseExt","Lean.Compiler.LCNF.CSE","Lean.Compiler.LCNF.Visibility"],"instances":[],"name":"Lean.Compiler.LCNF.Main"}