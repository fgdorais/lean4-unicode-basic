{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.Example.find_spec\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">Example</span>.<span class=\"name\">find_spec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n </span><span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.Example.find\">find</a> <span class=\"fn\">P</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">m</span></span> → <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.Example.find_spec","kind":"theorem","line":1132,"name":"Lean.Order.Example.find_spec","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L1132-L1146"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.Example.find_eq\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">Example</span>.<span class=\"name\">find_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.Example.find\">find</a> <span class=\"fn\">P</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.Example.findF\">findF</a> <span class=\"fn\">P</span> <span class=\"fn\">(<a href=\"./Init/Internal/Order/Basic.html#Lean.Order.Example.find\">find</a> <span class=\"fn\">P</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.Example.find_eq","kind":"theorem","line":1130,"name":"Lean.Order.Example.find_eq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L1130-L1130"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.Example.find\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">Example</span>.<span class=\"name\">find</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.Example.find","kind":"def","line":1121,"name":"Lean.Order.Example.find","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L1121-L1128"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.Example.findF\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">Example</span>.<span class=\"name\">findF</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rec</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.Example.findF","kind":"def","line":1115,"name":"Lean.Order.Example.findF","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L1115-L1119"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.coind_impl\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">coind_impl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f₁ </span><span class=\"fn\">f₂</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">f₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">f₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f₁</span> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\">f₂</span> <span class=\"fn\">x</span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.coind_impl","kind":"theorem","line":1100,"name":"Lean.Order.coind_impl","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L1100-L1110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.ind_impl\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">ind_impl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f₁ </span><span class=\"fn\">f₂</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">f₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">f₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">f₁</span> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\">f₂</span> <span class=\"fn\">x</span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.ind_impl","kind":"theorem","line":1088,"name":"Lean.Order.ind_impl","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L1088-L1098"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.ind_not\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">ind_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f₁</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">f₁</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">f₁</span> <span class=\"fn\">x</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.ind_not","kind":"theorem","line":1081,"name":"Lean.Order.ind_not","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L1081-L1086"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.coind_not\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">coind_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f₁</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">f₁</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">f₁</span> <span class=\"fn\">x</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.coind_not","kind":"theorem","line":1074,"name":"Lean.Order.coind_not","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L1074-L1079"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.coind_monotone_or\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">coind_monotone_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f₁ </span><span class=\"fn\">f₂</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">f₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">f₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f₁</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">f₂</span> <span class=\"fn\">x</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.coind_monotone_or","kind":"theorem","line":1062,"name":"Lean.Order.coind_monotone_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L1062-L1070"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.coind_monotone_and\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">coind_monotone_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f₁ </span><span class=\"fn\">f₂</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">f₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">f₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f₁</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">f₂</span> <span class=\"fn\">x</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.coind_monotone_and","kind":"theorem","line":1055,"name":"Lean.Order.coind_monotone_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L1055-L1060"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.coind_monotone_forall\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">coind_monotone_forall</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./Init/Internal/Order/Basic.html#Lean.Order.ReverseImplicationOrder\">ReverseImplicationOrder</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">∀ (<span class=\"fn\">y</span> : <span class=\"fn\">β</span>), <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.coind_monotone_forall","kind":"theorem","line":1049,"name":"Lean.Order.coind_monotone_forall","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L1049-L1053"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.coind_monotone_exists\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">coind_monotone_exists</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./Init/Internal/Order/Basic.html#Lean.Order.ReverseImplicationOrder\">ReverseImplicationOrder</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Init/Core.html#Exists\">Exists</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.coind_monotone_exists","kind":"theorem","line":1043,"name":"Lean.Order.coind_monotone_exists","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L1043-L1047"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.ReverseImplicationOrder.instCompleteLattice\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">ReverseImplicationOrder</span>.<span class=\"name\">instCompleteLattice</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CompleteLattice\">CompleteLattice</a> <a href=\"./Init/Internal/Order/Basic.html#Lean.Order.ReverseImplicationOrder\">ReverseImplicationOrder</a></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.ReverseImplicationOrder.instCompleteLattice","kind":"instance","line":1026,"name":"Lean.Order.ReverseImplicationOrder.instCompleteLattice","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L1026-L1040"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.ReverseImplicationOrder.instOrder\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">ReverseImplicationOrder</span>.<span class=\"name\">instOrder</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <a href=\"./Init/Internal/Order/Basic.html#Lean.Order.ReverseImplicationOrder\">ReverseImplicationOrder</a></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.ReverseImplicationOrder.instOrder","kind":"instance","line":1019,"name":"Lean.Order.ReverseImplicationOrder.instOrder","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L1019-L1023"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.ReverseImplicationOrder\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">ReverseImplicationOrder</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.ReverseImplicationOrder","kind":"def","line":1016,"name":"Lean.Order.ReverseImplicationOrder","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L1016-L1016"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.implication_order_monotone_or\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">implication_order_monotone_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f₁ </span><span class=\"fn\">f₂</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Internal/Order/Basic.html#Lean.Order.ImplicationOrder\">ImplicationOrder</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">f₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">f₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f₁</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">f₂</span> <span class=\"fn\">x</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.implication_order_monotone_or","kind":"theorem","line":1002,"name":"Lean.Order.implication_order_monotone_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L1002-L1010"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.implication_order_monotone_and\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">implication_order_monotone_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f₁ </span><span class=\"fn\">f₂</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Internal/Order/Basic.html#Lean.Order.ImplicationOrder\">ImplicationOrder</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₁</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">f₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h₂</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">f₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f₁</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">f₂</span> <span class=\"fn\">x</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.implication_order_monotone_and","kind":"theorem","line":995,"name":"Lean.Order.implication_order_monotone_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L995-L1000"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.implication_order_monotone_forall\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">implication_order_monotone_forall</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./Init/Internal/Order/Basic.html#Lean.Order.ImplicationOrder\">ImplicationOrder</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">∀ (<span class=\"fn\">y</span> : <span class=\"fn\">β</span>), <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.implication_order_monotone_forall","kind":"theorem","line":989,"name":"Lean.Order.implication_order_monotone_forall","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L989-L993"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.implication_order_monotone_exists\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">implication_order_monotone_exists</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./Init/Internal/Order/Basic.html#Lean.Order.ImplicationOrder\">ImplicationOrder</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Init/Core.html#Exists\">Exists</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.implication_order_monotone_exists","kind":"theorem","line":983,"name":"Lean.Order.implication_order_monotone_exists","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L983-L987"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.ImplicationOrder.instCompleteLattice\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">ImplicationOrder</span>.<span class=\"name\">instCompleteLattice</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CompleteLattice\">CompleteLattice</a> <a href=\"./Init/Internal/Order/Basic.html#Lean.Order.ImplicationOrder\">ImplicationOrder</a></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.ImplicationOrder.instCompleteLattice","kind":"instance","line":964,"name":"Lean.Order.ImplicationOrder.instCompleteLattice","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L964-L980"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.ImplicationOrder.instOrder\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">ImplicationOrder</span>.<span class=\"name\">instOrder</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <a href=\"./Init/Internal/Order/Basic.html#Lean.Order.ImplicationOrder\">ImplicationOrder</a></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.ImplicationOrder.instOrder","kind":"instance","line":957,"name":"Lean.Order.ImplicationOrder.instOrder","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L957-L961"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.ImplicationOrder\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">ImplicationOrder</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.ImplicationOrder","kind":"def","line":955,"name":"Lean.Order.ImplicationOrder","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L955-L955"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.instMonoBindEIO\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">instMonoBindEIO</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">ε</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.MonoBind\">MonoBind</a> <span class=\"fn\">(<a href=\"./Init/System/IO.html#EIO\">EIO</a> <span class=\"fn\">ε</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.instMonoBindEIO","kind":"instance","line":933,"name":"Lean.Order.instMonoBindEIO","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L933-L949"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.instCCPOEIOOfNonempty\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">instCCPOEIOOfNonempty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <span class=\"fn\">ε</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CCPO\">CCPO</a> <span class=\"fn\">(<a href=\"./Init/System/IO.html#EIO\">EIO</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.instCCPOEIOOfNonempty","kind":"instance","line":930,"name":"Lean.Order.instCCPOEIOOfNonempty","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L930-L931"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone_stateTRun\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">monotone_stateTRun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_2 → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2) → <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">(<span class=\"fn\">m</span> <span class=\"fn\">α</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hmono</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">γ</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span>.<a href=\"./Init/Control/State.html#StateT.run\">run</a></span> <span class=\"fn\">s</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.monotone_stateTRun","kind":"theorem","line":922,"name":"Lean.Order.monotone_stateTRun","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L922-L927"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.instMonoBindStateT\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">instMonoBindStateT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1) → <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">(<span class=\"fn\">m</span> <span class=\"fn\">α</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.MonoBind\">MonoBind</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.MonoBind\">MonoBind</a> <span class=\"fn\">(<a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">ρ</span> <span class=\"fn\">m</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.instMonoBindStateT","kind":"instance","line":911,"name":"Lean.Order.instMonoBindStateT","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L911-L920"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.instCCPOStateT\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">instCCPOStateT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1) → <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CCPO\">CCPO</a> <span class=\"fn\">(<span class=\"fn\">m</span> <span class=\"fn\">α</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CCPO\">CCPO</a> <span class=\"fn\">(<a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.instCCPOStateT","kind":"instance","line":910,"name":"Lean.Order.instCCPOStateT","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L910-L910"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.instPartialOrderStateT\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">instPartialOrderStateT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1) → <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">(<span class=\"fn\">m</span> <span class=\"fn\">α</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">(<a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.instPartialOrderStateT","kind":"instance","line":909,"name":"Lean.Order.instPartialOrderStateT","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L909-L909"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone_stateRefT'Run\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">monotone_stateRefT'Run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ω </span><span class=\"fn\">σ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <span class=\"fn\">(<a href=\"./Init/System/ST.html#ST\">ST</a> <span class=\"fn\">ω</span>)</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>) → <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">(<span class=\"fn\">m</span> <span class=\"fn\">α</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.MonoBind\">MonoBind</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\"><a href=\"./Init/Control/StateRef.html#StateRefT'\">StateRefT'</a> <span class=\"fn\">ω</span> <span class=\"fn\">σ</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hmono</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">γ</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span>.<a href=\"./Init/Control/StateRef.html#StateRefT'.run\">run</a></span> <span class=\"fn\">s</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.monotone_stateRefT'Run","kind":"theorem","line":897,"name":"Lean.Order.monotone_stateRefT'Run","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L897-L907"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.instMonoBindStateRefT'\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">instMonoBindStateRefT'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ω </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>) → <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">(<span class=\"fn\">m</span> <span class=\"fn\">α</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.MonoBind\">MonoBind</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.MonoBind\">MonoBind</a> <span class=\"fn\">(<a href=\"./Init/Control/StateRef.html#StateRefT'\">StateRefT'</a> <span class=\"fn\">ω</span> <span class=\"fn\">σ</span> <span class=\"fn\">m</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.instMonoBindStateRefT'","kind":"instance","line":894,"name":"Lean.Order.instMonoBindStateRefT'","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L894-L895"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.instCCPOStateRefT'\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">instCCPOStateRefT'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ω </span><span class=\"fn\">σ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CCPO\">CCPO</a> <span class=\"fn\">(<span class=\"fn\">m</span> <span class=\"fn\">α</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CCPO\">CCPO</a> <span class=\"fn\">(<a href=\"./Init/Control/StateRef.html#StateRefT'\">StateRefT'</a> <span class=\"fn\">ω</span> <span class=\"fn\">σ</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.instCCPOStateRefT'","kind":"instance","line":893,"name":"Lean.Order.instCCPOStateRefT'","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L893-L893"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.instPartialOrderStateRefT'\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">instPartialOrderStateRefT'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ω </span><span class=\"fn\">σ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">(<span class=\"fn\">m</span> <span class=\"fn\">α</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">(<a href=\"./Init/Control/StateRef.html#StateRefT'\">StateRefT'</a> <span class=\"fn\">ω</span> <span class=\"fn\">σ</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.instPartialOrderStateRefT'","kind":"instance","line":892,"name":"Lean.Order.instPartialOrderStateRefT'","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L892-L892"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone_readerTRun\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">monotone_readerTRun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_2 → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">(<span class=\"fn\">m</span> <span class=\"fn\">α</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#ReaderT\">ReaderT</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hmono</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">γ</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span>.<a href=\"./Init/Prelude.html#ReaderT.run\">run</a></span> <span class=\"fn\">s</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.monotone_readerTRun","kind":"theorem","line":885,"name":"Lean.Order.monotone_readerTRun","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L885-L890"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.instMonoBindReaderT\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">instMonoBindReaderT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1) → <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">(<span class=\"fn\">m</span> <span class=\"fn\">α</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.MonoBind\">MonoBind</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.MonoBind\">MonoBind</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#ReaderT\">ReaderT</a> <span class=\"fn\">ρ</span> <span class=\"fn\">m</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.instMonoBindReaderT","kind":"instance","line":874,"name":"Lean.Order.instMonoBindReaderT","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L874-L883"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.instCCPOReaderT\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">instCCPOReaderT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CCPO\">CCPO</a> <span class=\"fn\">(<span class=\"fn\">m</span> <span class=\"fn\">α</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CCPO\">CCPO</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#ReaderT\">ReaderT</a> <span class=\"fn\">ρ</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.instCCPOReaderT","kind":"instance","line":873,"name":"Lean.Order.instCCPOReaderT","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L873-L873"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.instPartialOrderReaderT\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">instPartialOrderReaderT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">(<span class=\"fn\">m</span> <span class=\"fn\">α</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#ReaderT\">ReaderT</a> <span class=\"fn\">ρ</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.instPartialOrderReaderT","kind":"instance","line":872,"name":"Lean.Order.instPartialOrderReaderT","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L872-L872"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone_optionTRun\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">monotone_optionTRun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_2 → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2) → <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">(<span class=\"fn\">m</span> <span class=\"fn\">α</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\"><a href=\"./Init/Control/Option.html#OptionT\">OptionT</a> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hmono</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">γ</span>) =&gt; <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span>.<a href=\"./Init/Control/Option.html#OptionT.run\">run</a></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.monotone_optionTRun","kind":"theorem","line":865,"name":"Lean.Order.monotone_optionTRun","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L865-L870"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.instMonoBindOptionT\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">instMonoBindOptionT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1) → <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">(<span class=\"fn\">m</span> <span class=\"fn\">α</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.MonoBind\">MonoBind</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.MonoBind\">MonoBind</a> <span class=\"fn\">(<a href=\"./Init/Control/Option.html#OptionT\">OptionT</a> <span class=\"fn\">m</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.instMonoBindOptionT","kind":"instance","line":854,"name":"Lean.Order.instMonoBindOptionT","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L854-L863"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.instCCPOOptionT\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">instCCPOOptionT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1) → <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CCPO\">CCPO</a> <span class=\"fn\">(<span class=\"fn\">m</span> <span class=\"fn\">α</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CCPO\">CCPO</a> <span class=\"fn\">(<a href=\"./Init/Control/Option.html#OptionT\">OptionT</a> <span class=\"fn\">m</span> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.instCCPOOptionT","kind":"instance","line":853,"name":"Lean.Order.instCCPOOptionT","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L853-L853"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.instPartialOrderOptionT\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">instPartialOrderOptionT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1) → <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">(<span class=\"fn\">m</span> <span class=\"fn\">α</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">(<a href=\"./Init/Control/Option.html#OptionT\">OptionT</a> <span class=\"fn\">m</span> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.instPartialOrderOptionT","kind":"instance","line":852,"name":"Lean.Order.instPartialOrderOptionT","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L852-L852"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone_exceptTRun\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">monotone_exceptTRun</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_2 → <a href=\"./foundational_types.html\">Type</a> u_3</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2) → <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">(<span class=\"fn\">m</span> <span class=\"fn\">α</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\"><a href=\"./Init/Control/Except.html#ExceptT\">ExceptT</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hmono</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">γ</span>) =&gt; <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span>.<a href=\"./Init/Control/Except.html#ExceptT.run\">run</a></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.monotone_exceptTRun","kind":"theorem","line":845,"name":"Lean.Order.monotone_exceptTRun","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L845-L850"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.instMonoBindExceptT\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">instMonoBindExceptT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1) → <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">(<span class=\"fn\">m</span> <span class=\"fn\">α</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.MonoBind\">MonoBind</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.MonoBind\">MonoBind</a> <span class=\"fn\">(<a href=\"./Init/Control/Except.html#ExceptT\">ExceptT</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.instMonoBindExceptT","kind":"instance","line":834,"name":"Lean.Order.instMonoBindExceptT","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L834-L843"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.instCCPOExceptT\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">instCCPOExceptT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1) → <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CCPO\">CCPO</a> <span class=\"fn\">(<span class=\"fn\">m</span> <span class=\"fn\">α</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CCPO\">CCPO</a> <span class=\"fn\">(<a href=\"./Init/Control/Except.html#ExceptT\">ExceptT</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.instCCPOExceptT","kind":"instance","line":833,"name":"Lean.Order.instCCPOExceptT","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L833-L833"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.instPartialOrderExceptT\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">instPartialOrderExceptT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">inst</span> : <span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1) → <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">(<span class=\"fn\">m</span> <span class=\"fn\">α</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">(<a href=\"./Init/Control/Except.html#ExceptT\">ExceptT</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.instPartialOrderExceptT","kind":"instance","line":832,"name":"Lean.Order.instPartialOrderExceptT","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L832-L832"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.Option.admissible_eq_some\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">Option</span>.<span class=\"name\">admissible_eq_some</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.admissible\">admissible</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">y</span></span> → <span class=\"fn\">P</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.Option.admissible_eq_some","kind":"theorem","line":828,"name":"Lean.Order.Option.admissible_eq_some","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L828-L830"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.instMonoBindOption\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">instMonoBindOption</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.MonoBind\">MonoBind</a> <a href=\"./Init/Prelude.html#Option\">Option</a></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.instMonoBindOption","kind":"instance","line":818,"name":"Lean.Order.instMonoBindOption","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L818-L826"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.instCCPOOption\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">instCCPOOption</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CCPO\">CCPO</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.instCCPOOption","kind":"instance","line":817,"name":"Lean.Order.instCCPOOption","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L817-L817"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.instPartialOrderOption\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">instPartialOrderOption</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.instPartialOrderOption","kind":"instance","line":816,"name":"Lean.Order.instPartialOrderOption","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L816-L816"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone_bind\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">monotone_bind</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Bind\">Bind</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u) → <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">(<span class=\"fn\">m</span> <span class=\"fn\">α</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.MonoBind\">MonoBind</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Sort</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hmono₁</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hmono₂</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">γ</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.monotone_bind","kind":"theorem","line":802,"name":"Lean.Order.monotone_bind","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L802-L814"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.MonoBind.bind_mono_right\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">MonoBind</span>.<span class=\"name\">bind_mono_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Bind\">Bind</a> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝¹</span> : <span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u) → <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">(<span class=\"fn\">m</span> <span class=\"fn\">α</span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.MonoBind\">MonoBind</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f₁ </span><span class=\"fn\">f₂</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder.rel\">PartialOrder.rel</a> <span class=\"fn\">(<span class=\"fn\">f₁</span> <span class=\"fn\">x</span>)</span> <span class=\"fn\">(<span class=\"fn\">f₂</span> <span class=\"fn\">x</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder.rel\">PartialOrder.rel</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f₁</span>) (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f₂</span>)</span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.MonoBind.bind_mono_right","kind":"theorem","line":800,"name":"Lean.Order.MonoBind.bind_mono_right","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L800-L800"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.MonoBind.bind_mono_left\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">MonoBind</span>.<span class=\"name\">bind_mono_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Bind\">Bind</a> <span class=\"fn\">m</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">inst✝¹</span> : <span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u) → <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">(<span class=\"fn\">m</span> <span class=\"fn\">α</span>)</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.MonoBind\">MonoBind</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a₁ </span><span class=\"fn\">a₂</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder.rel\">PartialOrder.rel</a> <span class=\"fn\">a₁</span> <span class=\"fn\">a₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder.rel\">PartialOrder.rel</a> (<span class=\"fn\">a₁</span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f</span>) (<span class=\"fn\">a₂</span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f</span>)</span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.MonoBind.bind_mono_left","kind":"theorem","line":799,"name":"Lean.Order.MonoBind.bind_mono_left","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L799-L799"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.MonoBind.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">MonoBind</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Bind\">Bind</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u) → <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">(<span class=\"fn\">m</span> <span class=\"fn\">α</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bind_mono_left</span> :\n  <span class=\"fn\">∀ {<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} {<span class=\"fn\">a₁ </span><span class=\"fn\">a₂</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>} {<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span>}, <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder.rel\">PartialOrder.rel</a> <span class=\"fn\">a₁</span> <span class=\"fn\">a₂</span></span> → <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder.rel\">PartialOrder.rel</a> (<span class=\"fn\">a₁</span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f</span>) (<span class=\"fn\">a₂</span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bind_mono_right</span> :\n  <span class=\"fn\">∀ {<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} {<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>} {<span class=\"fn\">f₁ </span><span class=\"fn\">f₂</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span>},\n    <span class=\"fn\"><span class=\"fn\">(∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder.rel\">PartialOrder.rel</a> <span class=\"fn\">(<span class=\"fn\">f₁</span> <span class=\"fn\">x</span>)</span> <span class=\"fn\">(<span class=\"fn\">f₂</span> <span class=\"fn\">x</span>)</span></span>)</span> → <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder.rel\">PartialOrder.rel</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f₁</span>) (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f₂</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.MonoBind\">MonoBind</a> <span class=\"fn\">m</span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.MonoBind.mk","kind":"ctor","line":798,"name":"Lean.Order.MonoBind.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L798-L798"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.MonoBind\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">MonoBind</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Bind\">Bind</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u) → <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">(<span class=\"fn\">m</span> <span class=\"fn\">α</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"The class `MonoBind m` indicates that every `m α` has a `PartialOrder`, and that the bind operation\non `m` is monotone in both arguments with regard to that order.\n\nThis is intended to be used in the construction of `partial_fixpoint`, and not meant to be used otherwise.\n","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.MonoBind","kind":"class","line":792,"name":"Lean.Order.MonoBind","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L792-L800"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.admissible_flatOrder\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">admissible_flatOrder</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.FlatOrder\">FlatOrder</a> <span class=\"fn\">b</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hnot</span> : <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.admissible\">admissible</a> <span class=\"fn\">P</span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.admissible_flatOrder","kind":"theorem","line":779,"name":"Lean.Order.admissible_flatOrder","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L779-L786"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.FlatOrder.instCCPO\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">FlatOrder</span>.<span class=\"name\">instCCPO</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CCPO\">CCPO</a> <span class=\"fn\">(<a href=\"./Init/Internal/Order/Basic.html#Lean.Order.FlatOrder\">FlatOrder</a> <span class=\"fn\">b</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.FlatOrder.instCCPO","kind":"instance","line":744,"name":"Lean.Order.FlatOrder.instCCPO","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L744-L777"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">noncomputable def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.flat_csup\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">flat_csup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.FlatOrder\">FlatOrder</a> <span class=\"fn\">b</span></span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.FlatOrder\">FlatOrder</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.flat_csup","kind":"def","line":739,"name":"Lean.Order.flat_csup","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L739-L742"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.FlatOrder.instOrder\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">FlatOrder</span>.<span class=\"name\">instOrder</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">(<a href=\"./Init/Internal/Order/Basic.html#Lean.Order.FlatOrder\">FlatOrder</a> <span class=\"fn\">b</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.FlatOrder.instOrder","kind":"instance","line":727,"name":"Lean.Order.FlatOrder.instOrder","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L727-L733"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.FlatOrder.rel.refl\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">FlatOrder</span>.<span class=\"name\">rel</span>.<span class=\"name\">refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.FlatOrder\">FlatOrder</a> <span class=\"fn\">b</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Internal/Order/Basic.html#Lean.Order.FlatOrder.rel\">rel</a></span> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.FlatOrder.rel.refl","kind":"ctor","line":725,"name":"Lean.Order.FlatOrder.rel.refl","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L725-L725"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.FlatOrder.rel.bot\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">FlatOrder</span>.<span class=\"name\">rel</span>.<span class=\"name\">bot</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.FlatOrder\">FlatOrder</a> <span class=\"fn\">b</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.FlatOrder.rel\">rel</a> <span class=\"fn\">b</span> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.FlatOrder.rel.bot","kind":"ctor","line":724,"name":"Lean.Order.FlatOrder.rel.bot","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L724-L724"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.FlatOrder.rel\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">FlatOrder</span>.<span class=\"name\">rel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.FlatOrder\">FlatOrder</a> <span class=\"fn\">b</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"The flat partial order generated by `∀ x, b ⊑ x`.\n\nThis is intended to be used in the construction of `partial_fixpoint`, and not meant to be used otherwise.\n","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.FlatOrder.rel","kind":"inductive","line":718,"name":"Lean.Order.FlatOrder.rel","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L718-L725"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.FlatOrder\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">FlatOrder</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Sort</a> u</div></div>","info":{"doc":"`FlatOrder b` wraps the type `α` with the flat partial order generated by `∀ x, b ⊑ x`.\n\nThis is intended to be used in the construction of `partial_fixpoint`, and not meant to be used otherwise.\n","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.FlatOrder","kind":"def","line":709,"name":"Lean.Order.FlatOrder","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L709-L714"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.admissible_pprod_snd\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">admissible_pprod_snd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CCPO\">CCPO</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CCPO\">CCPO</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hadm</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.admissible\">admissible</a> <span class=\"fn\">P</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.admissible\">admissible</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#PProd\">×'</a> <span class=\"fn\">β</span>) =&gt; <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#PProd.snd\">snd</a></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.admissible_pprod_snd","kind":"theorem","line":695,"name":"Lean.Order.admissible_pprod_snd","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L695-L700"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.admissible_pprod_fst\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">admissible_pprod_fst</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CCPO\">CCPO</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CCPO\">CCPO</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hadm</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.admissible\">admissible</a> <span class=\"fn\">P</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.admissible\">admissible</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#PProd\">×'</a> <span class=\"fn\">β</span>) =&gt; <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#PProd.fst\">fst</a></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.admissible_pprod_fst","kind":"theorem","line":688,"name":"Lean.Order.admissible_pprod_fst","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L688-L693"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.instCCPOPProd\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">instCCPOPProd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CCPO\">CCPO</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CCPO\">CCPO</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CCPO\">CCPO</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#PProd\">×'</a> <span class=\"fn\">β</span>)</span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.instCCPOPProd","kind":"instance","line":664,"name":"Lean.Order.instCCPOPProd","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L664-L686"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.instCompleteLatticePProd\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">instCompleteLatticePProd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CompleteLattice\">CompleteLattice</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CompleteLattice\">CompleteLattice</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CompleteLattice\">CompleteLattice</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#PProd\">×'</a> <span class=\"fn\">β</span>)</span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.instCompleteLatticePProd","kind":"instance","line":630,"name":"Lean.Order.instCompleteLatticePProd","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L630-L662"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.PProd.chain.chain_snd\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">PProd</span>.<span class=\"name\">chain</span>.<span class=\"name\">chain_snd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CCPO\">CCPO</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CCPO\">CCPO</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#PProd\">×'</a> <span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hchain</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.chain\">chain</a> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.chain\">chain</a> <span class=\"fn\">(<a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PProd.chain.snd\">snd</a> <span class=\"fn\">c</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.PProd.chain.chain_snd","kind":"theorem","line":623,"name":"Lean.Order.PProd.chain.chain_snd","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L623-L628"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.PProd.chain.chain_fst\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">PProd</span>.<span class=\"name\">chain</span>.<span class=\"name\">chain_fst</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CCPO\">CCPO</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CCPO\">CCPO</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#PProd\">×'</a> <span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hchain</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.chain\">chain</a> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.chain\">chain</a> <span class=\"fn\">(<a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PProd.chain.fst\">fst</a> <span class=\"fn\">c</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.PProd.chain.chain_fst","kind":"theorem","line":616,"name":"Lean.Order.PProd.chain.chain_fst","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L616-L621"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.PProd.snd\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">PProd</span>.<span class=\"name\">snd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CompleteLattice\">CompleteLattice</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CompleteLattice\">CompleteLattice</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#PProd\">×'</a> <span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.PProd.snd","kind":"def","line":614,"name":"Lean.Order.PProd.snd","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L614-L614"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.PProd.fst\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">PProd</span>.<span class=\"name\">fst</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CompleteLattice\">CompleteLattice</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CompleteLattice\">CompleteLattice</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#PProd\">×'</a> <span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.PProd.fst","kind":"def","line":613,"name":"Lean.Order.PProd.fst","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L613-L613"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.PProd.chain.snd\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">PProd</span>.<span class=\"name\">chain</span>.<span class=\"name\">snd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CCPO\">CCPO</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CCPO\">CCPO</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#PProd\">×'</a> <span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.PProd.chain.snd","kind":"def","line":611,"name":"Lean.Order.PProd.chain.snd","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L611-L611"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.PProd.chain.fst\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">PProd</span>.<span class=\"name\">chain</span>.<span class=\"name\">fst</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CCPO\">CCPO</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CCPO\">CCPO</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#PProd\">×'</a> <span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.PProd.chain.fst","kind":"def","line":610,"name":"Lean.Order.PProd.chain.fst","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L610-L610"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.PProd.monotone_snd\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">PProd</span>.<span class=\"name\">monotone_snd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Sort</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#PProd\">×'</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">γ</span>) =&gt; <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span>.<a href=\"./Init/Prelude.html#PProd.snd\">snd</a></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.PProd.monotone_snd","kind":"theorem","line":605,"name":"Lean.Order.PProd.monotone_snd","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L605-L608"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.PProd.monotone_fst\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">PProd</span>.<span class=\"name\">monotone_fst</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Sort</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#PProd\">×'</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">γ</span>) =&gt; <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span>.<a href=\"./Init/Prelude.html#PProd.fst\">fst</a></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.PProd.monotone_fst","kind":"theorem","line":600,"name":"Lean.Order.PProd.monotone_fst","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L600-L603"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.PProd.monotone_mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">PProd</span>.<span class=\"name\">monotone_mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Sort</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">γ</span>) =&gt; <span class=\"fn\">⟨<span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span>, <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">x</span></span>⟩</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.PProd.monotone_mk","kind":"theorem","line":594,"name":"Lean.Order.PProd.monotone_mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L594-L598"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.instPartialOrderPProd\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">instPartialOrderPProd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#PProd\">×'</a> <span class=\"fn\">β</span>)</span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.instPartialOrderPProd","kind":"instance","line":585,"name":"Lean.Order.instPartialOrderPProd","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L585-L592"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone_dite\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">monotone_dite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">c</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k₁</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">c</span> → <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k₂</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\">c</span> → <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hmono₁</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">k₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hmono₂</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">k₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#dite\">dite</a> <span class=\"fn\">c</span> <span class=\"fn\">(<span class=\"fn\">k₁</span> <span class=\"fn\">x</span>)</span> <span class=\"fn\">(<span class=\"fn\">k₂</span> <span class=\"fn\">x</span>)</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.monotone_dite","kind":"theorem","line":565,"name":"Lean.Order.monotone_dite","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L565-L574"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone_ite\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">monotone_ite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./foundational_types.html\">Prop</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">c</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k₁ </span><span class=\"fn\">k₂</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hmono₁</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">k₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hmono₂</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">k₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><span class=\"fn\">k₁</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\">k₂</span> <span class=\"fn\">x</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.monotone_ite","kind":"theorem","line":554,"name":"Lean.Order.monotone_ite","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L554-L563"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.admissible_pi_apply\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">admissible_pi_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Sort</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CCPO\">CCPO</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">x</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">x</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hadm</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.admissible\">admissible</a> <span class=\"fn\">(<span class=\"fn\">P</span> <span class=\"fn\">x</span>)</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.admissible\">admissible</a> <span class=\"fn\">fun (<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">x</span></span></span>) =&gt; <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.admissible_pi_apply","kind":"def","line":543,"name":"Lean.Order.admissible_pi_apply","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L543-L548"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.admissible_apply\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">admissible_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Sort</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CCPO\">CCPO</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">x</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">x</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hadm</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.admissible\">admissible</a> <span class=\"fn\">(<span class=\"fn\">P</span> <span class=\"fn\">x</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.admissible\">admissible</a> <span class=\"fn\">fun (<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">x</span></span></span>) =&gt; <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.admissible_apply","kind":"def","line":536,"name":"Lean.Order.admissible_apply","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L536-L541"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.instCompleteLatticePi\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">instCompleteLatticePi</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Sort</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CompleteLattice\">CompleteLattice</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">x</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CompleteLattice\">CompleteLattice</a> <span class=\"fn\">((<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">x</span></span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.instCompleteLatticePi","kind":"instance","line":519,"name":"Lean.Order.instCompleteLatticePi","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L519-L534"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.instCCPOPi\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">instCCPOPi</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Sort</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CCPO\">CCPO</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">x</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CCPO\">CCPO</a> <span class=\"fn\">((<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">x</span></span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.instCCPOPi","kind":"instance","line":502,"name":"Lean.Order.instCCPOPi","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L502-L517"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.fun_sup\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">fun_sup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Sort</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CompleteLattice\">CompleteLattice</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">x</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\"><span class=\"fn\">((<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">x</span></span>)</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.fun_sup","kind":"def","line":499,"name":"Lean.Order.fun_sup","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L499-L500"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.fun_csup\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">fun_csup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Sort</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CCPO\">CCPO</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">x</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\"><span class=\"fn\">((<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">x</span></span>)</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.fun_csup","kind":"def","line":496,"name":"Lean.Order.fun_csup","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L496-L497"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.chain_apply\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">chain_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Sort</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">x</span>)</span></span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <span class=\"fn\"><span class=\"fn\">((<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">x</span></span>)</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hc</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.chain\">chain</a> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.chain\">chain</a> <span class=\"fn\">fun (<span class=\"fn\">y</span> : <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">x</span></span>) =&gt; <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">f</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">x</span></span></span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">c</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.chain_apply","kind":"theorem","line":488,"name":"Lean.Order.chain_apply","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L488-L494"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone_apply\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">monotone_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Sort</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Sort</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">x</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">γ</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span> <span class=\"fn\">a</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.monotone_apply","kind":"theorem","line":484,"name":"Lean.Order.monotone_apply","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L484-L486"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone_of_monotone_apply\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">monotone_of_monotone_apply</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Sort</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Sort</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">x</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">y</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">γ</span>) =&gt; <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">f</span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.monotone_of_monotone_apply","kind":"theorem","line":480,"name":"Lean.Order.monotone_of_monotone_apply","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L480-L482"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.instOrderPi\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">instOrderPi</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Sort</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">(<span class=\"fn\">β</span> <span class=\"fn\">x</span>)</span></span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">((<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\">β</span> <span class=\"fn\">x</span></span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.instOrderPi","kind":"instance","line":474,"name":"Lean.Order.instOrderPi","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L474-L478"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.fix_induct\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">fix_induct</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CCPO\">CCPO</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">motive</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hadm</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.admissible\">admissible</a> <span class=\"fn\">motive</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">x</span></span> → <span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">motive</span> <span class=\"fn\">(<a href=\"./Init/Internal/Order/Basic.html#Lean.Order.fix\">fix</a> <span class=\"fn\">f</span> <span class=\"fn\">hf</span>)</span></span></div></div>","info":{"doc":"The fixpoint induction theme: An admissible predicate holds for a least fixpoint if it is preserved\nby the fixpoint's function.\n\nThis is intended to be used in the construction of `partial_fixpoint`, and not meant to be used otherwise.\n","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.fix_induct","kind":"theorem","line":449,"name":"Lean.Order.fix_induct","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L449-L462"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.fix_eq\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">fix_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CCPO\">CCPO</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.fix\">fix</a> <span class=\"fn\">f</span> <span class=\"fn\">hf</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Init/Internal/Order/Basic.html#Lean.Order.fix\">fix</a> <span class=\"fn\">f</span> <span class=\"fn\">hf</span>)</span></span></div></div>","info":{"doc":"The main fixpoint theorem for fixed points of monotone functions in chain-complete partial orders.\n\nThis is intended to be used in the construction of `partial_fixpoint`, and not meant to be used otherwise.\n","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.fix_eq","kind":"theorem","line":433,"name":"Lean.Order.fix_eq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L433-L447"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.fix\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">fix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CCPO\">CCPO</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hmono</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"The least fixpoint of a monotone function is the least upper bound of its transfinite iteration.\n\nThe `monotone f` assumption is not strictly necessarily for the definition, but without this the\ndefinition is not very meaningful and it simplifies applying theorems like `fix_eq` if every use of\n`fix` already has the monotonicity requirement.\n\nThis is intended to be used in the construction of `partial_fixpoint`, and not meant to be used otherwise.\n","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.fix","kind":"def","line":422,"name":"Lean.Order.fix","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L422-L431"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.rel_f_of_iterates\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">rel_f_of_iterates</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CCPO\">CCPO</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.iterates\">iterates</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder.rel\">PartialOrder.rel</a> <span class=\"fn\">x</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.rel_f_of_iterates","kind":"theorem","line":409,"name":"Lean.Order.rel_f_of_iterates","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L409-L419"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.chain_iterates\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">chain_iterates</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CCPO\">CCPO</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.chain\">chain</a> <span class=\"fn\">(<a href=\"./Init/Internal/Order/Basic.html#Lean.Order.iterates\">iterates</a> <span class=\"fn\">f</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.chain_iterates","kind":"theorem","line":365,"name":"Lean.Order.chain_iterates","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L365-L407"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.iterates.sup\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">iterates</span>.<span class=\"name\">sup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CCPO\">CCPO</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hc</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.chain\">chain</a> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hi</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span> <span class=\"fn\">x</span></span> → <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.iterates\">iterates</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.iterates\">iterates</a> <span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CCPO.csup\">CCPO.csup</a> <span class=\"fn\">c</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.iterates.sup","kind":"ctor","line":363,"name":"Lean.Order.iterates.sup","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L363-L363"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.iterates.step\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">iterates</span>.<span class=\"name\">step</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CCPO\">CCPO</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.iterates\">iterates</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span> → <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.iterates\">iterates</a> <span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.iterates.step","kind":"ctor","line":362,"name":"Lean.Order.iterates.step","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L362-L362"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.iterates\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">iterates</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CCPO\">CCPO</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>","info":{"doc":"The transfinite iteration of a function `f` is a set that is `⊥ ` and is closed under application\nof `f` and `csup`.\n\nThis is intended to be used in the construction of `partial_fixpoint`, and not meant to be used otherwise.\n","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.iterates","kind":"inductive","line":355,"name":"Lean.Order.iterates","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L355-L363"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.lfp_le_of_le_monotone\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">lfp_le_of_le_monotone</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CompleteLattice\">CompleteLattice</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hm</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">f</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder.rel\">PartialOrder.rel</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span> <span class=\"fn\">x</span></span> → <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder.rel\">PartialOrder.rel</a> <span class=\"fn\">(<a href=\"./Init/Internal/Order/Basic.html#Lean.Order.lfp_monotone\">lfp_monotone</a> <span class=\"fn\">f</span> <span class=\"fn\">hm</span>)</span> <span class=\"fn\">x</span></span></span></div></div>","info":{"doc":"Park induction for least fixpoint of a monotone function `f`.\nTakes an explicit witness of `f` being monotone.\n","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.lfp_le_of_le_monotone","kind":"theorem","line":336,"name":"Lean.Order.lfp_le_of_le_monotone","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L336-L343"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.lfp_le_of_le\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">lfp_le_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CompleteLattice\">CompleteLattice</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder.rel\">PartialOrder.rel</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span> <span class=\"fn\">x</span></span> → <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder.rel\">PartialOrder.rel</a> <span class=\"fn\">(<a href=\"./Init/Internal/Order/Basic.html#Lean.Order.lfp\">lfp</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">x</span></span></span></div></div>","info":{"doc":"Park induction principle for least fixpoint.\nIn general, this construction does not require monotonicity of `f`.\nMonotonicity is required to show that `lfp f` is indeed a fixpoint of `f`.\n","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.lfp_le_of_le","kind":"theorem","line":328,"name":"Lean.Order.lfp_le_of_le","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L328-L334"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.lfp_monotone_fix\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">lfp_monotone_fix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CompleteLattice\">CompleteLattice</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hm</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">f</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.lfp_monotone\">lfp_monotone</a> <span class=\"fn\">f</span> <span class=\"fn\">hm</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Init/Internal/Order/Basic.html#Lean.Order.lfp_monotone\">lfp_monotone</a> <span class=\"fn\">f</span> <span class=\"fn\">hm</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.lfp_monotone_fix","kind":"theorem","line":325,"name":"Lean.Order.lfp_monotone_fix","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L325-L326"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.lfp_fix\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">lfp_fix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CompleteLattice\">CompleteLattice</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hm</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.lfp\">lfp</a> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Init/Internal/Order/Basic.html#Lean.Order.lfp\">lfp</a> <span class=\"fn\">f</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.lfp_fix","kind":"theorem","line":316,"name":"Lean.Order.lfp_fix","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L316-L322"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.lfp_postfixed\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">lfp_postfixed</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CompleteLattice\">CompleteLattice</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hm</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">f</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder.rel\">PartialOrder.rel</a> <span class=\"fn\">(<a href=\"./Init/Internal/Order/Basic.html#Lean.Order.lfp\">lfp</a> <span class=\"fn\">f</span>)</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Init/Internal/Order/Basic.html#Lean.Order.lfp\">lfp</a> <span class=\"fn\">f</span>)</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.lfp_postfixed","kind":"theorem","line":309,"name":"Lean.Order.lfp_postfixed","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L309-L313"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.lfp_prefixed\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">lfp_prefixed</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CompleteLattice\">CompleteLattice</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hm</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">f</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder.rel\">PartialOrder.rel</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">(<a href=\"./Init/Internal/Order/Basic.html#Lean.Order.lfp\">lfp</a> <span class=\"fn\">f</span>)</span>)</span> <span class=\"fn\">(<a href=\"./Init/Internal/Order/Basic.html#Lean.Order.lfp\">lfp</a> <span class=\"fn\">f</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.lfp_prefixed","kind":"theorem","line":298,"name":"Lean.Order.lfp_prefixed","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L298-L306"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.lfp_monotone\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">lfp_monotone</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CompleteLattice\">CompleteLattice</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hm</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.lfp_monotone","kind":"def","line":294,"name":"Lean.Order.lfp_monotone","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L294-L295"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.lfp\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">lfp</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CompleteLattice\">CompleteLattice</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.lfp","kind":"def","line":289,"name":"Lean.Order.lfp","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L289-L290"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.admissible_pi\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">admissible_pi</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CCPO\">CCPO</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">β</span> → <a href=\"./foundational_types.html\">Prop</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hadm₁</span> : <span class=\"fn\">∀ (<span class=\"fn\">y</span> : <span class=\"fn\">β</span>), <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.admissible\">admissible</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.admissible\">admissible</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">∀ (<span class=\"fn\">y</span> : <span class=\"fn\">β</span>), <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.admissible_pi","kind":"def","line":274,"name":"Lean.Order.admissible_pi","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L274-L276"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.admissible_or\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">admissible_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CCPO\">CCPO</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hadm₁</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.admissible\">admissible</a> <span class=\"fn\">P</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hadm₂</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.admissible\">admissible</a> <span class=\"fn\">Q</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.admissible\">admissible</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">Q</span> <span class=\"fn\">x</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.admissible_or","kind":"theorem","line":239,"name":"Lean.Order.admissible_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L239-L272"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.csup_conj\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">csup_conj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CCPO\">CCPO</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c </span><span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hchain</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.chain\">chain</a> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span> <span class=\"fn\">x</span></span> → <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">y</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\">c</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder.rel\">PartialOrder.rel</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">y</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CCPO.csup\">CCPO.csup</a> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CCPO.csup\">CCPO.csup</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">c</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.csup_conj","kind":"theorem","line":227,"name":"Lean.Order.csup_conj","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L227-L237"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.chain_conj\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">chain_conj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CCPO\">CCPO</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c </span><span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hchain</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.chain\">chain</a> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.chain\">chain</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">c</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.chain_conj","kind":"theorem","line":223,"name":"Lean.Order.chain_conj","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L223-L225"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.admissible_and\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">admissible_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CCPO\">CCPO</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P </span><span class=\"fn\">Q</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hadm₁</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.admissible\">admissible</a> <span class=\"fn\">P</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hadm₂</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.admissible\">admissible</a> <span class=\"fn\">Q</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.admissible\">admissible</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">P</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\">Q</span> <span class=\"fn\">x</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.admissible_and","kind":"theorem","line":217,"name":"Lean.Order.admissible_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L217-L221"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.admissible_const_true\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">admissible_const_true</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CCPO\">CCPO</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.admissible\">admissible</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <a href=\"./Init/Prelude.html#True\">True</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.admissible_const_true","kind":"theorem","line":214,"name":"Lean.Order.admissible_const_true","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L214-L215"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.admissible\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">admissible</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CCPO\">CCPO</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">P</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"A predicate is admissible if it can be transferred from the elements of a chain to the chains least\nupper bound. Such predicates can be used in fixpoint induction.\n\nThis definition implies `P ⊥`. Sometimes (e.g. in Isabelle) the empty chain is excluded\nfrom this definition, and `P ⊥` is a separate condition of the induction predicate.\n\nThis is intended to be used in the construction of `partial_fixpoint`, and not meant to be used otherwise.\n","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.admissible","kind":"def","line":202,"name":"Lean.Order.admissible","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L202-L212"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone_compose\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">monotone_compose</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Sort</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">γ</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\">γ</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hf</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">f</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hg</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">g</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.monotone_compose","kind":"theorem","line":188,"name":"Lean.Order.monotone_compose","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L188-L192"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone_id\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">monotone_id</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">x</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.monotone_id","kind":"theorem","line":185,"name":"Lean.Order.monotone_id","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L185-L186"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone_const\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">monotone_const</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\">monotone</a> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\">c</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.monotone_const","kind":"theorem","line":182,"name":"Lean.Order.monotone_const","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L182-L183"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.monotone\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">monotone</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Sort</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"A function is monotone if it maps related elements to related elements.\n\nThis is intended to be used in the construction of `partial_fixpoint`, and not meant to be used otherwise.\n","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.monotone","kind":"def","line":175,"name":"Lean.Order.monotone","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L175-L180"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.inf_le\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">inf_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CompleteLattice\">CompleteLattice</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hy</span> : <span class=\"fn\"><span class=\"fn\">c</span> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder.rel\">PartialOrder.rel</a> <span class=\"fn\">(<a href=\"./Init/Internal/Order/Basic.html#Lean.Order.inf\">inf</a> <span class=\"fn\">c</span>)</span> <span class=\"fn\">y</span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.inf_le","kind":"theorem","line":166,"name":"Lean.Order.inf_le","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L166-L166"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.le_inf\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">le_inf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CompleteLattice\">CompleteLattice</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(∀ (<span class=\"fn\">y</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span> <span class=\"fn\">y</span></span> → <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder.rel\">PartialOrder.rel</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></span>)</span> → <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder.rel\">PartialOrder.rel</a> <span class=\"fn\">x</span> <span class=\"fn\">(<a href=\"./Init/Internal/Order/Basic.html#Lean.Order.inf\">inf</a> <span class=\"fn\">c</span>)</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.le_inf","kind":"theorem","line":164,"name":"Lean.Order.le_inf","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L164-L164"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.inf_spec\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">inf_spec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CompleteLattice\">CompleteLattice</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder.rel\">PartialOrder.rel</a> <span class=\"fn\">x</span> <span class=\"fn\">(<a href=\"./Init/Internal/Order/Basic.html#Lean.Order.inf\">inf</a> <span class=\"fn\">c</span>)</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">y</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span> <span class=\"fn\">y</span></span> → <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder.rel\">PartialOrder.rel</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.inf_spec","kind":"theorem","line":146,"name":"Lean.Order.inf_spec","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L146-L162"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.inf\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">inf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CompleteLattice\">CompleteLattice</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.inf","kind":"def","line":144,"name":"Lean.Order.inf","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L144-L144"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.le_sup\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">le_sup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CompleteLattice\">CompleteLattice</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hy</span> : <span class=\"fn\"><span class=\"fn\">c</span> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder.rel\">PartialOrder.rel</a> <span class=\"fn\">y</span> <span class=\"fn\">(<a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CompleteLattice.sup\">CompleteLattice.sup</a> <span class=\"fn\">c</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.le_sup","kind":"theorem","line":141,"name":"Lean.Order.le_sup","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L141-L142"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.sup_le\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">sup_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CompleteLattice\">CompleteLattice</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(∀ (<span class=\"fn\">y</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span> <span class=\"fn\">y</span></span> → <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder.rel\">PartialOrder.rel</a> <span class=\"fn\">y</span> <span class=\"fn\">x</span></span></span>)</span> → <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder.rel\">PartialOrder.rel</a> <span class=\"fn\">(<a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CompleteLattice.sup\">CompleteLattice.sup</a> <span class=\"fn\">c</span>)</span> <span class=\"fn\">x</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.sup_le","kind":"theorem","line":138,"name":"Lean.Order.sup_le","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L138-L139"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.CompleteLattice.sup_spec\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">CompleteLattice</span>.<span class=\"name\">sup_spec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CompleteLattice\">CompleteLattice</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder.rel\">PartialOrder.rel</a> <span class=\"fn\">(<a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CompleteLattice.sup\">sup</a> <span class=\"fn\">c</span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">y</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span> <span class=\"fn\">y</span></span> → <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder.rel\">PartialOrder.rel</a> <span class=\"fn\">y</span> <span class=\"fn\">x</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.CompleteLattice.sup_spec","kind":"theorem","line":132,"name":"Lean.Order.CompleteLattice.sup_spec","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L132-L132"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.CompleteLattice.sup\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">CompleteLattice</span>.<span class=\"name\">sup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CompleteLattice\">CompleteLattice</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a>)</span> → <span class=\"fn\">α</span></span></div></div>","info":{"doc":"The least upper bound of an arbitrary subset in the complete_lattice.\n","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.CompleteLattice.sup","kind":"def","line":131,"name":"Lean.Order.CompleteLattice.sup","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L131-L131"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.CompleteLattice.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">CompleteLattice</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">toPartialOrder</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sup</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a>)</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sup_spec</span> : <span class=\"fn\">∀ {<span class=\"fn\">x</span> : <span class=\"fn\">α</span>} {<span class=\"fn\">c</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}, <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder.rel\">PartialOrder.rel</a> <span class=\"fn\">(<span class=\"fn\">sup</span> <span class=\"fn\">c</span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">y</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span> <span class=\"fn\">y</span></span> → <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder.rel\">PartialOrder.rel</a> <span class=\"fn\">y</span> <span class=\"fn\">x</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CompleteLattice\">CompleteLattice</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.CompleteLattice.mk","kind":"ctor","line":127,"name":"Lean.Order.CompleteLattice.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L127-L127"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.CompleteLattice.toPartialOrder\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">CompleteLattice</span>.<span class=\"name\">toPartialOrder</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CompleteLattice\">CompleteLattice</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.CompleteLattice.toPartialOrder","kind":"def","line":127,"name":"Lean.Order.CompleteLattice.toPartialOrder","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L127-L132"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.CompleteLattice\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">CompleteLattice</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u)</span></span>\n<span class=\"decl_extends\">extends</span> <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">Lean.Order.PartialOrder</a> <span class=\"fn\">α</span></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Sort</a> (max 1 u)</div></div>","info":{"doc":"A complete lattice is a partial order where every subset has a least upper bound.\n","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.CompleteLattice","kind":"class","line":124,"name":"Lean.Order.CompleteLattice","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L124-L132"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.bot_le\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">bot_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CCPO\">CCPO</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder.rel\">PartialOrder.rel</a> <a href=\"./Init/Internal/Order/Basic.html#Lean.Order.bot\">bot</a> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.bot_le","kind":"theorem","line":115,"name":"Lean.Order.bot_le","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L115-L118"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.«term⊥»\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">«term⊥»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.«term⊥»","kind":"def","line":113,"name":"Lean.Order.«term⊥»","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L113-L113"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.bot\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">bot</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CCPO\">CCPO</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"The bottom element is the least upper bound of the empty chain.\n\nThis is intended to be used in the construction of `partial_fixpoint`, and not meant to be used otherwise.\n","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.bot","kind":"def","line":106,"name":"Lean.Order.bot","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L106-L111"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.le_csup\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">le_csup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CCPO\">CCPO</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hchain</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.chain\">chain</a> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hy</span> : <span class=\"fn\"><span class=\"fn\">c</span> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder.rel\">PartialOrder.rel</a> <span class=\"fn\">y</span> <span class=\"fn\">(<a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CCPO.csup\">CCPO.csup</a> <span class=\"fn\">c</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.le_csup","kind":"theorem","line":103,"name":"Lean.Order.le_csup","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L103-L104"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.csup_le\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">csup_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CCPO\">CCPO</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hchain</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.chain\">chain</a> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(∀ (<span class=\"fn\">y</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span> <span class=\"fn\">y</span></span> → <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder.rel\">PartialOrder.rel</a> <span class=\"fn\">y</span> <span class=\"fn\">x</span></span></span>)</span> → <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder.rel\">PartialOrder.rel</a> <span class=\"fn\">(<a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CCPO.csup\">CCPO.csup</a> <span class=\"fn\">c</span>)</span> <span class=\"fn\">x</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.csup_le","kind":"theorem","line":100,"name":"Lean.Order.csup_le","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L100-L101"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.CCPO.csup_spec\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">CCPO</span>.<span class=\"name\">csup_spec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CCPO\">CCPO</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hc</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.chain\">chain</a> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder.rel\">PartialOrder.rel</a> <span class=\"fn\">(<a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CCPO.csup\">csup</a> <span class=\"fn\">c</span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">y</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span> <span class=\"fn\">y</span></span> → <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder.rel\">PartialOrder.rel</a> <span class=\"fn\">y</span> <span class=\"fn\">x</span></span></span></span></div></div>","info":{"doc":"`csup c` is the least upper bound of the chain `c` when all elements `x` that are at\nleast as large as `csup c` are at least as large as all elements of `c`, and vice versa.\n","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.CCPO.csup_spec","kind":"theorem","line":94,"name":"Lean.Order.CCPO.csup_spec","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L94-L94"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.CCPO.csup\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">CCPO</span>.<span class=\"name\">csup</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CCPO\">CCPO</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a>)</span> → <span class=\"fn\">α</span></span></div></div>","info":{"doc":"The least upper bound of a chain.\n\nThis is intended to be used in the construction of `partial_fixpoint`, and not meant to be used\notherwise.\n","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.CCPO.csup","kind":"def","line":89,"name":"Lean.Order.CCPO.csup","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L89-L89"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.CCPO.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">CCPO</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">toPartialOrder</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">csup</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a>)</span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">csup_spec</span> : <span class=\"fn\">∀ {<span class=\"fn\">x</span> : <span class=\"fn\">α</span>} {<span class=\"fn\">c</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>}, <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.chain\">chain</a> <span class=\"fn\">c</span></span> → (<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder.rel\">PartialOrder.rel</a> <span class=\"fn\">(<span class=\"fn\">csup</span> <span class=\"fn\">c</span>)</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">y</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">c</span> <span class=\"fn\">y</span></span> → <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder.rel\">PartialOrder.rel</a> <span class=\"fn\">y</span> <span class=\"fn\">x</span></span></span></span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CCPO\">CCPO</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.CCPO.mk","kind":"ctor","line":82,"name":"Lean.Order.CCPO.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L82-L82"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.CCPO.toPartialOrder\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">CCPO</span>.<span class=\"name\">toPartialOrder</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.CCPO\">CCPO</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.CCPO.toPartialOrder","kind":"def","line":82,"name":"Lean.Order.CCPO.toPartialOrder","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L82-L94"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.CCPO\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">CCPO</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u)</span></span>\n<span class=\"decl_extends\">extends</span> <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">Lean.Order.PartialOrder</a> <span class=\"fn\">α</span></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Sort</a> (max 1 u)</div></div>","info":{"doc":"A chain-complete partial order (CCPO) is a partial order where every chain has a least upper bound.\n\nThis is intended to be used in the construction of `partial_fixpoint`, and not meant to be used\notherwise.\n","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.CCPO","kind":"class","line":76,"name":"Lean.Order.CCPO","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L76-L94"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.chain\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">chain</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"A chain is a totally ordered set (representing a set as a predicate).\n\nThis is intended to be used in the construction of `partial_fixpoint`, and not meant to be used otherwise.\n","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.chain","kind":"def","line":65,"name":"Lean.Order.chain","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L65-L70"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder.rel_of_eq\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">PartialOrder</span>.<span class=\"name\">rel_of_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder.rel\">rel</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder.rel_of_eq","kind":"theorem","line":63,"name":"Lean.Order.PartialOrder.rel_of_eq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L63-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.«term_⊑_»\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">«term_⊑_»</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TrailingParserDescr\">TrailingParserDescr</a></div></div>","info":{"doc":"A “less-or-equal-to” or “approximates” relation.\n\nThis is intended to be used in the construction of `partial_fixpoint`, and not meant to be used otherwise.\n","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.«term_⊑_»","kind":"def","line":57,"name":"Lean.Order.«term_⊑_»","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L57-L57"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder.rel_antisymm\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">PartialOrder</span>.<span class=\"name\">rel_antisymm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder.rel\">rel</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder.rel\">rel</a> <span class=\"fn\">y</span> <span class=\"fn\">x</span></span> → <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></span></div></div>","info":{"doc":"The “less-or-equal-to” or “approximates” relation is antisymmetric. ","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder.rel_antisymm","kind":"theorem","line":55,"name":"Lean.Order.PartialOrder.rel_antisymm","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L55-L55"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder.rel_trans\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">PartialOrder</span>.<span class=\"name\">rel_trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y </span><span class=\"fn\">z</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder.rel\">rel</a> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder.rel\">rel</a> <span class=\"fn\">y</span> <span class=\"fn\">z</span></span> → <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder.rel\">rel</a> <span class=\"fn\">x</span> <span class=\"fn\">z</span></span></span></span></div></div>","info":{"doc":"The “less-or-equal-to” or “approximates” relation is transitive. ","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder.rel_trans","kind":"theorem","line":53,"name":"Lean.Order.PartialOrder.rel_trans","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L53-L53"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder.rel_refl\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">PartialOrder</span>.<span class=\"name\">rel_refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder.rel\">rel</a> <span class=\"fn\">x</span> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"The “less-or-equal-to” or “approximates” relation is reflexive. ","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder.rel_refl","kind":"theorem","line":51,"name":"Lean.Order.PartialOrder.rel_refl","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L51-L51"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder.rel\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">PartialOrder</span>.<span class=\"name\">rel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>","info":{"doc":"A “less-or-equal-to” or “approximates” relation.\n\nThis is intended to be used in the construction of `partial_fixpoint`, and not meant to be used otherwise.\n","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder.rel","kind":"def","line":49,"name":"Lean.Order.PartialOrder.rel","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L49-L49"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">PartialOrder</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rel</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">α</span> → <a href=\"./foundational_types.html\">Prop</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rel_refl</span> : <span class=\"fn\">∀ {<span class=\"fn\">x</span> : <span class=\"fn\">α</span>}, <span class=\"fn\"><span class=\"fn\">rel</span> <span class=\"fn\">x</span> <span class=\"fn\">x</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rel_trans</span> : <span class=\"fn\">∀ {<span class=\"fn\">x </span><span class=\"fn\">y </span><span class=\"fn\">z</span> : <span class=\"fn\">α</span>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">rel</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">rel</span> <span class=\"fn\">y</span> <span class=\"fn\">z</span></span> → <span class=\"fn\"><span class=\"fn\">rel</span> <span class=\"fn\">x</span> <span class=\"fn\">z</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">rel_antisymm</span> : <span class=\"fn\">∀ {<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}, <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">rel</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">rel</span> <span class=\"fn\">y</span> <span class=\"fn\">x</span></span> → <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\">PartialOrder</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder.mk","kind":"ctor","line":43,"name":"Lean.Order.PartialOrder.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L43-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder\"><span class=\"name\">Lean</span>.<span class=\"name\">Order</span>.<span class=\"name\">PartialOrder</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Sort</a> (max 1 u)</div></div>","info":{"doc":"A partial order is a reflexive, transitive and antisymmetric relation.\n\nThis is intended to be used in the construction of `partial_fixpoint`, and not meant to be used otherwise.\n","docLink":"./Init/Internal/Order/Basic.html#Lean.Order.PartialOrder","kind":"class","line":38,"name":"Lean.Order.PartialOrder","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Internal/Order/Basic.lean#L38-L55"}}],"imports":["Init.ByCases","Init.RCases","Init.Control.Except","Init.Control.StateRef","Init.Control.Option","Init.System.IO","Init.Control.Except","Init.Control.StateRef","Init.Control.Option","Init.System.IO"],"instances":[{"className":"Lean.Order.PartialOrder","name":"Lean.Order.instOrderPi","typeNames":[]},{"className":"Lean.Order.CCPO","name":"Lean.Order.instCCPOPi","typeNames":[]},{"className":"Lean.Order.CompleteLattice","name":"Lean.Order.instCompleteLatticePi","typeNames":[]},{"className":"Lean.Order.PartialOrder","name":"Lean.Order.instPartialOrderPProd","typeNames":["PProd"]},{"className":"Lean.Order.CompleteLattice","name":"Lean.Order.instCompleteLatticePProd","typeNames":["PProd"]},{"className":"Lean.Order.CCPO","name":"Lean.Order.instCCPOPProd","typeNames":["PProd"]},{"className":"Lean.Order.PartialOrder","name":"Lean.Order.FlatOrder.instOrder","typeNames":["Lean.Order.FlatOrder"]},{"className":"Lean.Order.CCPO","name":"Lean.Order.FlatOrder.instCCPO","typeNames":["Lean.Order.FlatOrder"]},{"className":"Lean.Order.PartialOrder","name":"Lean.Order.instPartialOrderOption","typeNames":["Option"]},{"className":"Lean.Order.CCPO","name":"Lean.Order.instCCPOOption","typeNames":["Option"]},{"className":"Lean.Order.MonoBind","name":"Lean.Order.instMonoBindOption","typeNames":["Option"]},{"className":"Lean.Order.PartialOrder","name":"Lean.Order.instPartialOrderExceptT","typeNames":["ExceptT"]},{"className":"Lean.Order.CCPO","name":"Lean.Order.instCCPOExceptT","typeNames":["ExceptT"]},{"className":"Lean.Order.MonoBind","name":"Lean.Order.instMonoBindExceptT","typeNames":["ExceptT"]},{"className":"Lean.Order.PartialOrder","name":"Lean.Order.instPartialOrderOptionT","typeNames":["OptionT"]},{"className":"Lean.Order.CCPO","name":"Lean.Order.instCCPOOptionT","typeNames":["OptionT"]},{"className":"Lean.Order.MonoBind","name":"Lean.Order.instMonoBindOptionT","typeNames":["OptionT"]},{"className":"Lean.Order.PartialOrder","name":"Lean.Order.instPartialOrderReaderT","typeNames":["ReaderT"]},{"className":"Lean.Order.CCPO","name":"Lean.Order.instCCPOReaderT","typeNames":["ReaderT"]},{"className":"Lean.Order.MonoBind","name":"Lean.Order.instMonoBindReaderT","typeNames":["ReaderT"]},{"className":"Lean.Order.PartialOrder","name":"Lean.Order.instPartialOrderStateRefT'","typeNames":["StateRefT'"]},{"className":"Lean.Order.CCPO","name":"Lean.Order.instCCPOStateRefT'","typeNames":["StateRefT'"]},{"className":"Lean.Order.MonoBind","name":"Lean.Order.instMonoBindStateRefT'","typeNames":["StateRefT'"]},{"className":"Lean.Order.PartialOrder","name":"Lean.Order.instPartialOrderStateT","typeNames":["StateT"]},{"className":"Lean.Order.CCPO","name":"Lean.Order.instCCPOStateT","typeNames":["StateT"]},{"className":"Lean.Order.MonoBind","name":"Lean.Order.instMonoBindStateT","typeNames":["StateT"]},{"className":"Lean.Order.CCPO","name":"Lean.Order.instCCPOEIOOfNonempty","typeNames":["EIO"]},{"className":"Lean.Order.MonoBind","name":"Lean.Order.instMonoBindEIO","typeNames":["EIO"]},{"className":"Lean.Order.PartialOrder","name":"Lean.Order.ImplicationOrder.instOrder","typeNames":["Lean.Order.ImplicationOrder"]},{"className":"Lean.Order.CompleteLattice","name":"Lean.Order.ImplicationOrder.instCompleteLattice","typeNames":["Lean.Order.ImplicationOrder"]},{"className":"Lean.Order.PartialOrder","name":"Lean.Order.ReverseImplicationOrder.instOrder","typeNames":["Lean.Order.ReverseImplicationOrder"]},{"className":"Lean.Order.CompleteLattice","name":"Lean.Order.ReverseImplicationOrder.instCompleteLattice","typeNames":["Lean.Order.ReverseImplicationOrder"]}],"name":"Init.Internal.Order.Basic"}