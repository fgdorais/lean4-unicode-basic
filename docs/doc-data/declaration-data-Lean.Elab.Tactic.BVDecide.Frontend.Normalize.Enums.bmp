{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/Normalize/Enums.html#Lean.Elab.Tactic.BVDecide.Frontend.Normalize.enumsPass\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">enumsPass</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/BVDecide/Frontend/Normalize/Basic.html#Lean.Elab.Tactic.BVDecide.Frontend.Normalize.Pass\">Pass</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/Normalize/Enums.html#Lean.Elab.Tactic.BVDecide.Frontend.Normalize.enumsPass","kind":"def","line":412,"name":"Lean.Elab.Tactic.BVDecide.Frontend.Normalize.enumsPass","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/BVDecide/Frontend/Normalize/Enums.lean#L412-L501"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/Normalize/Enums.html#Lean.Elab.Tactic.BVDecide.Frontend.Normalize.enumToBitVecCtor\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">enumToBitVecCtor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simproc\">Meta.Simp.Simproc</a></div></div>","info":{"doc":"This simproc should be set up to trigger on expressions of the form `EnumInductive.enumToBitVec x`.\nIt will check if `x` is a constructor and if that is the case constant fold it to the corresponding\n`BitVec` value.\n","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/Normalize/Enums.html#Lean.Elab.Tactic.BVDecide.Frontend.Normalize.enumToBitVecCtor","kind":"def","line":383,"name":"Lean.Elab.Tactic.BVDecide.Frontend.Normalize.enumToBitVecCtor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/BVDecide/Frontend/Normalize/Enums.lean#L383-L397"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/Normalize/Enums.html#Lean.Elab.Tactic.BVDecide.Frontend.Normalize.getMatchEqCondFor\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">getMatchEqCondFor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"Obtain a theorem that translates `.match_x` applications on enum inductives to chains of `cond`\napplications. If the specific `.match_x` that this is being called on is unsupported throw an error.\n","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/Normalize/Enums.html#Lean.Elab.Tactic.BVDecide.Frontend.Normalize.getMatchEqCondFor","kind":"def","line":343,"name":"Lean.Elab.Tactic.BVDecide.Frontend.Normalize.getMatchEqCondFor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/BVDecide/Frontend/Normalize/Enums.lean#L343-L351"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/Normalize/Enums.html#Lean.Elab.Tactic.BVDecide.Frontend.Normalize.getEnumToBitVecLeFor\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">getEnumToBitVecLeFor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"Assuming that `declName` is an enum inductive, construct a proof of\n`∀ (x : declName) : x.enumToBitVec ≤ domainSize - 1` where `domainSize` is the amount of\nconstructors of `declName`.\n","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/Normalize/Enums.html#Lean.Elab.Tactic.BVDecide.Frontend.Normalize.getEnumToBitVecLeFor","kind":"def","line":180,"name":"Lean.Elab.Tactic.BVDecide.Frontend.Normalize.getEnumToBitVecLeFor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/BVDecide/Frontend/Normalize/Enums.lean#L180-L218"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/Normalize/Enums.html#Lean.Elab.Tactic.BVDecide.Frontend.Normalize.getEqIffEnumToBitVecEqFor\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">getEqIffEnumToBitVecEqFor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"Assuming that `declName` is an enum inductive, construct a proof of\n`∀ (x y : declName) : x = y ↔ x.enumToBitVec = y.enumToBitVec`.\n","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/Normalize/Enums.html#Lean.Elab.Tactic.BVDecide.Frontend.Normalize.getEqIffEnumToBitVecEqFor","kind":"def","line":118,"name":"Lean.Elab.Tactic.BVDecide.Frontend.Normalize.getEqIffEnumToBitVecEqFor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/BVDecide/Frontend/Normalize/Enums.lean#L118-L178"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/Normalize/Enums.html#Lean.Elab.Tactic.BVDecide.Frontend.Normalize.getEnumToBitVecFor\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">getEnumToBitVecFor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"Assuming that `declName` is an enum inductive construct a function of type `declName → BitVec w`\nthat maps `declName` constructors to their numeric indices as `BitVec`.\n","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/Normalize/Enums.html#Lean.Elab.Tactic.BVDecide.Frontend.Normalize.getEnumToBitVecFor","kind":"def","line":47,"name":"Lean.Elab.Tactic.BVDecide.Frontend.Normalize.getEnumToBitVecFor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/BVDecide/Frontend/Normalize/Enums.lean#L47-L82"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/Normalize/Enums.html#Lean.Elab.Tactic.BVDecide.Frontend.Normalize.matchEqCondSuffix\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">matchEqCondSuffix</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/Normalize/Enums.html#Lean.Elab.Tactic.BVDecide.Frontend.Normalize.matchEqCondSuffix","kind":"def","line":45,"name":"Lean.Elab.Tactic.BVDecide.Frontend.Normalize.matchEqCondSuffix","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/BVDecide/Frontend/Normalize/Enums.lean#L45-L45"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/Normalize/Enums.html#Lean.Elab.Tactic.BVDecide.Frontend.Normalize.enumToBitVecLeSuffix\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">enumToBitVecLeSuffix</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/Normalize/Enums.html#Lean.Elab.Tactic.BVDecide.Frontend.Normalize.enumToBitVecLeSuffix","kind":"def","line":44,"name":"Lean.Elab.Tactic.BVDecide.Frontend.Normalize.enumToBitVecLeSuffix","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/BVDecide/Frontend/Normalize/Enums.lean#L44-L44"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/Normalize/Enums.html#Lean.Elab.Tactic.BVDecide.Frontend.Normalize.eqIffEnumToBitVecEqSuffix\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">eqIffEnumToBitVecEqSuffix</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/Normalize/Enums.html#Lean.Elab.Tactic.BVDecide.Frontend.Normalize.eqIffEnumToBitVecEqSuffix","kind":"def","line":43,"name":"Lean.Elab.Tactic.BVDecide.Frontend.Normalize.eqIffEnumToBitVecEqSuffix","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/BVDecide/Frontend/Normalize/Enums.lean#L43-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/Frontend/Normalize/Enums.html#Lean.Elab.Tactic.BVDecide.Frontend.Normalize.enumToBitVecSuffix\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Frontend</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">enumToBitVecSuffix</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/BVDecide/Frontend/Normalize/Enums.html#Lean.Elab.Tactic.BVDecide.Frontend.Normalize.enumToBitVecSuffix","kind":"def","line":42,"name":"Lean.Elab.Tactic.BVDecide.Frontend.Normalize.enumToBitVecSuffix","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/BVDecide/Frontend/Normalize/Enums.lean#L42-L42"}}],"imports":["Lean.Elab.Tactic.BVDecide.Frontend.Normalize.Basic","Lean.Elab.Tactic.BVDecide.Frontend.Normalize.TypeAnalysis","Lean.Elab.Tactic.BVDecide.Frontend.Normalize.ApplyControlFlow","Lean.Elab.Tactic.BVDecide.Frontend.Normalize.Structures","Lean.Meta.Tactic.Simp"],"instances":[],"name":"Lean.Elab.Tactic.BVDecide.Frontend.Normalize.Enums"}