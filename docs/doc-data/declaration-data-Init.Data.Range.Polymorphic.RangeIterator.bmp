{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.instLawfulIteratorLoop\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">RangeIterator</span>.<span class=\"name\">instLawfulIteratorLoop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">su</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerable\">LawfulUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableUpperBound\">LawfulUpwardEnumerableUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Loop.html#Std.Iterators.LawfulIteratorLoop\">Iterators.LawfulIteratorLoop</a> <span class=\"fn\">(<a href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator\">RangeIterator</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.instLawfulIteratorLoop","kind":"instance","line":570,"name":"Std.PRange.RangeIterator.instLawfulIteratorLoop","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/RangeIterator.lean#L570-L595"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.instIteratorLoop.loop_eq\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">RangeIterator</span>.<span class=\"name\">instIteratorLoop</span>.<span class=\"name\">loop_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">least</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">su</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerable\">LawfulUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableUpperBound\">LawfulUpwardEnumerableUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">lift</span> : <span class=\"fn\">(<span class=\"fn\">γ </span><span class=\"fn\">δ</span> : <a href=\"./foundational_types.html\">Type</a> u) → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">γ</span> → <span class=\"fn\"><span class=\"fn\">n</span> <span class=\"fn\">δ</span></span>)</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">γ</span></span> → <span class=\"fn\"><span class=\"fn\">n</span> <span class=\"fn\">δ</span></span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Iterators/Internal/LawfulMonadLiftFunction.html#Std.Internal.LawfulMonadLiftBindFunction\">Internal.LawfulMonadLiftBindFunction</a> <span class=\"fn\">lift</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">PlausibleForInStep</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">γ</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">upperBound</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">next</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hl</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.LE\">UpwardEnumerable.LE</a> <span class=\"fn\">least</span> <span class=\"fn\">next</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">hu</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound.IsSatisfied\">SupportsUpperBound.IsSatisfied</a> <span class=\"fn\">upperBound</span> <span class=\"fn\">next</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> :\n  <span class=\"fn\">(<span class=\"fn\">out</span> : <span class=\"fn\">α</span>) →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.LE\">UpwardEnumerable.LE</a> <span class=\"fn\">least</span> <span class=\"fn\">out</span></span> →\n      <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound.IsSatisfied\">SupportsUpperBound.IsSatisfied</a> <span class=\"fn\">upperBound</span> <span class=\"fn\">out</span></span> → <span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\">γ</span>) → <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <span class=\"fn\"><a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">γ</span></span> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\"><span class=\"fn\">PlausibleForInStep</span> <span class=\"fn\">out</span> <span class=\"fn\">c</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Subtype\">}</a></span></span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">acc</span> : <span class=\"fn\">γ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">wf</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Loop.html#Std.Iterators.IteratorLoop.WellFounded\">Iterators.IteratorLoop.WellFounded</a> <span class=\"fn\">(<a href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator\">RangeIterator</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">PlausibleForInStep</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.instIteratorLoop.loop\">loop</a> <span class=\"fn\">γ</span> <span class=\"fn\">PlausibleForInStep</span> <span class=\"fn\">wf</span> <span class=\"fn\">upperBound</span> <span class=\"fn\">least</span> <span class=\"fn\">acc</span> <span class=\"fn\">f</span> <span class=\"fn\">next</span> <span class=\"fn\">hl</span> <span class=\"fn\">hu</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">do\n  let <span class=\"fn\">__do_lift</span> ← <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">next</span> <span class=\"fn\">hl</span> <span class=\"fn\">hu</span> <span class=\"fn\">acc</span></span>\n  <span class=\"fn\">match <span class=\"fn\">__do_lift</span> with\n    | <a href=\"./Init/Prelude.html#Subtype.mk\">⟨</a><span class=\"fn\"><a href=\"./Init/Core.html#ForInStep.yield\">ForInStep.yield</a> <span class=\"fn\">c</span></span>, <span class=\"fn\">property</span><a href=\"./Init/Prelude.html#Subtype.mk\">⟩</a> =&gt;\n      <span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Loop.html#Std.Iterators.IterM.DefaultConsumers.forIn'\">Iterators.IterM.DefaultConsumers.forIn'</a> <span class=\"fn\">lift</span> <span class=\"fn\">γ</span> <span class=\"fn\">PlausibleForInStep</span> <span class=\"fn\">wf</span>\n        <a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.mk\">{</a> <span class=\"fn\">internalState</span> := <a href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.mk\">{</a> <span class=\"fn\">next</span> := <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.succ?\">succ?</a> <span class=\"fn\">next</span></span>, <span class=\"fn\">upperBound</span> := <span class=\"fn\">upperBound</span> <a href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.mk\">}</a> <a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.mk\">}</a> <span class=\"fn\">c</span>\n        <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.mk\">{</a> <span class=\"fn\">internalState</span> := <a href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.mk\">{</a> <span class=\"fn\">next</span> := <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.succ?\">succ?</a> <span class=\"fn\">next</span></span>, <span class=\"fn\">upperBound</span> := <span class=\"fn\">upperBound</span> <a href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.mk\">}</a> <a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.mk\">}</a>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleIndirectOutput\">IsPlausibleIndirectOutput</a></span> <span class=\"fn\">⋯</span>\n        <span class=\"fn\">fun (<span class=\"fn\">b</span> : <span class=\"fn\">α</span>)\n          (<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.mk\">{</a> <span class=\"fn\">internalState</span> := <a href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.mk\">{</a> <span class=\"fn\">next</span> := <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.succ?\">succ?</a> <span class=\"fn\">next</span></span>, <span class=\"fn\">upperBound</span> := <span class=\"fn\">upperBound</span> <a href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.mk\">}</a> <a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.mk\">}</a>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleIndirectOutput\">IsPlausibleIndirectOutput</a></span> <span class=\"fn\">b</span></span>)\n          (<span class=\"fn\">c</span> : <span class=\"fn\">γ</span>) =&gt;\n        <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">b</span> <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span> <span class=\"fn\">c</span></span></span></span>\n    | <a href=\"./Init/Prelude.html#Subtype.mk\">⟨</a><span class=\"fn\"><a href=\"./Init/Core.html#ForInStep.done\">ForInStep.done</a> <span class=\"fn\">c</span></span>, <span class=\"fn\">property</span><a href=\"./Init/Prelude.html#Subtype.mk\">⟩</a> =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">c</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.instIteratorLoop.loop_eq","kind":"theorem","line":518,"name":"Std.PRange.RangeIterator.instIteratorLoop.loop_eq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/RangeIterator.lean#L518-L568"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RepeatIterator.instIteratorLoopPartial.loop\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">RepeatIterator</span>.<span class=\"name\">instIteratorLoopPartial</span>.<span class=\"name\">loop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">su</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerable\">LawfulUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">upperBound</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">least</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">acc</span> : <span class=\"fn\">γ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">(<span class=\"fn\">out</span> : <span class=\"fn\">α</span>) → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.LE\">UpwardEnumerable.LE</a> <span class=\"fn\">least</span> <span class=\"fn\">out</span></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound.IsSatisfied\">SupportsUpperBound.IsSatisfied</a> <span class=\"fn\">upperBound</span> <span class=\"fn\">out</span></span> → <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\"><span class=\"fn\">n</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">γ</span>)</span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">next</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.LE\">UpwardEnumerable.LE</a> <span class=\"fn\">least</span> <span class=\"fn\">next</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hu</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound.IsSatisfied\">SupportsUpperBound.IsSatisfied</a> <span class=\"fn\">upperBound</span> <span class=\"fn\">next</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span> <span class=\"fn\">γ</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RepeatIterator.instIteratorLoopPartial.loop","kind":"opaque","line":494,"name":"Std.PRange.RepeatIterator.instIteratorLoopPartial.loop","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/RangeIterator.lean#L494-L506"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RepeatIterator.instIteratorLoopPartial\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">RepeatIterator</span>.<span class=\"name\">instIteratorLoopPartial</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">su</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerable\">LawfulUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableUpperBound\">LawfulUpwardEnumerableUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Loop.html#Std.Iterators.IteratorLoopPartial\">Iterators.IteratorLoopPartial</a> <span class=\"fn\">(<a href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator\">RangeIterator</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RepeatIterator.instIteratorLoopPartial","kind":"instance","line":481,"name":"Std.PRange.RepeatIterator.instIteratorLoopPartial","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/RangeIterator.lean#L481-L516"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.instIteratorLoop.loop\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">RangeIterator</span>.<span class=\"name\">instIteratorLoop</span>.<span class=\"name\">loop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">su</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerable\">LawfulUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">γ</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Pl</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">γ</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">γ</span></span> → <a href=\"./foundational_types.html\">Prop</a></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">wf</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Loop.html#Std.Iterators.IteratorLoop.WellFounded\">Iterators.IteratorLoop.WellFounded</a> <span class=\"fn\">(<a href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator\">RangeIterator</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">Pl</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">upperBound</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">least</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">acc</span> : <span class=\"fn\">γ</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> :\n  <span class=\"fn\">(<span class=\"fn\">out</span> : <span class=\"fn\">α</span>) →\n    <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.LE\">UpwardEnumerable.LE</a> <span class=\"fn\">least</span> <span class=\"fn\">out</span></span> →\n      <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound.IsSatisfied\">SupportsUpperBound.IsSatisfied</a> <span class=\"fn\">upperBound</span> <span class=\"fn\">out</span></span> → <span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\">γ</span>) → <span class=\"fn\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#Subtype\">{</a> <span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#Subtype\">:</a> <span class=\"fn\"><a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">γ</span></span> <a href=\"./Init/Prelude.html#Subtype\">//</a> <span class=\"fn\"><span class=\"fn\">Pl</span> <span class=\"fn\">out</span> <span class=\"fn\">c</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Subtype\">}</a></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">next</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hl</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.LE\">UpwardEnumerable.LE</a> <span class=\"fn\">least</span> <span class=\"fn\">next</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hu</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound.IsSatisfied\">SupportsUpperBound.IsSatisfied</a> <span class=\"fn\">upperBound</span> <span class=\"fn\">next</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">n</span> <span class=\"fn\">γ</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.instIteratorLoop.loop","kind":"def","line":453,"name":"Std.PRange.RangeIterator.instIteratorLoop.loop","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/RangeIterator.lean#L453-L465"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.instIteratorLoop\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">RangeIterator</span>.<span class=\"name\">instIteratorLoop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">su</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerable\">LawfulUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableUpperBound\">LawfulUpwardEnumerableUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Loop.html#Std.Iterators.IteratorLoop\">Iterators.IteratorLoop</a> <span class=\"fn\">(<a href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator\">RangeIterator</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.instIteratorLoop","kind":"instance","line":438,"name":"Std.PRange.RangeIterator.instIteratorLoop","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/RangeIterator.lean#L438-L479"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.isPlausibleIndirectOutput_iff\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">RangeIterator</span>.<span class=\"name\">isPlausibleIndirectOutput_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">su</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerable\">LawfulUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableUpperBound\">LawfulUpwardEnumerableUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">out</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.IsPlausibleIndirectOutput\">IsPlausibleIndirectOutput</a></span> <span class=\"fn\">out</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">n</span> <a href=\"./Init/Core.html#Exists\">:</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a>     <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.internalState\">internalState</a></span>.<a href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.next\">next</a></span>.<a href=\"./Init/Data/Option/Basic.html#Option.bind\">bind</a></span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.succMany?\">succMany?</a> <span class=\"fn\">n</span> <span class=\"fn\">x</span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">out</span></span> <a href=\"./Init/Prelude.html#And\">∧</a>       <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound.IsSatisfied\">SupportsUpperBound.IsSatisfied</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.internalState\">internalState</a></span>.<a href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.upperBound\">upperBound</a></span> <span class=\"fn\">out</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.isPlausibleIndirectOutput_iff","kind":"theorem","line":420,"name":"Std.PRange.RangeIterator.isPlausibleIndirectOutput_iff","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/RangeIterator.lean#L420-L428"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.Monadic.isPlausibleIndirectOutput_iff\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">RangeIterator</span>.<span class=\"name\">Monadic</span>.<span class=\"name\">isPlausibleIndirectOutput_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">su</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerable\">LawfulUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableUpperBound\">LawfulUpwardEnumerableUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">out</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleIndirectOutput\">IsPlausibleIndirectOutput</a></span> <span class=\"fn\">out</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">n</span> <a href=\"./Init/Core.html#Exists\">:</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a>     <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.internalState\">internalState</a></span>.<a href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.next\">next</a></span>.<a href=\"./Init/Data/Option/Basic.html#Option.bind\">bind</a></span> <span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.succMany?\">succMany?</a> <span class=\"fn\">n</span> <span class=\"fn\">x</span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">out</span></span> <a href=\"./Init/Prelude.html#And\">∧</a>       <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound.IsSatisfied\">SupportsUpperBound.IsSatisfied</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.internalState\">internalState</a></span>.<a href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.upperBound\">upperBound</a></span> <span class=\"fn\">out</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.Monadic.isPlausibleIndirectOutput_iff","kind":"theorem","line":376,"name":"Std.PRange.RangeIterator.Monadic.isPlausibleIndirectOutput_iff","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/RangeIterator.lean#L376-L418"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.instLawfulDeterministicIterator\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">RangeIterator</span>.<span class=\"name\">instLawfulDeterministicIterator</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">su</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.LawfulDeterministicIterator\">Iterators.LawfulDeterministicIterator</a> <span class=\"fn\">(<a href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator\">RangeIterator</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.instLawfulDeterministicIterator","kind":"instance","line":372,"name":"Std.PRange.RangeIterator.instLawfulDeterministicIterator","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/RangeIterator.lean#L372-L374"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.instIteratorAccess\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">RangeIterator</span>.<span class=\"name\">instIteratorAccess</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">su</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerable\">LawfulUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.LawfulUpwardEnumerableUpperBound\">LawfulUpwardEnumerableUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Access.html#Std.Iterators.IteratorAccess\">Iterators.IteratorAccess</a> <span class=\"fn\">(<a href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator\">RangeIterator</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.instIteratorAccess","kind":"instance","line":306,"name":"Std.PRange.RangeIterator.instIteratorAccess","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/RangeIterator.lean#L306-L370"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.instProductive\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">RangeIterator</span>.<span class=\"name\">instProductive</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">su</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerable\">LawfulUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Productive\">Iterators.Productive</a> <span class=\"fn\">(<a href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator\">RangeIterator</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.instProductive","kind":"instance","line":300,"name":"Std.PRange.RangeIterator.instProductive","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/RangeIterator.lean#L300-L304"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.instFinite\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">RangeIterator</span>.<span class=\"name\">instFinite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">su</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.LawfulUpwardEnumerable\">LawfulUpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.HasFiniteRanges\">HasFiniteRanges</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Finite\">Iterators.Finite</a> <span class=\"fn\">(<a href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator\">RangeIterator</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.instFinite","kind":"instance","line":279,"name":"Std.PRange.RangeIterator.instFinite","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/RangeIterator.lean#L279-L283"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.isSome_next_of_isPlausibleIndirectOutput\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">RangeIterator</span>.<span class=\"name\">isSome_next_of_isPlausibleIndirectOutput</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">su</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">out</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.IsPlausibleIndirectOutput\">IsPlausibleIndirectOutput</a></span> <span class=\"fn\">out</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.internalState\">internalState</a></span>.<a href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.next\">next</a></span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.isSome_next_of_isPlausibleIndirectOutput","kind":"theorem","line":196,"name":"Std.PRange.RangeIterator.isSome_next_of_isPlausibleIndirectOutput","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/RangeIterator.lean#L196-L208"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.isPlausibleSuccessorOf_iff\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">RangeIterator</span>.<span class=\"name\">isPlausibleSuccessorOf_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">su</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it' </span><span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it'</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.IsPlausibleSuccessorOf\">IsPlausibleSuccessorOf</a></span> <span class=\"fn\">it</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a>     <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.internalState\">internalState</a></span>.<a href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.next\">next</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#And\">∧</a>       <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound.IsSatisfied\">SupportsUpperBound.IsSatisfied</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.internalState\">internalState</a></span>.<a href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.upperBound\">upperBound</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#And\">∧</a>         <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.succ?\">succ?</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it'</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.internalState\">internalState</a></span>.<a href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.next\">next</a></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it'</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.internalState\">internalState</a></span>.<a href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.upperBound\">upperBound</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.internalState\">internalState</a></span>.<a href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.upperBound\">upperBound</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.isPlausibleSuccessorOf_iff","kind":"theorem","line":186,"name":"Std.PRange.RangeIterator.isPlausibleSuccessorOf_iff","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/RangeIterator.lean#L186-L194"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.Monadic.isPlausibleSuccessorOf_iff\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">RangeIterator</span>.<span class=\"name\">Monadic</span>.<span class=\"name\">isPlausibleSuccessorOf_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">su</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it' </span><span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it'</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleSuccessorOf\">IsPlausibleSuccessorOf</a></span> <span class=\"fn\">it</span></span> <a href=\"./Init/Core.html#Iff\">↔</a>   <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a>     <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.internalState\">internalState</a></span>.<a href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.next\">next</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#And\">∧</a>       <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound.IsSatisfied\">SupportsUpperBound.IsSatisfied</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.internalState\">internalState</a></span>.<a href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.upperBound\">upperBound</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#And\">∧</a>         <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable.succ?\">succ?</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it'</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.internalState\">internalState</a></span>.<a href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.next\">next</a></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it'</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.internalState\">internalState</a></span>.<a href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.upperBound\">upperBound</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.internalState\">internalState</a></span>.<a href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.upperBound\">upperBound</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.Monadic.isPlausibleSuccessorOf_iff","kind":"theorem","line":160,"name":"Std.PRange.RangeIterator.Monadic.isPlausibleSuccessorOf_iff","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/RangeIterator.lean#L160-L184"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.isPlausibleOutput_iff\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">RangeIterator</span>.<span class=\"name\">isPlausibleOutput_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">su</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.IsPlausibleOutput\">IsPlausibleOutput</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.internalState\">internalState</a></span>.<a href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.next\">next</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound.IsSatisfied\">SupportsUpperBound.IsSatisfied</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.internalState\">internalState</a></span>.<a href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.upperBound\">upperBound</a></span> <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.isPlausibleOutput_iff","kind":"theorem","line":152,"name":"Std.PRange.RangeIterator.isPlausibleOutput_iff","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/RangeIterator.lean#L152-L158"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.isPlausibleOutput_next\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">RangeIterator</span>.<span class=\"name\">isPlausibleOutput_next</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">su</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.internalState\">internalState</a></span>.<a href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.next\">next</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hP</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound.IsSatisfied\">SupportsUpperBound.IsSatisfied</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.internalState\">internalState</a></span>.<a href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.upperBound\">upperBound</a></span> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.IsPlausibleOutput\">IsPlausibleOutput</a></span> <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.isPlausibleOutput_next","kind":"theorem","line":145,"name":"Std.PRange.RangeIterator.isPlausibleOutput_next","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/RangeIterator.lean#L145-L150"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.Monadic.isPlausibleOutput_iff\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">RangeIterator</span>.<span class=\"name\">Monadic</span>.<span class=\"name\">isPlausibleOutput_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">su</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleOutput\">IsPlausibleOutput</a></span> <span class=\"fn\">a</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.internalState\">internalState</a></span>.<a href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.next\">next</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound.IsSatisfied\">SupportsUpperBound.IsSatisfied</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.internalState\">internalState</a></span>.<a href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.upperBound\">upperBound</a></span> <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.Monadic.isPlausibleOutput_iff","kind":"theorem","line":128,"name":"Std.PRange.RangeIterator.Monadic.isPlausibleOutput_iff","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/RangeIterator.lean#L128-L143"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.Monadic.isPlausibleOutput_next\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">RangeIterator</span>.<span class=\"name\">Monadic</span>.<span class=\"name\">isPlausibleOutput_next</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">su</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.internalState\">internalState</a></span>.<a href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.next\">next</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option.some\">some</a> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hP</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound.IsSatisfied\">SupportsUpperBound.IsSatisfied</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.internalState\">internalState</a></span>.<a href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.upperBound\">upperBound</a></span> <span class=\"fn\">a</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleOutput\">IsPlausibleOutput</a></span> <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.Monadic.isPlausibleOutput_next","kind":"theorem","line":121,"name":"Std.PRange.RangeIterator.Monadic.isPlausibleOutput_next","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/RangeIterator.lean#L121-L126"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.instIteratorCollectPartial\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">RangeIterator</span>.<span class=\"name\">instIteratorCollectPartial</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">su</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Collect.html#Std.Iterators.IteratorCollectPartial\">Iterators.IteratorCollectPartial</a> <span class=\"fn\">(<a href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator\">RangeIterator</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.instIteratorCollectPartial","kind":"instance","line":117,"name":"Std.PRange.RangeIterator.instIteratorCollectPartial","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/RangeIterator.lean#L117-L119"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.instIteratorCollect\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">RangeIterator</span>.<span class=\"name\">instIteratorCollect</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">su</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Consumers/Monadic/Collect.html#Std.Iterators.IteratorCollect\">Iterators.IteratorCollect</a> <span class=\"fn\">(<a href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator\">RangeIterator</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.instIteratorCollect","kind":"instance","line":113,"name":"Std.PRange.RangeIterator.instIteratorCollect","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/RangeIterator.lean#L113-L115"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.step_eq_step\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">RangeIterator</span>.<span class=\"name\">step_eq_step</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">su</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.step\">step</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Subtype.mk\">⟨</a><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.step\">step</a> <span class=\"fn\">it</span></span>, <span class=\"fn\">⋯</span><a href=\"./Init/Prelude.html#Subtype.mk\">⟩</a></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.step_eq_step","kind":"theorem","line":108,"name":"Std.PRange.RangeIterator.step_eq_step","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/RangeIterator.lean#L108-L111"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.isPlausibleStep_iff\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">RangeIterator</span>.<span class=\"name\">isPlausibleStep_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">su</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">step</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep\">Iterators.IterStep</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">α</span>)</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.IsPlausibleStep\">IsPlausibleStep</a></span> <span class=\"fn\">step</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">step</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.step\">RangeIterator.step</a> <span class=\"fn\">it</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.isPlausibleStep_iff","kind":"theorem","line":95,"name":"Std.PRange.RangeIterator.isPlausibleStep_iff","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/RangeIterator.lean#L95-L106"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.Monadic.step_eq_step\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">RangeIterator</span>.<span class=\"name\">Monadic</span>.<span class=\"name\">step_eq_step</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">su</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.step\">step</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <a href=\"./Init/Prelude.html#Subtype.mk\">⟨</a><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.Monadic.step\">step</a> <span class=\"fn\">it</span></span>, <span class=\"fn\">⋯</span><a href=\"./Init/Prelude.html#Subtype.mk\">⟩</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.Monadic.step_eq_step","kind":"theorem","line":90,"name":"Std.PRange.RangeIterator.Monadic.step_eq_step","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/RangeIterator.lean#L90-L93"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.Monadic.isPlausibleStep_iff\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">RangeIterator</span>.<span class=\"name\">Monadic</span>.<span class=\"name\">isPlausibleStep_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">su</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">step</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep\">Iterators.IterStep</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">α</span>)</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.IsPlausibleStep\">IsPlausibleStep</a></span> <span class=\"fn\">step</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">step</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.Monadic.step\">Monadic.step</a> <span class=\"fn\">it</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.Monadic.isPlausibleStep_iff","kind":"theorem","line":85,"name":"Std.PRange.RangeIterator.Monadic.isPlausibleStep_iff","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/RangeIterator.lean#L85-L88"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.instIteratorRangeIteratorIdOfUpwardEnumerableOfSupportsUpperBound\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">instIteratorRangeIteratorIdOfUpwardEnumerableOfSupportsUpperBound</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">su</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iterator\">Iterators.Iterator</a> <span class=\"fn\">(<a href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator\">RangeIterator</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span>)</span> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.instIteratorRangeIteratorIdOfUpwardEnumerableOfSupportsUpperBound","kind":"instance","line":79,"name":"Std.PRange.instIteratorRangeIteratorIdOfUpwardEnumerableOfSupportsUpperBound","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/RangeIterator.lean#L79-L83"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.step_eq_monadicStep\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">RangeIterator</span>.<span class=\"name\">step_eq_monadicStep</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">su</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.step\">step</a> <span class=\"fn\">it</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.mapIterator\">Iterators.IterStep.mapIterator</a> <a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.toIter\">Iterators.IterM.toIter</a> <span class=\"fn\">(<a href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.Monadic.step\">Monadic.step</a> <span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter.toIterM\">toIterM</a></span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.step_eq_monadicStep","kind":"theorem","line":71,"name":"Std.PRange.RangeIterator.step_eq_monadicStep","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/RangeIterator.lean#L71-L77"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.step\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">RangeIterator</span>.<span class=\"name\">step</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">su</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep\">Iterators.IterStep</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.Iter\">Iter</a> <span class=\"fn\">α</span>)</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"The pure function mapping a range iterator of type `Iter` to the next step of the iterator.\n","docLink":"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.step","kind":"def","line":57,"name":"Std.PRange.RangeIterator.step","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/RangeIterator.lean#L57-L69"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.Monadic.step\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">RangeIterator</span>.<span class=\"name\">Monadic</span>.<span class=\"name\">step</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">su</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/UpwardEnumerable.html#Std.PRange.UpwardEnumerable\">UpwardEnumerable</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.SupportsUpperBound\">SupportsUpperBound</a> <span class=\"fn\">su</span> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep\">Iterators.IterStep</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM\">IterM</a> <a href=\"./Init/Control/Id.html#Id\">Id</a> <span class=\"fn\">α</span>)</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"The pure function mapping a range iterator of type `IterM` to the next step of the iterator.\n\nThis function is prefixed with `Monadic` in order to disambiguate it from the version for iterators\nof type `Iter`.\n","docLink":"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.Monadic.step","kind":"def","line":40,"name":"Std.PRange.RangeIterator.Monadic.step","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/RangeIterator.lean#L40-L55"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.upperBound\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">RangeIterator</span>.<span class=\"name\">upperBound</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">shape</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator\">RangeIterator</a> <span class=\"fn\">shape</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <span class=\"fn\">shape</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.upperBound","kind":"def","line":36,"name":"Std.PRange.RangeIterator.upperBound","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/RangeIterator.lean#L36-L36"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.next\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">RangeIterator</span>.<span class=\"name\">next</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">shape</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator\">RangeIterator</a> <span class=\"fn\">shape</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.next","kind":"def","line":35,"name":"Std.PRange.RangeIterator.next","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/RangeIterator.lean#L35-L35"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.mk\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">RangeIterator</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">shape</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">next</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">upperBound</span> : <span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.Bound\">Bound</a> <span class=\"fn\">shape</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator\">RangeIterator</a> <span class=\"fn\">shape</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator.mk","kind":"ctor","line":34,"name":"Std.PRange.RangeIterator.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/RangeIterator.lean#L34-L34"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator\"><span class=\"name\">Std</span>.<span class=\"name\">PRange</span>.<span class=\"name\">RangeIterator</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">shape</span> : <a href=\"./Init/Data/Range/Polymorphic/PRange.html#Std.PRange.BoundShape\">BoundShape</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>","info":{"doc":"Internal state of the range iterators. Do not depend on its internals. ","docLink":"./Init/Data/Range/Polymorphic/RangeIterator.html#Std.PRange.RangeIterator","kind":"structure","line":32,"name":"Std.PRange.RangeIterator","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/Range/Polymorphic/RangeIterator.lean#L32-L36"}}],"imports":["Init.Data.Iterators.Internal.Termination","Init.Data.Iterators.Consumers.Access","Init.Data.Iterators.Consumers.Loop","Init.Data.Iterators.Consumers.Collect","Init.Data.Range.Polymorphic.PRange","Init.Data.List.Sublist"],"instances":[{"className":"Std.Iterators.Iterator","name":"Std.PRange.instIteratorRangeIteratorIdOfUpwardEnumerableOfSupportsUpperBound","typeNames":["Std.PRange.RangeIterator","Id"]},{"className":"Std.Iterators.IteratorCollect","name":"Std.PRange.RangeIterator.instIteratorCollect","typeNames":["Std.PRange.RangeIterator","Id"]},{"className":"Std.Iterators.IteratorCollectPartial","name":"Std.PRange.RangeIterator.instIteratorCollectPartial","typeNames":["Std.PRange.RangeIterator","Id"]},{"className":"Std.Iterators.Finite","name":"Std.PRange.RangeIterator.instFinite","typeNames":["Std.PRange.RangeIterator","Id"]},{"className":"Std.Iterators.Productive","name":"Std.PRange.RangeIterator.instProductive","typeNames":["Std.PRange.RangeIterator","Id"]},{"className":"Std.Iterators.IteratorAccess","name":"Std.PRange.RangeIterator.instIteratorAccess","typeNames":["Std.PRange.RangeIterator","Id"]},{"className":"Std.Iterators.LawfulDeterministicIterator","name":"Std.PRange.RangeIterator.instLawfulDeterministicIterator","typeNames":["Std.PRange.RangeIterator","Id"]},{"className":"Std.Iterators.IteratorLoop","name":"Std.PRange.RangeIterator.instIteratorLoop","typeNames":["Std.PRange.RangeIterator","Id"]},{"className":"Std.Iterators.IteratorLoopPartial","name":"Std.PRange.RepeatIterator.instIteratorLoopPartial","typeNames":["Std.PRange.RangeIterator","Id"]},{"className":"Std.Iterators.LawfulIteratorLoop","name":"Std.PRange.RangeIterator.instLawfulIteratorLoop","typeNames":["Std.PRange.RangeIterator","Id"]}],"name":"Init.Data.Range.Polymorphic.RangeIterator"}