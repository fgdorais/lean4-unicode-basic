{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/AsyncList.html#IO.AsyncList.getFinishedPrefixWithConsistentLatency\"><span class=\"name\">IO</span>.<span class=\"name\">AsyncList</span>.<span class=\"name\">getFinishedPrefixWithConsistentLatency</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Lean/Server/AsyncList.html#IO.AsyncList\">AsyncList</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">latencyMs</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cancelTks</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Lean/Server/ServerTask.html#Lean.Server.ServerTask\">Lean.Server.ServerTask</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span></span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">ε</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></div></div>","info":{"doc":"","docLink":"./Lean/Server/AsyncList.html#IO.AsyncList.getFinishedPrefixWithConsistentLatency","kind":"def","line":114,"name":"IO.AsyncList.getFinishedPrefixWithConsistentLatency","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Server/AsyncList.lean#L114-L133"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/AsyncList.html#IO.AsyncList.getFinishedPrefixWithTimeout\"><span class=\"name\">IO</span>.<span class=\"name\">AsyncList</span>.<span class=\"name\">getFinishedPrefixWithTimeout</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Lean/Server/AsyncList.html#IO.AsyncList\">AsyncList</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">timeoutMs</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cancelTks</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Lean/Server/ServerTask.html#Lean.Server.ServerTask\">Lean.Server.ServerTask</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span></span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">ε</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></div></div>","info":{"doc":"","docLink":"./Lean/Server/AsyncList.html#IO.AsyncList.getFinishedPrefixWithTimeout","kind":"def","line":86,"name":"IO.AsyncList.getFinishedPrefixWithTimeout","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Server/AsyncList.lean#L86-L112"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/AsyncList.html#IO.AsyncList.getFinishedPrefix\"><span class=\"name\">IO</span>.<span class=\"name\">AsyncList</span>.<span class=\"name\">getFinishedPrefix</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Server/AsyncList.html#IO.AsyncList\">AsyncList</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">ε</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span></div></div>","info":{"doc":"Retrieve the already-computed prefix of the list. If computation has finished with an error, return it as well.\nThe returned boolean indicates whether the complete `AsyncList` was returned, or whether only a\nproper prefix was returned.\n","docLink":"./Lean/Server/AsyncList.html#IO.AsyncList.getFinishedPrefix","kind":"opaque","line":69,"name":"IO.AsyncList.getFinishedPrefix","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Server/AsyncList.lean#L69-L84"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/AsyncList.html#IO.AsyncList.waitFind?\"><span class=\"name\">IO</span>.<span class=\"name\">AsyncList</span>.<span class=\"name\">waitFind?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Server/AsyncList.html#IO.AsyncList\">AsyncList</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Lean/Server/ServerTask.html#Lean.Server.ServerTask\">Lean.Server.ServerTask</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Except\">Except</a> <span class=\"fn\">ε</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span>)</span></span></span></div></div>","info":{"doc":"Spawns a `Task` acting like `List.find?` but which will wait for tail evaluation\nwhen necessary to traverse the list. If the tail terminates before a matching element\nis found, the task throws the terminating value. ","docLink":"./Lean/Server/AsyncList.html#IO.AsyncList.waitFind?","kind":"opaque","line":56,"name":"IO.AsyncList.waitFind?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Server/AsyncList.lean#L56-L67"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/AsyncList.html#IO.AsyncList.waitAll\"><span class=\"name\">IO</span>.<span class=\"name\">AsyncList</span>.<span class=\"name\">waitAll</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Server/AsyncList.html#IO.AsyncList\">AsyncList</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Lean/Server/ServerTask.html#Lean.Server.ServerTask\">Lean.Server.ServerTask</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">ε</span></span>)</span></span></div></div>","info":{"doc":"Spawns a `Task` waiting on all elements. ","docLink":"./Lean/Server/AsyncList.html#IO.AsyncList.waitAll","kind":"def","line":52,"name":"IO.AsyncList.waitAll","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Server/AsyncList.lean#L52-L54"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/AsyncList.html#IO.AsyncList.waitUntil\"><span class=\"name\">IO</span>.<span class=\"name\">AsyncList</span>.<span class=\"name\">waitUntil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Server/AsyncList.html#IO.AsyncList\">AsyncList</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Lean/Server/ServerTask.html#Lean.Server.ServerTask\">Lean.Server.ServerTask</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">ε</span></span>)</span></span></div></div>","info":{"doc":"Spawns a `Task` returning the prefix of elements up to (including) the first element for which `p` is true.\nWhen `p` is not true of any element, it returns the entire list. ","docLink":"./Lean/Server/AsyncList.html#IO.AsyncList.waitUntil","kind":"opaque","line":38,"name":"IO.AsyncList.waitUntil","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Server/AsyncList.lean#L38-L50"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/AsyncList.html#IO.AsyncList.instCoeList\"><span class=\"name\">IO</span>.<span class=\"name\">AsyncList</span>.<span class=\"name\">instCoeList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span>)</span> <span class=\"fn\">(<a href=\"./Lean/Server/AsyncList.html#IO.AsyncList\">AsyncList</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Server/AsyncList.html#IO.AsyncList.instCoeList","kind":"instance","line":36,"name":"IO.AsyncList.instCoeList","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Server/AsyncList.lean#L36-L36"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/AsyncList.html#IO.AsyncList.ofList\"><span class=\"name\">IO</span>.<span class=\"name\">AsyncList</span>.<span class=\"name\">ofList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span></span> → <span class=\"fn\"><a href=\"./Lean/Server/AsyncList.html#IO.AsyncList\">AsyncList</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Server/AsyncList.html#IO.AsyncList.ofList","kind":"def","line":33,"name":"IO.AsyncList.ofList","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Server/AsyncList.lean#L33-L34"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/AsyncList.html#IO.AsyncList.instInhabited\"><span class=\"name\">IO</span>.<span class=\"name\">AsyncList</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Lean/Server/AsyncList.html#IO.AsyncList\">AsyncList</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Server/AsyncList.html#IO.AsyncList.instInhabited","kind":"instance","line":31,"name":"IO.AsyncList.instInhabited","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Server/AsyncList.lean#L31-L31"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/AsyncList.html#IO.AsyncList.nil\"><span class=\"name\">IO</span>.<span class=\"name\">AsyncList</span>.<span class=\"name\">nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Server/AsyncList.html#IO.AsyncList\">AsyncList</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Server/AsyncList.html#IO.AsyncList.nil","kind":"ctor","line":25,"name":"IO.AsyncList.nil","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Server/AsyncList.lean#L25-L25"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/AsyncList.html#IO.AsyncList.delayed\"><span class=\"name\">IO</span>.<span class=\"name\">AsyncList</span>.<span class=\"name\">delayed</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tl</span> : <span class=\"fn\"><a href=\"./Lean/Server/ServerTask.html#Lean.Server.ServerTask\">Lean.Server.ServerTask</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Except\">Except</a> <span class=\"fn\">ε</span> <span class=\"fn\">(<a href=\"./Lean/Server/AsyncList.html#IO.AsyncList\">AsyncList</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Server/AsyncList.html#IO.AsyncList\">AsyncList</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Server/AsyncList.html#IO.AsyncList.delayed","kind":"ctor","line":24,"name":"IO.AsyncList.delayed","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Server/AsyncList.lean#L24-L24"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/AsyncList.html#IO.AsyncList.cons\"><span class=\"name\">IO</span>.<span class=\"name\">AsyncList</span>.<span class=\"name\">cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hd</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tl</span> : <span class=\"fn\"><a href=\"./Lean/Server/AsyncList.html#IO.AsyncList\">AsyncList</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Server/AsyncList.html#IO.AsyncList\">AsyncList</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Server/AsyncList.html#IO.AsyncList.cons","kind":"ctor","line":23,"name":"IO.AsyncList.cons","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Server/AsyncList.lean#L23-L23"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Server/AsyncList.html#IO.AsyncList\"><span class=\"name\">IO</span>.<span class=\"name\">AsyncList</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u v)</div></div>","info":{"doc":"An async IO list is like a lazy list but instead of being *unevaluated* `Thunk`s,\n`delayed` suffixes are `Task`s *being evaluated asynchronously*. A delayed suffix can signal the end\nof computation (successful or due to a failure) with a terminating value of type `ε`. ","docLink":"./Lean/Server/AsyncList.html#IO.AsyncList","kind":"inductive","line":19,"name":"IO.AsyncList","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Server/AsyncList.lean#L19-L25"}}],"imports":["Lean.Server.ServerTask","Init.System.Promise"],"instances":[{"className":"Inhabited","name":"IO.AsyncList.instInhabited","typeNames":["IO.AsyncList"]},{"className":"Coe","name":"IO.AsyncList.instCoeList","typeNames":["List","IO.AsyncList"]}],"name":"Lean.Server.AsyncList"}