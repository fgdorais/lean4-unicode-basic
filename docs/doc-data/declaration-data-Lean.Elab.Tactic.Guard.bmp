{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.evalGuardCmd\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardExpr</span>.<span class=\"name\">evalGuardCmd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElab\">Command.CommandElab</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.evalGuardCmd","kind":"def","line":155,"name":"Lean.Elab.Tactic.GuardExpr.evalGuardCmd","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Guard.lean#L155-L168"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.evalGuardExprCmd\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardExpr</span>.<span class=\"name\">evalGuardExprCmd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElab\">Command.CommandElab</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.evalGuardExprCmd","kind":"def","line":146,"name":"Lean.Elab.Tactic.GuardExpr.evalGuardExprCmd","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Guard.lean#L146-L153"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.evalGuardHypConv\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardExpr</span>.<span class=\"name\">evalGuardHypConv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.Tactic\">Tactic</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.evalGuardHypConv","kind":"def","line":143,"name":"Lean.Elab.Tactic.GuardExpr.evalGuardHypConv","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Guard.lean#L143-L144"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.evalGuardHyp\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardExpr</span>.<span class=\"name\">evalGuardHyp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.Tactic\">Tactic</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.evalGuardHyp","kind":"def","line":116,"name":"Lean.Elab.Tactic.GuardExpr.evalGuardHyp","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Guard.lean#L116-L141"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.evalGuardTargetConv\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardExpr</span>.<span class=\"name\">evalGuardTargetConv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.Tactic\">Tactic</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.evalGuardTargetConv","kind":"def","line":113,"name":"Lean.Elab.Tactic.GuardExpr.evalGuardTargetConv","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Guard.lean#L113-L114"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.evalGuardTarget\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardExpr</span>.<span class=\"name\">evalGuardTarget</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.Tactic\">Tactic</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.evalGuardTarget","kind":"def","line":99,"name":"Lean.Elab.Tactic.GuardExpr.evalGuardTarget","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Guard.lean#L99-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.evalGuardExprConv\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardExpr</span>.<span class=\"name\">evalGuardExprConv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.Tactic\">Tactic</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.evalGuardExprConv","kind":"def","line":96,"name":"Lean.Elab.Tactic.GuardExpr.evalGuardExprConv","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Guard.lean#L96-L97"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.evalGuardExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardExpr</span>.<span class=\"name\">evalGuardExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.Tactic\">Tactic</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.evalGuardExpr","kind":"def","line":86,"name":"Lean.Elab.Tactic.GuardExpr.evalGuardExpr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Guard.lean#L86-L93"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.elabAndEvalMatchKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardExpr</span>.<span class=\"name\">elabAndEvalMatchKind</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mk</span> : <a href=\"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.MatchKind\">MatchKind</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Term\">Term</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Elaborate `a` and `b` and then do the given equality test `mk`. We make sure to unify\nthe types of `a` and `b` after elaboration so that when synthesizing pending metavariables\nwe don't get the wrong instances due to default instances (for example, for nat literals). ","docLink":"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.elabAndEvalMatchKind","kind":"def","line":74,"name":"Lean.Elab.Tactic.GuardExpr.elabAndEvalMatchKind","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Guard.lean#L74-L84"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.MatchKind.toStringDescr\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardExpr</span>.<span class=\"name\">MatchKind</span>.<span class=\"name\">toStringDescr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.MatchKind\">MatchKind</a> â†’ <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"Produces a string description of the relation expressed by the given match kind. ","docLink":"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.MatchKind.toStringDescr","kind":"def","line":65,"name":"Lean.Elab.Tactic.GuardExpr.MatchKind.toStringDescr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Guard.lean#L65-L72"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.MatchKind.isEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardExpr</span>.<span class=\"name\">MatchKind</span>.<span class=\"name\">isEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.MatchKind\">MatchKind</a> â†’ <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>","info":{"doc":"Applies the selected matching rule to two expressions. ","docLink":"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.MatchKind.isEq","kind":"def","line":59,"name":"Lean.Elab.Tactic.GuardExpr.MatchKind.isEq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Guard.lean#L59-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.equal.toMatchKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardExpr</span>.<span class=\"name\">equal</span>.<span class=\"name\">toMatchKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.Parser.equal</span> â†’ <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.MatchKind\">MatchKind</a></span></span></div></div>","info":{"doc":"Converts a `equal` syntax into a `MatchKind` ","docLink":"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.equal.toMatchKind","kind":"def","line":51,"name":"Lean.Elab.Tactic.GuardExpr.equal.toMatchKind","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Guard.lean#L51-L57"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.colonEq.toMatchKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardExpr</span>.<span class=\"name\">colonEq</span>.<span class=\"name\">toMatchKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.Parser.colonEq</span> â†’ <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.MatchKind\">MatchKind</a></span></span></div></div>","info":{"doc":"Converts a `colonEq` syntax into a `MatchKind` ","docLink":"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.colonEq.toMatchKind","kind":"def","line":43,"name":"Lean.Elab.Tactic.GuardExpr.colonEq.toMatchKind","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Guard.lean#L43-L49"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.colon.toMatchKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardExpr</span>.<span class=\"name\">colon</span>.<span class=\"name\">toMatchKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.Parser.colon</span> â†’ <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.MatchKind\">MatchKind</a></span></span></div></div>","info":{"doc":"Converts a `colon` syntax into a `MatchKind` ","docLink":"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.colon.toMatchKind","kind":"def","line":35,"name":"Lean.Elab.Tactic.GuardExpr.colon.toMatchKind","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Guard.lean#L35-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.MatchKind.alphaEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardExpr</span>.<span class=\"name\">MatchKind</span>.<span class=\"name\">alphaEq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.MatchKind\">MatchKind</a></div></div>","info":{"doc":"An alpha-eq match means that `Expr.eqv` returns true. ","docLink":"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.MatchKind.alphaEq","kind":"ctor","line":30,"name":"Lean.Elab.Tactic.GuardExpr.MatchKind.alphaEq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Guard.lean#L30-L31"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.MatchKind.defEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardExpr</span>.<span class=\"name\">MatchKind</span>.<span class=\"name\">defEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">red</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">Meta.TransparencyMode</a> := <a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode.reducible\">Meta.TransparencyMode.reducible</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.MatchKind\">MatchKind</a></div></div>","info":{"doc":"A defeq match `isDefEqGuarded` returns true. (Note that unification is allowed here.) ","docLink":"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.MatchKind.defEq","kind":"ctor","line":28,"name":"Lean.Elab.Tactic.GuardExpr.MatchKind.defEq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Guard.lean#L28-L29"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.MatchKind.syntactic\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardExpr</span>.<span class=\"name\">MatchKind</span>.<span class=\"name\">syntactic</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.MatchKind\">MatchKind</a></div></div>","info":{"doc":"A syntactic match means that the `Expr`s are `==` after stripping `MData` ","docLink":"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.MatchKind.syntactic","kind":"ctor","line":26,"name":"Lean.Elab.Tactic.GuardExpr.MatchKind.syntactic","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Guard.lean#L26-L27"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.MatchKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">GuardExpr</span>.<span class=\"name\">MatchKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The various `guard_*` tactics have similar matching specifiers for how equal expressions\nhave to be to pass the tactic.\nThis inductive gives the different specifiers that can be selected.\n","docLink":"./Lean/Elab/Tactic/Guard.html#Lean.Elab.Tactic.GuardExpr.MatchKind","kind":"inductive","line":20,"name":"Lean.Elab.Tactic.GuardExpr.MatchKind","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Guard.lean#L20-L31"}}],"imports":["Init.Guard","Lean.Elab.Command","Lean.Elab.Tactic.Conv.Basic","Lean.Meta.Basic","Lean.Meta.Eval"],"instances":[],"name":"Lean.Elab.Tactic.Guard"}