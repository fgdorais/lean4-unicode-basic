{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.document\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">document</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">blockContext</span> : <a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.BlockCtxt\">BlockCtxt</a> := <a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.BlockCtxt.mk\">{</a> <a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.BlockCtxt.mk\">}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">Parser.ParserFn</a></div></div>","info":{"doc":"Parses some number of blank lines followed by zero or more blocks.\n","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.document","kind":"def","line":1160,"name":"Lean.Doc.Parser.document","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L1160-L1163"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.blocks1\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">blocks1</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.BlockCtxt\">BlockCtxt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">Parser.ParserFn</a></div></div>","info":{"doc":"Parses one or more blocks.\n","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.blocks1","kind":"opaque","line":1155,"name":"Lean.Doc.Parser.blocks1","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L1155-L1158"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.blocks\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">blocks</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.BlockCtxt\">BlockCtxt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">Parser.ParserFn</a></div></div>","info":{"doc":"Parses zero or more blocks.\n","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.blocks","kind":"opaque","line":1150,"name":"Lean.Doc.Parser.blocks","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L1150-L1153"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.block\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">block</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.BlockCtxt\">BlockCtxt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">Parser.ParserFn</a></div></div>","info":{"doc":"Parses a block.\n","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.block","kind":"opaque","line":1144,"name":"Lean.Doc.Parser.block","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L1144-L1148"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.footnoteRef\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">footnoteRef</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.BlockCtxt\">BlockCtxt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">Parser.ParserFn</a></div></div>","info":{"doc":"Parses a footnote reference target.\n","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.footnoteRef","kind":"def","line":1135,"name":"Lean.Doc.Parser.footnoteRef","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L1135-L1142"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.linkRef\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">linkRef</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.BlockCtxt\">BlockCtxt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">Parser.ParserFn</a></div></div>","info":{"doc":"Parses a link reference target.\n","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.linkRef","kind":"def","line":1124,"name":"Lean.Doc.Parser.linkRef","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L1124-L1133"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.block_command\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">block_command</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctxt</span> : <a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.BlockCtxt\">BlockCtxt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">Parser.ParserFn</a></div></div>","info":{"doc":"Parses a block command.\n","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.block_command","kind":"def","line":1102,"name":"Lean.Doc.Parser.block_command","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L1102-L1122"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.directive\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">directive</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctxt</span> : <a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.BlockCtxt\">BlockCtxt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">Parser.ParserFn</a></div></div>","info":{"doc":"Parses a directive. ","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.directive","kind":"opaque","line":1043,"name":"Lean.Doc.Parser.directive","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L1043-L1100"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.codeBlock\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">codeBlock</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctxt</span> : <a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.BlockCtxt\">BlockCtxt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">Parser.ParserFn</a></div></div>","info":{"doc":"Parses a code block. The resulting string literal has already had the fences' leading indentation\nstripped.\n","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.codeBlock","kind":"def","line":996,"name":"Lean.Doc.Parser.codeBlock","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L996-L1041"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.header\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">header</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctxt</span> : <a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.BlockCtxt\">BlockCtxt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">Parser.ParserFn</a></div></div>","info":{"doc":"Parses a header. ","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.header","kind":"def","line":981,"name":"Lean.Doc.Parser.header","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L981-L994"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.para\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">para</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctxt</span> : <a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.BlockCtxt\">BlockCtxt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">Parser.ParserFn</a></div></div>","info":{"doc":"Parses a paragraph (that is, a sequence of otherwise-undecorated inlines). ","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.para","kind":"def","line":973,"name":"Lean.Doc.Parser.para","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L973-L979"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.definitionList\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">definitionList</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctxt</span> : <a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.BlockCtxt\">BlockCtxt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">Parser.ParserFn</a></div></div>","info":{"doc":"Parses a definition list. ","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.definitionList","kind":"opaque","line":965,"name":"Lean.Doc.Parser.definitionList","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L965-L971"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.orderedList\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">orderedList</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctxt</span> : <a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.BlockCtxt\">BlockCtxt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">Parser.ParserFn</a></div></div>","info":{"doc":"Parses an ordered list. ","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.orderedList","kind":"opaque","line":955,"name":"Lean.Doc.Parser.orderedList","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L955-L963"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.unorderedList\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">unorderedList</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctxt</span> : <a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.BlockCtxt\">BlockCtxt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">Parser.ParserFn</a></div></div>","info":{"doc":"Parses an unordered list. ","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.unorderedList","kind":"opaque","line":946,"name":"Lean.Doc.Parser.unorderedList","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L946-L953"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.blockquote\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">blockquote</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctxt</span> : <a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.BlockCtxt\">BlockCtxt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">Parser.ParserFn</a></div></div>","info":{"doc":"Parses a block quote. ","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.blockquote","kind":"opaque","line":940,"name":"Lean.Doc.Parser.blockquote","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L940-L944"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.descItem\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">descItem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctxt</span> : <a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.BlockCtxt\">BlockCtxt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">Parser.ParserFn</a></div></div>","info":{"doc":"Parses an item from a description list. ","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.descItem","kind":"opaque","line":924,"name":"Lean.Doc.Parser.descItem","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L924-L938"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.listItem\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">listItem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctxt</span> : <a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.BlockCtxt\">BlockCtxt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">Parser.ParserFn</a></div></div>","info":{"doc":"Parses a list item according to the current nesting context. ","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.listItem","kind":"opaque","line":903,"name":"Lean.Doc.Parser.listItem","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L903-L922"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.lookaheadUnorderedListIndicator\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">lookaheadUnorderedListIndicator</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctxt</span> : <a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.BlockCtxt\">BlockCtxt</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.UnorderedListType\">UnorderedListType</a> → <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">Parser.ParserFn</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">Parser.ParserFn</a></div></div>","info":{"doc":"Succeeds when the parser is looking at an unordered list indicator.\n","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.lookaheadUnorderedListIndicator","kind":"def","line":872,"name":"Lean.Doc.Parser.lookaheadUnorderedListIndicator","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L872-L892"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.lookaheadOrderedListIndicator\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">lookaheadOrderedListIndicator</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctxt</span> : <a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.BlockCtxt\">BlockCtxt</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.OrderedListType\">OrderedListType</a> → <span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> → <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">Parser.ParserFn</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">Parser.ParserFn</a></div></div>","info":{"doc":"Succeeds when the parser is looking at an ordered list indicator.\n","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.lookaheadOrderedListIndicator","kind":"def","line":835,"name":"Lean.Doc.Parser.lookaheadOrderedListIndicator","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L835-L870"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.instReprBlockCtxt.repr\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">instReprBlockCtxt</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.BlockCtxt\">BlockCtxt</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.instReprBlockCtxt.repr","kind":"def","line":833,"name":"Lean.Doc.Parser.instReprBlockCtxt.repr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L833-L833"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.instReprBlockCtxt\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">instReprBlockCtxt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.BlockCtxt\">BlockCtxt</a></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.instReprBlockCtxt","kind":"instance","line":833,"name":"Lean.Doc.Parser.instReprBlockCtxt","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L833-L833"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.instInhabitedBlockCtxt.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">instInhabitedBlockCtxt</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.BlockCtxt\">BlockCtxt</a></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.instInhabitedBlockCtxt.default","kind":"def","line":833,"name":"Lean.Doc.Parser.instInhabitedBlockCtxt.default","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L833-L833"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.instInhabitedBlockCtxt\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">instInhabitedBlockCtxt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.BlockCtxt\">BlockCtxt</a></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.instInhabitedBlockCtxt","kind":"instance","line":833,"name":"Lean.Doc.Parser.instInhabitedBlockCtxt","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L833-L833"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.BlockCtxt.inLists\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">BlockCtxt</span>.<span class=\"name\">inLists</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.BlockCtxt\">BlockCtxt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.InList\">InList</a></span></div></div>","info":{"doc":"The nested list context, innermost first.\n","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.BlockCtxt.inLists","kind":"def","line":832,"name":"Lean.Doc.Parser.BlockCtxt.inLists","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L832-L832"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.BlockCtxt.maxDirective\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">BlockCtxt</span>.<span class=\"name\">maxDirective</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.BlockCtxt\">BlockCtxt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"The block's maximal directive size (that is, the greatest number of allowed colons).\n","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.BlockCtxt.maxDirective","kind":"def","line":828,"name":"Lean.Doc.Parser.BlockCtxt.maxDirective","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L828-L828"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.BlockCtxt.minIndent\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">BlockCtxt</span>.<span class=\"name\">minIndent</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.BlockCtxt\">BlockCtxt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"The block's minimum indentation.\n","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.BlockCtxt.minIndent","kind":"def","line":824,"name":"Lean.Doc.Parser.BlockCtxt.minIndent","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L824-L824"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.BlockCtxt.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">BlockCtxt</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">minIndent</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">maxDirective</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inLists</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.InList\">InList</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.BlockCtxt\">BlockCtxt</a></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.BlockCtxt.mk","kind":"ctor","line":820,"name":"Lean.Doc.Parser.BlockCtxt.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L820-L820"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.BlockCtxt\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">BlockCtxt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The context within which a block should be valid.\n","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.BlockCtxt","kind":"structure","line":817,"name":"Lean.Doc.Parser.BlockCtxt","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L817-L833"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.instReprInList\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">instReprInList</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.InList\">InList</a></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.instReprInList","kind":"instance","line":815,"name":"Lean.Doc.Parser.instReprInList","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L815-L815"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.instReprInList.repr\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">instReprInList</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.InList\">InList</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.instReprInList.repr","kind":"def","line":815,"name":"Lean.Doc.Parser.instReprInList.repr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L815-L815"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.InList.type\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">InList</span>.<span class=\"name\">type</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.InList\">InList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.OrderedListType\">OrderedListType</a> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.UnorderedListType\">UnorderedListType</a></div></div>","info":{"doc":"The specific list type and its indicator style ","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.InList.type","kind":"def","line":814,"name":"Lean.Doc.Parser.InList.type","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L814-L814"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.InList.indentation\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">InList</span>.<span class=\"name\">indentation</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.InList\">InList</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"The indentation of list indicators. ","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.InList.indentation","kind":"def","line":812,"name":"Lean.Doc.Parser.InList.indentation","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L812-L812"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.InList.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">InList</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">indentation</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.OrderedListType\">OrderedListType</a> <a href=\"./Init/Core.html#Sum\">⊕</a> <a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.UnorderedListType\">UnorderedListType</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.InList\">InList</a></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.InList.mk","kind":"ctor","line":810,"name":"Lean.Doc.Parser.InList.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L810-L810"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.InList\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">InList</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Records that the parser is presently parsing a list.\n","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.InList","kind":"structure","line":807,"name":"Lean.Doc.Parser.InList","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L807-L815"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.metadataBlock\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">metadataBlock</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">Parser.ParserFn</a></div></div>","info":{"doc":"Parses a metadata block, which contains the contents of a Lean structure initialization but is\nsurrounded by `%%%` on each side.\n","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.metadataBlock","kind":"def","line":793,"name":"Lean.Doc.Parser.metadataBlock","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L793-L805"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.inline\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">inline</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctxt</span> : <a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.InlineCtxt\">InlineCtxt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">Parser.ParserFn</a></div></div>","info":{"doc":"Parses any inline element.\n","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.inline","kind":"opaque","line":780,"name":"Lean.Doc.Parser.inline","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L780-L784"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.delimitedInline\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">delimitedInline</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctxt</span> : <a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.InlineCtxt\">InlineCtxt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">Parser.ParserFn</a></div></div>","info":{"doc":"Parses an inline that is self-delimiting (that is, with well-defined start and stop characters).\n","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.delimitedInline","kind":"opaque","line":773,"name":"Lean.Doc.Parser.delimitedInline","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L773-L778"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.role\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">role</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctxt</span> : <a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.InlineCtxt\">InlineCtxt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">Parser.ParserFn</a></div></div>","info":{"doc":"Parses a role. ","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.role","kind":"opaque","line":759,"name":"Lean.Doc.Parser.role","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L759-L771"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.image\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">image</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">Parser.ParserFn</a></div></div>","info":{"doc":"Parses an image. ","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.image","kind":"def","line":750,"name":"Lean.Doc.Parser.image","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L750-L757"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.footnote\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">footnote</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctxt</span> : <a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.InlineCtxt\">InlineCtxt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">Parser.ParserFn</a></div></div>","info":{"doc":"Parses a footnote. ","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.footnote","kind":"def","line":729,"name":"Lean.Doc.Parser.footnote","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L729-L735"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.link\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">link</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctxt</span> : <a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.InlineCtxt\">InlineCtxt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">Parser.ParserFn</a></div></div>","info":{"doc":"Parses a link. ","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.link","kind":"opaque","line":721,"name":"Lean.Doc.Parser.link","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L721-L727"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.text\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">text</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">Parser.ParserFn</a></div></div>","info":{"doc":"Reads a prefix of a line of text, stopping at a text-mode special character. ","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.text","kind":"def","line":714,"name":"Lean.Doc.Parser.text","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L714-L719"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.math\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">math</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">Parser.ParserFn</a></div></div>","info":{"doc":"Parses mathematics.\n","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.math","kind":"def","line":707,"name":"Lean.Doc.Parser.math","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L707-L712"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.code\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">code</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">Parser.ParserFn</a></div></div>","info":{"doc":"Parses inline code.\n","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.code","kind":"def","line":638,"name":"Lean.Doc.Parser.code","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L638-L705"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.bold\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">bold</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctxt</span> : <a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.InlineCtxt\">InlineCtxt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">Parser.ParserFn</a></div></div>","info":{"doc":"Parses bold: a matched pair of one or more `*`.\n","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.bold","kind":"opaque","line":632,"name":"Lean.Doc.Parser.bold","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L632-L636"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.emph\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">emph</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctxt</span> : <a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.InlineCtxt\">InlineCtxt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">Parser.ParserFn</a></div></div>","info":{"doc":"Parses emphasis: a matched pair of one or more `_`.\n","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.emph","kind":"opaque","line":626,"name":"Lean.Doc.Parser.emph","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L626-L630"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.instInhabitedInlineCtxt\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">instInhabitedInlineCtxt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.InlineCtxt\">InlineCtxt</a></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.instInhabitedInlineCtxt","kind":"instance","line":575,"name":"Lean.Doc.Parser.instInhabitedInlineCtxt","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L575-L575"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.instInhabitedInlineCtxt.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">instInhabitedInlineCtxt</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.InlineCtxt\">InlineCtxt</a></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.instInhabitedInlineCtxt.default","kind":"def","line":575,"name":"Lean.Doc.Parser.instInhabitedInlineCtxt.default","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L575-L575"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.InlineCtxt.inLink\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">InlineCtxt</span>.<span class=\"name\">inLink</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.InlineCtxt\">InlineCtxt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Are we in a link? ","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.InlineCtxt.inLink","kind":"def","line":574,"name":"Lean.Doc.Parser.InlineCtxt.inLink","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L574-L574"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.InlineCtxt.emphDepth\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">InlineCtxt</span>.<span class=\"name\">emphDepth</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.InlineCtxt\">InlineCtxt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"How many underscores introduced the current level of emphasis? `none` means no emphasis here.\n","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.InlineCtxt.emphDepth","kind":"def","line":572,"name":"Lean.Doc.Parser.InlineCtxt.emphDepth","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L572-L572"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.InlineCtxt.boldDepth\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">InlineCtxt</span>.<span class=\"name\">boldDepth</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.InlineCtxt\">InlineCtxt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"How many asterisks introduced the current level of boldness? `none` means no bold here.\n","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.InlineCtxt.boldDepth","kind":"def","line":568,"name":"Lean.Doc.Parser.InlineCtxt.boldDepth","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L568-L568"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.InlineCtxt.minIndent\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">InlineCtxt</span>.<span class=\"name\">minIndent</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.InlineCtxt\">InlineCtxt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"The minimum indentation of a continuation line for the current paragraph\n","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.InlineCtxt.minIndent","kind":"def","line":564,"name":"Lean.Doc.Parser.InlineCtxt.minIndent","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L564-L564"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.InlineCtxt.allowNewlines\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">InlineCtxt</span>.<span class=\"name\">allowNewlines</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.InlineCtxt\">InlineCtxt</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Are newlines allowed here? ","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.InlineCtxt.allowNewlines","kind":"def","line":560,"name":"Lean.Doc.Parser.InlineCtxt.allowNewlines","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L560-L560"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.InlineCtxt.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">InlineCtxt</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">allowNewlines</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">minIndent</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">boldDepth </span><span class=\"fn\">emphDepth</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inLink</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.InlineCtxt\">InlineCtxt</a></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.InlineCtxt.mk","kind":"ctor","line":558,"name":"Lean.Doc.Parser.InlineCtxt.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L558-L558"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.InlineCtxt\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">InlineCtxt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The context within which a newline element is parsed.\n","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.InlineCtxt","kind":"structure","line":555,"name":"Lean.Doc.Parser.InlineCtxt","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L555-L575"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.nameAndArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">nameAndArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">multiline</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">Parser.ParserFn</a></div></div>","info":{"doc":"Parses a name and zero or more arguments to a role, directive, command, or code block. ","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.nameAndArgs","kind":"def","line":550,"name":"Lean.Doc.Parser.nameAndArgs","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L550-L553"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.args\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">args</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">multiline</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">Parser.ParserFn</a></div></div>","info":{"doc":"Parses zero or more arguments to a role, directive, command, or code block. ","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.args","kind":"def","line":546,"name":"Lean.Doc.Parser.args","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L546-L548"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.arg\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">arg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">Parser.ParserFn</a></div></div>","info":{"doc":"Parses an argument to a role, directive, command, or code block, which may be named or positional or\na flag.\n","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.arg","kind":"def","line":498,"name":"Lean.Doc.Parser.arg","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L498-L533"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.recoverBlock\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">recoverBlock</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">Parser.ParserFn</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">final</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">Parser.ParserFn</a> := <a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.skipFn\">skipFn</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">Parser.ParserFn</a></div></div>","info":{"doc":"Recovers from a parse error by skipping input until one or more complete blank lines has been\nskipped.\n","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.recoverBlock","kind":"def","line":436,"name":"Lean.Doc.Parser.recoverBlock","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L436-L442"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.val\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">val</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">Parser.ParserFn</a></div></div>","info":{"doc":"Parses an argument value, which may be a string literal, identifier, or numeric literal. ","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.val","kind":"def","line":392,"name":"Lean.Doc.Parser.val","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L392-L409"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.blockOpener\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">blockOpener</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">Parser.ParserFn</a></div></div>","info":{"doc":"Parses block opener prefixes. At the beginning of the line, if this parser succeeds, then a special\nblock is beginning.\n","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.blockOpener","kind":"def","line":378,"name":"Lean.Doc.Parser.blockOpener","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L378-L390"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.inlineTextChar\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">inlineTextChar</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">Parser.ParserFn</a></div></div>","info":{"doc":"Parses a character that's allowed as part of inline text. This resolves escaped characters and\nperforms limited lookahead for characters that only begin a different inline as part of a sequence.\n","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.inlineTextChar","kind":"def","line":331,"name":"Lean.Doc.Parser.inlineTextChar","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L331-L370"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.instOrdUnorderedListType\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">instOrdUnorderedListType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.UnorderedListType\">UnorderedListType</a></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.instOrdUnorderedListType","kind":"instance","line":284,"name":"Lean.Doc.Parser.instOrdUnorderedListType","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L284-L292"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.instDecidableEqUnorderedListType\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">instDecidableEqUnorderedListType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.UnorderedListType\">UnorderedListType</a></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.instDecidableEqUnorderedListType","kind":"instance","line":282,"name":"Lean.Doc.Parser.instDecidableEqUnorderedListType","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L282-L282"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.instBEqUnorderedListType.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">instBEqUnorderedListType</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.UnorderedListType\">UnorderedListType</a> → <a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.UnorderedListType\">UnorderedListType</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.instBEqUnorderedListType.beq","kind":"def","line":282,"name":"Lean.Doc.Parser.instBEqUnorderedListType.beq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L282-L282"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.instBEqUnorderedListType\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">instBEqUnorderedListType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.UnorderedListType\">UnorderedListType</a></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.instBEqUnorderedListType","kind":"instance","line":282,"name":"Lean.Doc.Parser.instBEqUnorderedListType","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L282-L282"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.instReprUnorderedListType.repr\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">instReprUnorderedListType</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.UnorderedListType\">UnorderedListType</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.instReprUnorderedListType.repr","kind":"def","line":282,"name":"Lean.Doc.Parser.instReprUnorderedListType.repr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L282-L282"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.instReprUnorderedListType\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">instReprUnorderedListType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.UnorderedListType\">UnorderedListType</a></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.instReprUnorderedListType","kind":"instance","line":282,"name":"Lean.Doc.Parser.instReprUnorderedListType","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L282-L282"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.UnorderedListType.plus\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">UnorderedListType</span>.<span class=\"name\">plus</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.UnorderedListType\">UnorderedListType</a></div></div>","info":{"doc":"Items like + ","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.UnorderedListType.plus","kind":"ctor","line":280,"name":"Lean.Doc.Parser.UnorderedListType.plus","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L280-L281"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.UnorderedListType.dash\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">UnorderedListType</span>.<span class=\"name\">dash</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.UnorderedListType\">UnorderedListType</a></div></div>","info":{"doc":"Items like - ","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.UnorderedListType.dash","kind":"ctor","line":278,"name":"Lean.Doc.Parser.UnorderedListType.dash","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L278-L279"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.UnorderedListType.asterisk\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">UnorderedListType</span>.<span class=\"name\">asterisk</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.UnorderedListType\">UnorderedListType</a></div></div>","info":{"doc":"Items like * ","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.UnorderedListType.asterisk","kind":"ctor","line":276,"name":"Lean.Doc.Parser.UnorderedListType.asterisk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L276-L277"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.UnorderedListType\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">UnorderedListType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Unordered lists may have three indicators: asterisks, dashes, or pluses.\n","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.UnorderedListType","kind":"inductive","line":272,"name":"Lean.Doc.Parser.UnorderedListType","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L272-L282"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.instOrdOrderedListType\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">instOrdOrderedListType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Ord/Basic.html#Ord\">Ord</a> <a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.OrderedListType\">OrderedListType</a></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.instOrdOrderedListType","kind":"instance","line":259,"name":"Lean.Doc.Parser.instOrdOrderedListType","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L259-L264"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.instDecidableEqOrderedListType\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">instDecidableEqOrderedListType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.OrderedListType\">OrderedListType</a></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.instDecidableEqOrderedListType","kind":"instance","line":257,"name":"Lean.Doc.Parser.instDecidableEqOrderedListType","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L257-L257"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.instBEqOrderedListType\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">instBEqOrderedListType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.OrderedListType\">OrderedListType</a></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.instBEqOrderedListType","kind":"instance","line":257,"name":"Lean.Doc.Parser.instBEqOrderedListType","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L257-L257"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.instBEqOrderedListType.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">instBEqOrderedListType</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.OrderedListType\">OrderedListType</a> → <a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.OrderedListType\">OrderedListType</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.instBEqOrderedListType.beq","kind":"def","line":257,"name":"Lean.Doc.Parser.instBEqOrderedListType.beq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L257-L257"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.instReprOrderedListType\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">instReprOrderedListType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.OrderedListType\">OrderedListType</a></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.instReprOrderedListType","kind":"instance","line":257,"name":"Lean.Doc.Parser.instReprOrderedListType","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L257-L257"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.instReprOrderedListType.repr\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">instReprOrderedListType</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.OrderedListType\">OrderedListType</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.instReprOrderedListType.repr","kind":"def","line":257,"name":"Lean.Doc.Parser.instReprOrderedListType.repr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L257-L257"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.OrderedListType.parenAfter\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">OrderedListType</span>.<span class=\"name\">parenAfter</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.OrderedListType\">OrderedListType</a></div></div>","info":{"doc":"Items like 1) ","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.OrderedListType.parenAfter","kind":"ctor","line":255,"name":"Lean.Doc.Parser.OrderedListType.parenAfter","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L255-L256"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.OrderedListType.numDot\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">OrderedListType</span>.<span class=\"name\">numDot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.OrderedListType\">OrderedListType</a></div></div>","info":{"doc":"Items like 1. ","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.OrderedListType.numDot","kind":"ctor","line":253,"name":"Lean.Doc.Parser.OrderedListType.numDot","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L253-L254"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.OrderedListType\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">OrderedListType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Ordered lists may have two styles of indicator, with trailing dots or parentheses.\n","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.OrderedListType","kind":"inductive","line":249,"name":"Lean.Doc.Parser.OrderedListType","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L249-L257"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.fakeAtom\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">fakeAtom</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">str</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">info</span> : <a href=\"./Init/Prelude.html#Lean.SourceInfo\">SourceInfo</a> := <a href=\"./Init/Prelude.html#Lean.SourceInfo.none\">SourceInfo.none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">Parser.ParserFn</a></div></div>","info":{"doc":"Construct a “fake” atom with the given string content and source information.\n\nNormally, atoms are always substrings of the original input; however, Verso's concrete syntax\nis different enough from Lean's that this isn't always a good match.\n","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.fakeAtom","kind":"def","line":225,"name":"Lean.Doc.Parser.fakeAtom","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L225-L233"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.asStringFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">asStringFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">Parser.ParserFn</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">quoted</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">transform</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <a href=\"./Init/Prelude.html#String\">String</a></span> := <a href=\"./Init/Prelude.html#id\">id</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">Parser.ParserFn</a></div></div>","info":{"doc":"Match an arbitrary Parser and return the consumed String in a `Syntax.atom`. ","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.asStringFn","kind":"def","line":151,"name":"Lean.Doc.Parser.asStringFn","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L151-L158"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.ignoreFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">ignoreFn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">Parser.ParserFn</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">Parser.ParserFn</a></div></div>","info":{"doc":"Parses as `p`, but discards the result.\n","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.ignoreFn","kind":"def","line":106,"name":"Lean.Doc.Parser.ignoreFn","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L106-L112"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Parser.html#Lean.Doc.Parser.skipFn\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">Parser</span>.<span class=\"name\">skipFn</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Parser/Types.html#Lean.Parser.ParserFn\">Parser.ParserFn</a></div></div>","info":{"doc":"A parser that does nothing.\n","docLink":"./Lean/DocString/Parser.html#Lean.Doc.Parser.skipFn","kind":"def","line":39,"name":"Lean.Doc.Parser.skipFn","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Parser.lean#L39-L42"}}],"imports":["Lean.Parser.Types","Lean.DocString.Syntax","Lean.DocString.Syntax"],"instances":[{"className":"Repr","name":"Lean.Doc.Parser.instReprOrderedListType","typeNames":["Lean.Doc.Parser.OrderedListType"]},{"className":"BEq","name":"Lean.Doc.Parser.instBEqOrderedListType","typeNames":["Lean.Doc.Parser.OrderedListType"]},{"className":"Decidable","name":"Lean.Doc.Parser.instDecidableEqOrderedListType","typeNames":["Eq"]},{"className":"Ord","name":"Lean.Doc.Parser.instOrdOrderedListType","typeNames":["Lean.Doc.Parser.OrderedListType"]},{"className":"Repr","name":"Lean.Doc.Parser.instReprUnorderedListType","typeNames":["Lean.Doc.Parser.UnorderedListType"]},{"className":"BEq","name":"Lean.Doc.Parser.instBEqUnorderedListType","typeNames":["Lean.Doc.Parser.UnorderedListType"]},{"className":"Decidable","name":"Lean.Doc.Parser.instDecidableEqUnorderedListType","typeNames":["Eq"]},{"className":"Ord","name":"Lean.Doc.Parser.instOrdUnorderedListType","typeNames":["Lean.Doc.Parser.UnorderedListType"]},{"className":"Inhabited","name":"Lean.Doc.Parser.instInhabitedInlineCtxt","typeNames":["Lean.Doc.Parser.InlineCtxt"]},{"className":"Repr","name":"Lean.Doc.Parser.instReprInList","typeNames":["Lean.Doc.Parser.InList"]},{"className":"Inhabited","name":"Lean.Doc.Parser.instInhabitedBlockCtxt","typeNames":["Lean.Doc.Parser.BlockCtxt"]},{"className":"Repr","name":"Lean.Doc.Parser.instReprBlockCtxt","typeNames":["Lean.Doc.Parser.BlockCtxt"]}],"name":"Lean.DocString.Parser"}