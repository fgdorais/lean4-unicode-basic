{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.right_le_or\"><span class=\"name\">USize</span>.<span class=\"name\">right_le_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.right_le_or","kind":"theorem","line":1328,"name":"USize.right_le_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1328-L1329"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.right_le_or\"><span class=\"name\">UInt64</span>.<span class=\"name\">right_le_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.right_le_or","kind":"theorem","line":1326,"name":"UInt64.right_le_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1326-L1327"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.right_le_or\"><span class=\"name\">UInt32</span>.<span class=\"name\">right_le_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.right_le_or","kind":"theorem","line":1324,"name":"UInt32.right_le_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1324-L1325"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.right_le_or\"><span class=\"name\">UInt16</span>.<span class=\"name\">right_le_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.right_le_or","kind":"theorem","line":1322,"name":"UInt16.right_le_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1322-L1323"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.right_le_or\"><span class=\"name\">UInt8</span>.<span class=\"name\">right_le_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.right_le_or","kind":"theorem","line":1320,"name":"UInt8.right_le_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1320-L1321"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.left_le_or\"><span class=\"name\">USize</span>.<span class=\"name\">left_le_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.left_le_or","kind":"theorem","line":1317,"name":"USize.left_le_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1317-L1318"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.left_le_or\"><span class=\"name\">UInt64</span>.<span class=\"name\">left_le_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.left_le_or","kind":"theorem","line":1315,"name":"UInt64.left_le_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1315-L1316"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.left_le_or\"><span class=\"name\">UInt32</span>.<span class=\"name\">left_le_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.left_le_or","kind":"theorem","line":1313,"name":"UInt32.left_le_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1313-L1314"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.left_le_or\"><span class=\"name\">UInt16</span>.<span class=\"name\">left_le_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.left_le_or","kind":"theorem","line":1311,"name":"UInt16.left_le_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1311-L1312"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.left_le_or\"><span class=\"name\">UInt8</span>.<span class=\"name\">left_le_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.left_le_or","kind":"theorem","line":1309,"name":"UInt8.left_le_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1309-L1310"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.and_le_left\"><span class=\"name\">USize</span>.<span class=\"name\">and_le_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.and_le_left","kind":"theorem","line":1306,"name":"USize.and_le_left","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1306-L1307"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.and_le_left\"><span class=\"name\">UInt64</span>.<span class=\"name\">and_le_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.and_le_left","kind":"theorem","line":1304,"name":"UInt64.and_le_left","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1304-L1305"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.and_le_left\"><span class=\"name\">UInt32</span>.<span class=\"name\">and_le_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.and_le_left","kind":"theorem","line":1302,"name":"UInt32.and_le_left","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1302-L1303"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.and_le_left\"><span class=\"name\">UInt16</span>.<span class=\"name\">and_le_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.and_le_left","kind":"theorem","line":1300,"name":"UInt16.and_le_left","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1300-L1301"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.and_le_left\"><span class=\"name\">UInt8</span>.<span class=\"name\">and_le_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.and_le_left","kind":"theorem","line":1298,"name":"UInt8.and_le_left","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1298-L1299"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.and_le_right\"><span class=\"name\">USize</span>.<span class=\"name\">and_le_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.and_le_right","kind":"theorem","line":1295,"name":"USize.and_le_right","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1295-L1296"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.and_le_right\"><span class=\"name\">UInt64</span>.<span class=\"name\">and_le_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.and_le_right","kind":"theorem","line":1293,"name":"UInt64.and_le_right","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1293-L1294"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.and_le_right\"><span class=\"name\">UInt32</span>.<span class=\"name\">and_le_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.and_le_right","kind":"theorem","line":1291,"name":"UInt32.and_le_right","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1291-L1292"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.and_le_right\"><span class=\"name\">UInt16</span>.<span class=\"name\">and_le_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.and_le_right","kind":"theorem","line":1289,"name":"UInt16.and_le_right","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1289-L1290"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.and_le_right\"><span class=\"name\">UInt8</span>.<span class=\"name\">and_le_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.and_le_right","kind":"theorem","line":1287,"name":"UInt8.and_le_right","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1287-L1288"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.shiftRight_or\"><span class=\"name\">USize</span>.<span class=\"name\">shiftRight_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.shiftRight_or","kind":"theorem","line":1284,"name":"USize.shiftRight_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1284-L1285"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.shiftRight_or\"><span class=\"name\">UInt64</span>.<span class=\"name\">shiftRight_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.shiftRight_or","kind":"theorem","line":1282,"name":"UInt64.shiftRight_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1282-L1283"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.shiftRight_or\"><span class=\"name\">UInt32</span>.<span class=\"name\">shiftRight_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.shiftRight_or","kind":"theorem","line":1280,"name":"UInt32.shiftRight_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1280-L1281"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.shiftRight_or\"><span class=\"name\">UInt16</span>.<span class=\"name\">shiftRight_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.shiftRight_or","kind":"theorem","line":1278,"name":"UInt16.shiftRight_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1278-L1279"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.shiftRight_or\"><span class=\"name\">UInt8</span>.<span class=\"name\">shiftRight_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.shiftRight_or","kind":"theorem","line":1276,"name":"UInt8.shiftRight_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1276-L1277"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.shiftRight_and\"><span class=\"name\">USize</span>.<span class=\"name\">shiftRight_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.shiftRight_and","kind":"theorem","line":1273,"name":"USize.shiftRight_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1273-L1274"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.shiftRight_and\"><span class=\"name\">UInt64</span>.<span class=\"name\">shiftRight_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.shiftRight_and","kind":"theorem","line":1271,"name":"UInt64.shiftRight_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1271-L1272"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.shiftRight_and\"><span class=\"name\">UInt32</span>.<span class=\"name\">shiftRight_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.shiftRight_and","kind":"theorem","line":1269,"name":"UInt32.shiftRight_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1269-L1270"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.shiftRight_and\"><span class=\"name\">UInt16</span>.<span class=\"name\">shiftRight_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.shiftRight_and","kind":"theorem","line":1267,"name":"UInt16.shiftRight_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1267-L1268"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.shiftRight_and\"><span class=\"name\">UInt8</span>.<span class=\"name\">shiftRight_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.shiftRight_and","kind":"theorem","line":1265,"name":"UInt8.shiftRight_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1265-L1266"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.shiftRight_xor\"><span class=\"name\">USize</span>.<span class=\"name\">shiftRight_xor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.shiftRight_xor","kind":"theorem","line":1262,"name":"USize.shiftRight_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1262-L1263"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.shiftRight_xor\"><span class=\"name\">UInt64</span>.<span class=\"name\">shiftRight_xor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.shiftRight_xor","kind":"theorem","line":1260,"name":"UInt64.shiftRight_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1260-L1261"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.shiftRight_xor\"><span class=\"name\">UInt32</span>.<span class=\"name\">shiftRight_xor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.shiftRight_xor","kind":"theorem","line":1258,"name":"UInt32.shiftRight_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1258-L1259"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.shiftRight_xor\"><span class=\"name\">UInt16</span>.<span class=\"name\">shiftRight_xor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.shiftRight_xor","kind":"theorem","line":1256,"name":"UInt16.shiftRight_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1256-L1257"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.shiftRight_xor\"><span class=\"name\">UInt8</span>.<span class=\"name\">shiftRight_xor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.shiftRight_xor","kind":"theorem","line":1254,"name":"UInt8.shiftRight_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1254-L1255"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.zero_shiftRight\"><span class=\"name\">USize</span>.<span class=\"name\">zero_shiftRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.zero_shiftRight","kind":"theorem","line":1252,"name":"USize.zero_shiftRight","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1252-L1252"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.zero_shiftRight\"><span class=\"name\">UInt64</span>.<span class=\"name\">zero_shiftRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.zero_shiftRight","kind":"theorem","line":1251,"name":"UInt64.zero_shiftRight","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1251-L1251"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.zero_shiftRight\"><span class=\"name\">UInt32</span>.<span class=\"name\">zero_shiftRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.zero_shiftRight","kind":"theorem","line":1250,"name":"UInt32.zero_shiftRight","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1250-L1250"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.zero_shiftRight\"><span class=\"name\">UInt16</span>.<span class=\"name\">zero_shiftRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.zero_shiftRight","kind":"theorem","line":1249,"name":"UInt16.zero_shiftRight","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1249-L1249"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.zero_shiftRight\"><span class=\"name\">UInt8</span>.<span class=\"name\">zero_shiftRight</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.zero_shiftRight","kind":"theorem","line":1248,"name":"UInt8.zero_shiftRight","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1248-L1248"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.shiftRight_zero\"><span class=\"name\">USize</span>.<span class=\"name\">shiftRight_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.shiftRight_zero","kind":"theorem","line":1246,"name":"USize.shiftRight_zero","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1246-L1246"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.shiftRight_zero\"><span class=\"name\">UInt64</span>.<span class=\"name\">shiftRight_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.shiftRight_zero","kind":"theorem","line":1245,"name":"UInt64.shiftRight_zero","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1245-L1245"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.shiftRight_zero\"><span class=\"name\">UInt32</span>.<span class=\"name\">shiftRight_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.shiftRight_zero","kind":"theorem","line":1244,"name":"UInt32.shiftRight_zero","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1244-L1244"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.shiftRight_zero\"><span class=\"name\">UInt16</span>.<span class=\"name\">shiftRight_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.shiftRight_zero","kind":"theorem","line":1243,"name":"UInt16.shiftRight_zero","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1243-L1243"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.shiftRight_zero\"><span class=\"name\">UInt8</span>.<span class=\"name\">shiftRight_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.shiftRight_zero","kind":"theorem","line":1242,"name":"UInt8.shiftRight_zero","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1242-L1242"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.neg_one_shiftLeft_or_shiftLeft\"><span class=\"name\">USize</span>.<span class=\"name\">neg_one_shiftLeft_or_shiftLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(-<span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(-<span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.neg_one_shiftLeft_or_shiftLeft","kind":"theorem","line":1239,"name":"USize.neg_one_shiftLeft_or_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1239-L1240"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.neg_one_shiftLeft_or_shiftLeft\"><span class=\"name\">UInt64</span>.<span class=\"name\">neg_one_shiftLeft_or_shiftLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(-<span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(-<span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.neg_one_shiftLeft_or_shiftLeft","kind":"theorem","line":1237,"name":"UInt64.neg_one_shiftLeft_or_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1237-L1238"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.neg_one_shiftLeft_or_shiftLeft\"><span class=\"name\">UInt32</span>.<span class=\"name\">neg_one_shiftLeft_or_shiftLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(-<span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(-<span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.neg_one_shiftLeft_or_shiftLeft","kind":"theorem","line":1235,"name":"UInt32.neg_one_shiftLeft_or_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1235-L1236"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.neg_one_shiftLeft_or_shiftLeft\"><span class=\"name\">UInt16</span>.<span class=\"name\">neg_one_shiftLeft_or_shiftLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(-<span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(-<span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.neg_one_shiftLeft_or_shiftLeft","kind":"theorem","line":1233,"name":"UInt16.neg_one_shiftLeft_or_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1233-L1234"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.neg_one_shiftLeft_or_shiftLeft\"><span class=\"name\">UInt8</span>.<span class=\"name\">neg_one_shiftLeft_or_shiftLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(-<span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(-<span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.neg_one_shiftLeft_or_shiftLeft","kind":"theorem","line":1231,"name":"UInt8.neg_one_shiftLeft_or_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1231-L1232"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.neg_one_shiftLeft_and_shiftLeft\"><span class=\"name\">USize</span>.<span class=\"name\">neg_one_shiftLeft_and_shiftLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(-<span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.neg_one_shiftLeft_and_shiftLeft","kind":"theorem","line":1228,"name":"USize.neg_one_shiftLeft_and_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1228-L1229"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.neg_one_shiftLeft_and_shiftLeft\"><span class=\"name\">UInt64</span>.<span class=\"name\">neg_one_shiftLeft_and_shiftLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(-<span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.neg_one_shiftLeft_and_shiftLeft","kind":"theorem","line":1226,"name":"UInt64.neg_one_shiftLeft_and_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1226-L1227"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.neg_one_shiftLeft_and_shiftLeft\"><span class=\"name\">UInt32</span>.<span class=\"name\">neg_one_shiftLeft_and_shiftLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(-<span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.neg_one_shiftLeft_and_shiftLeft","kind":"theorem","line":1224,"name":"UInt32.neg_one_shiftLeft_and_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1224-L1225"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.neg_one_shiftLeft_and_shiftLeft\"><span class=\"name\">UInt16</span>.<span class=\"name\">neg_one_shiftLeft_and_shiftLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(-<span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.neg_one_shiftLeft_and_shiftLeft","kind":"theorem","line":1222,"name":"UInt16.neg_one_shiftLeft_and_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1222-L1223"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.neg_one_shiftLeft_and_shiftLeft\"><span class=\"name\">UInt8</span>.<span class=\"name\">neg_one_shiftLeft_and_shiftLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(-<span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.neg_one_shiftLeft_and_shiftLeft","kind":"theorem","line":1220,"name":"UInt8.neg_one_shiftLeft_and_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1220-L1221"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.shiftLeft_add\"><span class=\"name\">USize</span>.<span class=\"name\">shiftLeft_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#USize.ofNat\">ofNat</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hc</span> : <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#USize.ofNat\">ofNat</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hbc</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#USize.ofNat\">ofNat</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.shiftLeft_add","kind":"theorem","line":1210,"name":"USize.shiftLeft_add","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1210-L1218"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.shiftLeft_add\"><span class=\"name\">UInt64</span>.<span class=\"name\">shiftLeft_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">64</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hc</span> : <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">64</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hbc</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">64</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.shiftLeft_add","kind":"theorem","line":1203,"name":"UInt64.shiftLeft_add","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1203-L1209"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.shiftLeft_add\"><span class=\"name\">UInt32</span>.<span class=\"name\">shiftLeft_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">32</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hc</span> : <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">32</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hbc</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">32</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.shiftLeft_add","kind":"theorem","line":1196,"name":"UInt32.shiftLeft_add","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1196-L1202"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.shiftLeft_add\"><span class=\"name\">UInt16</span>.<span class=\"name\">shiftLeft_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">16</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hc</span> : <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">16</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hbc</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">16</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.shiftLeft_add","kind":"theorem","line":1189,"name":"UInt16.shiftLeft_add","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1189-L1195"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.shiftLeft_add\"><span class=\"name\">UInt8</span>.<span class=\"name\">shiftLeft_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">8</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hc</span> : <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">8</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hbc</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">8</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.shiftLeft_add","kind":"theorem","line":1182,"name":"UInt8.shiftLeft_add","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1182-L1188"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.shiftLeft_add_of_toNat_lt\"><span class=\"name\">USize</span>.<span class=\"name\">shiftLeft_add_of_toNat_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#USize.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Data/UInt/BasicAux.html#USize.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.shiftLeft_add_of_toNat_lt","kind":"theorem","line":1170,"name":"USize.shiftLeft_add_of_toNat_lt","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1170-L1180"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.shiftLeft_add_of_toNat_lt\"><span class=\"name\">UInt64</span>.<span class=\"name\">shiftLeft_add_of_toNat_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">64</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.shiftLeft_add_of_toNat_lt","kind":"theorem","line":1166,"name":"UInt64.shiftLeft_add_of_toNat_lt","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1166-L1169"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.shiftLeft_add_of_toNat_lt\"><span class=\"name\">UInt32</span>.<span class=\"name\">shiftLeft_add_of_toNat_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#UInt32.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#UInt32.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">32</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.shiftLeft_add_of_toNat_lt","kind":"theorem","line":1162,"name":"UInt32.shiftLeft_add_of_toNat_lt","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1162-L1165"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.shiftLeft_add_of_toNat_lt\"><span class=\"name\">UInt16</span>.<span class=\"name\">shiftLeft_add_of_toNat_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">16</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.shiftLeft_add_of_toNat_lt","kind":"theorem","line":1158,"name":"UInt16.shiftLeft_add_of_toNat_lt","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1158-L1161"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.shiftLeft_add_of_toNat_lt\"><span class=\"name\">UInt8</span>.<span class=\"name\">shiftLeft_add_of_toNat_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">8</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">c</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.shiftLeft_add_of_toNat_lt","kind":"theorem","line":1154,"name":"UInt8.shiftLeft_add_of_toNat_lt","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1154-L1157"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.shiftLeft_or\"><span class=\"name\">USize</span>.<span class=\"name\">shiftLeft_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.shiftLeft_or","kind":"theorem","line":1151,"name":"USize.shiftLeft_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1151-L1152"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.shiftLeft_or\"><span class=\"name\">UInt64</span>.<span class=\"name\">shiftLeft_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.shiftLeft_or","kind":"theorem","line":1149,"name":"UInt64.shiftLeft_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1149-L1150"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.shiftLeft_or\"><span class=\"name\">UInt32</span>.<span class=\"name\">shiftLeft_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.shiftLeft_or","kind":"theorem","line":1147,"name":"UInt32.shiftLeft_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1147-L1148"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.shiftLeft_or\"><span class=\"name\">UInt16</span>.<span class=\"name\">shiftLeft_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.shiftLeft_or","kind":"theorem","line":1145,"name":"UInt16.shiftLeft_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1145-L1146"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.shiftLeft_or\"><span class=\"name\">UInt8</span>.<span class=\"name\">shiftLeft_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.shiftLeft_or","kind":"theorem","line":1143,"name":"UInt8.shiftLeft_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1143-L1144"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.shiftLeft_and\"><span class=\"name\">USize</span>.<span class=\"name\">shiftLeft_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.shiftLeft_and","kind":"theorem","line":1140,"name":"USize.shiftLeft_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1140-L1141"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.shiftLeft_and\"><span class=\"name\">UInt64</span>.<span class=\"name\">shiftLeft_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.shiftLeft_and","kind":"theorem","line":1138,"name":"UInt64.shiftLeft_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1138-L1139"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.shiftLeft_and\"><span class=\"name\">UInt32</span>.<span class=\"name\">shiftLeft_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.shiftLeft_and","kind":"theorem","line":1136,"name":"UInt32.shiftLeft_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1136-L1137"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.shiftLeft_and\"><span class=\"name\">UInt16</span>.<span class=\"name\">shiftLeft_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.shiftLeft_and","kind":"theorem","line":1134,"name":"UInt16.shiftLeft_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1134-L1135"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.shiftLeft_and\"><span class=\"name\">UInt8</span>.<span class=\"name\">shiftLeft_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.shiftLeft_and","kind":"theorem","line":1132,"name":"UInt8.shiftLeft_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1132-L1133"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.shiftLeft_xor\"><span class=\"name\">USize</span>.<span class=\"name\">shiftLeft_xor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.shiftLeft_xor","kind":"theorem","line":1129,"name":"USize.shiftLeft_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1129-L1130"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.shiftLeft_xor\"><span class=\"name\">UInt64</span>.<span class=\"name\">shiftLeft_xor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.shiftLeft_xor","kind":"theorem","line":1127,"name":"UInt64.shiftLeft_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1127-L1128"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.shiftLeft_xor\"><span class=\"name\">UInt32</span>.<span class=\"name\">shiftLeft_xor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.shiftLeft_xor","kind":"theorem","line":1125,"name":"UInt32.shiftLeft_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1125-L1126"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.shiftLeft_xor\"><span class=\"name\">UInt16</span>.<span class=\"name\">shiftLeft_xor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.shiftLeft_xor","kind":"theorem","line":1123,"name":"UInt16.shiftLeft_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1123-L1124"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.shiftLeft_xor\"><span class=\"name\">UInt8</span>.<span class=\"name\">shiftLeft_xor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.shiftLeft_xor","kind":"theorem","line":1121,"name":"UInt8.shiftLeft_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1121-L1122"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.zero_shiftLeft\"><span class=\"name\">USize</span>.<span class=\"name\">zero_shiftLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.zero_shiftLeft","kind":"theorem","line":1119,"name":"USize.zero_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1119-L1119"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.zero_shiftLeft\"><span class=\"name\">UInt64</span>.<span class=\"name\">zero_shiftLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.zero_shiftLeft","kind":"theorem","line":1118,"name":"UInt64.zero_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1118-L1118"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.zero_shiftLeft\"><span class=\"name\">UInt32</span>.<span class=\"name\">zero_shiftLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.zero_shiftLeft","kind":"theorem","line":1117,"name":"UInt32.zero_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1117-L1117"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.zero_shiftLeft\"><span class=\"name\">UInt16</span>.<span class=\"name\">zero_shiftLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.zero_shiftLeft","kind":"theorem","line":1116,"name":"UInt16.zero_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1116-L1116"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.zero_shiftLeft\"><span class=\"name\">UInt8</span>.<span class=\"name\">zero_shiftLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.zero_shiftLeft","kind":"theorem","line":1115,"name":"UInt8.zero_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1115-L1115"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.shiftLeft_zero\"><span class=\"name\">USize</span>.<span class=\"name\">shiftLeft_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.shiftLeft_zero","kind":"theorem","line":1113,"name":"USize.shiftLeft_zero","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1113-L1113"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.shiftLeft_zero\"><span class=\"name\">UInt64</span>.<span class=\"name\">shiftLeft_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.shiftLeft_zero","kind":"theorem","line":1112,"name":"UInt64.shiftLeft_zero","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1112-L1112"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.shiftLeft_zero\"><span class=\"name\">UInt32</span>.<span class=\"name\">shiftLeft_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.shiftLeft_zero","kind":"theorem","line":1111,"name":"UInt32.shiftLeft_zero","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1111-L1111"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.shiftLeft_zero\"><span class=\"name\">UInt16</span>.<span class=\"name\">shiftLeft_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.shiftLeft_zero","kind":"theorem","line":1110,"name":"UInt16.shiftLeft_zero","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1110-L1110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.shiftLeft_zero\"><span class=\"name\">UInt8</span>.<span class=\"name\">shiftLeft_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.shiftLeft_zero","kind":"theorem","line":1109,"name":"UInt8.shiftLeft_zero","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1109-L1109"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.xor_not\"><span class=\"name\">USize</span>.<span class=\"name\">xor_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a>(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.xor_not","kind":"theorem","line":1106,"name":"USize.xor_not","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1106-L1107"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.xor_not\"><span class=\"name\">UInt64</span>.<span class=\"name\">xor_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a>(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.xor_not","kind":"theorem","line":1104,"name":"UInt64.xor_not","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1104-L1105"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.xor_not\"><span class=\"name\">UInt32</span>.<span class=\"name\">xor_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a>(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.xor_not","kind":"theorem","line":1102,"name":"UInt32.xor_not","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1102-L1103"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.xor_not\"><span class=\"name\">UInt16</span>.<span class=\"name\">xor_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a>(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.xor_not","kind":"theorem","line":1100,"name":"UInt16.xor_not","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1100-L1101"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.xor_not\"><span class=\"name\">UInt8</span>.<span class=\"name\">xor_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a>(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.xor_not","kind":"theorem","line":1098,"name":"UInt8.xor_not","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1098-L1099"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.not_xor\"><span class=\"name\">USize</span>.<span class=\"name\">not_xor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a>(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.not_xor","kind":"theorem","line":1095,"name":"USize.not_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1095-L1096"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.not_xor\"><span class=\"name\">UInt64</span>.<span class=\"name\">not_xor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a>(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.not_xor","kind":"theorem","line":1093,"name":"UInt64.not_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1093-L1094"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.not_xor\"><span class=\"name\">UInt32</span>.<span class=\"name\">not_xor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a>(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.not_xor","kind":"theorem","line":1091,"name":"UInt32.not_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1091-L1092"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.not_xor\"><span class=\"name\">UInt16</span>.<span class=\"name\">not_xor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a>(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.not_xor","kind":"theorem","line":1089,"name":"UInt16.not_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1089-L1090"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.not_xor\"><span class=\"name\">UInt8</span>.<span class=\"name\">not_xor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a>(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.not_xor","kind":"theorem","line":1087,"name":"UInt8.not_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1087-L1088"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.not_ne_self\"><span class=\"name\">USize</span>.<span class=\"name\">not_ne_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.not_ne_self","kind":"theorem","line":1085,"name":"USize.not_ne_self","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1085-L1085"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.not_ne_self\"><span class=\"name\">UInt64</span>.<span class=\"name\">not_ne_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.not_ne_self","kind":"theorem","line":1084,"name":"UInt64.not_ne_self","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1084-L1084"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.not_ne_self\"><span class=\"name\">UInt32</span>.<span class=\"name\">not_ne_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.not_ne_self","kind":"theorem","line":1083,"name":"UInt32.not_ne_self","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1083-L1083"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.not_ne_self\"><span class=\"name\">UInt16</span>.<span class=\"name\">not_ne_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.not_ne_self","kind":"theorem","line":1082,"name":"UInt16.not_ne_self","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1082-L1082"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.not_ne_self\"><span class=\"name\">UInt8</span>.<span class=\"name\">not_ne_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.not_ne_self","kind":"theorem","line":1081,"name":"UInt8.not_ne_self","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1081-L1081"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.ne_not_self\"><span class=\"name\">USize</span>.<span class=\"name\">ne_not_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.ne_not_self","kind":"theorem","line":1079,"name":"USize.ne_not_self","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1079-L1079"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.ne_not_self\"><span class=\"name\">UInt64</span>.<span class=\"name\">ne_not_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.ne_not_self","kind":"theorem","line":1078,"name":"UInt64.ne_not_self","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1078-L1078"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.ne_not_self\"><span class=\"name\">UInt32</span>.<span class=\"name\">ne_not_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.ne_not_self","kind":"theorem","line":1077,"name":"UInt32.ne_not_self","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1077-L1077"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.ne_not_self\"><span class=\"name\">UInt16</span>.<span class=\"name\">ne_not_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.ne_not_self","kind":"theorem","line":1076,"name":"UInt16.ne_not_self","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1076-L1076"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.ne_not_self\"><span class=\"name\">UInt8</span>.<span class=\"name\">ne_not_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.ne_not_self","kind":"theorem","line":1075,"name":"UInt8.ne_not_self","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1075-L1075"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.not_eq_comm\"><span class=\"name\">USize</span>.<span class=\"name\">not_eq_comm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.not_eq_comm","kind":"theorem","line":1072,"name":"USize.not_eq_comm","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1072-L1073"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.not_eq_comm\"><span class=\"name\">UInt64</span>.<span class=\"name\">not_eq_comm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.not_eq_comm","kind":"theorem","line":1070,"name":"UInt64.not_eq_comm","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1070-L1071"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.not_eq_comm\"><span class=\"name\">UInt32</span>.<span class=\"name\">not_eq_comm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.not_eq_comm","kind":"theorem","line":1068,"name":"UInt32.not_eq_comm","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1068-L1069"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.not_eq_comm\"><span class=\"name\">UInt16</span>.<span class=\"name\">not_eq_comm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.not_eq_comm","kind":"theorem","line":1066,"name":"UInt16.not_eq_comm","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1066-L1067"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.not_eq_comm\"><span class=\"name\">UInt8</span>.<span class=\"name\">not_eq_comm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.not_eq_comm","kind":"theorem","line":1064,"name":"UInt8.not_eq_comm","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1064-L1065"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.not_or_self\"><span class=\"name\">USize</span>.<span class=\"name\">not_or_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.not_or_self","kind":"theorem","line":1062,"name":"USize.not_or_self","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1062-L1062"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.not_or_self\"><span class=\"name\">UInt64</span>.<span class=\"name\">not_or_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.not_or_self","kind":"theorem","line":1061,"name":"UInt64.not_or_self","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1061-L1061"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.not_or_self\"><span class=\"name\">UInt32</span>.<span class=\"name\">not_or_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.not_or_self","kind":"theorem","line":1060,"name":"UInt32.not_or_self","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1060-L1060"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.not_or_self\"><span class=\"name\">UInt16</span>.<span class=\"name\">not_or_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.not_or_self","kind":"theorem","line":1059,"name":"UInt16.not_or_self","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1059-L1059"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.not_or_self\"><span class=\"name\">UInt8</span>.<span class=\"name\">not_or_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.not_or_self","kind":"theorem","line":1058,"name":"UInt8.not_or_self","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1058-L1058"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.or_not_self\"><span class=\"name\">USize</span>.<span class=\"name\">or_not_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.or_not_self","kind":"theorem","line":1054,"name":"USize.or_not_self","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1054-L1056"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.or_not_self\"><span class=\"name\">UInt64</span>.<span class=\"name\">or_not_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.or_not_self","kind":"theorem","line":1051,"name":"UInt64.or_not_self","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1051-L1053"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.or_not_self\"><span class=\"name\">UInt32</span>.<span class=\"name\">or_not_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.or_not_self","kind":"theorem","line":1048,"name":"UInt32.or_not_self","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1048-L1050"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.or_not_self\"><span class=\"name\">UInt16</span>.<span class=\"name\">or_not_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.or_not_self","kind":"theorem","line":1045,"name":"UInt16.or_not_self","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1045-L1047"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.or_not_self\"><span class=\"name\">UInt8</span>.<span class=\"name\">or_not_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.or_not_self","kind":"theorem","line":1042,"name":"UInt8.or_not_self","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1042-L1044"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.not_and_self\"><span class=\"name\">USize</span>.<span class=\"name\">not_and_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.not_and_self","kind":"theorem","line":1040,"name":"USize.not_and_self","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1040-L1040"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.not_and_self\"><span class=\"name\">UInt64</span>.<span class=\"name\">not_and_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.not_and_self","kind":"theorem","line":1039,"name":"UInt64.not_and_self","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1039-L1039"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.not_and_self\"><span class=\"name\">UInt32</span>.<span class=\"name\">not_and_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.not_and_self","kind":"theorem","line":1038,"name":"UInt32.not_and_self","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1038-L1038"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.not_and_self\"><span class=\"name\">UInt16</span>.<span class=\"name\">not_and_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.not_and_self","kind":"theorem","line":1037,"name":"UInt16.not_and_self","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1037-L1037"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.not_and_self\"><span class=\"name\">UInt8</span>.<span class=\"name\">not_and_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.not_and_self","kind":"theorem","line":1036,"name":"UInt8.not_and_self","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1036-L1036"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.and_not_self\"><span class=\"name\">USize</span>.<span class=\"name\">and_not_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.and_not_self","kind":"theorem","line":1034,"name":"USize.and_not_self","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1034-L1034"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.and_not_self\"><span class=\"name\">UInt64</span>.<span class=\"name\">and_not_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.and_not_self","kind":"theorem","line":1033,"name":"UInt64.and_not_self","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1033-L1033"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.and_not_self\"><span class=\"name\">UInt32</span>.<span class=\"name\">and_not_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.and_not_self","kind":"theorem","line":1032,"name":"UInt32.and_not_self","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1032-L1032"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.and_not_self\"><span class=\"name\">UInt16</span>.<span class=\"name\">and_not_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.and_not_self","kind":"theorem","line":1031,"name":"UInt16.and_not_self","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1031-L1031"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.and_not_self\"><span class=\"name\">UInt8</span>.<span class=\"name\">and_not_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.and_not_self","kind":"theorem","line":1030,"name":"UInt8.and_not_self","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1030-L1030"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.not_inj\"><span class=\"name\">USize</span>.<span class=\"name\">not_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.not_inj","kind":"theorem","line":1028,"name":"USize.not_inj","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1028-L1028"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.not_inj\"><span class=\"name\">UInt64</span>.<span class=\"name\">not_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.not_inj","kind":"theorem","line":1027,"name":"UInt64.not_inj","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1027-L1027"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.not_inj\"><span class=\"name\">UInt32</span>.<span class=\"name\">not_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.not_inj","kind":"theorem","line":1026,"name":"UInt32.not_inj","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1026-L1026"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.not_inj\"><span class=\"name\">UInt16</span>.<span class=\"name\">not_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.not_inj","kind":"theorem","line":1025,"name":"UInt16.not_inj","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1025-L1025"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.not_inj\"><span class=\"name\">UInt8</span>.<span class=\"name\">not_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.not_inj","kind":"theorem","line":1024,"name":"UInt8.not_inj","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1024-L1024"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.not_not\"><span class=\"name\">USize</span>.<span class=\"name\">not_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.not_not","kind":"theorem","line":1022,"name":"USize.not_not","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1022-L1022"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.not_not\"><span class=\"name\">UInt64</span>.<span class=\"name\">not_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.not_not","kind":"theorem","line":1021,"name":"UInt64.not_not","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1021-L1021"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.not_not\"><span class=\"name\">UInt32</span>.<span class=\"name\">not_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.not_not","kind":"theorem","line":1020,"name":"UInt32.not_not","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1020-L1020"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.not_not\"><span class=\"name\">UInt16</span>.<span class=\"name\">not_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.not_not","kind":"theorem","line":1019,"name":"UInt16.not_not","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1019-L1019"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.not_not\"><span class=\"name\">UInt8</span>.<span class=\"name\">not_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.not_not","kind":"theorem","line":1018,"name":"UInt8.not_not","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1018-L1018"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.not_neg_one\"><span class=\"name\">USize</span>.<span class=\"name\">not_neg_one</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">(-<span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.not_neg_one","kind":"theorem","line":1016,"name":"USize.not_neg_one","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1016-L1016"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.not_neg_one\"><span class=\"name\">UInt64</span>.<span class=\"name\">not_neg_one</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">(-<span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.not_neg_one","kind":"theorem","line":1015,"name":"UInt64.not_neg_one","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1015-L1015"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.not_neg_one\"><span class=\"name\">UInt32</span>.<span class=\"name\">not_neg_one</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">(-<span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.not_neg_one","kind":"theorem","line":1014,"name":"UInt32.not_neg_one","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1014-L1014"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.not_neg_one\"><span class=\"name\">UInt16</span>.<span class=\"name\">not_neg_one</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">(-<span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.not_neg_one","kind":"theorem","line":1013,"name":"UInt16.not_neg_one","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1013-L1013"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.not_neg_one\"><span class=\"name\">UInt8</span>.<span class=\"name\">not_neg_one</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">(-<span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.not_neg_one","kind":"theorem","line":1012,"name":"UInt8.not_neg_one","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1012-L1012"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.not_zero\"><span class=\"name\">USize</span>.<span class=\"name\">not_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.not_zero","kind":"theorem","line":1010,"name":"USize.not_zero","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1010-L1010"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.not_zero\"><span class=\"name\">UInt64</span>.<span class=\"name\">not_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.not_zero","kind":"theorem","line":1009,"name":"UInt64.not_zero","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1009-L1009"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.not_zero\"><span class=\"name\">UInt32</span>.<span class=\"name\">not_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.not_zero","kind":"theorem","line":1008,"name":"UInt32.not_zero","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1008-L1008"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.not_zero\"><span class=\"name\">UInt16</span>.<span class=\"name\">not_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.not_zero","kind":"theorem","line":1007,"name":"UInt16.not_zero","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1007-L1007"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.not_zero\"><span class=\"name\">UInt8</span>.<span class=\"name\">not_zero</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.not_zero","kind":"theorem","line":1006,"name":"UInt8.not_zero","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1006-L1006"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.xor_right_inj\"><span class=\"name\">USize</span>.<span class=\"name\">xor_right_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.xor_right_inj","kind":"theorem","line":1003,"name":"USize.xor_right_inj","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1003-L1004"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.xor_right_inj\"><span class=\"name\">UInt64</span>.<span class=\"name\">xor_right_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.xor_right_inj","kind":"theorem","line":1001,"name":"UInt64.xor_right_inj","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L1001-L1002"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.xor_right_inj\"><span class=\"name\">UInt32</span>.<span class=\"name\">xor_right_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.xor_right_inj","kind":"theorem","line":999,"name":"UInt32.xor_right_inj","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L999-L1000"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.xor_right_inj\"><span class=\"name\">UInt16</span>.<span class=\"name\">xor_right_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.xor_right_inj","kind":"theorem","line":997,"name":"UInt16.xor_right_inj","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L997-L998"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.xor_right_inj\"><span class=\"name\">UInt8</span>.<span class=\"name\">xor_right_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.xor_right_inj","kind":"theorem","line":995,"name":"UInt8.xor_right_inj","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L995-L996"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.xor_left_inj\"><span class=\"name\">USize</span>.<span class=\"name\">xor_left_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">c</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.xor_left_inj","kind":"theorem","line":992,"name":"USize.xor_left_inj","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L992-L993"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.xor_left_inj\"><span class=\"name\">UInt64</span>.<span class=\"name\">xor_left_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">c</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.xor_left_inj","kind":"theorem","line":990,"name":"UInt64.xor_left_inj","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L990-L991"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.xor_left_inj\"><span class=\"name\">UInt32</span>.<span class=\"name\">xor_left_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">c</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.xor_left_inj","kind":"theorem","line":988,"name":"UInt32.xor_left_inj","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L988-L989"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.xor_left_inj\"><span class=\"name\">UInt16</span>.<span class=\"name\">xor_left_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">c</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.xor_left_inj","kind":"theorem","line":986,"name":"UInt16.xor_left_inj","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L986-L987"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.xor_left_inj\"><span class=\"name\">UInt8</span>.<span class=\"name\">xor_left_inj</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">c</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.xor_left_inj","kind":"theorem","line":984,"name":"UInt8.xor_left_inj","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L984-L985"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.xor_eq_zero_iff\"><span class=\"name\">USize</span>.<span class=\"name\">xor_eq_zero_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.xor_eq_zero_iff","kind":"theorem","line":982,"name":"USize.xor_eq_zero_iff","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L982-L982"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.xor_eq_zero_iff\"><span class=\"name\">UInt64</span>.<span class=\"name\">xor_eq_zero_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.xor_eq_zero_iff","kind":"theorem","line":981,"name":"UInt64.xor_eq_zero_iff","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L981-L981"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.xor_eq_zero_iff\"><span class=\"name\">UInt32</span>.<span class=\"name\">xor_eq_zero_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.xor_eq_zero_iff","kind":"theorem","line":980,"name":"UInt32.xor_eq_zero_iff","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L980-L980"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.xor_eq_zero_iff\"><span class=\"name\">UInt16</span>.<span class=\"name\">xor_eq_zero_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.xor_eq_zero_iff","kind":"theorem","line":979,"name":"UInt16.xor_eq_zero_iff","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L979-L979"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.xor_eq_zero_iff\"><span class=\"name\">UInt8</span>.<span class=\"name\">xor_eq_zero_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.xor_eq_zero_iff","kind":"theorem","line":978,"name":"UInt8.xor_eq_zero_iff","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L978-L978"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#instLawfulCommIdentityUSizeHXorOfNat\"><span class=\"name\">instLawfulCommIdentityUSizeHXorOfNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.LawfulCommIdentity\">Std.LawfulCommIdentity</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">0</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#instLawfulCommIdentityUSizeHXorOfNat","kind":"instance","line":975,"name":"instLawfulCommIdentityUSizeHXorOfNat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L975-L976"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#instLawfulCommIdentityUInt64HXorOfNat\"><span class=\"name\">instLawfulCommIdentityUInt64HXorOfNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.LawfulCommIdentity\">Std.LawfulCommIdentity</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">0</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#instLawfulCommIdentityUInt64HXorOfNat","kind":"instance","line":973,"name":"instLawfulCommIdentityUInt64HXorOfNat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L973-L974"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#instLawfulCommIdentityUInt32HXorOfNat\"><span class=\"name\">instLawfulCommIdentityUInt32HXorOfNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.LawfulCommIdentity\">Std.LawfulCommIdentity</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">0</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#instLawfulCommIdentityUInt32HXorOfNat","kind":"instance","line":971,"name":"instLawfulCommIdentityUInt32HXorOfNat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L971-L972"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#instLawfulCommIdentityUInt16HXorOfNat\"><span class=\"name\">instLawfulCommIdentityUInt16HXorOfNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.LawfulCommIdentity\">Std.LawfulCommIdentity</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">0</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#instLawfulCommIdentityUInt16HXorOfNat","kind":"instance","line":969,"name":"instLawfulCommIdentityUInt16HXorOfNat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L969-L970"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#instLawfulCommIdentityUInt8HXorOfNat\"><span class=\"name\">instLawfulCommIdentityUInt8HXorOfNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.LawfulCommIdentity\">Std.LawfulCommIdentity</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">0</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#instLawfulCommIdentityUInt8HXorOfNat","kind":"instance","line":967,"name":"instLawfulCommIdentityUInt8HXorOfNat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L967-L968"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.xor_neg_one\"><span class=\"name\">USize</span>.<span class=\"name\">xor_neg_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.xor_neg_one","kind":"theorem","line":965,"name":"USize.xor_neg_one","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L965-L965"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.xor_neg_one\"><span class=\"name\">UInt64</span>.<span class=\"name\">xor_neg_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.xor_neg_one","kind":"theorem","line":964,"name":"UInt64.xor_neg_one","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L964-L964"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.xor_neg_one\"><span class=\"name\">UInt32</span>.<span class=\"name\">xor_neg_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.xor_neg_one","kind":"theorem","line":963,"name":"UInt32.xor_neg_one","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L963-L963"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.xor_neg_one\"><span class=\"name\">UInt16</span>.<span class=\"name\">xor_neg_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.xor_neg_one","kind":"theorem","line":962,"name":"UInt16.xor_neg_one","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L962-L962"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.xor_neg_one\"><span class=\"name\">UInt8</span>.<span class=\"name\">xor_neg_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.xor_neg_one","kind":"theorem","line":961,"name":"UInt8.xor_neg_one","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L961-L961"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.neg_one_xor\"><span class=\"name\">USize</span>.<span class=\"name\">neg_one_xor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.neg_one_xor","kind":"theorem","line":957,"name":"USize.neg_one_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L957-L959"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.neg_one_xor\"><span class=\"name\">UInt64</span>.<span class=\"name\">neg_one_xor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.neg_one_xor","kind":"theorem","line":954,"name":"UInt64.neg_one_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L954-L956"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.neg_one_xor\"><span class=\"name\">UInt32</span>.<span class=\"name\">neg_one_xor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.neg_one_xor","kind":"theorem","line":951,"name":"UInt32.neg_one_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L951-L953"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.neg_one_xor\"><span class=\"name\">UInt16</span>.<span class=\"name\">neg_one_xor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.neg_one_xor","kind":"theorem","line":948,"name":"UInt16.neg_one_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L948-L950"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.neg_one_xor\"><span class=\"name\">UInt8</span>.<span class=\"name\">neg_one_xor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.neg_one_xor","kind":"theorem","line":945,"name":"UInt8.neg_one_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L945-L947"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.zero_xor\"><span class=\"name\">USize</span>.<span class=\"name\">zero_xor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.zero_xor","kind":"theorem","line":943,"name":"USize.zero_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L943-L943"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.zero_xor\"><span class=\"name\">UInt64</span>.<span class=\"name\">zero_xor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.zero_xor","kind":"theorem","line":942,"name":"UInt64.zero_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L942-L942"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.zero_xor\"><span class=\"name\">UInt32</span>.<span class=\"name\">zero_xor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.zero_xor","kind":"theorem","line":941,"name":"UInt32.zero_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L941-L941"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.zero_xor\"><span class=\"name\">UInt16</span>.<span class=\"name\">zero_xor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.zero_xor","kind":"theorem","line":940,"name":"UInt16.zero_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L940-L940"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.zero_xor\"><span class=\"name\">UInt8</span>.<span class=\"name\">zero_xor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.zero_xor","kind":"theorem","line":939,"name":"UInt8.zero_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L939-L939"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.xor_zero\"><span class=\"name\">USize</span>.<span class=\"name\">xor_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.xor_zero","kind":"theorem","line":937,"name":"USize.xor_zero","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L937-L937"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.xor_zero\"><span class=\"name\">UInt64</span>.<span class=\"name\">xor_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.xor_zero","kind":"theorem","line":936,"name":"UInt64.xor_zero","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L936-L936"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.xor_zero\"><span class=\"name\">UInt32</span>.<span class=\"name\">xor_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.xor_zero","kind":"theorem","line":935,"name":"UInt32.xor_zero","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L935-L935"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.xor_zero\"><span class=\"name\">UInt16</span>.<span class=\"name\">xor_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.xor_zero","kind":"theorem","line":934,"name":"UInt16.xor_zero","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L934-L934"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.xor_zero\"><span class=\"name\">UInt8</span>.<span class=\"name\">xor_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.xor_zero","kind":"theorem","line":933,"name":"UInt8.xor_zero","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L933-L933"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.xor_self\"><span class=\"name\">USize</span>.<span class=\"name\">xor_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.xor_self","kind":"theorem","line":931,"name":"USize.xor_self","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L931-L931"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.xor_self\"><span class=\"name\">UInt64</span>.<span class=\"name\">xor_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.xor_self","kind":"theorem","line":930,"name":"UInt64.xor_self","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L930-L930"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.xor_self\"><span class=\"name\">UInt32</span>.<span class=\"name\">xor_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.xor_self","kind":"theorem","line":929,"name":"UInt32.xor_self","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L929-L929"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.xor_self\"><span class=\"name\">UInt16</span>.<span class=\"name\">xor_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.xor_self","kind":"theorem","line":928,"name":"UInt16.xor_self","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L928-L928"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.xor_self\"><span class=\"name\">UInt8</span>.<span class=\"name\">xor_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.xor_self","kind":"theorem","line":927,"name":"UInt8.xor_self","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L927-L927"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#instCommutativeUSizeHXor\"><span class=\"name\">instCommutativeUSizeHXor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#instCommutativeUSizeHXor","kind":"instance","line":925,"name":"instCommutativeUSizeHXor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L925-L925"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#instCommutativeUInt64HXor\"><span class=\"name\">instCommutativeUInt64HXor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#instCommutativeUInt64HXor","kind":"instance","line":924,"name":"instCommutativeUInt64HXor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L924-L924"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#instCommutativeUInt32HXor\"><span class=\"name\">instCommutativeUInt32HXor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#instCommutativeUInt32HXor","kind":"instance","line":923,"name":"instCommutativeUInt32HXor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L923-L923"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#instCommutativeUInt16HXor\"><span class=\"name\">instCommutativeUInt16HXor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#instCommutativeUInt16HXor","kind":"instance","line":922,"name":"instCommutativeUInt16HXor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L922-L922"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#instCommutativeUInt8HXor\"><span class=\"name\">instCommutativeUInt8HXor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#instCommutativeUInt8HXor","kind":"instance","line":921,"name":"instCommutativeUInt8HXor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L921-L921"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.xor_comm\"><span class=\"name\">USize</span>.<span class=\"name\">xor_comm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.xor_comm","kind":"theorem","line":919,"name":"USize.xor_comm","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L919-L919"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.xor_comm\"><span class=\"name\">UInt64</span>.<span class=\"name\">xor_comm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.xor_comm","kind":"theorem","line":918,"name":"UInt64.xor_comm","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L918-L918"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.xor_comm\"><span class=\"name\">UInt32</span>.<span class=\"name\">xor_comm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.xor_comm","kind":"theorem","line":917,"name":"UInt32.xor_comm","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L917-L917"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.xor_comm\"><span class=\"name\">UInt16</span>.<span class=\"name\">xor_comm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.xor_comm","kind":"theorem","line":916,"name":"UInt16.xor_comm","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L916-L916"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.xor_comm\"><span class=\"name\">UInt8</span>.<span class=\"name\">xor_comm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.xor_comm","kind":"theorem","line":915,"name":"UInt8.xor_comm","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L915-L915"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#instAssociativeUSizeHXor\"><span class=\"name\">instAssociativeUSizeHXor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#instAssociativeUSizeHXor","kind":"instance","line":913,"name":"instAssociativeUSizeHXor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L913-L913"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#instAssociativeUInt64HXor\"><span class=\"name\">instAssociativeUInt64HXor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#instAssociativeUInt64HXor","kind":"instance","line":912,"name":"instAssociativeUInt64HXor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L912-L912"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#instAssociativeUInt32HXor\"><span class=\"name\">instAssociativeUInt32HXor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#instAssociativeUInt32HXor","kind":"instance","line":911,"name":"instAssociativeUInt32HXor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L911-L911"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#instAssociativeUInt16HXor\"><span class=\"name\">instAssociativeUInt16HXor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#instAssociativeUInt16HXor","kind":"instance","line":910,"name":"instAssociativeUInt16HXor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L910-L910"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#instAssociativeUInt8HXor\"><span class=\"name\">instAssociativeUInt8HXor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#instAssociativeUInt8HXor","kind":"instance","line":909,"name":"instAssociativeUInt8HXor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L909-L909"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.xor_assoc\"><span class=\"name\">USize</span>.<span class=\"name\">xor_assoc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">c</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.xor_assoc","kind":"theorem","line":907,"name":"USize.xor_assoc","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L907-L907"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.xor_assoc\"><span class=\"name\">UInt64</span>.<span class=\"name\">xor_assoc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">c</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.xor_assoc","kind":"theorem","line":906,"name":"UInt64.xor_assoc","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L906-L906"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.xor_assoc\"><span class=\"name\">UInt32</span>.<span class=\"name\">xor_assoc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">c</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.xor_assoc","kind":"theorem","line":905,"name":"UInt32.xor_assoc","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L905-L905"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.xor_assoc\"><span class=\"name\">UInt16</span>.<span class=\"name\">xor_assoc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">c</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.xor_assoc","kind":"theorem","line":904,"name":"UInt16.xor_assoc","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L904-L904"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.xor_assoc\"><span class=\"name\">UInt8</span>.<span class=\"name\">xor_assoc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">c</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.xor_assoc","kind":"theorem","line":903,"name":"UInt8.xor_assoc","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L903-L903"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.and_eq_neg_one_iff\"><span class=\"name\">USize</span>.<span class=\"name\">and_eq_neg_one_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.and_eq_neg_one_iff","kind":"theorem","line":899,"name":"USize.and_eq_neg_one_iff","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L899-L901"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.and_eq_neg_one_iff\"><span class=\"name\">UInt64</span>.<span class=\"name\">and_eq_neg_one_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.and_eq_neg_one_iff","kind":"theorem","line":896,"name":"UInt64.and_eq_neg_one_iff","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L896-L898"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.and_eq_neg_one_iff\"><span class=\"name\">UInt32</span>.<span class=\"name\">and_eq_neg_one_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.and_eq_neg_one_iff","kind":"theorem","line":893,"name":"UInt32.and_eq_neg_one_iff","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L893-L895"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.and_eq_neg_one_iff\"><span class=\"name\">UInt16</span>.<span class=\"name\">and_eq_neg_one_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.and_eq_neg_one_iff","kind":"theorem","line":890,"name":"UInt16.and_eq_neg_one_iff","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L890-L892"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.and_eq_neg_one_iff\"><span class=\"name\">UInt8</span>.<span class=\"name\">and_eq_neg_one_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.and_eq_neg_one_iff","kind":"theorem","line":887,"name":"UInt8.and_eq_neg_one_iff","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L887-L889"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#instLawfulCommIdentityUSizeHAndNegOfNat\"><span class=\"name\">instLawfulCommIdentityUSizeHAndNegOfNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.LawfulCommIdentity\">Std.LawfulCommIdentity</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">(-<span class=\"fn\">1</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#instLawfulCommIdentityUSizeHAndNegOfNat","kind":"instance","line":884,"name":"instLawfulCommIdentityUSizeHAndNegOfNat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L884-L885"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#instLawfulCommIdentityUInt64HAndNegOfNat\"><span class=\"name\">instLawfulCommIdentityUInt64HAndNegOfNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.LawfulCommIdentity\">Std.LawfulCommIdentity</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">(-<span class=\"fn\">1</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#instLawfulCommIdentityUInt64HAndNegOfNat","kind":"instance","line":882,"name":"instLawfulCommIdentityUInt64HAndNegOfNat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L882-L883"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#instLawfulCommIdentityUInt32HAndNegOfNat\"><span class=\"name\">instLawfulCommIdentityUInt32HAndNegOfNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.LawfulCommIdentity\">Std.LawfulCommIdentity</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">(-<span class=\"fn\">1</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#instLawfulCommIdentityUInt32HAndNegOfNat","kind":"instance","line":880,"name":"instLawfulCommIdentityUInt32HAndNegOfNat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L880-L881"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#instLawfulCommIdentityUInt16HAndNegOfNat\"><span class=\"name\">instLawfulCommIdentityUInt16HAndNegOfNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.LawfulCommIdentity\">Std.LawfulCommIdentity</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">(-<span class=\"fn\">1</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#instLawfulCommIdentityUInt16HAndNegOfNat","kind":"instance","line":878,"name":"instLawfulCommIdentityUInt16HAndNegOfNat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L878-L879"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#instLawfulCommIdentityUInt8HAndNegOfNat\"><span class=\"name\">instLawfulCommIdentityUInt8HAndNegOfNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.LawfulCommIdentity\">Std.LawfulCommIdentity</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">(-<span class=\"fn\">1</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#instLawfulCommIdentityUInt8HAndNegOfNat","kind":"instance","line":876,"name":"instLawfulCommIdentityUInt8HAndNegOfNat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L876-L877"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.and_neg_one\"><span class=\"name\">USize</span>.<span class=\"name\">and_neg_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.and_neg_one","kind":"theorem","line":874,"name":"USize.and_neg_one","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L874-L874"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.and_neg_one\"><span class=\"name\">UInt64</span>.<span class=\"name\">and_neg_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.and_neg_one","kind":"theorem","line":873,"name":"UInt64.and_neg_one","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L873-L873"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.and_neg_one\"><span class=\"name\">UInt32</span>.<span class=\"name\">and_neg_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.and_neg_one","kind":"theorem","line":872,"name":"UInt32.and_neg_one","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L872-L872"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.and_neg_one\"><span class=\"name\">UInt16</span>.<span class=\"name\">and_neg_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.and_neg_one","kind":"theorem","line":871,"name":"UInt16.and_neg_one","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L871-L871"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.and_neg_one\"><span class=\"name\">UInt8</span>.<span class=\"name\">and_neg_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.and_neg_one","kind":"theorem","line":870,"name":"UInt8.and_neg_one","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L870-L870"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.neg_one_and\"><span class=\"name\">USize</span>.<span class=\"name\">neg_one_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.neg_one_and","kind":"theorem","line":866,"name":"USize.neg_one_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L866-L868"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.neg_one_and\"><span class=\"name\">UInt64</span>.<span class=\"name\">neg_one_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.neg_one_and","kind":"theorem","line":863,"name":"UInt64.neg_one_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L863-L865"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.neg_one_and\"><span class=\"name\">UInt32</span>.<span class=\"name\">neg_one_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.neg_one_and","kind":"theorem","line":860,"name":"UInt32.neg_one_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L860-L862"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.neg_one_and\"><span class=\"name\">UInt16</span>.<span class=\"name\">neg_one_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.neg_one_and","kind":"theorem","line":857,"name":"UInt16.neg_one_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L857-L859"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.neg_one_and\"><span class=\"name\">UInt8</span>.<span class=\"name\">neg_one_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.neg_one_and","kind":"theorem","line":854,"name":"UInt8.neg_one_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L854-L856"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.zero_and\"><span class=\"name\">USize</span>.<span class=\"name\">zero_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.zero_and","kind":"theorem","line":852,"name":"USize.zero_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L852-L852"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.zero_and\"><span class=\"name\">UInt64</span>.<span class=\"name\">zero_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.zero_and","kind":"theorem","line":851,"name":"UInt64.zero_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L851-L851"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.zero_and\"><span class=\"name\">UInt32</span>.<span class=\"name\">zero_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.zero_and","kind":"theorem","line":850,"name":"UInt32.zero_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L850-L850"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.zero_and\"><span class=\"name\">UInt16</span>.<span class=\"name\">zero_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.zero_and","kind":"theorem","line":849,"name":"UInt16.zero_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L849-L849"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.zero_and\"><span class=\"name\">UInt8</span>.<span class=\"name\">zero_and</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.zero_and","kind":"theorem","line":848,"name":"UInt8.zero_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L848-L848"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.and_zero\"><span class=\"name\">USize</span>.<span class=\"name\">and_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.and_zero","kind":"theorem","line":846,"name":"USize.and_zero","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L846-L846"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.and_zero\"><span class=\"name\">UInt64</span>.<span class=\"name\">and_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.and_zero","kind":"theorem","line":845,"name":"UInt64.and_zero","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L845-L845"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.and_zero\"><span class=\"name\">UInt32</span>.<span class=\"name\">and_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.and_zero","kind":"theorem","line":844,"name":"UInt32.and_zero","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L844-L844"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.and_zero\"><span class=\"name\">UInt16</span>.<span class=\"name\">and_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.and_zero","kind":"theorem","line":843,"name":"UInt16.and_zero","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L843-L843"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.and_zero\"><span class=\"name\">UInt8</span>.<span class=\"name\">and_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.and_zero","kind":"theorem","line":842,"name":"UInt8.and_zero","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L842-L842"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#instIdempotentOpUSizeHAnd\"><span class=\"name\">instIdempotentOpUSizeHAnd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.IdempotentOp\">Std.IdempotentOp</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#instIdempotentOpUSizeHAnd","kind":"instance","line":840,"name":"instIdempotentOpUSizeHAnd","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L840-L840"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#instIdempotentOpUInt64HAnd\"><span class=\"name\">instIdempotentOpUInt64HAnd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.IdempotentOp\">Std.IdempotentOp</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#instIdempotentOpUInt64HAnd","kind":"instance","line":839,"name":"instIdempotentOpUInt64HAnd","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L839-L839"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#instIdempotentOpUInt32HAnd\"><span class=\"name\">instIdempotentOpUInt32HAnd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.IdempotentOp\">Std.IdempotentOp</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#instIdempotentOpUInt32HAnd","kind":"instance","line":838,"name":"instIdempotentOpUInt32HAnd","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L838-L838"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#instIdempotentOpUInt16HAnd\"><span class=\"name\">instIdempotentOpUInt16HAnd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.IdempotentOp\">Std.IdempotentOp</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#instIdempotentOpUInt16HAnd","kind":"instance","line":837,"name":"instIdempotentOpUInt16HAnd","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L837-L837"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#instIdempotentOpUInt8HAnd\"><span class=\"name\">instIdempotentOpUInt8HAnd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.IdempotentOp\">Std.IdempotentOp</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#instIdempotentOpUInt8HAnd","kind":"instance","line":836,"name":"instIdempotentOpUInt8HAnd","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L836-L836"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.and_self\"><span class=\"name\">USize</span>.<span class=\"name\">and_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.and_self","kind":"theorem","line":834,"name":"USize.and_self","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L834-L834"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.and_self\"><span class=\"name\">UInt64</span>.<span class=\"name\">and_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.and_self","kind":"theorem","line":833,"name":"UInt64.and_self","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L833-L833"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.and_self\"><span class=\"name\">UInt32</span>.<span class=\"name\">and_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.and_self","kind":"theorem","line":832,"name":"UInt32.and_self","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L832-L832"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.and_self\"><span class=\"name\">UInt16</span>.<span class=\"name\">and_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.and_self","kind":"theorem","line":831,"name":"UInt16.and_self","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L831-L831"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.and_self\"><span class=\"name\">UInt8</span>.<span class=\"name\">and_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.and_self","kind":"theorem","line":830,"name":"UInt8.and_self","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L830-L830"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#instCommutativeUSizeHAnd\"><span class=\"name\">instCommutativeUSizeHAnd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#instCommutativeUSizeHAnd","kind":"instance","line":828,"name":"instCommutativeUSizeHAnd","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L828-L828"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#instCommutativeUInt64HAnd\"><span class=\"name\">instCommutativeUInt64HAnd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#instCommutativeUInt64HAnd","kind":"instance","line":827,"name":"instCommutativeUInt64HAnd","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L827-L827"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#instCommutativeUInt32HAnd\"><span class=\"name\">instCommutativeUInt32HAnd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#instCommutativeUInt32HAnd","kind":"instance","line":826,"name":"instCommutativeUInt32HAnd","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L826-L826"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#instCommutativeUInt16HAnd\"><span class=\"name\">instCommutativeUInt16HAnd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#instCommutativeUInt16HAnd","kind":"instance","line":825,"name":"instCommutativeUInt16HAnd","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L825-L825"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#instCommutativeUInt8HAnd\"><span class=\"name\">instCommutativeUInt8HAnd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#instCommutativeUInt8HAnd","kind":"instance","line":824,"name":"instCommutativeUInt8HAnd","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L824-L824"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.and_comm\"><span class=\"name\">USize</span>.<span class=\"name\">and_comm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.and_comm","kind":"theorem","line":822,"name":"USize.and_comm","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L822-L822"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.and_comm\"><span class=\"name\">UInt64</span>.<span class=\"name\">and_comm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.and_comm","kind":"theorem","line":821,"name":"UInt64.and_comm","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L821-L821"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.and_comm\"><span class=\"name\">UInt32</span>.<span class=\"name\">and_comm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.and_comm","kind":"theorem","line":820,"name":"UInt32.and_comm","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L820-L820"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.and_comm\"><span class=\"name\">UInt16</span>.<span class=\"name\">and_comm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.and_comm","kind":"theorem","line":819,"name":"UInt16.and_comm","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L819-L819"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.and_comm\"><span class=\"name\">UInt8</span>.<span class=\"name\">and_comm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.and_comm","kind":"theorem","line":818,"name":"UInt8.and_comm","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L818-L818"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#instAssociativeUSizeHAnd\"><span class=\"name\">instAssociativeUSizeHAnd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#instAssociativeUSizeHAnd","kind":"instance","line":816,"name":"instAssociativeUSizeHAnd","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L816-L816"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#instAssociativeUInt64HAnd\"><span class=\"name\">instAssociativeUInt64HAnd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#instAssociativeUInt64HAnd","kind":"instance","line":815,"name":"instAssociativeUInt64HAnd","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L815-L815"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#instAssociativeUInt32HAnd\"><span class=\"name\">instAssociativeUInt32HAnd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#instAssociativeUInt32HAnd","kind":"instance","line":814,"name":"instAssociativeUInt32HAnd","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L814-L814"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#instAssociativeUInt16HAnd\"><span class=\"name\">instAssociativeUInt16HAnd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#instAssociativeUInt16HAnd","kind":"instance","line":813,"name":"instAssociativeUInt16HAnd","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L813-L813"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#instAssociativeUInt8HAnd\"><span class=\"name\">instAssociativeUInt8HAnd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#instAssociativeUInt8HAnd","kind":"instance","line":812,"name":"instAssociativeUInt8HAnd","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L812-L812"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.and_assoc\"><span class=\"name\">USize</span>.<span class=\"name\">and_assoc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">c</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.and_assoc","kind":"theorem","line":810,"name":"USize.and_assoc","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L810-L810"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.and_assoc\"><span class=\"name\">UInt64</span>.<span class=\"name\">and_assoc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">c</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.and_assoc","kind":"theorem","line":809,"name":"UInt64.and_assoc","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L809-L809"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.and_assoc\"><span class=\"name\">UInt32</span>.<span class=\"name\">and_assoc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">c</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.and_assoc","kind":"theorem","line":808,"name":"UInt32.and_assoc","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L808-L808"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.and_assoc\"><span class=\"name\">UInt16</span>.<span class=\"name\">and_assoc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">c</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.and_assoc","kind":"theorem","line":807,"name":"UInt16.and_assoc","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L807-L807"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.and_assoc\"><span class=\"name\">UInt8</span>.<span class=\"name\">and_assoc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">c</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.and_assoc","kind":"theorem","line":806,"name":"UInt8.and_assoc","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L806-L806"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.or_eq_zero_iff\"><span class=\"name\">USize</span>.<span class=\"name\">or_eq_zero_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.or_eq_zero_iff","kind":"theorem","line":803,"name":"USize.or_eq_zero_iff","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L803-L804"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.or_eq_zero_iff\"><span class=\"name\">UInt64</span>.<span class=\"name\">or_eq_zero_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.or_eq_zero_iff","kind":"theorem","line":801,"name":"UInt64.or_eq_zero_iff","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L801-L802"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.or_eq_zero_iff\"><span class=\"name\">UInt32</span>.<span class=\"name\">or_eq_zero_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.or_eq_zero_iff","kind":"theorem","line":799,"name":"UInt32.or_eq_zero_iff","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L799-L800"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.or_eq_zero_iff\"><span class=\"name\">UInt16</span>.<span class=\"name\">or_eq_zero_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.or_eq_zero_iff","kind":"theorem","line":797,"name":"UInt16.or_eq_zero_iff","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L797-L798"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.or_eq_zero_iff\"><span class=\"name\">UInt8</span>.<span class=\"name\">or_eq_zero_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.or_eq_zero_iff","kind":"theorem","line":795,"name":"UInt8.or_eq_zero_iff","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L795-L796"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.or_neg_one\"><span class=\"name\">USize</span>.<span class=\"name\">or_neg_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.or_neg_one","kind":"theorem","line":793,"name":"USize.or_neg_one","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L793-L793"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.or_neg_one\"><span class=\"name\">UInt64</span>.<span class=\"name\">or_neg_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.or_neg_one","kind":"theorem","line":792,"name":"UInt64.or_neg_one","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L792-L792"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.or_neg_one\"><span class=\"name\">UInt32</span>.<span class=\"name\">or_neg_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.or_neg_one","kind":"theorem","line":791,"name":"UInt32.or_neg_one","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L791-L791"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.or_neg_one\"><span class=\"name\">UInt16</span>.<span class=\"name\">or_neg_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.or_neg_one","kind":"theorem","line":790,"name":"UInt16.or_neg_one","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L790-L790"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.or_neg_one\"><span class=\"name\">UInt8</span>.<span class=\"name\">or_neg_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.or_neg_one","kind":"theorem","line":789,"name":"UInt8.or_neg_one","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L789-L789"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.neg_one_or\"><span class=\"name\">USize</span>.<span class=\"name\">neg_one_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.neg_one_or","kind":"theorem","line":785,"name":"USize.neg_one_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L785-L787"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.neg_one_or\"><span class=\"name\">UInt64</span>.<span class=\"name\">neg_one_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.neg_one_or","kind":"theorem","line":782,"name":"UInt64.neg_one_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L782-L784"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.neg_one_or\"><span class=\"name\">UInt32</span>.<span class=\"name\">neg_one_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.neg_one_or","kind":"theorem","line":779,"name":"UInt32.neg_one_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L779-L781"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.neg_one_or\"><span class=\"name\">UInt16</span>.<span class=\"name\">neg_one_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.neg_one_or","kind":"theorem","line":776,"name":"UInt16.neg_one_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L776-L778"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.neg_one_or\"><span class=\"name\">UInt8</span>.<span class=\"name\">neg_one_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">-<span class=\"fn\">1</span></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.neg_one_or","kind":"theorem","line":773,"name":"UInt8.neg_one_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L773-L775"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#instLawfulCommIdentityUSizeHOrOfNat\"><span class=\"name\">instLawfulCommIdentityUSizeHOrOfNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.LawfulCommIdentity\">Std.LawfulCommIdentity</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">0</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#instLawfulCommIdentityUSizeHOrOfNat","kind":"instance","line":770,"name":"instLawfulCommIdentityUSizeHOrOfNat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L770-L771"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#instLawfulCommIdentityUInt64HOrOfNat\"><span class=\"name\">instLawfulCommIdentityUInt64HOrOfNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.LawfulCommIdentity\">Std.LawfulCommIdentity</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">0</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#instLawfulCommIdentityUInt64HOrOfNat","kind":"instance","line":768,"name":"instLawfulCommIdentityUInt64HOrOfNat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L768-L769"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#instLawfulCommIdentityUInt32HOrOfNat\"><span class=\"name\">instLawfulCommIdentityUInt32HOrOfNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.LawfulCommIdentity\">Std.LawfulCommIdentity</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">0</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#instLawfulCommIdentityUInt32HOrOfNat","kind":"instance","line":766,"name":"instLawfulCommIdentityUInt32HOrOfNat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L766-L767"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#instLawfulCommIdentityUInt16HOrOfNat\"><span class=\"name\">instLawfulCommIdentityUInt16HOrOfNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.LawfulCommIdentity\">Std.LawfulCommIdentity</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">0</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#instLawfulCommIdentityUInt16HOrOfNat","kind":"instance","line":764,"name":"instLawfulCommIdentityUInt16HOrOfNat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L764-L765"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#instLawfulCommIdentityUInt8HOrOfNat\"><span class=\"name\">instLawfulCommIdentityUInt8HOrOfNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.LawfulCommIdentity\">Std.LawfulCommIdentity</a> <span class=\"fn\">(fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">x2</span>)</span> <span class=\"fn\">0</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#instLawfulCommIdentityUInt8HOrOfNat","kind":"instance","line":762,"name":"instLawfulCommIdentityUInt8HOrOfNat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L762-L763"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.zero_or\"><span class=\"name\">USize</span>.<span class=\"name\">zero_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.zero_or","kind":"theorem","line":760,"name":"USize.zero_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L760-L760"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.zero_or\"><span class=\"name\">UInt64</span>.<span class=\"name\">zero_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.zero_or","kind":"theorem","line":759,"name":"UInt64.zero_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L759-L759"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.zero_or\"><span class=\"name\">UInt32</span>.<span class=\"name\">zero_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.zero_or","kind":"theorem","line":758,"name":"UInt32.zero_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L758-L758"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.zero_or\"><span class=\"name\">UInt16</span>.<span class=\"name\">zero_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.zero_or","kind":"theorem","line":757,"name":"UInt16.zero_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L757-L757"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.zero_or\"><span class=\"name\">UInt8</span>.<span class=\"name\">zero_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.zero_or","kind":"theorem","line":756,"name":"UInt8.zero_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L756-L756"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.or_zero\"><span class=\"name\">USize</span>.<span class=\"name\">or_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.or_zero","kind":"theorem","line":754,"name":"USize.or_zero","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L754-L754"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.or_zero\"><span class=\"name\">UInt64</span>.<span class=\"name\">or_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.or_zero","kind":"theorem","line":753,"name":"UInt64.or_zero","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L753-L753"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.or_zero\"><span class=\"name\">UInt32</span>.<span class=\"name\">or_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.or_zero","kind":"theorem","line":752,"name":"UInt32.or_zero","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L752-L752"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.or_zero\"><span class=\"name\">UInt16</span>.<span class=\"name\">or_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.or_zero","kind":"theorem","line":751,"name":"UInt16.or_zero","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L751-L751"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.or_zero\"><span class=\"name\">UInt8</span>.<span class=\"name\">or_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.or_zero","kind":"theorem","line":750,"name":"UInt8.or_zero","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L750-L750"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#instIdempotentOpUSizeHOr\"><span class=\"name\">instIdempotentOpUSizeHOr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.IdempotentOp\">Std.IdempotentOp</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#instIdempotentOpUSizeHOr","kind":"instance","line":748,"name":"instIdempotentOpUSizeHOr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L748-L748"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#instIdempotentOpUInt64HOr\"><span class=\"name\">instIdempotentOpUInt64HOr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.IdempotentOp\">Std.IdempotentOp</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#instIdempotentOpUInt64HOr","kind":"instance","line":747,"name":"instIdempotentOpUInt64HOr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L747-L747"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#instIdempotentOpUInt32HOr\"><span class=\"name\">instIdempotentOpUInt32HOr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.IdempotentOp\">Std.IdempotentOp</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#instIdempotentOpUInt32HOr","kind":"instance","line":746,"name":"instIdempotentOpUInt32HOr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L746-L746"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#instIdempotentOpUInt16HOr\"><span class=\"name\">instIdempotentOpUInt16HOr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.IdempotentOp\">Std.IdempotentOp</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#instIdempotentOpUInt16HOr","kind":"instance","line":745,"name":"instIdempotentOpUInt16HOr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L745-L745"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#instIdempotentOpUInt8HOr\"><span class=\"name\">instIdempotentOpUInt8HOr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.IdempotentOp\">Std.IdempotentOp</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#instIdempotentOpUInt8HOr","kind":"instance","line":744,"name":"instIdempotentOpUInt8HOr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L744-L744"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.or_self\"><span class=\"name\">USize</span>.<span class=\"name\">or_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.or_self","kind":"theorem","line":742,"name":"USize.or_self","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L742-L742"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.or_self\"><span class=\"name\">UInt64</span>.<span class=\"name\">or_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.or_self","kind":"theorem","line":741,"name":"UInt64.or_self","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L741-L741"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.or_self\"><span class=\"name\">UInt32</span>.<span class=\"name\">or_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.or_self","kind":"theorem","line":740,"name":"UInt32.or_self","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L740-L740"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.or_self\"><span class=\"name\">UInt16</span>.<span class=\"name\">or_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.or_self","kind":"theorem","line":739,"name":"UInt16.or_self","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L739-L739"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.or_self\"><span class=\"name\">UInt8</span>.<span class=\"name\">or_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.or_self","kind":"theorem","line":738,"name":"UInt8.or_self","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L738-L738"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#instCommutativeUSizeHOr\"><span class=\"name\">instCommutativeUSizeHOr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#instCommutativeUSizeHOr","kind":"instance","line":736,"name":"instCommutativeUSizeHOr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L736-L736"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#instCommutativeUInt64HOr\"><span class=\"name\">instCommutativeUInt64HOr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#instCommutativeUInt64HOr","kind":"instance","line":735,"name":"instCommutativeUInt64HOr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L735-L735"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#instCommutativeUInt32HOr\"><span class=\"name\">instCommutativeUInt32HOr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#instCommutativeUInt32HOr","kind":"instance","line":734,"name":"instCommutativeUInt32HOr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L734-L734"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#instCommutativeUInt16HOr\"><span class=\"name\">instCommutativeUInt16HOr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#instCommutativeUInt16HOr","kind":"instance","line":733,"name":"instCommutativeUInt16HOr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L733-L733"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#instCommutativeUInt8HOr\"><span class=\"name\">instCommutativeUInt8HOr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Commutative\">Std.Commutative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#instCommutativeUInt8HOr","kind":"instance","line":732,"name":"instCommutativeUInt8HOr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L732-L732"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.or_comm\"><span class=\"name\">USize</span>.<span class=\"name\">or_comm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.or_comm","kind":"theorem","line":730,"name":"USize.or_comm","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L730-L730"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.or_comm\"><span class=\"name\">UInt64</span>.<span class=\"name\">or_comm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.or_comm","kind":"theorem","line":729,"name":"UInt64.or_comm","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L729-L729"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.or_comm\"><span class=\"name\">UInt32</span>.<span class=\"name\">or_comm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.or_comm","kind":"theorem","line":728,"name":"UInt32.or_comm","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L728-L728"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.or_comm\"><span class=\"name\">UInt16</span>.<span class=\"name\">or_comm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.or_comm","kind":"theorem","line":727,"name":"UInt16.or_comm","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L727-L727"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.or_comm\"><span class=\"name\">UInt8</span>.<span class=\"name\">or_comm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">a</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.or_comm","kind":"theorem","line":726,"name":"UInt8.or_comm","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L726-L726"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#instAssociativeUSizeHOr\"><span class=\"name\">instAssociativeUSizeHOr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#instAssociativeUSizeHOr","kind":"instance","line":724,"name":"instAssociativeUSizeHOr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L724-L724"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#instAssociativeUInt64HOr\"><span class=\"name\">instAssociativeUInt64HOr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#instAssociativeUInt64HOr","kind":"instance","line":723,"name":"instAssociativeUInt64HOr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L723-L723"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#instAssociativeUInt32HOr\"><span class=\"name\">instAssociativeUInt32HOr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#instAssociativeUInt32HOr","kind":"instance","line":722,"name":"instAssociativeUInt32HOr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L722-L722"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#instAssociativeUInt16HOr\"><span class=\"name\">instAssociativeUInt16HOr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#instAssociativeUInt16HOr","kind":"instance","line":721,"name":"instAssociativeUInt16HOr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L721-L721"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#instAssociativeUInt8HOr\"><span class=\"name\">instAssociativeUInt8HOr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Std.Associative\">Std.Associative</a> <span class=\"fn\">fun (<span class=\"fn\">x1</span> <span class=\"fn\">x2</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>) =&gt; <span class=\"fn\">x1</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">x2</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#instAssociativeUInt8HOr","kind":"instance","line":720,"name":"instAssociativeUInt8HOr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L720-L720"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.or_assoc\"><span class=\"name\">USize</span>.<span class=\"name\">or_assoc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">c</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.or_assoc","kind":"theorem","line":718,"name":"USize.or_assoc","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L718-L718"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.or_assoc\"><span class=\"name\">UInt64</span>.<span class=\"name\">or_assoc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">c</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.or_assoc","kind":"theorem","line":717,"name":"UInt64.or_assoc","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L717-L717"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.or_assoc\"><span class=\"name\">UInt32</span>.<span class=\"name\">or_assoc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">c</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.or_assoc","kind":"theorem","line":716,"name":"UInt32.or_assoc","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L716-L716"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.or_assoc\"><span class=\"name\">UInt16</span>.<span class=\"name\">or_assoc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">c</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.or_assoc","kind":"theorem","line":715,"name":"UInt16.or_assoc","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L715-L715"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.or_assoc\"><span class=\"name\">UInt8</span>.<span class=\"name\">or_assoc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">c</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.or_assoc","kind":"theorem","line":714,"name":"UInt8.or_assoc","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L714-L714"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.not_eq_neg_sub\"><span class=\"name\">USize</span>.<span class=\"name\">not_eq_neg_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.not_eq_neg_sub","kind":"theorem","line":712,"name":"USize.not_eq_neg_sub","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L712-L712"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.not_eq_neg_sub\"><span class=\"name\">UInt64</span>.<span class=\"name\">not_eq_neg_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.not_eq_neg_sub","kind":"theorem","line":711,"name":"UInt64.not_eq_neg_sub","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L711-L711"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.not_eq_neg_sub\"><span class=\"name\">UInt32</span>.<span class=\"name\">not_eq_neg_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.not_eq_neg_sub","kind":"theorem","line":710,"name":"UInt32.not_eq_neg_sub","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L710-L710"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.not_eq_neg_sub\"><span class=\"name\">UInt16</span>.<span class=\"name\">not_eq_neg_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.not_eq_neg_sub","kind":"theorem","line":709,"name":"UInt16.not_eq_neg_sub","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L709-L709"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.not_eq_neg_sub\"><span class=\"name\">UInt8</span>.<span class=\"name\">not_eq_neg_sub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.not_eq_neg_sub","kind":"theorem","line":708,"name":"UInt8.not_eq_neg_sub","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L708-L708"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.neg_eq_not_add\"><span class=\"name\">USize</span>.<span class=\"name\">neg_eq_not_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.neg_eq_not_add","kind":"theorem","line":706,"name":"USize.neg_eq_not_add","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L706-L706"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.neg_eq_not_add\"><span class=\"name\">UInt64</span>.<span class=\"name\">neg_eq_not_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.neg_eq_not_add","kind":"theorem","line":705,"name":"UInt64.neg_eq_not_add","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L705-L705"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.neg_eq_not_add\"><span class=\"name\">UInt32</span>.<span class=\"name\">neg_eq_not_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.neg_eq_not_add","kind":"theorem","line":704,"name":"UInt32.neg_eq_not_add","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L704-L704"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.neg_eq_not_add\"><span class=\"name\">UInt16</span>.<span class=\"name\">neg_eq_not_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.neg_eq_not_add","kind":"theorem","line":703,"name":"UInt16.neg_eq_not_add","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L703-L703"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.neg_eq_not_add\"><span class=\"name\">UInt8</span>.<span class=\"name\">neg_eq_not_add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.neg_eq_not_add","kind":"theorem","line":702,"name":"UInt8.neg_eq_not_add","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L702-L702"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.ofFin_shiftRight_mod\"><span class=\"name\">USize</span>.<span class=\"name\">ofFin_shiftRight_mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#USize.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#USize.ofFin\">ofFin</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#Fin.mk\">⟨</a><a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a>, <a href=\"./Init/Data/UInt/Bitwise.html#USize.ofFin_shiftLeft_mod._proof_1\">ofFin_shiftLeft_mod._proof_1</a><a href=\"./Init/Prelude.html#Fin.mk\">⟩</a>))</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#USize.ofFin\">ofFin</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#USize.ofFin\">ofFin</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.ofFin_shiftRight_mod","kind":"theorem","line":694,"name":"USize.ofFin_shiftRight_mod","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L694-L700"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.ofFin_shiftRight_mod\"><span class=\"name\">UInt64</span>.<span class=\"name\">ofFin_shiftRight_mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#UInt64.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt64.ofFin\">ofFin</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">64</span>))</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt64.ofFin\">ofFin</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt64.ofFin\">ofFin</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.ofFin_shiftRight_mod","kind":"theorem","line":692,"name":"UInt64.ofFin_shiftRight_mod","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L692-L693"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.ofFin_shiftRight_mod\"><span class=\"name\">UInt32</span>.<span class=\"name\">ofFin_shiftRight_mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#UInt32.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt32.ofFin\">ofFin</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">32</span>))</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt32.ofFin\">ofFin</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt32.ofFin\">ofFin</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.ofFin_shiftRight_mod","kind":"theorem","line":690,"name":"UInt32.ofFin_shiftRight_mod","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L690-L691"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.ofFin_shiftRight_mod\"><span class=\"name\">UInt16</span>.<span class=\"name\">ofFin_shiftRight_mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#UInt16.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt16.ofFin\">ofFin</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">16</span>))</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt16.ofFin\">ofFin</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt16.ofFin\">ofFin</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.ofFin_shiftRight_mod","kind":"theorem","line":688,"name":"UInt16.ofFin_shiftRight_mod","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L688-L689"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.ofFin_shiftRight_mod\"><span class=\"name\">UInt8</span>.<span class=\"name\">ofFin_shiftRight_mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#UInt8.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt8.ofFin\">ofFin</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">8</span>))</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt8.ofFin\">ofFin</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt8.ofFin\">ofFin</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.ofFin_shiftRight_mod","kind":"theorem","line":686,"name":"UInt8.ofFin_shiftRight_mod","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L686-L687"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.ofFin_shiftRight\"><span class=\"name\">USize</span>.<span class=\"name\">ofFin_shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#USize.size\">size</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">↑<span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#USize.ofFin\">ofFin</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#USize.ofFin\">ofFin</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#USize.ofFin\">ofFin</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.ofFin_shiftRight","kind":"theorem","line":683,"name":"USize.ofFin_shiftRight","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L683-L684"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.ofFin_shiftRight\"><span class=\"name\">UInt64</span>.<span class=\"name\">ofFin_shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#UInt64.size\">size</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">↑<span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">64</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt64.ofFin\">ofFin</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt64.ofFin\">ofFin</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt64.ofFin\">ofFin</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.ofFin_shiftRight","kind":"theorem","line":681,"name":"UInt64.ofFin_shiftRight","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L681-L682"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.ofFin_shiftRight\"><span class=\"name\">UInt32</span>.<span class=\"name\">ofFin_shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#UInt32.size\">size</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">↑<span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">32</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt32.ofFin\">ofFin</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt32.ofFin\">ofFin</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt32.ofFin\">ofFin</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.ofFin_shiftRight","kind":"theorem","line":679,"name":"UInt32.ofFin_shiftRight","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L679-L680"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.ofFin_shiftRight\"><span class=\"name\">UInt16</span>.<span class=\"name\">ofFin_shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#UInt16.size\">size</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">↑<span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">16</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt16.ofFin\">ofFin</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt16.ofFin\">ofFin</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt16.ofFin\">ofFin</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.ofFin_shiftRight","kind":"theorem","line":677,"name":"UInt16.ofFin_shiftRight","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L677-L678"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.ofFin_shiftRight\"><span class=\"name\">UInt8</span>.<span class=\"name\">ofFin_shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#UInt8.size\">size</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">↑<span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">8</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt8.ofFin\">ofFin</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt8.ofFin\">ofFin</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt8.ofFin\">ofFin</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.ofFin_shiftRight","kind":"theorem","line":675,"name":"UInt8.ofFin_shiftRight","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L675-L676"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.ofBitVec_shiftRight_mod\"><span class=\"name\">USize</span>.<span class=\"name\">ofBitVec_shiftRight_mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a>) <a href=\"./Init/Prelude.html#USize.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#USize.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#USize.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#USize.ofNat\">ofNat</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.ofBitVec_shiftRight_mod","kind":"theorem","line":668,"name":"USize.ofBitVec_shiftRight_mod","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L668-L673"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.ofBitVec_shiftRight_mod\"><span class=\"name\">UInt64</span>.<span class=\"name\">ofBitVec_shiftRight_mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">64</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">64</span>) <a href=\"./Init/Prelude.html#UInt64.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#UInt64.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#UInt64.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#UInt64.ofNat\">ofNat</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.ofBitVec_shiftRight_mod","kind":"theorem","line":666,"name":"UInt64.ofBitVec_shiftRight_mod","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L666-L667"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.ofBitVec_shiftRight_mod\"><span class=\"name\">UInt32</span>.<span class=\"name\">ofBitVec_shiftRight_mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">32</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">32</span>) <a href=\"./Init/Prelude.html#UInt32.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#UInt32.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#UInt32.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#UInt32.ofNat\">ofNat</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.ofBitVec_shiftRight_mod","kind":"theorem","line":664,"name":"UInt32.ofBitVec_shiftRight_mod","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L664-L665"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.ofBitVec_shiftRight_mod\"><span class=\"name\">UInt16</span>.<span class=\"name\">ofBitVec_shiftRight_mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">16</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">16</span>) <a href=\"./Init/Prelude.html#UInt16.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#UInt16.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#UInt16.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#UInt16.ofNat\">ofNat</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.ofBitVec_shiftRight_mod","kind":"theorem","line":662,"name":"UInt16.ofBitVec_shiftRight_mod","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L662-L663"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.ofBitVec_shiftRight_mod\"><span class=\"name\">UInt8</span>.<span class=\"name\">ofBitVec_shiftRight_mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">8</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">8</span>) <a href=\"./Init/Prelude.html#UInt8.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#UInt8.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#UInt8.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8.ofNat\">ofNat</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.ofBitVec_shiftRight_mod","kind":"theorem","line":660,"name":"UInt8.ofBitVec_shiftRight_mod","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L660-L661"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.ofBitVec_shiftRight\"><span class=\"name\">USize</span>.<span class=\"name\">ofBitVec_shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#USize.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#USize.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#USize.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#USize.ofNat\">ofNat</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.ofBitVec_shiftRight","kind":"theorem","line":653,"name":"USize.ofBitVec_shiftRight","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L653-L658"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.ofBitVec_shiftRight\"><span class=\"name\">UInt64</span>.<span class=\"name\">ofBitVec_shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">64</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">64</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#UInt64.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#UInt64.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#UInt64.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#UInt64.ofNat\">ofNat</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.ofBitVec_shiftRight","kind":"theorem","line":651,"name":"UInt64.ofBitVec_shiftRight","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L651-L652"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.ofBitVec_shiftRight\"><span class=\"name\">UInt32</span>.<span class=\"name\">ofBitVec_shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">32</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">32</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#UInt32.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#UInt32.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#UInt32.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#UInt32.ofNat\">ofNat</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.ofBitVec_shiftRight","kind":"theorem","line":649,"name":"UInt32.ofBitVec_shiftRight","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L649-L650"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.ofBitVec_shiftRight\"><span class=\"name\">UInt16</span>.<span class=\"name\">ofBitVec_shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">16</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">16</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#UInt16.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#UInt16.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#UInt16.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#UInt16.ofNat\">ofNat</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.ofBitVec_shiftRight","kind":"theorem","line":647,"name":"UInt16.ofBitVec_shiftRight","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L647-L648"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.ofBitVec_shiftRight\"><span class=\"name\">UInt8</span>.<span class=\"name\">ofBitVec_shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">8</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">8</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#UInt8.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#UInt8.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#UInt8.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8.ofNat\">ofNat</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.ofBitVec_shiftRight","kind":"theorem","line":645,"name":"UInt8.ofBitVec_shiftRight","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L645-L646"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.ofNatLT_shiftLeft\"><span class=\"name\">USize</span>.<span class=\"name\">ofNatLT_shiftLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Prelude.html#USize.size\">size</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#USize.ofNatLT\">ofNatLT</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span>) <span class=\"fn\">ha</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#USize.ofNatLT\">ofNatLT</a> <span class=\"fn\">a</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#USize.ofNatLT\">ofNatLT</a> <span class=\"fn\">b</span> <span class=\"fn\">⋯</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.ofNatLT_shiftLeft","kind":"theorem","line":641,"name":"USize.ofNatLT_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L641-L643"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.ofNatLT_shiftLeft\"><span class=\"name\">UInt64</span>.<span class=\"name\">ofNatLT_shiftLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Prelude.html#UInt64.size\">size</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">64</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#UInt64.ofNatLT\">ofNatLT</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span>) <span class=\"fn\">ha</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt64.ofNatLT\">ofNatLT</a> <span class=\"fn\">a</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt64.ofNatLT\">ofNatLT</a> <span class=\"fn\">b</span> <span class=\"fn\">⋯</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.ofNatLT_shiftLeft","kind":"theorem","line":638,"name":"UInt64.ofNatLT_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L638-L640"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.ofNatLT_shiftLeft\"><span class=\"name\">UInt32</span>.<span class=\"name\">ofNatLT_shiftLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Prelude.html#UInt32.size\">size</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">32</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#UInt32.ofNatLT\">ofNatLT</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span>) <span class=\"fn\">ha</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt32.ofNatLT\">ofNatLT</a> <span class=\"fn\">a</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt32.ofNatLT\">ofNatLT</a> <span class=\"fn\">b</span> <span class=\"fn\">⋯</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.ofNatLT_shiftLeft","kind":"theorem","line":635,"name":"UInt32.ofNatLT_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L635-L637"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.ofNatLT_shiftLeft\"><span class=\"name\">UInt16</span>.<span class=\"name\">ofNatLT_shiftLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Prelude.html#UInt16.size\">size</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">16</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#UInt16.ofNatLT\">ofNatLT</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span>) <span class=\"fn\">ha</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt16.ofNatLT\">ofNatLT</a> <span class=\"fn\">a</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt16.ofNatLT\">ofNatLT</a> <span class=\"fn\">b</span> <span class=\"fn\">⋯</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.ofNatLT_shiftLeft","kind":"theorem","line":632,"name":"UInt16.ofNatLT_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L632-L634"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.ofNatLT_shiftLeft\"><span class=\"name\">UInt8</span>.<span class=\"name\">ofNatLT_shiftLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Prelude.html#UInt8.size\">size</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">8</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8.ofNatLT\">ofNatLT</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span>) <span class=\"fn\">ha</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8.ofNatLT\">ofNatLT</a> <span class=\"fn\">a</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8.ofNatLT\">ofNatLT</a> <span class=\"fn\">b</span> <span class=\"fn\">⋯</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.ofNatLT_shiftLeft","kind":"theorem","line":629,"name":"UInt8.ofNatLT_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L629-L631"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.ofNat_shiftLeft\"><span class=\"name\">USize</span>.<span class=\"name\">ofNat_shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#USize.ofNat\">ofNat</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#USize.ofNat\">ofNat</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#USize.ofNat\">ofNat</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.ofNat_shiftLeft","kind":"theorem","line":623,"name":"USize.ofNat_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L623-L627"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.ofNat_shiftLeft\"><span class=\"name\">UInt64</span>.<span class=\"name\">ofNat_shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">64</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#UInt64.ofNat\">ofNat</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#UInt64.ofNat\">ofNat</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#UInt64.ofNat\">ofNat</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.ofNat_shiftLeft","kind":"theorem","line":619,"name":"UInt64.ofNat_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L619-L622"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.ofNat_shiftLeft\"><span class=\"name\">UInt32</span>.<span class=\"name\">ofNat_shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">32</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#UInt32.ofNat\">ofNat</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#UInt32.ofNat\">ofNat</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#UInt32.ofNat\">ofNat</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.ofNat_shiftLeft","kind":"theorem","line":615,"name":"UInt32.ofNat_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L615-L618"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.ofNat_shiftLeft\"><span class=\"name\">UInt16</span>.<span class=\"name\">ofNat_shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">16</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#UInt16.ofNat\">ofNat</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#UInt16.ofNat\">ofNat</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#UInt16.ofNat\">ofNat</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.ofNat_shiftLeft","kind":"theorem","line":611,"name":"UInt16.ofNat_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L611-L614"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.ofNat_shiftLeft\"><span class=\"name\">UInt8</span>.<span class=\"name\">ofNat_shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">8</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8.ofNat\">ofNat</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8.ofNat\">ofNat</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8.ofNat\">ofNat</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.ofNat_shiftLeft","kind":"theorem","line":607,"name":"UInt8.ofNat_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L607-L610"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.ofFin_shiftLeft_mod\"><span class=\"name\">USize</span>.<span class=\"name\">ofFin_shiftLeft_mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#USize.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#USize.ofFin\">ofFin</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#Fin.mk\">⟨</a><a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a>, <a href=\"./Init/Data/UInt/Bitwise.html#USize.ofFin_shiftLeft_mod._proof_1\">ofFin_shiftLeft_mod._proof_1</a><a href=\"./Init/Prelude.html#Fin.mk\">⟩</a>))</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#USize.ofFin\">ofFin</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#USize.ofFin\">ofFin</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.ofFin_shiftLeft_mod","kind":"theorem","line":599,"name":"USize.ofFin_shiftLeft_mod","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L599-L605"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.ofFin_shiftLeft_mod\"><span class=\"name\">UInt64</span>.<span class=\"name\">ofFin_shiftLeft_mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#UInt64.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt64.ofFin\">ofFin</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">64</span>))</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt64.ofFin\">ofFin</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt64.ofFin\">ofFin</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.ofFin_shiftLeft_mod","kind":"theorem","line":597,"name":"UInt64.ofFin_shiftLeft_mod","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L597-L598"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.ofFin_shiftLeft_mod\"><span class=\"name\">UInt32</span>.<span class=\"name\">ofFin_shiftLeft_mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#UInt32.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt32.ofFin\">ofFin</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">32</span>))</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt32.ofFin\">ofFin</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt32.ofFin\">ofFin</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.ofFin_shiftLeft_mod","kind":"theorem","line":595,"name":"UInt32.ofFin_shiftLeft_mod","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L595-L596"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.ofFin_shiftLeft_mod\"><span class=\"name\">UInt16</span>.<span class=\"name\">ofFin_shiftLeft_mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#UInt16.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt16.ofFin\">ofFin</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">16</span>))</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt16.ofFin\">ofFin</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt16.ofFin\">ofFin</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.ofFin_shiftLeft_mod","kind":"theorem","line":593,"name":"UInt16.ofFin_shiftLeft_mod","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L593-L594"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.ofFin_shiftLeft_mod\"><span class=\"name\">UInt8</span>.<span class=\"name\">ofFin_shiftLeft_mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#UInt8.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt8.ofFin\">ofFin</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">8</span>))</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt8.ofFin\">ofFin</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt8.ofFin\">ofFin</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.ofFin_shiftLeft_mod","kind":"theorem","line":591,"name":"UInt8.ofFin_shiftLeft_mod","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L591-L592"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.ofFin_shiftLeft\"><span class=\"name\">USize</span>.<span class=\"name\">ofFin_shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#USize.size\">size</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">↑<span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#USize.ofFin\">ofFin</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#USize.ofFin\">ofFin</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#USize.ofFin\">ofFin</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.ofFin_shiftLeft","kind":"theorem","line":588,"name":"USize.ofFin_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L588-L589"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.ofFin_shiftLeft\"><span class=\"name\">UInt64</span>.<span class=\"name\">ofFin_shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#UInt64.size\">size</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">↑<span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">64</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt64.ofFin\">ofFin</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt64.ofFin\">ofFin</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt64.ofFin\">ofFin</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.ofFin_shiftLeft","kind":"theorem","line":586,"name":"UInt64.ofFin_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L586-L587"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.ofFin_shiftLeft\"><span class=\"name\">UInt32</span>.<span class=\"name\">ofFin_shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#UInt32.size\">size</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">↑<span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">32</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt32.ofFin\">ofFin</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt32.ofFin\">ofFin</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt32.ofFin\">ofFin</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.ofFin_shiftLeft","kind":"theorem","line":584,"name":"UInt32.ofFin_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L584-L585"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.ofFin_shiftLeft\"><span class=\"name\">UInt16</span>.<span class=\"name\">ofFin_shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#UInt16.size\">size</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">↑<span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">16</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt16.ofFin\">ofFin</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt16.ofFin\">ofFin</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt16.ofFin\">ofFin</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.ofFin_shiftLeft","kind":"theorem","line":582,"name":"UInt16.ofFin_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L582-L583"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.ofFin_shiftLeft\"><span class=\"name\">UInt8</span>.<span class=\"name\">ofFin_shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#UInt8.size\">size</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">↑<span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">8</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt8.ofFin\">ofFin</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt8.ofFin\">ofFin</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt8.ofFin\">ofFin</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.ofFin_shiftLeft","kind":"theorem","line":580,"name":"UInt8.ofFin_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L580-L581"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.ofBitVec_shiftLeft_mod\"><span class=\"name\">USize</span>.<span class=\"name\">ofBitVec_shiftLeft_mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a>) <a href=\"./Init/Prelude.html#USize.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#USize.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#USize.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#USize.ofNat\">ofNat</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.ofBitVec_shiftLeft_mod","kind":"theorem","line":573,"name":"USize.ofBitVec_shiftLeft_mod","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L573-L578"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.ofBitVec_shiftLeft_mod\"><span class=\"name\">UInt64</span>.<span class=\"name\">ofBitVec_shiftLeft_mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">64</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">64</span>) <a href=\"./Init/Prelude.html#UInt64.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#UInt64.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#UInt64.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#UInt64.ofNat\">ofNat</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.ofBitVec_shiftLeft_mod","kind":"theorem","line":571,"name":"UInt64.ofBitVec_shiftLeft_mod","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L571-L572"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.ofBitVec_shiftLeft_mod\"><span class=\"name\">UInt32</span>.<span class=\"name\">ofBitVec_shiftLeft_mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">32</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">32</span>) <a href=\"./Init/Prelude.html#UInt32.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#UInt32.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#UInt32.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#UInt32.ofNat\">ofNat</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.ofBitVec_shiftLeft_mod","kind":"theorem","line":569,"name":"UInt32.ofBitVec_shiftLeft_mod","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L569-L570"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.ofBitVec_shiftLeft_mod\"><span class=\"name\">UInt16</span>.<span class=\"name\">ofBitVec_shiftLeft_mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">16</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">16</span>) <a href=\"./Init/Prelude.html#UInt16.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#UInt16.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#UInt16.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#UInt16.ofNat\">ofNat</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.ofBitVec_shiftLeft_mod","kind":"theorem","line":567,"name":"UInt16.ofBitVec_shiftLeft_mod","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L567-L568"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.ofBitVec_shiftLeft_mod\"><span class=\"name\">UInt8</span>.<span class=\"name\">ofBitVec_shiftLeft_mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">8</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">8</span>) <a href=\"./Init/Prelude.html#UInt8.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#UInt8.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#UInt8.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8.ofNat\">ofNat</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.ofBitVec_shiftLeft_mod","kind":"theorem","line":565,"name":"UInt8.ofBitVec_shiftLeft_mod","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L565-L566"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.ofBitVec_shiftLeft\"><span class=\"name\">USize</span>.<span class=\"name\">ofBitVec_shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#USize.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#USize.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#USize.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#USize.ofNat\">ofNat</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.ofBitVec_shiftLeft","kind":"theorem","line":558,"name":"USize.ofBitVec_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L558-L563"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.ofBitVec_shiftLeft\"><span class=\"name\">UInt64</span>.<span class=\"name\">ofBitVec_shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">64</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">64</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#UInt64.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#UInt64.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#UInt64.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#UInt64.ofNat\">ofNat</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.ofBitVec_shiftLeft","kind":"theorem","line":556,"name":"UInt64.ofBitVec_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L556-L557"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.ofBitVec_shiftLeft\"><span class=\"name\">UInt32</span>.<span class=\"name\">ofBitVec_shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">32</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">32</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#UInt32.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#UInt32.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#UInt32.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#UInt32.ofNat\">ofNat</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.ofBitVec_shiftLeft","kind":"theorem","line":554,"name":"UInt32.ofBitVec_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L554-L555"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.ofBitVec_shiftLeft\"><span class=\"name\">UInt16</span>.<span class=\"name\">ofBitVec_shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">16</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">16</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#UInt16.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#UInt16.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#UInt16.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#UInt16.ofNat\">ofNat</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.ofBitVec_shiftLeft","kind":"theorem","line":552,"name":"UInt16.ofBitVec_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L552-L553"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.ofBitVec_shiftLeft\"><span class=\"name\">UInt8</span>.<span class=\"name\">ofBitVec_shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">8</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">8</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#UInt8.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#UInt8.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#UInt8.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8.ofNat\">ofNat</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.ofBitVec_shiftLeft","kind":"theorem","line":550,"name":"UInt8.ofBitVec_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L550-L551"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.ofFin_rev\"><span class=\"name\">USize</span>.<span class=\"name\">ofFin_rev</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#USize.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#USize.ofFin\">ofFin</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.rev\">rev</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#USize.ofFin\">ofFin</a> <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.ofFin_rev","kind":"theorem","line":548,"name":"USize.ofFin_rev","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L548-L548"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.ofFin_rev\"><span class=\"name\">UInt64</span>.<span class=\"name\">ofFin_rev</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#UInt64.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt64.ofFin\">ofFin</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.rev\">rev</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt64.ofFin\">ofFin</a> <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.ofFin_rev","kind":"theorem","line":547,"name":"UInt64.ofFin_rev","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L547-L547"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.ofFin_rev\"><span class=\"name\">UInt32</span>.<span class=\"name\">ofFin_rev</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#UInt32.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt32.ofFin\">ofFin</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.rev\">rev</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt32.ofFin\">ofFin</a> <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.ofFin_rev","kind":"theorem","line":546,"name":"UInt32.ofFin_rev","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L546-L546"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.ofFin_rev\"><span class=\"name\">UInt16</span>.<span class=\"name\">ofFin_rev</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#UInt16.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt16.ofFin\">ofFin</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.rev\">rev</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt16.ofFin\">ofFin</a> <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.ofFin_rev","kind":"theorem","line":545,"name":"UInt16.ofFin_rev","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L545-L545"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.ofFin_rev\"><span class=\"name\">UInt8</span>.<span class=\"name\">ofFin_rev</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#UInt8.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt8.ofFin\">ofFin</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.rev\">rev</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt8.ofFin\">ofFin</a> <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.ofFin_rev","kind":"theorem","line":544,"name":"UInt8.ofFin_rev","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L544-L544"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.ofBitVec_not\"><span class=\"name\">USize</span>.<span class=\"name\">ofBitVec_not</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#USize.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><a href=\"./Init/Prelude.html#USize.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#USize.ofBitVec\">}</a></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.ofBitVec_not","kind":"theorem","line":542,"name":"USize.ofBitVec_not","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L542-L542"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.ofBitVec_not\"><span class=\"name\">UInt64</span>.<span class=\"name\">ofBitVec_not</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">64</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#UInt64.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><a href=\"./Init/Prelude.html#UInt64.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#UInt64.ofBitVec\">}</a></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.ofBitVec_not","kind":"theorem","line":541,"name":"UInt64.ofBitVec_not","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L541-L541"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.ofBitVec_not\"><span class=\"name\">UInt32</span>.<span class=\"name\">ofBitVec_not</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">32</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#UInt32.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><a href=\"./Init/Prelude.html#UInt32.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#UInt32.ofBitVec\">}</a></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.ofBitVec_not","kind":"theorem","line":540,"name":"UInt32.ofBitVec_not","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L540-L540"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.ofBitVec_not\"><span class=\"name\">UInt16</span>.<span class=\"name\">ofBitVec_not</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">16</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#UInt16.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><a href=\"./Init/Prelude.html#UInt16.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#UInt16.ofBitVec\">}</a></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.ofBitVec_not","kind":"theorem","line":539,"name":"UInt16.ofBitVec_not","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L539-L539"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.ofBitVec_not\"><span class=\"name\">UInt8</span>.<span class=\"name\">ofBitVec_not</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">8</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#UInt8.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><a href=\"./Init/Prelude.html#UInt8.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#UInt8.ofBitVec\">}</a></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.ofBitVec_not","kind":"theorem","line":538,"name":"UInt8.ofBitVec_not","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L538-L538"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.ofNatLT_xor\"><span class=\"name\">UInt64</span>.<span class=\"name\">ofNatLT_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">64</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">64</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#UInt64.ofNatLT\">ofNatLT</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>) <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt64.ofNatLT\">ofNatLT</a> <span class=\"fn\">a</span> <span class=\"fn\">ha</span></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt64.ofNatLT\">ofNatLT</a> <span class=\"fn\">b</span> <span class=\"fn\">hb</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.ofNatLT_xor","kind":"theorem","line":534,"name":"UInt64.ofNatLT_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L534-L536"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.ofNatLT_xor\"><span class=\"name\">UInt32</span>.<span class=\"name\">ofNatLT_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">32</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">32</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#UInt32.ofNatLT\">ofNatLT</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>) <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt32.ofNatLT\">ofNatLT</a> <span class=\"fn\">a</span> <span class=\"fn\">ha</span></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt32.ofNatLT\">ofNatLT</a> <span class=\"fn\">b</span> <span class=\"fn\">hb</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.ofNatLT_xor","kind":"theorem","line":531,"name":"UInt32.ofNatLT_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L531-L533"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.ofNatLT_xor\"><span class=\"name\">UInt16</span>.<span class=\"name\">ofNatLT_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">16</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">16</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#UInt16.ofNatLT\">ofNatLT</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>) <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt16.ofNatLT\">ofNatLT</a> <span class=\"fn\">a</span> <span class=\"fn\">ha</span></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt16.ofNatLT\">ofNatLT</a> <span class=\"fn\">b</span> <span class=\"fn\">hb</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.ofNatLT_xor","kind":"theorem","line":528,"name":"UInt16.ofNatLT_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L528-L530"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.ofNatLT_xor\"><span class=\"name\">UInt8</span>.<span class=\"name\">ofNatLT_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">8</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">8</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8.ofNatLT\">ofNatLT</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>) <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8.ofNatLT\">ofNatLT</a> <span class=\"fn\">a</span> <span class=\"fn\">ha</span></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8.ofNatLT\">ofNatLT</a> <span class=\"fn\">b</span> <span class=\"fn\">hb</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.ofNatLT_xor","kind":"theorem","line":525,"name":"UInt8.ofNatLT_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L525-L527"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.ofNat_xor\"><span class=\"name\">USize</span>.<span class=\"name\">ofNat_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#USize.ofNat\">ofNat</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#USize.ofNat\">ofNat</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#USize.ofNat\">ofNat</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.ofNat_xor","kind":"theorem","line":522,"name":"USize.ofNat_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L522-L523"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.ofNat_xor\"><span class=\"name\">UInt64</span>.<span class=\"name\">ofNat_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#UInt64.ofNat\">ofNat</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#UInt64.ofNat\">ofNat</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#UInt64.ofNat\">ofNat</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.ofNat_xor","kind":"theorem","line":520,"name":"UInt64.ofNat_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L520-L521"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.ofNat_xor\"><span class=\"name\">UInt32</span>.<span class=\"name\">ofNat_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#UInt32.ofNat\">ofNat</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#UInt32.ofNat\">ofNat</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#UInt32.ofNat\">ofNat</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.ofNat_xor","kind":"theorem","line":518,"name":"UInt32.ofNat_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L518-L519"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.ofNat_xor\"><span class=\"name\">UInt16</span>.<span class=\"name\">ofNat_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#UInt16.ofNat\">ofNat</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#UInt16.ofNat\">ofNat</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#UInt16.ofNat\">ofNat</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.ofNat_xor","kind":"theorem","line":516,"name":"UInt16.ofNat_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L516-L517"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.ofNat_xor\"><span class=\"name\">UInt8</span>.<span class=\"name\">ofNat_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8.ofNat\">ofNat</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8.ofNat\">ofNat</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8.ofNat\">ofNat</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.ofNat_xor","kind":"theorem","line":514,"name":"UInt8.ofNat_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L514-L515"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.ofBitVec_xor\"><span class=\"name\">USize</span>.<span class=\"name\">ofBitVec_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#USize.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#USize.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#USize.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <a href=\"./Init/Prelude.html#USize.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#USize.ofBitVec\">}</a></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.ofBitVec_xor","kind":"theorem","line":512,"name":"USize.ofBitVec_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L512-L512"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.ofBitVec_xor\"><span class=\"name\">UInt64</span>.<span class=\"name\">ofBitVec_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">64</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#UInt64.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#UInt64.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#UInt64.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <a href=\"./Init/Prelude.html#UInt64.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#UInt64.ofBitVec\">}</a></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.ofBitVec_xor","kind":"theorem","line":511,"name":"UInt64.ofBitVec_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L511-L511"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.ofBitVec_xor\"><span class=\"name\">UInt32</span>.<span class=\"name\">ofBitVec_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">32</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#UInt32.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#UInt32.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#UInt32.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <a href=\"./Init/Prelude.html#UInt32.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#UInt32.ofBitVec\">}</a></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.ofBitVec_xor","kind":"theorem","line":510,"name":"UInt32.ofBitVec_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L510-L510"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.ofBitVec_xor\"><span class=\"name\">UInt16</span>.<span class=\"name\">ofBitVec_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">16</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#UInt16.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#UInt16.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#UInt16.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <a href=\"./Init/Prelude.html#UInt16.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#UInt16.ofBitVec\">}</a></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.ofBitVec_xor","kind":"theorem","line":509,"name":"UInt16.ofBitVec_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L509-L509"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.ofBitVec_xor\"><span class=\"name\">UInt8</span>.<span class=\"name\">ofBitVec_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">8</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#UInt8.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#UInt8.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#UInt8.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <a href=\"./Init/Prelude.html#UInt8.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#UInt8.ofBitVec\">}</a></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.ofBitVec_xor","kind":"theorem","line":508,"name":"UInt8.ofBitVec_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L508-L508"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.ofFin_xor\"><span class=\"name\">USize</span>.<span class=\"name\">ofFin_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#USize.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#USize.ofFin\">ofFin</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#USize.ofFin\">ofFin</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#USize.ofFin\">ofFin</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.ofFin_xor","kind":"theorem","line":506,"name":"USize.ofFin_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L506-L506"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.ofFin_xor\"><span class=\"name\">UInt64</span>.<span class=\"name\">ofFin_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#UInt64.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt64.ofFin\">ofFin</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt64.ofFin\">ofFin</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt64.ofFin\">ofFin</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.ofFin_xor","kind":"theorem","line":505,"name":"UInt64.ofFin_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L505-L505"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.ofFin_xor\"><span class=\"name\">UInt32</span>.<span class=\"name\">ofFin_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#UInt32.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt32.ofFin\">ofFin</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt32.ofFin\">ofFin</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt32.ofFin\">ofFin</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.ofFin_xor","kind":"theorem","line":504,"name":"UInt32.ofFin_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L504-L504"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.ofFin_xor\"><span class=\"name\">UInt16</span>.<span class=\"name\">ofFin_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#UInt16.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt16.ofFin\">ofFin</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt16.ofFin\">ofFin</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt16.ofFin\">ofFin</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.ofFin_xor","kind":"theorem","line":503,"name":"UInt16.ofFin_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L503-L503"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.ofFin_xor\"><span class=\"name\">UInt8</span>.<span class=\"name\">ofFin_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#UInt8.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt8.ofFin\">ofFin</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt8.ofFin\">ofFin</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt8.ofFin\">ofFin</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.ofFin_xor","kind":"theorem","line":502,"name":"UInt8.ofFin_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L502-L502"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.ofNatLT_or\"><span class=\"name\">UInt64</span>.<span class=\"name\">ofNatLT_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">64</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">64</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#UInt64.ofNatLT\">ofNatLT</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>) <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt64.ofNatLT\">ofNatLT</a> <span class=\"fn\">a</span> <span class=\"fn\">ha</span></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt64.ofNatLT\">ofNatLT</a> <span class=\"fn\">b</span> <span class=\"fn\">hb</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.ofNatLT_or","kind":"theorem","line":498,"name":"UInt64.ofNatLT_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L498-L500"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.ofNatLT_or\"><span class=\"name\">UInt32</span>.<span class=\"name\">ofNatLT_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">32</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">32</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#UInt32.ofNatLT\">ofNatLT</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>) <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt32.ofNatLT\">ofNatLT</a> <span class=\"fn\">a</span> <span class=\"fn\">ha</span></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt32.ofNatLT\">ofNatLT</a> <span class=\"fn\">b</span> <span class=\"fn\">hb</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.ofNatLT_or","kind":"theorem","line":495,"name":"UInt32.ofNatLT_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L495-L497"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.ofNatLT_or\"><span class=\"name\">UInt16</span>.<span class=\"name\">ofNatLT_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">16</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">16</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#UInt16.ofNatLT\">ofNatLT</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>) <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt16.ofNatLT\">ofNatLT</a> <span class=\"fn\">a</span> <span class=\"fn\">ha</span></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt16.ofNatLT\">ofNatLT</a> <span class=\"fn\">b</span> <span class=\"fn\">hb</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.ofNatLT_or","kind":"theorem","line":492,"name":"UInt16.ofNatLT_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L492-L494"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.ofNatLT_or\"><span class=\"name\">UInt8</span>.<span class=\"name\">ofNatLT_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">8</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">8</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8.ofNatLT\">ofNatLT</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>) <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8.ofNatLT\">ofNatLT</a> <span class=\"fn\">a</span> <span class=\"fn\">ha</span></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8.ofNatLT\">ofNatLT</a> <span class=\"fn\">b</span> <span class=\"fn\">hb</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.ofNatLT_or","kind":"theorem","line":489,"name":"UInt8.ofNatLT_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L489-L491"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.ofNat_or\"><span class=\"name\">USize</span>.<span class=\"name\">ofNat_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#USize.ofNat\">ofNat</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#USize.ofNat\">ofNat</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#USize.ofNat\">ofNat</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.ofNat_or","kind":"theorem","line":486,"name":"USize.ofNat_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L486-L487"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.ofNat_or\"><span class=\"name\">UInt64</span>.<span class=\"name\">ofNat_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#UInt64.ofNat\">ofNat</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#UInt64.ofNat\">ofNat</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#UInt64.ofNat\">ofNat</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.ofNat_or","kind":"theorem","line":484,"name":"UInt64.ofNat_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L484-L485"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.ofNat_or\"><span class=\"name\">UInt32</span>.<span class=\"name\">ofNat_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#UInt32.ofNat\">ofNat</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#UInt32.ofNat\">ofNat</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#UInt32.ofNat\">ofNat</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.ofNat_or","kind":"theorem","line":482,"name":"UInt32.ofNat_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L482-L483"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.ofNat_or\"><span class=\"name\">UInt16</span>.<span class=\"name\">ofNat_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#UInt16.ofNat\">ofNat</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#UInt16.ofNat\">ofNat</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#UInt16.ofNat\">ofNat</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.ofNat_or","kind":"theorem","line":480,"name":"UInt16.ofNat_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L480-L481"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.ofNat_or\"><span class=\"name\">UInt8</span>.<span class=\"name\">ofNat_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8.ofNat\">ofNat</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8.ofNat\">ofNat</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8.ofNat\">ofNat</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.ofNat_or","kind":"theorem","line":478,"name":"UInt8.ofNat_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L478-L479"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.ofBitVec_or\"><span class=\"name\">USize</span>.<span class=\"name\">ofBitVec_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#USize.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#USize.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#USize.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <a href=\"./Init/Prelude.html#USize.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#USize.ofBitVec\">}</a></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.ofBitVec_or","kind":"theorem","line":476,"name":"USize.ofBitVec_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L476-L476"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.ofBitVec_or\"><span class=\"name\">UInt64</span>.<span class=\"name\">ofBitVec_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">64</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#UInt64.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#UInt64.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#UInt64.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <a href=\"./Init/Prelude.html#UInt64.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#UInt64.ofBitVec\">}</a></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.ofBitVec_or","kind":"theorem","line":475,"name":"UInt64.ofBitVec_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L475-L475"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.ofBitVec_or\"><span class=\"name\">UInt32</span>.<span class=\"name\">ofBitVec_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">32</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#UInt32.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#UInt32.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#UInt32.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <a href=\"./Init/Prelude.html#UInt32.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#UInt32.ofBitVec\">}</a></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.ofBitVec_or","kind":"theorem","line":474,"name":"UInt32.ofBitVec_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L474-L474"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.ofBitVec_or\"><span class=\"name\">UInt16</span>.<span class=\"name\">ofBitVec_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">16</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#UInt16.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#UInt16.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#UInt16.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <a href=\"./Init/Prelude.html#UInt16.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#UInt16.ofBitVec\">}</a></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.ofBitVec_or","kind":"theorem","line":473,"name":"UInt16.ofBitVec_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L473-L473"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.ofBitVec_or\"><span class=\"name\">UInt8</span>.<span class=\"name\">ofBitVec_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">8</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#UInt8.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#UInt8.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#UInt8.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <a href=\"./Init/Prelude.html#UInt8.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#UInt8.ofBitVec\">}</a></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.ofBitVec_or","kind":"theorem","line":472,"name":"UInt8.ofBitVec_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L472-L472"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.ofFin_or\"><span class=\"name\">USize</span>.<span class=\"name\">ofFin_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#USize.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#USize.ofFin\">ofFin</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#USize.ofFin\">ofFin</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#USize.ofFin\">ofFin</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.ofFin_or","kind":"theorem","line":470,"name":"USize.ofFin_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L470-L470"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.ofFin_or\"><span class=\"name\">UInt64</span>.<span class=\"name\">ofFin_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#UInt64.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt64.ofFin\">ofFin</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt64.ofFin\">ofFin</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt64.ofFin\">ofFin</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.ofFin_or","kind":"theorem","line":469,"name":"UInt64.ofFin_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L469-L469"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.ofFin_or\"><span class=\"name\">UInt32</span>.<span class=\"name\">ofFin_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#UInt32.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt32.ofFin\">ofFin</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt32.ofFin\">ofFin</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt32.ofFin\">ofFin</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.ofFin_or","kind":"theorem","line":468,"name":"UInt32.ofFin_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L468-L468"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.ofFin_or\"><span class=\"name\">UInt16</span>.<span class=\"name\">ofFin_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#UInt16.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt16.ofFin\">ofFin</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt16.ofFin\">ofFin</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt16.ofFin\">ofFin</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.ofFin_or","kind":"theorem","line":467,"name":"UInt16.ofFin_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L467-L467"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.ofFin_or\"><span class=\"name\">UInt8</span>.<span class=\"name\">ofFin_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#UInt8.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt8.ofFin\">ofFin</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt8.ofFin\">ofFin</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt8.ofFin\">ofFin</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.ofFin_or","kind":"theorem","line":466,"name":"UInt8.ofFin_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L466-L466"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.ofNatLT_and\"><span class=\"name\">UInt64</span>.<span class=\"name\">ofNatLT_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">64</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">64</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#UInt64.ofNatLT\">ofNatLT</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>) <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt64.ofNatLT\">ofNatLT</a> <span class=\"fn\">a</span> <span class=\"fn\">ha</span></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt64.ofNatLT\">ofNatLT</a> <span class=\"fn\">b</span> <span class=\"fn\">hb</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.ofNatLT_and","kind":"theorem","line":462,"name":"UInt64.ofNatLT_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L462-L464"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.ofNatLT_and\"><span class=\"name\">UInt32</span>.<span class=\"name\">ofNatLT_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">32</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">32</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#UInt32.ofNatLT\">ofNatLT</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>) <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt32.ofNatLT\">ofNatLT</a> <span class=\"fn\">a</span> <span class=\"fn\">ha</span></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt32.ofNatLT\">ofNatLT</a> <span class=\"fn\">b</span> <span class=\"fn\">hb</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.ofNatLT_and","kind":"theorem","line":459,"name":"UInt32.ofNatLT_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L459-L461"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.ofNatLT_and\"><span class=\"name\">UInt16</span>.<span class=\"name\">ofNatLT_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">16</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">16</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#UInt16.ofNatLT\">ofNatLT</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>) <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt16.ofNatLT\">ofNatLT</a> <span class=\"fn\">a</span> <span class=\"fn\">ha</span></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt16.ofNatLT\">ofNatLT</a> <span class=\"fn\">b</span> <span class=\"fn\">hb</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.ofNatLT_and","kind":"theorem","line":456,"name":"UInt16.ofNatLT_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L456-L458"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.ofNatLT_and\"><span class=\"name\">UInt8</span>.<span class=\"name\">ofNatLT_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ha</span> : <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">8</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">8</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8.ofNatLT\">ofNatLT</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>) <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8.ofNatLT\">ofNatLT</a> <span class=\"fn\">a</span> <span class=\"fn\">ha</span></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8.ofNatLT\">ofNatLT</a> <span class=\"fn\">b</span> <span class=\"fn\">hb</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.ofNatLT_and","kind":"theorem","line":453,"name":"UInt8.ofNatLT_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L453-L455"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.ofNat_and\"><span class=\"name\">USize</span>.<span class=\"name\">ofNat_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#USize.ofNat\">ofNat</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#USize.ofNat\">ofNat</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#USize.ofNat\">ofNat</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.ofNat_and","kind":"theorem","line":450,"name":"USize.ofNat_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L450-L451"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.ofNat_and\"><span class=\"name\">UInt64</span>.<span class=\"name\">ofNat_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#UInt64.ofNat\">ofNat</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#UInt64.ofNat\">ofNat</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#UInt64.ofNat\">ofNat</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.ofNat_and","kind":"theorem","line":448,"name":"UInt64.ofNat_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L448-L449"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.ofNat_and\"><span class=\"name\">UInt32</span>.<span class=\"name\">ofNat_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#UInt32.ofNat\">ofNat</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#UInt32.ofNat\">ofNat</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#UInt32.ofNat\">ofNat</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.ofNat_and","kind":"theorem","line":446,"name":"UInt32.ofNat_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L446-L447"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.ofNat_and\"><span class=\"name\">UInt16</span>.<span class=\"name\">ofNat_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#UInt16.ofNat\">ofNat</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#UInt16.ofNat\">ofNat</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#UInt16.ofNat\">ofNat</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.ofNat_and","kind":"theorem","line":444,"name":"UInt16.ofNat_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L444-L445"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.ofNat_and\"><span class=\"name\">UInt8</span>.<span class=\"name\">ofNat_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8.ofNat\">ofNat</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8.ofNat\">ofNat</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8.ofNat\">ofNat</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.ofNat_and","kind":"theorem","line":442,"name":"UInt8.ofNat_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L442-L443"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.ofBitVec_and\"><span class=\"name\">USize</span>.<span class=\"name\">ofBitVec_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#USize.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#USize.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#USize.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <a href=\"./Init/Prelude.html#USize.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#USize.ofBitVec\">}</a></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.ofBitVec_and","kind":"theorem","line":440,"name":"USize.ofBitVec_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L440-L440"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.ofBitVec_and\"><span class=\"name\">UInt64</span>.<span class=\"name\">ofBitVec_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">64</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#UInt64.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#UInt64.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#UInt64.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <a href=\"./Init/Prelude.html#UInt64.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#UInt64.ofBitVec\">}</a></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.ofBitVec_and","kind":"theorem","line":439,"name":"UInt64.ofBitVec_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L439-L439"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.ofBitVec_and\"><span class=\"name\">UInt32</span>.<span class=\"name\">ofBitVec_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">32</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt32.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#UInt32.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#UInt32.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#UInt32.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <a href=\"./Init/Prelude.html#UInt32.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#UInt32.ofBitVec\">}</a></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.ofBitVec_and","kind":"theorem","line":438,"name":"UInt32.ofBitVec_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L438-L438"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.ofBitVec_and\"><span class=\"name\">UInt16</span>.<span class=\"name\">ofBitVec_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">16</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt16.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#UInt16.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#UInt16.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#UInt16.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <a href=\"./Init/Prelude.html#UInt16.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#UInt16.ofBitVec\">}</a></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.ofBitVec_and","kind":"theorem","line":437,"name":"UInt16.ofBitVec_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L437-L437"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.ofBitVec_and\"><span class=\"name\">UInt8</span>.<span class=\"name\">ofBitVec_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">8</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#UInt8.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#UInt8.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#UInt8.ofBitVec\">}</a> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <a href=\"./Init/Prelude.html#UInt8.ofBitVec\">{</a> <span class=\"fn\">toBitVec</span> := <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#UInt8.ofBitVec\">}</a></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.ofBitVec_and","kind":"theorem","line":436,"name":"UInt8.ofBitVec_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L436-L436"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.ofFin_and\"><span class=\"name\">USize</span>.<span class=\"name\">ofFin_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#USize.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#USize.ofFin\">ofFin</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#USize.ofFin\">ofFin</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#USize.ofFin\">ofFin</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.ofFin_and","kind":"theorem","line":434,"name":"USize.ofFin_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L434-L434"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.ofFin_and\"><span class=\"name\">UInt64</span>.<span class=\"name\">ofFin_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#UInt64.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt64.ofFin\">ofFin</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt64.ofFin\">ofFin</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt64.ofFin\">ofFin</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.ofFin_and","kind":"theorem","line":433,"name":"UInt64.ofFin_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L433-L433"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.ofFin_and\"><span class=\"name\">UInt32</span>.<span class=\"name\">ofFin_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#UInt32.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt32.ofFin\">ofFin</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt32.ofFin\">ofFin</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt32.ofFin\">ofFin</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.ofFin_and","kind":"theorem","line":432,"name":"UInt32.ofFin_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L432-L432"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.ofFin_and\"><span class=\"name\">UInt16</span>.<span class=\"name\">ofFin_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#UInt16.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt16.ofFin\">ofFin</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt16.ofFin\">ofFin</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt16.ofFin\">ofFin</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.ofFin_and","kind":"theorem","line":431,"name":"UInt16.ofFin_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L431-L431"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.ofFin_and\"><span class=\"name\">UInt8</span>.<span class=\"name\">ofFin_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <a href=\"./Init/Prelude.html#UInt8.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt8.ofFin\">ofFin</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt8.ofFin\">ofFin</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/Basic.html#UInt8.ofFin\">ofFin</a> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.ofFin_and","kind":"theorem","line":430,"name":"UInt8.ofFin_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L430-L430"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.toUInt64_shiftRight\"><span class=\"name\">USize</span>.<span class=\"name\">toUInt64_shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> (<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#UInt64.ofNat\">UInt64.ofNat</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a></span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.toUInt64_shiftRight","kind":"theorem","line":422,"name":"USize.toUInt64_shiftRight","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L422-L423"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.toUSize_shiftRight\"><span class=\"name\">UInt32</span>.<span class=\"name\">toUSize_shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/Basic.html#UInt32.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/Basic.html#UInt32.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> (<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/Basic.html#UInt32.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">32</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.toUSize_shiftRight","kind":"theorem","line":418,"name":"UInt32.toUSize_shiftRight","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L418-L420"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.toUInt64_shiftRight\"><span class=\"name\">UInt32</span>.<span class=\"name\">toUInt64_shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> (<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">32</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.toUInt64_shiftRight","kind":"theorem","line":416,"name":"UInt32.toUInt64_shiftRight","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L416-L417"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.toUSize_shiftRight\"><span class=\"name\">UInt16</span>.<span class=\"name\">toUSize_shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/Basic.html#UInt16.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/Basic.html#UInt16.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> (<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/Basic.html#UInt16.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">16</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.toUSize_shiftRight","kind":"theorem","line":412,"name":"UInt16.toUSize_shiftRight","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L412-L414"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.toUInt64_shiftRight\"><span class=\"name\">UInt16</span>.<span class=\"name\">toUInt64_shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> (<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">16</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.toUInt64_shiftRight","kind":"theorem","line":410,"name":"UInt16.toUInt64_shiftRight","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L410-L411"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.toUInt32_shiftRight\"><span class=\"name\">UInt16</span>.<span class=\"name\">toUInt32_shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> (<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">16</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.toUInt32_shiftRight","kind":"theorem","line":408,"name":"UInt16.toUInt32_shiftRight","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L408-L409"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.toUSize_shiftRight\"><span class=\"name\">UInt8</span>.<span class=\"name\">toUSize_shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/Basic.html#UInt8.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/Basic.html#UInt8.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> (<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/Basic.html#UInt8.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">8</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.toUSize_shiftRight","kind":"theorem","line":404,"name":"UInt8.toUSize_shiftRight","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L404-L406"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.toUInt64_shiftRight\"><span class=\"name\">UInt8</span>.<span class=\"name\">toUInt64_shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> (<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">8</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.toUInt64_shiftRight","kind":"theorem","line":402,"name":"UInt8.toUInt64_shiftRight","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L402-L403"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.toUInt32_shiftRight\"><span class=\"name\">UInt8</span>.<span class=\"name\">toUInt32_shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> (<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">8</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.toUInt32_shiftRight","kind":"theorem","line":400,"name":"UInt8.toUInt32_shiftRight","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L400-L401"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.toUInt16_shiftRight\"><span class=\"name\">UInt8</span>.<span class=\"name\">toUInt16_shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toUInt16\">toUInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toUInt16\">toUInt16</a></span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> (<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toUInt16\">toUInt16</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">8</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.toUInt16_shiftRight","kind":"theorem","line":398,"name":"UInt8.toUInt16_shiftRight","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L398-L399"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.toFin_shiftRight\"><span class=\"name\">USize</span>.<span class=\"name\">toFin_shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#USize.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#USize.toFin\">toFin</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#USize.toFin\">toFin</a></span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#USize.toFin\">toFin</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.toFin_shiftRight","kind":"theorem","line":395,"name":"USize.toFin_shiftRight","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L395-L396"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.toFin_shiftRight\"><span class=\"name\">UInt64</span>.<span class=\"name\">toFin_shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">64</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toFin\">toFin</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toFin\">toFin</a></span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toFin\">toFin</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.toFin_shiftRight","kind":"theorem","line":393,"name":"UInt64.toFin_shiftRight","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L393-L394"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.toFin_shiftRight\"><span class=\"name\">UInt32</span>.<span class=\"name\">toFin_shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">32</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toFin\">toFin</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toFin\">toFin</a></span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toFin\">toFin</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.toFin_shiftRight","kind":"theorem","line":391,"name":"UInt32.toFin_shiftRight","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L391-L392"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.toFin_shiftRight\"><span class=\"name\">UInt16</span>.<span class=\"name\">toFin_shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">16</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toFin\">toFin</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toFin\">toFin</a></span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toFin\">toFin</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.toFin_shiftRight","kind":"theorem","line":389,"name":"UInt16.toFin_shiftRight","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L389-L390"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.toFin_shiftRight\"><span class=\"name\">UInt8</span>.<span class=\"name\">toFin_shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">8</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toFin\">toFin</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toFin\">toFin</a></span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toFin\">toFin</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.toFin_shiftRight","kind":"theorem","line":387,"name":"UInt8.toFin_shiftRight","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L387-L388"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.toUInt64_shiftLeft\"><span class=\"name\">USize</span>.<span class=\"name\">toUInt64_shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">(<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#USize.ofNat\">ofNat</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a></span>).<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#UInt64.ofNat\">UInt64.ofNat</a> <a href=\"./Init/Prelude.html#USize.size\">size</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.toUInt64_shiftLeft","kind":"theorem","line":382,"name":"USize.toUInt64_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L382-L385"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.toUSize_shiftLeft\"><span class=\"name\">UInt32</span>.<span class=\"name\">toUSize_shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/Basic.html#UInt32.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/Basic.html#UInt32.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">(<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">32</span>).<a href=\"./Init/Data/UInt/Basic.html#UInt32.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">4294967296</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.toUSize_shiftLeft","kind":"theorem","line":379,"name":"UInt32.toUSize_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L379-L380"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.toUInt64_shiftLeft\"><span class=\"name\">UInt32</span>.<span class=\"name\">toUInt64_shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">(<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">32</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">4294967296</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.toUInt64_shiftLeft","kind":"theorem","line":377,"name":"UInt32.toUInt64_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L377-L378"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.toUSize_shiftLeft\"><span class=\"name\">UInt16</span>.<span class=\"name\">toUSize_shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/Basic.html#UInt16.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/Basic.html#UInt16.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">(<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">16</span>).<a href=\"./Init/Data/UInt/Basic.html#UInt16.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">65536</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.toUSize_shiftLeft","kind":"theorem","line":374,"name":"UInt16.toUSize_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L374-L375"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.toUInt64_shiftLeft\"><span class=\"name\">UInt16</span>.<span class=\"name\">toUInt64_shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">(<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">16</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">65536</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.toUInt64_shiftLeft","kind":"theorem","line":372,"name":"UInt16.toUInt64_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L372-L373"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.toUInt32_shiftLeft\"><span class=\"name\">UInt16</span>.<span class=\"name\">toUInt32_shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">(<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">16</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">65536</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.toUInt32_shiftLeft","kind":"theorem","line":370,"name":"UInt16.toUInt32_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L370-L371"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.toUSize_shiftLeft\"><span class=\"name\">UInt8</span>.<span class=\"name\">toUSize_shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/Basic.html#UInt8.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/Basic.html#UInt8.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">(<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">8</span>).<a href=\"./Init/Data/UInt/Basic.html#UInt8.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">256</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.toUSize_shiftLeft","kind":"theorem","line":367,"name":"UInt8.toUSize_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L367-L368"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.toUInt64_shiftLeft\"><span class=\"name\">UInt8</span>.<span class=\"name\">toUInt64_shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">(<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">8</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">256</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.toUInt64_shiftLeft","kind":"theorem","line":365,"name":"UInt8.toUInt64_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L365-L366"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.toUInt32_shiftLeft\"><span class=\"name\">UInt8</span>.<span class=\"name\">toUInt32_shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">(<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">8</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">256</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.toUInt32_shiftLeft","kind":"theorem","line":363,"name":"UInt8.toUInt32_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L363-L364"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.toUInt16_shiftLeft\"><span class=\"name\">UInt8</span>.<span class=\"name\">toUInt16_shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toUInt16\">toUInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toUInt16\">toUInt16</a></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">(<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">8</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toUInt16\">toUInt16</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">256</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.toUInt16_shiftLeft","kind":"theorem","line":361,"name":"UInt8.toUInt16_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L361-L362"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.toUInt64_shiftLeft_of_lt\"><span class=\"name\">USize</span>.<span class=\"name\">toUInt64_shiftLeft_of_lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#USize.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#UInt64.ofNat\">UInt64.ofNat</a> <a href=\"./Init/Prelude.html#USize.size\">size</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.toUInt64_shiftLeft_of_lt","kind":"theorem","line":358,"name":"USize.toUInt64_shiftLeft_of_lt","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L358-L359"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.toUSize_shiftLeft_of_lt\"><span class=\"name\">UInt32</span>.<span class=\"name\">toUSize_shiftLeft_of_lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">32</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/Basic.html#UInt32.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/Basic.html#UInt32.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/Basic.html#UInt32.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">4294967296</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.toUSize_shiftLeft_of_lt","kind":"theorem","line":354,"name":"UInt32.toUSize_shiftLeft_of_lt","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L354-L356"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.toUInt64_shiftLeft_of_lt\"><span class=\"name\">UInt32</span>.<span class=\"name\">toUInt64_shiftLeft_of_lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">32</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">4294967296</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.toUInt64_shiftLeft_of_lt","kind":"theorem","line":352,"name":"UInt32.toUInt64_shiftLeft_of_lt","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L352-L353"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.toUSize_shiftLeft_of_lt\"><span class=\"name\">UInt16</span>.<span class=\"name\">toUSize_shiftLeft_of_lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">16</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/Basic.html#UInt16.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/Basic.html#UInt16.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/Basic.html#UInt16.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">65536</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.toUSize_shiftLeft_of_lt","kind":"theorem","line":348,"name":"UInt16.toUSize_shiftLeft_of_lt","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L348-L350"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.toUInt64_shiftLeft_of_lt\"><span class=\"name\">UInt16</span>.<span class=\"name\">toUInt64_shiftLeft_of_lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">16</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">65536</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.toUInt64_shiftLeft_of_lt","kind":"theorem","line":346,"name":"UInt16.toUInt64_shiftLeft_of_lt","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L346-L347"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.toUInt32_shiftLeft_of_lt\"><span class=\"name\">UInt16</span>.<span class=\"name\">toUInt32_shiftLeft_of_lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">16</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">65536</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.toUInt32_shiftLeft_of_lt","kind":"theorem","line":344,"name":"UInt16.toUInt32_shiftLeft_of_lt","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L344-L345"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.toUSize_shiftLeft_of_lt\"><span class=\"name\">UInt8</span>.<span class=\"name\">toUSize_shiftLeft_of_lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">8</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/Basic.html#UInt8.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/Basic.html#UInt8.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/Basic.html#UInt8.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">256</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.toUSize_shiftLeft_of_lt","kind":"theorem","line":340,"name":"UInt8.toUSize_shiftLeft_of_lt","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L340-L342"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.toUInt64_shiftLeft_of_lt\"><span class=\"name\">UInt8</span>.<span class=\"name\">toUInt64_shiftLeft_of_lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">8</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">256</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.toUInt64_shiftLeft_of_lt","kind":"theorem","line":338,"name":"UInt8.toUInt64_shiftLeft_of_lt","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L338-L339"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.toUInt32_shiftLeft_of_lt\"><span class=\"name\">UInt8</span>.<span class=\"name\">toUInt32_shiftLeft_of_lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">8</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">256</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.toUInt32_shiftLeft_of_lt","kind":"theorem","line":336,"name":"UInt8.toUInt32_shiftLeft_of_lt","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L336-L337"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.toUInt16_shiftLeft_of_lt\"><span class=\"name\">UInt8</span>.<span class=\"name\">toUInt16_shiftLeft_of_lt</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">8</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toUInt16\">toUInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toUInt16\">toUInt16</a></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toUInt16\">toUInt16</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">256</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.toUInt16_shiftLeft_of_lt","kind":"theorem","line":334,"name":"UInt8.toUInt16_shiftLeft_of_lt","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L334-L335"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.toUSize_shiftLeft_mod\"><span class=\"name\">UInt64</span>.<span class=\"name\">toUSize_shiftLeft_mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#UInt64.ofNat\">ofNat</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a></span>)).<a href=\"./Init/Data/UInt/Basic.html#UInt64.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/Basic.html#UInt64.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/Basic.html#UInt64.toUSize\">toUSize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.toUSize_shiftLeft_mod","kind":"theorem","line":328,"name":"UInt64.toUSize_shiftLeft_mod","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L328-L332"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.toUInt32_shiftLeft_mod\"><span class=\"name\">UInt64</span>.<span class=\"name\">toUInt32_shiftLeft_mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">32</span>)).<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toUInt32\">toUInt32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.toUInt32_shiftLeft_mod","kind":"theorem","line":325,"name":"UInt64.toUInt32_shiftLeft_mod","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L325-L327"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.toUInt16_shiftLeft_mod\"><span class=\"name\">UInt64</span>.<span class=\"name\">toUInt16_shiftLeft_mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">16</span>)).<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toUInt16\">toUInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toUInt16\">toUInt16</a></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toUInt16\">toUInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.toUInt16_shiftLeft_mod","kind":"theorem","line":322,"name":"UInt64.toUInt16_shiftLeft_mod","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L322-L324"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.toUInt8_shiftLeft_mod\"><span class=\"name\">UInt64</span>.<span class=\"name\">toUInt8_shiftLeft_mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">8</span>)).<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toUInt8\">toUInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.toUInt8_shiftLeft_mod","kind":"theorem","line":319,"name":"UInt64.toUInt8_shiftLeft_mod","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L319-L321"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.toUInt32_shiftLeft_mod\"><span class=\"name\">USize</span>.<span class=\"name\">toUInt32_shiftLeft_mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">32</span>)).<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt32\">toUInt32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.toUInt32_shiftLeft_mod","kind":"theorem","line":315,"name":"USize.toUInt32_shiftLeft_mod","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L315-L317"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.toUInt16_shiftLeft_mod\"><span class=\"name\">USize</span>.<span class=\"name\">toUInt16_shiftLeft_mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">16</span>)).<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt16\">toUInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt16\">toUInt16</a></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt16\">toUInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.toUInt16_shiftLeft_mod","kind":"theorem","line":312,"name":"USize.toUInt16_shiftLeft_mod","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L312-L314"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.toUInt8_shiftLeft_mod\"><span class=\"name\">USize</span>.<span class=\"name\">toUInt8_shiftLeft_mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">8</span>)).<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt8\">toUInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.toUInt8_shiftLeft_mod","kind":"theorem","line":309,"name":"USize.toUInt8_shiftLeft_mod","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L309-L311"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.toUInt16_shiftLeft_mod\"><span class=\"name\">UInt32</span>.<span class=\"name\">toUInt16_shiftLeft_mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">16</span>)).<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt16\">toUInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt16\">toUInt16</a></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt16\">toUInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.toUInt16_shiftLeft_mod","kind":"theorem","line":305,"name":"UInt32.toUInt16_shiftLeft_mod","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L305-L307"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.toUInt8_shiftLeft_mod\"><span class=\"name\">UInt32</span>.<span class=\"name\">toUInt8_shiftLeft_mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">8</span>)).<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt8\">toUInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.toUInt8_shiftLeft_mod","kind":"theorem","line":302,"name":"UInt32.toUInt8_shiftLeft_mod","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L302-L304"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.toUInt8_shiftLeft_mod\"><span class=\"name\">UInt16</span>.<span class=\"name\">toUInt8_shiftLeft_mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">8</span>)).<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toUInt8\">toUInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.toUInt8_shiftLeft_mod","kind":"theorem","line":298,"name":"UInt16.toUInt8_shiftLeft_mod","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L298-L300"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.toUSize_shiftLeft\"><span class=\"name\">UInt64</span>.<span class=\"name\">toUSize_shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/Basic.html#UInt64.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/Basic.html#UInt64.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/Basic.html#UInt64.toUSize\">toUSize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.toUSize_shiftLeft","kind":"theorem","line":289,"name":"UInt64.toUSize_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L289-L296"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.toUInt32_shiftLeft\"><span class=\"name\">UInt64</span>.<span class=\"name\">toUInt32_shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">32</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toUInt32\">toUInt32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.toUInt32_shiftLeft","kind":"theorem","line":285,"name":"UInt64.toUInt32_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L285-L288"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.toUInt16_shiftLeft\"><span class=\"name\">UInt64</span>.<span class=\"name\">toUInt16_shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">16</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toUInt16\">toUInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toUInt16\">toUInt16</a></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toUInt16\">toUInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.toUInt16_shiftLeft","kind":"theorem","line":281,"name":"UInt64.toUInt16_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L281-L284"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.toUInt8_shiftLeft\"><span class=\"name\">UInt64</span>.<span class=\"name\">toUInt8_shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">8</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toUInt8\">toUInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.toUInt8_shiftLeft","kind":"theorem","line":277,"name":"UInt64.toUInt8_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L277-L280"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.toUInt32_shiftLeft\"><span class=\"name\">USize</span>.<span class=\"name\">toUInt32_shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">32</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt32\">toUInt32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.toUInt32_shiftLeft","kind":"theorem","line":272,"name":"USize.toUInt32_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L272-L275"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.toUInt16_shiftLeft\"><span class=\"name\">USize</span>.<span class=\"name\">toUInt16_shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">16</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt16\">toUInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt16\">toUInt16</a></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt16\">toUInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.toUInt16_shiftLeft","kind":"theorem","line":268,"name":"USize.toUInt16_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L268-L271"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.toUInt8_shiftLeft\"><span class=\"name\">USize</span>.<span class=\"name\">toUInt8_shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">8</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt8\">toUInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.toUInt8_shiftLeft","kind":"theorem","line":264,"name":"USize.toUInt8_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L264-L267"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.toUInt16_shiftLeft\"><span class=\"name\">UInt32</span>.<span class=\"name\">toUInt16_shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">16</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt16\">toUInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt16\">toUInt16</a></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt16\">toUInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.toUInt16_shiftLeft","kind":"theorem","line":259,"name":"UInt32.toUInt16_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L259-L262"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.toUInt8_shiftLeft\"><span class=\"name\">UInt32</span>.<span class=\"name\">toUInt8_shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">8</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt8\">toUInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.toUInt8_shiftLeft","kind":"theorem","line":255,"name":"UInt32.toUInt8_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L255-L258"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.toUInt8_shiftLeft\"><span class=\"name\">UInt16</span>.<span class=\"name\">toUInt8_shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">8</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toUInt8\">toUInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.toUInt8_shiftLeft","kind":"theorem","line":250,"name":"UInt16.toUInt8_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L250-L253"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.shiftRight_eq_shiftRight_mod\"><span class=\"name\">USize</span>.<span class=\"name\">shiftRight_eq_shiftRight_mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#USize.ofNat\">ofNat</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a></span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.shiftRight_eq_shiftRight_mod","kind":"theorem","line":247,"name":"USize.shiftRight_eq_shiftRight_mod","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L247-L248"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.shiftRight_eq_shiftRight_mod\"><span class=\"name\">UInt64</span>.<span class=\"name\">shiftRight_eq_shiftRight_mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">64</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.shiftRight_eq_shiftRight_mod","kind":"theorem","line":246,"name":"UInt64.shiftRight_eq_shiftRight_mod","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L246-L246"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.shiftRight_eq_shiftRight_mod\"><span class=\"name\">UInt32</span>.<span class=\"name\">shiftRight_eq_shiftRight_mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">32</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.shiftRight_eq_shiftRight_mod","kind":"theorem","line":245,"name":"UInt32.shiftRight_eq_shiftRight_mod","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L245-L245"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.shiftRight_eq_shiftRight_mod\"><span class=\"name\">UInt16</span>.<span class=\"name\">shiftRight_eq_shiftRight_mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">16</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.shiftRight_eq_shiftRight_mod","kind":"theorem","line":244,"name":"UInt16.shiftRight_eq_shiftRight_mod","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L244-L244"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.shiftRight_eq_shiftRight_mod\"><span class=\"name\">UInt8</span>.<span class=\"name\">shiftRight_eq_shiftRight_mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">8</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.shiftRight_eq_shiftRight_mod","kind":"theorem","line":243,"name":"UInt8.shiftRight_eq_shiftRight_mod","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L243-L243"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.shiftLeft_eq_shiftLeft_mod\"><span class=\"name\">USize</span>.<span class=\"name\">shiftLeft_eq_shiftLeft_mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#USize.ofNat\">ofNat</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a></span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.shiftLeft_eq_shiftLeft_mod","kind":"theorem","line":240,"name":"USize.shiftLeft_eq_shiftLeft_mod","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L240-L241"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.shiftLeft_eq_shiftLeft_mod\"><span class=\"name\">UInt64</span>.<span class=\"name\">shiftLeft_eq_shiftLeft_mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">64</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.shiftLeft_eq_shiftLeft_mod","kind":"theorem","line":239,"name":"UInt64.shiftLeft_eq_shiftLeft_mod","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L239-L239"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.shiftLeft_eq_shiftLeft_mod\"><span class=\"name\">UInt32</span>.<span class=\"name\">shiftLeft_eq_shiftLeft_mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">32</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.shiftLeft_eq_shiftLeft_mod","kind":"theorem","line":238,"name":"UInt32.shiftLeft_eq_shiftLeft_mod","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L238-L238"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.shiftLeft_eq_shiftLeft_mod\"><span class=\"name\">UInt16</span>.<span class=\"name\">shiftLeft_eq_shiftLeft_mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">16</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.shiftLeft_eq_shiftLeft_mod","kind":"theorem","line":237,"name":"UInt16.shiftLeft_eq_shiftLeft_mod","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L237-L237"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.shiftLeft_eq_shiftLeft_mod\"><span class=\"name\">UInt8</span>.<span class=\"name\">shiftLeft_eq_shiftLeft_mod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">8</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.shiftLeft_eq_shiftLeft_mod","kind":"theorem","line":236,"name":"UInt8.shiftLeft_eq_shiftLeft_mod","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L236-L236"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.toFin_shiftLeft\"><span class=\"name\">USize</span>.<span class=\"name\">toFin_shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#USize.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#USize.toFin\">toFin</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#USize.toFin\">toFin</a></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#USize.toFin\">toFin</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.toFin_shiftLeft","kind":"theorem","line":233,"name":"USize.toFin_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L233-L234"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.toFin_shiftLeft\"><span class=\"name\">UInt64</span>.<span class=\"name\">toFin_shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">64</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toFin\">toFin</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toFin\">toFin</a></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toFin\">toFin</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.toFin_shiftLeft","kind":"theorem","line":231,"name":"UInt64.toFin_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L231-L232"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.toFin_shiftLeft\"><span class=\"name\">UInt32</span>.<span class=\"name\">toFin_shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">32</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toFin\">toFin</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toFin\">toFin</a></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toFin\">toFin</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.toFin_shiftLeft","kind":"theorem","line":229,"name":"UInt32.toFin_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L229-L230"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.toFin_shiftLeft\"><span class=\"name\">UInt16</span>.<span class=\"name\">toFin_shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">16</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toFin\">toFin</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toFin\">toFin</a></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toFin\">toFin</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.toFin_shiftLeft","kind":"theorem","line":227,"name":"UInt16.toFin_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L227-L228"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.toFin_shiftLeft\"><span class=\"name\">UInt8</span>.<span class=\"name\">toFin_shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">8</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toFin\">toFin</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toFin\">toFin</a></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toFin\">toFin</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.toFin_shiftLeft","kind":"theorem","line":225,"name":"UInt8.toFin_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L225-L226"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.toUInt64_not\"><span class=\"name\">USize</span>.<span class=\"name\">toUInt64_not</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>).<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><a href=\"./Init/Data/UInt/BasicAux.html#UInt64.ofNat\">UInt64.ofNat</a> <a href=\"./Init/Prelude.html#USize.size\">size</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.toUInt64_not","kind":"theorem","line":222,"name":"USize.toUInt64_not","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L222-L223"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.toUSize_not\"><span class=\"name\">UInt32</span>.<span class=\"name\">toUSize_not</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>).<a href=\"./Init/Data/UInt/Basic.html#UInt32.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/Basic.html#UInt32.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">4294967296</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.toUSize_not","kind":"theorem","line":219,"name":"UInt32.toUSize_not","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L219-L220"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.toUInt64_not\"><span class=\"name\">UInt32</span>.<span class=\"name\">toUInt64_not</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">4294967296</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.toUInt64_not","kind":"theorem","line":217,"name":"UInt32.toUInt64_not","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L217-L218"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.toUSize_not\"><span class=\"name\">UInt16</span>.<span class=\"name\">toUSize_not</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>).<a href=\"./Init/Data/UInt/Basic.html#UInt16.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/Basic.html#UInt16.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">65536</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.toUSize_not","kind":"theorem","line":214,"name":"UInt16.toUSize_not","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L214-L215"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.toUInt64_not\"><span class=\"name\">UInt16</span>.<span class=\"name\">toUInt64_not</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">65536</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.toUInt64_not","kind":"theorem","line":212,"name":"UInt16.toUInt64_not","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L212-L213"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.toUInt32_not\"><span class=\"name\">UInt16</span>.<span class=\"name\">toUInt32_not</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">65536</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.toUInt32_not","kind":"theorem","line":210,"name":"UInt16.toUInt32_not","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L210-L211"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.toUSize_not\"><span class=\"name\">UInt8</span>.<span class=\"name\">toUSize_not</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>).<a href=\"./Init/Data/UInt/Basic.html#UInt8.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/Basic.html#UInt8.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">256</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.toUSize_not","kind":"theorem","line":207,"name":"UInt8.toUSize_not","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L207-L208"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.toUInt64_not\"><span class=\"name\">UInt8</span>.<span class=\"name\">toUInt64_not</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">256</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.toUInt64_not","kind":"theorem","line":205,"name":"UInt8.toUInt64_not","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L205-L206"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.toUInt32_not\"><span class=\"name\">UInt8</span>.<span class=\"name\">toUInt32_not</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">256</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.toUInt32_not","kind":"theorem","line":203,"name":"UInt8.toUInt32_not","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L203-L204"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.toUInt16_not\"><span class=\"name\">UInt8</span>.<span class=\"name\">toUInt16_not</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toUInt16\">toUInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toUInt16\">toUInt16</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">256</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.toUInt16_not","kind":"theorem","line":201,"name":"UInt8.toUInt16_not","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L201-L202"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.toUSize_not\"><span class=\"name\">UInt64</span>.<span class=\"name\">toUSize_not</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>).<a href=\"./Init/Data/UInt/Basic.html#UInt64.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/Basic.html#UInt64.toUSize\">toUSize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.toUSize_not","kind":"theorem","line":199,"name":"UInt64.toUSize_not","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L199-L199"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.toUInt32_not\"><span class=\"name\">USize</span>.<span class=\"name\">toUInt32_not</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>).<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt32\">toUInt32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.toUInt32_not","kind":"theorem","line":197,"name":"USize.toUInt32_not","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L197-L197"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.toUInt32_not\"><span class=\"name\">UInt64</span>.<span class=\"name\">toUInt32_not</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toUInt32\">toUInt32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.toUInt32_not","kind":"theorem","line":196,"name":"UInt64.toUInt32_not","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L196-L196"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.toUInt16_not\"><span class=\"name\">USize</span>.<span class=\"name\">toUInt16_not</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>).<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt16\">toUInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt16\">toUInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.toUInt16_not","kind":"theorem","line":194,"name":"USize.toUInt16_not","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L194-L194"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.toUInt16_not\"><span class=\"name\">UInt64</span>.<span class=\"name\">toUInt16_not</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toUInt16\">toUInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toUInt16\">toUInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.toUInt16_not","kind":"theorem","line":193,"name":"UInt64.toUInt16_not","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L193-L193"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.toUInt16_not\"><span class=\"name\">UInt32</span>.<span class=\"name\">toUInt16_not</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt16\">toUInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt16\">toUInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.toUInt16_not","kind":"theorem","line":192,"name":"UInt32.toUInt16_not","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L192-L192"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.toUInt8_not\"><span class=\"name\">USize</span>.<span class=\"name\">toUInt8_not</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>).<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt8\">toUInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.toUInt8_not","kind":"theorem","line":190,"name":"USize.toUInt8_not","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L190-L190"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.toUInt8_not\"><span class=\"name\">UInt64</span>.<span class=\"name\">toUInt8_not</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toUInt8\">toUInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.toUInt8_not","kind":"theorem","line":189,"name":"UInt64.toUInt8_not","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L189-L189"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.toUInt8_not\"><span class=\"name\">UInt32</span>.<span class=\"name\">toUInt8_not</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt8\">toUInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.toUInt8_not","kind":"theorem","line":188,"name":"UInt32.toUInt8_not","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L188-L188"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.toUInt8_not\"><span class=\"name\">UInt16</span>.<span class=\"name\">toUInt8_not</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toUInt8\">toUInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.toUInt8_not","kind":"theorem","line":187,"name":"UInt16.toUInt8_not","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L187-L187"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.toFin_not\"><span class=\"name\">USize</span>.<span class=\"name\">toFin_not</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>).<a href=\"./Init/Data/UInt/BasicAux.html#USize.toFin\">toFin</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#USize.toFin\">toFin</a></span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.rev\">rev</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.toFin_not","kind":"theorem","line":184,"name":"USize.toFin_not","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L184-L185"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.toFin_not\"><span class=\"name\">UInt64</span>.<span class=\"name\">toFin_not</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toFin\">toFin</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toFin\">toFin</a></span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.rev\">rev</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.toFin_not","kind":"theorem","line":182,"name":"UInt64.toFin_not","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L182-L183"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.toFin_not\"><span class=\"name\">UInt32</span>.<span class=\"name\">toFin_not</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toFin\">toFin</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toFin\">toFin</a></span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.rev\">rev</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.toFin_not","kind":"theorem","line":180,"name":"UInt32.toFin_not","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L180-L181"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.toFin_not\"><span class=\"name\">UInt16</span>.<span class=\"name\">toFin_not</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toFin\">toFin</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toFin\">toFin</a></span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.rev\">rev</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.toFin_not","kind":"theorem","line":178,"name":"UInt16.toFin_not","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L178-L179"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.toFin_not\"><span class=\"name\">UInt8</span>.<span class=\"name\">toFin_not</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toFin\">toFin</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toFin\">toFin</a></span>.<a href=\"./Init/Data/Fin/Basic.html#Fin.rev\">rev</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.toFin_not","kind":"theorem","line":176,"name":"UInt8.toFin_not","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L176-L177"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.toNat_not\"><span class=\"name\">USize</span>.<span class=\"name\">toNat_not</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>).<a href=\"./Init/Data/UInt/BasicAux.html#USize.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#USize.size\">size</a> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#USize.toNat\">toNat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.toNat_not","kind":"theorem","line":173,"name":"USize.toNat_not","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L173-L174"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.toNat_not\"><span class=\"name\">UInt64</span>.<span class=\"name\">toNat_not</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#UInt64.size\">size</a> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toNat\">toNat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.toNat_not","kind":"theorem","line":171,"name":"UInt64.toNat_not","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L171-L172"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.toNat_not\"><span class=\"name\">UInt32</span>.<span class=\"name\">toNat_not</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>).<a href=\"./Init/Prelude.html#UInt32.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#UInt32.size\">size</a> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#UInt32.toNat\">toNat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.toNat_not","kind":"theorem","line":169,"name":"UInt32.toNat_not","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L169-L170"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.toNat_not\"><span class=\"name\">UInt16</span>.<span class=\"name\">toNat_not</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#UInt16.size\">size</a> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toNat\">toNat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.toNat_not","kind":"theorem","line":167,"name":"UInt16.toNat_not","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L167-L168"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.toNat_not\"><span class=\"name\">UInt8</span>.<span class=\"name\">toNat_not</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#UInt8.size\">size</a> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toNat\">toNat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.toNat_not","kind":"theorem","line":165,"name":"UInt8.toNat_not","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L165-L166"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.toUSize_xor\"><span class=\"name\">UInt64</span>.<span class=\"name\">toUSize_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/Basic.html#UInt64.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/Basic.html#UInt64.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/Basic.html#UInt64.toUSize\">toUSize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.toUSize_xor","kind":"theorem","line":163,"name":"UInt64.toUSize_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L163-L163"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.toUInt32_xor\"><span class=\"name\">UInt64</span>.<span class=\"name\">toUInt32_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toUInt32\">toUInt32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.toUInt32_xor","kind":"theorem","line":162,"name":"UInt64.toUInt32_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L162-L162"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.toUInt16_xor\"><span class=\"name\">UInt64</span>.<span class=\"name\">toUInt16_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toUInt16\">toUInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toUInt16\">toUInt16</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toUInt16\">toUInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.toUInt16_xor","kind":"theorem","line":161,"name":"UInt64.toUInt16_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L161-L161"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.toUInt8_xor\"><span class=\"name\">UInt64</span>.<span class=\"name\">toUInt8_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toUInt8\">toUInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.toUInt8_xor","kind":"theorem","line":160,"name":"UInt64.toUInt8_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L160-L160"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.toUInt64_xor\"><span class=\"name\">USize</span>.<span class=\"name\">toUInt64_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt64\">toUInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.toUInt64_xor","kind":"theorem","line":158,"name":"USize.toUInt64_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L158-L158"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.toUInt32_xor\"><span class=\"name\">USize</span>.<span class=\"name\">toUInt32_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt32\">toUInt32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.toUInt32_xor","kind":"theorem","line":157,"name":"USize.toUInt32_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L157-L157"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.toUInt16_xor\"><span class=\"name\">USize</span>.<span class=\"name\">toUInt16_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt16\">toUInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt16\">toUInt16</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt16\">toUInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.toUInt16_xor","kind":"theorem","line":156,"name":"USize.toUInt16_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L156-L156"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.toUInt8_xor\"><span class=\"name\">USize</span>.<span class=\"name\">toUInt8_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt8\">toUInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.toUInt8_xor","kind":"theorem","line":155,"name":"USize.toUInt8_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L155-L155"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.toUSize_xor\"><span class=\"name\">UInt32</span>.<span class=\"name\">toUSize_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/Basic.html#UInt32.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/Basic.html#UInt32.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/Basic.html#UInt32.toUSize\">toUSize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.toUSize_xor","kind":"theorem","line":153,"name":"UInt32.toUSize_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L153-L153"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.toUInt64_xor\"><span class=\"name\">UInt32</span>.<span class=\"name\">toUInt64_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt64\">toUInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.toUInt64_xor","kind":"theorem","line":152,"name":"UInt32.toUInt64_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L152-L152"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.toUInt16_xor\"><span class=\"name\">UInt32</span>.<span class=\"name\">toUInt16_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt16\">toUInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt16\">toUInt16</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt16\">toUInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.toUInt16_xor","kind":"theorem","line":151,"name":"UInt32.toUInt16_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L151-L151"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.toUInt8_xor\"><span class=\"name\">UInt32</span>.<span class=\"name\">toUInt8_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt8\">toUInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.toUInt8_xor","kind":"theorem","line":150,"name":"UInt32.toUInt8_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L150-L150"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.toUSize_xor\"><span class=\"name\">UInt16</span>.<span class=\"name\">toUSize_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/Basic.html#UInt16.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/Basic.html#UInt16.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/Basic.html#UInt16.toUSize\">toUSize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.toUSize_xor","kind":"theorem","line":148,"name":"UInt16.toUSize_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L148-L148"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.toUInt64_xor\"><span class=\"name\">UInt16</span>.<span class=\"name\">toUInt64_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toUInt64\">toUInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.toUInt64_xor","kind":"theorem","line":147,"name":"UInt16.toUInt64_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L147-L147"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.toUInt32_xor\"><span class=\"name\">UInt16</span>.<span class=\"name\">toUInt32_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toUInt32\">toUInt32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.toUInt32_xor","kind":"theorem","line":146,"name":"UInt16.toUInt32_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L146-L146"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.toUInt8_xor\"><span class=\"name\">UInt16</span>.<span class=\"name\">toUInt8_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toUInt8\">toUInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.toUInt8_xor","kind":"theorem","line":145,"name":"UInt16.toUInt8_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L145-L145"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.toUSize_xor\"><span class=\"name\">UInt8</span>.<span class=\"name\">toUSize_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/Basic.html#UInt8.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/Basic.html#UInt8.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/Basic.html#UInt8.toUSize\">toUSize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.toUSize_xor","kind":"theorem","line":143,"name":"UInt8.toUSize_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L143-L143"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.toUInt64_xor\"><span class=\"name\">UInt8</span>.<span class=\"name\">toUInt64_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toUInt64\">toUInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.toUInt64_xor","kind":"theorem","line":142,"name":"UInt8.toUInt64_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L142-L142"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.toUInt32_xor\"><span class=\"name\">UInt8</span>.<span class=\"name\">toUInt32_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toUInt32\">toUInt32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.toUInt32_xor","kind":"theorem","line":141,"name":"UInt8.toUInt32_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L141-L141"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.toUInt16_xor\"><span class=\"name\">UInt8</span>.<span class=\"name\">toUInt16_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toUInt16\">toUInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toUInt16\">toUInt16</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toUInt16\">toUInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.toUInt16_xor","kind":"theorem","line":140,"name":"UInt8.toUInt16_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L140-L140"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.toFin_xor\"><span class=\"name\">USize</span>.<span class=\"name\">toFin_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#USize.toFin\">toFin</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#USize.toFin\">toFin</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#USize.toFin\">toFin</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.toFin_xor","kind":"theorem","line":138,"name":"USize.toFin_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L138-L138"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.toFin_xor\"><span class=\"name\">UInt64</span>.<span class=\"name\">toFin_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toFin\">toFin</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toFin\">toFin</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toFin\">toFin</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.toFin_xor","kind":"theorem","line":137,"name":"UInt64.toFin_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L137-L137"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.toFin_xor\"><span class=\"name\">UInt32</span>.<span class=\"name\">toFin_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toFin\">toFin</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toFin\">toFin</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toFin\">toFin</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.toFin_xor","kind":"theorem","line":136,"name":"UInt32.toFin_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L136-L136"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.toFin_xor\"><span class=\"name\">UInt16</span>.<span class=\"name\">toFin_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toFin\">toFin</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toFin\">toFin</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toFin\">toFin</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.toFin_xor","kind":"theorem","line":135,"name":"UInt16.toFin_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L135-L135"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.toFin_xor\"><span class=\"name\">UInt8</span>.<span class=\"name\">toFin_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toFin\">toFin</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toFin\">toFin</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toFin\">toFin</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.toFin_xor","kind":"theorem","line":134,"name":"UInt8.toFin_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L134-L134"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.toUSize_or\"><span class=\"name\">UInt64</span>.<span class=\"name\">toUSize_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/Basic.html#UInt64.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/Basic.html#UInt64.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/Basic.html#UInt64.toUSize\">toUSize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.toUSize_or","kind":"theorem","line":132,"name":"UInt64.toUSize_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L132-L132"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.toUInt32_or\"><span class=\"name\">UInt64</span>.<span class=\"name\">toUInt32_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toUInt32\">toUInt32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.toUInt32_or","kind":"theorem","line":131,"name":"UInt64.toUInt32_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L131-L131"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.toUInt16_or\"><span class=\"name\">UInt64</span>.<span class=\"name\">toUInt16_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toUInt16\">toUInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toUInt16\">toUInt16</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toUInt16\">toUInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.toUInt16_or","kind":"theorem","line":130,"name":"UInt64.toUInt16_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L130-L130"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.toUInt8_or\"><span class=\"name\">UInt64</span>.<span class=\"name\">toUInt8_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toUInt8\">toUInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.toUInt8_or","kind":"theorem","line":129,"name":"UInt64.toUInt8_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L129-L129"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.toUInt64_or\"><span class=\"name\">USize</span>.<span class=\"name\">toUInt64_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt64\">toUInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.toUInt64_or","kind":"theorem","line":127,"name":"USize.toUInt64_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L127-L127"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.toUInt32_or\"><span class=\"name\">USize</span>.<span class=\"name\">toUInt32_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt32\">toUInt32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.toUInt32_or","kind":"theorem","line":126,"name":"USize.toUInt32_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L126-L126"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.toUInt16_or\"><span class=\"name\">USize</span>.<span class=\"name\">toUInt16_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt16\">toUInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt16\">toUInt16</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt16\">toUInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.toUInt16_or","kind":"theorem","line":125,"name":"USize.toUInt16_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L125-L125"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.toUInt8_or\"><span class=\"name\">USize</span>.<span class=\"name\">toUInt8_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt8\">toUInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.toUInt8_or","kind":"theorem","line":124,"name":"USize.toUInt8_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L124-L124"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.toUSize_or\"><span class=\"name\">UInt32</span>.<span class=\"name\">toUSize_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/Basic.html#UInt32.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/Basic.html#UInt32.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/Basic.html#UInt32.toUSize\">toUSize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.toUSize_or","kind":"theorem","line":122,"name":"UInt32.toUSize_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L122-L122"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.toUInt64_or\"><span class=\"name\">UInt32</span>.<span class=\"name\">toUInt64_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt64\">toUInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.toUInt64_or","kind":"theorem","line":121,"name":"UInt32.toUInt64_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L121-L121"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.toUInt16_or\"><span class=\"name\">UInt32</span>.<span class=\"name\">toUInt16_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt16\">toUInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt16\">toUInt16</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt16\">toUInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.toUInt16_or","kind":"theorem","line":120,"name":"UInt32.toUInt16_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L120-L120"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.toUInt8_or\"><span class=\"name\">UInt32</span>.<span class=\"name\">toUInt8_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt8\">toUInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.toUInt8_or","kind":"theorem","line":119,"name":"UInt32.toUInt8_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L119-L119"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.toUSize_or\"><span class=\"name\">UInt16</span>.<span class=\"name\">toUSize_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/Basic.html#UInt16.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/Basic.html#UInt16.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/Basic.html#UInt16.toUSize\">toUSize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.toUSize_or","kind":"theorem","line":117,"name":"UInt16.toUSize_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L117-L117"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.toUInt64_or\"><span class=\"name\">UInt16</span>.<span class=\"name\">toUInt64_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toUInt64\">toUInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.toUInt64_or","kind":"theorem","line":116,"name":"UInt16.toUInt64_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L116-L116"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.toUInt32_or\"><span class=\"name\">UInt16</span>.<span class=\"name\">toUInt32_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toUInt32\">toUInt32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.toUInt32_or","kind":"theorem","line":115,"name":"UInt16.toUInt32_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L115-L115"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.toUInt8_or\"><span class=\"name\">UInt16</span>.<span class=\"name\">toUInt8_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toUInt8\">toUInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.toUInt8_or","kind":"theorem","line":114,"name":"UInt16.toUInt8_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L114-L114"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.toUSize_or\"><span class=\"name\">UInt8</span>.<span class=\"name\">toUSize_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/Basic.html#UInt8.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/Basic.html#UInt8.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/Basic.html#UInt8.toUSize\">toUSize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.toUSize_or","kind":"theorem","line":112,"name":"UInt8.toUSize_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L112-L112"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.toUInt64_or\"><span class=\"name\">UInt8</span>.<span class=\"name\">toUInt64_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toUInt64\">toUInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.toUInt64_or","kind":"theorem","line":111,"name":"UInt8.toUInt64_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L111-L111"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.toUInt32_or\"><span class=\"name\">UInt8</span>.<span class=\"name\">toUInt32_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toUInt32\">toUInt32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.toUInt32_or","kind":"theorem","line":110,"name":"UInt8.toUInt32_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.toUInt16_or\"><span class=\"name\">UInt8</span>.<span class=\"name\">toUInt16_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toUInt16\">toUInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toUInt16\">toUInt16</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toUInt16\">toUInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.toUInt16_or","kind":"theorem","line":109,"name":"UInt8.toUInt16_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L109-L109"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.toFin_or\"><span class=\"name\">USize</span>.<span class=\"name\">toFin_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#USize.toFin\">toFin</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#USize.toFin\">toFin</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#USize.toFin\">toFin</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.toFin_or","kind":"theorem","line":107,"name":"USize.toFin_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L107-L107"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.toFin_or\"><span class=\"name\">UInt64</span>.<span class=\"name\">toFin_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toFin\">toFin</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toFin\">toFin</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toFin\">toFin</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.toFin_or","kind":"theorem","line":106,"name":"UInt64.toFin_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L106-L106"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.toFin_or\"><span class=\"name\">UInt32</span>.<span class=\"name\">toFin_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toFin\">toFin</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toFin\">toFin</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toFin\">toFin</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.toFin_or","kind":"theorem","line":105,"name":"UInt32.toFin_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L105-L105"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.toFin_or\"><span class=\"name\">UInt16</span>.<span class=\"name\">toFin_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toFin\">toFin</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toFin\">toFin</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toFin\">toFin</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.toFin_or","kind":"theorem","line":104,"name":"UInt16.toFin_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L104-L104"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.toFin_or\"><span class=\"name\">UInt8</span>.<span class=\"name\">toFin_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toFin\">toFin</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toFin\">toFin</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toFin\">toFin</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.toFin_or","kind":"theorem","line":103,"name":"UInt8.toFin_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L103-L103"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.toUSize_and\"><span class=\"name\">UInt64</span>.<span class=\"name\">toUSize_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/Basic.html#UInt64.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/Basic.html#UInt64.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/Basic.html#UInt64.toUSize\">toUSize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.toUSize_and","kind":"theorem","line":101,"name":"UInt64.toUSize_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L101-L101"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.toUInt32_and\"><span class=\"name\">UInt64</span>.<span class=\"name\">toUInt32_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toUInt32\">toUInt32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.toUInt32_and","kind":"theorem","line":100,"name":"UInt64.toUInt32_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L100-L100"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.toUInt16_and\"><span class=\"name\">UInt64</span>.<span class=\"name\">toUInt16_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toUInt16\">toUInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toUInt16\">toUInt16</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toUInt16\">toUInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.toUInt16_and","kind":"theorem","line":99,"name":"UInt64.toUInt16_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L99-L99"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.toUInt8_and\"><span class=\"name\">UInt64</span>.<span class=\"name\">toUInt8_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toUInt8\">toUInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.toUInt8_and","kind":"theorem","line":98,"name":"UInt64.toUInt8_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L98-L98"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.toUInt64_and\"><span class=\"name\">USize</span>.<span class=\"name\">toUInt64_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt64\">toUInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.toUInt64_and","kind":"theorem","line":96,"name":"USize.toUInt64_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L96-L96"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.toUInt32_and\"><span class=\"name\">USize</span>.<span class=\"name\">toUInt32_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt32\">toUInt32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.toUInt32_and","kind":"theorem","line":95,"name":"USize.toUInt32_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L95-L95"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.toUInt16_and\"><span class=\"name\">USize</span>.<span class=\"name\">toUInt16_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt16\">toUInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt16\">toUInt16</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt16\">toUInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.toUInt16_and","kind":"theorem","line":94,"name":"USize.toUInt16_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L94-L94"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.toUInt8_and\"><span class=\"name\">USize</span>.<span class=\"name\">toUInt8_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/Basic.html#USize.toUInt8\">toUInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.toUInt8_and","kind":"theorem","line":93,"name":"USize.toUInt8_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L93-L93"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.toUSize_and\"><span class=\"name\">UInt32</span>.<span class=\"name\">toUSize_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/Basic.html#UInt32.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/Basic.html#UInt32.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/Basic.html#UInt32.toUSize\">toUSize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.toUSize_and","kind":"theorem","line":91,"name":"UInt32.toUSize_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L91-L91"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.toUInt64_and\"><span class=\"name\">UInt32</span>.<span class=\"name\">toUInt64_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt64\">toUInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.toUInt64_and","kind":"theorem","line":90,"name":"UInt32.toUInt64_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L90-L90"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.toUInt16_and\"><span class=\"name\">UInt32</span>.<span class=\"name\">toUInt16_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt16\">toUInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt16\">toUInt16</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt16\">toUInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.toUInt16_and","kind":"theorem","line":89,"name":"UInt32.toUInt16_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L89-L89"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.toUInt8_and\"><span class=\"name\">UInt32</span>.<span class=\"name\">toUInt8_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toUInt8\">toUInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.toUInt8_and","kind":"theorem","line":88,"name":"UInt32.toUInt8_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L88-L88"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.toUSize_and\"><span class=\"name\">UInt16</span>.<span class=\"name\">toUSize_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/Basic.html#UInt16.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/Basic.html#UInt16.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/Basic.html#UInt16.toUSize\">toUSize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.toUSize_and","kind":"theorem","line":86,"name":"UInt16.toUSize_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L86-L86"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.toUInt64_and\"><span class=\"name\">UInt16</span>.<span class=\"name\">toUInt64_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toUInt64\">toUInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.toUInt64_and","kind":"theorem","line":85,"name":"UInt16.toUInt64_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L85-L85"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.toUInt32_and\"><span class=\"name\">UInt16</span>.<span class=\"name\">toUInt32_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toUInt32\">toUInt32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.toUInt32_and","kind":"theorem","line":84,"name":"UInt16.toUInt32_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L84-L84"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.toUInt8_and\"><span class=\"name\">UInt16</span>.<span class=\"name\">toUInt8_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toUInt8\">toUInt8</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toUInt8\">toUInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.toUInt8_and","kind":"theorem","line":83,"name":"UInt16.toUInt8_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L83-L83"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.toUSize_and\"><span class=\"name\">UInt8</span>.<span class=\"name\">toUSize_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/Basic.html#UInt8.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/Basic.html#UInt8.toUSize\">toUSize</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/Basic.html#UInt8.toUSize\">toUSize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.toUSize_and","kind":"theorem","line":81,"name":"UInt8.toUSize_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L81-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.toUInt64_and\"><span class=\"name\">UInt8</span>.<span class=\"name\">toUInt64_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toUInt64\">toUInt64</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toUInt64\">toUInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.toUInt64_and","kind":"theorem","line":80,"name":"UInt8.toUInt64_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L80-L80"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.toUInt32_and\"><span class=\"name\">UInt8</span>.<span class=\"name\">toUInt32_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toUInt32\">toUInt32</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toUInt32\">toUInt32</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.toUInt32_and","kind":"theorem","line":79,"name":"UInt8.toUInt32_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L79-L79"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.toUInt16_and\"><span class=\"name\">UInt8</span>.<span class=\"name\">toUInt16_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toUInt16\">toUInt16</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toUInt16\">toUInt16</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toUInt16\">toUInt16</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.toUInt16_and","kind":"theorem","line":78,"name":"UInt8.toUInt16_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L78-L78"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.toFin_and\"><span class=\"name\">USize</span>.<span class=\"name\">toFin_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#USize.toFin\">toFin</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#USize.toFin\">toFin</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#USize.toFin\">toFin</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.toFin_and","kind":"theorem","line":76,"name":"USize.toFin_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L76-L76"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.toFin_and\"><span class=\"name\">UInt64</span>.<span class=\"name\">toFin_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toFin\">toFin</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toFin\">toFin</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toFin\">toFin</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.toFin_and","kind":"theorem","line":75,"name":"UInt64.toFin_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L75-L75"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.toFin_and\"><span class=\"name\">UInt32</span>.<span class=\"name\">toFin_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toFin\">toFin</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toFin\">toFin</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt32.toFin\">toFin</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.toFin_and","kind":"theorem","line":74,"name":"UInt32.toFin_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L74-L74"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.toFin_and\"><span class=\"name\">UInt16</span>.<span class=\"name\">toFin_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toFin\">toFin</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toFin\">toFin</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toFin\">toFin</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.toFin_and","kind":"theorem","line":73,"name":"UInt16.toFin_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L73-L73"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.toFin_and\"><span class=\"name\">UInt8</span>.<span class=\"name\">toFin_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toFin\">toFin</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toFin\">toFin</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toFin\">toFin</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.toFin_and","kind":"theorem","line":72,"name":"UInt8.toFin_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L72-L72"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#Bool.toBitVec_toUSize\"><span class=\"name\">Bool</span>.<span class=\"name\">toBitVec_toUSize</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/Basic.html#Bool.toUSize\">toUSize</a></span>.<a href=\"./Init/Prelude.html#USize.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.setWidth\">BitVec.setWidth</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.ofBool\">BitVec.ofBool</a> <span class=\"fn\">b</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#Bool.toBitVec_toUSize","kind":"theorem","line":64,"name":"Bool.toBitVec_toUSize","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L64-L70"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#Bool.toBitVec_toUInt64\"><span class=\"name\">Bool</span>.<span class=\"name\">toBitVec_toUInt64</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/Basic.html#Bool.toUInt64\">toUInt64</a></span>.<a href=\"./Init/Prelude.html#UInt64.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.setWidth\">BitVec.setWidth</a> <span class=\"fn\">64</span> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.ofBool\">BitVec.ofBool</a> <span class=\"fn\">b</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#Bool.toBitVec_toUInt64","kind":"theorem","line":59,"name":"Bool.toBitVec_toUInt64","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L59-L62"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#Bool.toBitVec_toUInt32\"><span class=\"name\">Bool</span>.<span class=\"name\">toBitVec_toUInt32</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/Basic.html#Bool.toUInt32\">toUInt32</a></span>.<a href=\"./Init/Prelude.html#UInt32.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.setWidth\">BitVec.setWidth</a> <span class=\"fn\">32</span> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.ofBool\">BitVec.ofBool</a> <span class=\"fn\">b</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#Bool.toBitVec_toUInt32","kind":"theorem","line":54,"name":"Bool.toBitVec_toUInt32","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L54-L57"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#Bool.toBitVec_toUInt16\"><span class=\"name\">Bool</span>.<span class=\"name\">toBitVec_toUInt16</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/Basic.html#Bool.toUInt16\">toUInt16</a></span>.<a href=\"./Init/Prelude.html#UInt16.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.setWidth\">BitVec.setWidth</a> <span class=\"fn\">16</span> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.ofBool\">BitVec.ofBool</a> <span class=\"fn\">b</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#Bool.toBitVec_toUInt16","kind":"theorem","line":49,"name":"Bool.toBitVec_toUInt16","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L49-L52"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#Bool.toBitVec_toUInt8\"><span class=\"name\">Bool</span>.<span class=\"name\">toBitVec_toUInt8</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/Basic.html#Bool.toUInt8\">toUInt8</a></span>.<a href=\"./Init/Prelude.html#UInt8.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.setWidth\">BitVec.setWidth</a> <span class=\"fn\">8</span> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.ofBool\">BitVec.ofBool</a> <span class=\"fn\">b</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#Bool.toBitVec_toUInt8","kind":"theorem","line":44,"name":"Bool.toBitVec_toUInt8","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L44-L47"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.toBitVec_and\"><span class=\"name\">USize</span>.<span class=\"name\">toBitVec_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Prelude.html#USize.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#USize.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#USize.toBitVec\">toBitVec</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.toBitVec_and","kind":"theorem","line":42,"name":"USize.toBitVec_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L42-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.toBitVec_not\"><span class=\"name\">USize</span>.<span class=\"name\">toBitVec_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>).<a href=\"./Init/Prelude.html#USize.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#USize.toBitVec\">toBitVec</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.toBitVec_not","kind":"theorem","line":42,"name":"USize.toBitVec_not","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L42-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.toNat_and\"><span class=\"name\">USize</span>.<span class=\"name\">toNat_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#USize.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#USize.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#USize.toNat\">toNat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.toNat_and","kind":"theorem","line":42,"name":"USize.toNat_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L42-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.toNat_or\"><span class=\"name\">USize</span>.<span class=\"name\">toNat_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#USize.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#USize.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#USize.toNat\">toNat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.toNat_or","kind":"theorem","line":42,"name":"USize.toNat_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L42-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.toNat_xor\"><span class=\"name\">USize</span>.<span class=\"name\">toNat_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#USize.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#USize.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#USize.toNat\">toNat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.toNat_xor","kind":"theorem","line":42,"name":"USize.toNat_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L42-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.toBitVec_shiftRight\"><span class=\"name\">USize</span>.<span class=\"name\">toBitVec_shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Prelude.html#USize.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#USize.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> (<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#USize.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">↑<a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a></span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.toBitVec_shiftRight","kind":"theorem","line":42,"name":"USize.toBitVec_shiftRight","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L42-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.toNat_shiftRight\"><span class=\"name\">USize</span>.<span class=\"name\">toNat_shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#USize.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#USize.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> (<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#USize.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a>)</div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.toNat_shiftRight","kind":"theorem","line":42,"name":"USize.toNat_shiftRight","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L42-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.toBitVec_xor\"><span class=\"name\">USize</span>.<span class=\"name\">toBitVec_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Prelude.html#USize.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#USize.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#USize.toBitVec\">toBitVec</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.toBitVec_xor","kind":"theorem","line":42,"name":"USize.toBitVec_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L42-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.toNat_shiftLeft\"><span class=\"name\">USize</span>.<span class=\"name\">toNat_shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#USize.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#USize.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> (<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#USize.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a>) <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.toNat_shiftLeft","kind":"theorem","line":42,"name":"USize.toNat_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L42-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.toBitVec_or\"><span class=\"name\">USize</span>.<span class=\"name\">toBitVec_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Prelude.html#USize.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#USize.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#USize.toBitVec\">toBitVec</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.toBitVec_or","kind":"theorem","line":42,"name":"USize.toBitVec_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L42-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#USize.toBitVec_shiftLeft\"><span class=\"name\">USize</span>.<span class=\"name\">toBitVec_shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Prelude.html#USize.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#USize.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> (<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#USize.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">↑<a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a></span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#USize.toBitVec_shiftLeft","kind":"theorem","line":42,"name":"USize.toBitVec_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L42-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.toNat_shiftLeft\"><span class=\"name\">UInt64</span>.<span class=\"name\">toNat_shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> (<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">64</span>) <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">64</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.toNat_shiftLeft","kind":"theorem","line":41,"name":"UInt64.toNat_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.toBitVec_shiftRight\"><span class=\"name\">UInt64</span>.<span class=\"name\">toBitVec_shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Prelude.html#UInt64.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#UInt64.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> (<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#UInt64.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">64</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.toBitVec_shiftRight","kind":"theorem","line":41,"name":"UInt64.toBitVec_shiftRight","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.toBitVec_xor\"><span class=\"name\">UInt64</span>.<span class=\"name\">toBitVec_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Prelude.html#UInt64.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#UInt64.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#UInt64.toBitVec\">toBitVec</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.toBitVec_xor","kind":"theorem","line":41,"name":"UInt64.toBitVec_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.toNat_shiftRight\"><span class=\"name\">UInt64</span>.<span class=\"name\">toNat_shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> (<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">64</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.toNat_shiftRight","kind":"theorem","line":41,"name":"UInt64.toNat_shiftRight","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.toBitVec_shiftLeft\"><span class=\"name\">UInt64</span>.<span class=\"name\">toBitVec_shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Prelude.html#UInt64.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#UInt64.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> (<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#UInt64.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">64</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.toBitVec_shiftLeft","kind":"theorem","line":41,"name":"UInt64.toBitVec_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.toNat_xor\"><span class=\"name\">UInt64</span>.<span class=\"name\">toNat_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toNat\">toNat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.toNat_xor","kind":"theorem","line":41,"name":"UInt64.toNat_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.toNat_and\"><span class=\"name\">UInt64</span>.<span class=\"name\">toNat_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toNat\">toNat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.toNat_and","kind":"theorem","line":41,"name":"UInt64.toNat_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.toBitVec_and\"><span class=\"name\">UInt64</span>.<span class=\"name\">toBitVec_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Prelude.html#UInt64.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#UInt64.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#UInt64.toBitVec\">toBitVec</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.toBitVec_and","kind":"theorem","line":41,"name":"UInt64.toBitVec_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.toNat_or\"><span class=\"name\">UInt64</span>.<span class=\"name\">toNat_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt64.toNat\">toNat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.toNat_or","kind":"theorem","line":41,"name":"UInt64.toNat_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.toBitVec_or\"><span class=\"name\">UInt64</span>.<span class=\"name\">toBitVec_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Prelude.html#UInt64.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#UInt64.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#UInt64.toBitVec\">toBitVec</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.toBitVec_or","kind":"theorem","line":41,"name":"UInt64.toBitVec_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt64.toBitVec_not\"><span class=\"name\">UInt64</span>.<span class=\"name\">toBitVec_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt64\">UInt64</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>).<a href=\"./Init/Prelude.html#UInt64.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#UInt64.toBitVec\">toBitVec</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt64.toBitVec_not","kind":"theorem","line":41,"name":"UInt64.toBitVec_not","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.toNat_shiftLeft\"><span class=\"name\">UInt32</span>.<span class=\"name\">toNat_shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Prelude.html#UInt32.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#UInt32.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> (<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#UInt32.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">32</span>) <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">32</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.toNat_shiftLeft","kind":"theorem","line":40,"name":"UInt32.toNat_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L40-L40"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.toNat_and\"><span class=\"name\">UInt32</span>.<span class=\"name\">toNat_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Prelude.html#UInt32.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#UInt32.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#UInt32.toNat\">toNat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.toNat_and","kind":"theorem","line":40,"name":"UInt32.toNat_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L40-L40"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.toBitVec_shiftLeft\"><span class=\"name\">UInt32</span>.<span class=\"name\">toBitVec_shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Prelude.html#UInt32.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#UInt32.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> (<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#UInt32.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">32</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.toBitVec_shiftLeft","kind":"theorem","line":40,"name":"UInt32.toBitVec_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L40-L40"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.toNat_shiftRight\"><span class=\"name\">UInt32</span>.<span class=\"name\">toNat_shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Prelude.html#UInt32.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#UInt32.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> (<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#UInt32.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">32</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.toNat_shiftRight","kind":"theorem","line":40,"name":"UInt32.toNat_shiftRight","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L40-L40"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.toBitVec_or\"><span class=\"name\">UInt32</span>.<span class=\"name\">toBitVec_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Prelude.html#UInt32.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#UInt32.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#UInt32.toBitVec\">toBitVec</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.toBitVec_or","kind":"theorem","line":40,"name":"UInt32.toBitVec_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L40-L40"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.toBitVec_and\"><span class=\"name\">UInt32</span>.<span class=\"name\">toBitVec_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Prelude.html#UInt32.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#UInt32.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#UInt32.toBitVec\">toBitVec</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.toBitVec_and","kind":"theorem","line":40,"name":"UInt32.toBitVec_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L40-L40"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.toBitVec_shiftRight\"><span class=\"name\">UInt32</span>.<span class=\"name\">toBitVec_shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Prelude.html#UInt32.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#UInt32.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> (<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#UInt32.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">32</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.toBitVec_shiftRight","kind":"theorem","line":40,"name":"UInt32.toBitVec_shiftRight","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L40-L40"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.toBitVec_not\"><span class=\"name\">UInt32</span>.<span class=\"name\">toBitVec_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>).<a href=\"./Init/Prelude.html#UInt32.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#UInt32.toBitVec\">toBitVec</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.toBitVec_not","kind":"theorem","line":40,"name":"UInt32.toBitVec_not","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L40-L40"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.toNat_or\"><span class=\"name\">UInt32</span>.<span class=\"name\">toNat_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Prelude.html#UInt32.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#UInt32.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#UInt32.toNat\">toNat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.toNat_or","kind":"theorem","line":40,"name":"UInt32.toNat_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L40-L40"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.toBitVec_xor\"><span class=\"name\">UInt32</span>.<span class=\"name\">toBitVec_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Prelude.html#UInt32.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#UInt32.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#UInt32.toBitVec\">toBitVec</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.toBitVec_xor","kind":"theorem","line":40,"name":"UInt32.toBitVec_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L40-L40"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt32.toNat_xor\"><span class=\"name\">UInt32</span>.<span class=\"name\">toNat_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt32\">UInt32</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Prelude.html#UInt32.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#UInt32.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#UInt32.toNat\">toNat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt32.toNat_xor","kind":"theorem","line":40,"name":"UInt32.toNat_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L40-L40"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.toNat_shiftLeft\"><span class=\"name\">UInt16</span>.<span class=\"name\">toNat_shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> (<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">16</span>) <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">16</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.toNat_shiftLeft","kind":"theorem","line":39,"name":"UInt16.toNat_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L39-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.toBitVec_shiftRight\"><span class=\"name\">UInt16</span>.<span class=\"name\">toBitVec_shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Prelude.html#UInt16.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#UInt16.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> (<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#UInt16.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">16</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.toBitVec_shiftRight","kind":"theorem","line":39,"name":"UInt16.toBitVec_shiftRight","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L39-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.toBitVec_not\"><span class=\"name\">UInt16</span>.<span class=\"name\">toBitVec_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>).<a href=\"./Init/Prelude.html#UInt16.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#UInt16.toBitVec\">toBitVec</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.toBitVec_not","kind":"theorem","line":39,"name":"UInt16.toBitVec_not","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L39-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.toBitVec_xor\"><span class=\"name\">UInt16</span>.<span class=\"name\">toBitVec_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Prelude.html#UInt16.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#UInt16.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#UInt16.toBitVec\">toBitVec</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.toBitVec_xor","kind":"theorem","line":39,"name":"UInt16.toBitVec_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L39-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.toBitVec_and\"><span class=\"name\">UInt16</span>.<span class=\"name\">toBitVec_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Prelude.html#UInt16.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#UInt16.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#UInt16.toBitVec\">toBitVec</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.toBitVec_and","kind":"theorem","line":39,"name":"UInt16.toBitVec_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L39-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.toBitVec_or\"><span class=\"name\">UInt16</span>.<span class=\"name\">toBitVec_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Prelude.html#UInt16.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#UInt16.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#UInt16.toBitVec\">toBitVec</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.toBitVec_or","kind":"theorem","line":39,"name":"UInt16.toBitVec_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L39-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.toNat_and\"><span class=\"name\">UInt16</span>.<span class=\"name\">toNat_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toNat\">toNat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.toNat_and","kind":"theorem","line":39,"name":"UInt16.toNat_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L39-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.toNat_shiftRight\"><span class=\"name\">UInt16</span>.<span class=\"name\">toNat_shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> (<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">16</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.toNat_shiftRight","kind":"theorem","line":39,"name":"UInt16.toNat_shiftRight","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L39-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.toNat_or\"><span class=\"name\">UInt16</span>.<span class=\"name\">toNat_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toNat\">toNat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.toNat_or","kind":"theorem","line":39,"name":"UInt16.toNat_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L39-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.toNat_xor\"><span class=\"name\">UInt16</span>.<span class=\"name\">toNat_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt16.toNat\">toNat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.toNat_xor","kind":"theorem","line":39,"name":"UInt16.toNat_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L39-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt16.toBitVec_shiftLeft\"><span class=\"name\">UInt16</span>.<span class=\"name\">toBitVec_shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt16\">UInt16</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Prelude.html#UInt16.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#UInt16.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> (<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#UInt16.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">16</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt16.toBitVec_shiftLeft","kind":"theorem","line":39,"name":"UInt16.toBitVec_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L39-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.toBitVec_or\"><span class=\"name\">UInt8</span>.<span class=\"name\">toBitVec_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Prelude.html#UInt8.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#UInt8.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#UInt8.toBitVec\">toBitVec</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.toBitVec_or","kind":"theorem","line":38,"name":"UInt8.toBitVec_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L38-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.toBitVec_xor\"><span class=\"name\">UInt8</span>.<span class=\"name\">toBitVec_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Prelude.html#UInt8.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#UInt8.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#UInt8.toBitVec\">toBitVec</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.toBitVec_xor","kind":"theorem","line":38,"name":"UInt8.toBitVec_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L38-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.toNat_and\"><span class=\"name\">UInt8</span>.<span class=\"name\">toNat_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toNat\">toNat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.toNat_and","kind":"theorem","line":38,"name":"UInt8.toNat_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L38-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.toNat_shiftLeft\"><span class=\"name\">UInt8</span>.<span class=\"name\">toNat_shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> (<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">8</span>) <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">8</span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.toNat_shiftLeft","kind":"theorem","line":38,"name":"UInt8.toNat_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L38-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.toBitVec_shiftRight\"><span class=\"name\">UInt8</span>.<span class=\"name\">toBitVec_shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Prelude.html#UInt8.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#UInt8.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> (<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#UInt8.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">8</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.toBitVec_shiftRight","kind":"theorem","line":38,"name":"UInt8.toBitVec_shiftRight","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L38-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.toBitVec_not\"><span class=\"name\">UInt8</span>.<span class=\"name\">toBitVec_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span>).<a href=\"./Init/Prelude.html#UInt8.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#UInt8.toBitVec\">toBitVec</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.toBitVec_not","kind":"theorem","line":38,"name":"UInt8.toBitVec_not","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L38-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.toNat_shiftRight\"><span class=\"name\">UInt8</span>.<span class=\"name\">toNat_shiftRight</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> (<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">8</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.toNat_shiftRight","kind":"theorem","line":38,"name":"UInt8.toNat_shiftRight","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L38-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.toNat_or\"><span class=\"name\">UInt8</span>.<span class=\"name\">toNat_or</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toNat\">toNat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.toNat_or","kind":"theorem","line":38,"name":"UInt8.toNat_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L38-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.toBitVec_and\"><span class=\"name\">UInt8</span>.<span class=\"name\">toBitVec_and</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Prelude.html#UInt8.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#UInt8.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#UInt8.toBitVec\">toBitVec</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.toBitVec_and","kind":"theorem","line":38,"name":"UInt8.toBitVec_and","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L38-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.toNat_xor\"><span class=\"name\">UInt8</span>.<span class=\"name\">toNat_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\">b</span>).<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#HXor.hXor\">^^^</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/UInt/BasicAux.html#UInt8.toNat\">toNat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.toNat_xor","kind":"theorem","line":38,"name":"UInt8.toNat_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L38-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#UInt8.toBitVec_shiftLeft\"><span class=\"name\">UInt8</span>.<span class=\"name\">toBitVec_shiftLeft</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">b</span>).<a href=\"./Init/Prelude.html#UInt8.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Prelude.html#UInt8.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> (<span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Prelude.html#UInt8.toBitVec\">toBitVec</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">8</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#UInt8.toBitVec_shiftLeft","kind":"theorem","line":38,"name":"UInt8.toBitVec_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L38-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/UInt/Bitwise.html#commandDeclare_bitwise_uint_theorems__\"><span class=\"name\">commandDeclare_bitwise_uint_theorems__</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">Lean.ParserDescr</a></div></div>","info":{"doc":"","docLink":"./Init/Data/UInt/Bitwise.html#commandDeclare_bitwise_uint_theorems__","kind":"def","line":19,"name":"commandDeclare_bitwise_uint_theorems__","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/UInt/Bitwise.lean#L19-L37"}}],"imports":["Init.Data.BitVec.Basic","Init.Data.BitVec.Basic","Init.Data.UInt.Basic","Init.Data.UInt.Basic","Init.Data.UInt.Lemmas","Init.Data.Fin.Bitwise"],"instances":[{"className":"Std.Associative","name":"instAssociativeUInt8HOr","typeNames":[]},{"className":"Std.Associative","name":"instAssociativeUInt16HOr","typeNames":[]},{"className":"Std.Associative","name":"instAssociativeUInt32HOr","typeNames":[]},{"className":"Std.Associative","name":"instAssociativeUInt64HOr","typeNames":[]},{"className":"Std.Associative","name":"instAssociativeUSizeHOr","typeNames":[]},{"className":"Std.Commutative","name":"instCommutativeUInt8HOr","typeNames":[]},{"className":"Std.Commutative","name":"instCommutativeUInt16HOr","typeNames":[]},{"className":"Std.Commutative","name":"instCommutativeUInt32HOr","typeNames":[]},{"className":"Std.Commutative","name":"instCommutativeUInt64HOr","typeNames":[]},{"className":"Std.Commutative","name":"instCommutativeUSizeHOr","typeNames":[]},{"className":"Std.IdempotentOp","name":"instIdempotentOpUInt8HOr","typeNames":[]},{"className":"Std.IdempotentOp","name":"instIdempotentOpUInt16HOr","typeNames":[]},{"className":"Std.IdempotentOp","name":"instIdempotentOpUInt32HOr","typeNames":[]},{"className":"Std.IdempotentOp","name":"instIdempotentOpUInt64HOr","typeNames":[]},{"className":"Std.IdempotentOp","name":"instIdempotentOpUSizeHOr","typeNames":[]},{"className":"Std.LawfulCommIdentity","name":"instLawfulCommIdentityUInt8HOrOfNat","typeNames":["OfNat.ofNat"]},{"className":"Std.LawfulCommIdentity","name":"instLawfulCommIdentityUInt16HOrOfNat","typeNames":["OfNat.ofNat"]},{"className":"Std.LawfulCommIdentity","name":"instLawfulCommIdentityUInt32HOrOfNat","typeNames":["OfNat.ofNat"]},{"className":"Std.LawfulCommIdentity","name":"instLawfulCommIdentityUInt64HOrOfNat","typeNames":["OfNat.ofNat"]},{"className":"Std.LawfulCommIdentity","name":"instLawfulCommIdentityUSizeHOrOfNat","typeNames":["OfNat.ofNat"]},{"className":"Std.Associative","name":"instAssociativeUInt8HAnd","typeNames":[]},{"className":"Std.Associative","name":"instAssociativeUInt16HAnd","typeNames":[]},{"className":"Std.Associative","name":"instAssociativeUInt32HAnd","typeNames":[]},{"className":"Std.Associative","name":"instAssociativeUInt64HAnd","typeNames":[]},{"className":"Std.Associative","name":"instAssociativeUSizeHAnd","typeNames":[]},{"className":"Std.Commutative","name":"instCommutativeUInt8HAnd","typeNames":[]},{"className":"Std.Commutative","name":"instCommutativeUInt16HAnd","typeNames":[]},{"className":"Std.Commutative","name":"instCommutativeUInt32HAnd","typeNames":[]},{"className":"Std.Commutative","name":"instCommutativeUInt64HAnd","typeNames":[]},{"className":"Std.Commutative","name":"instCommutativeUSizeHAnd","typeNames":[]},{"className":"Std.IdempotentOp","name":"instIdempotentOpUInt8HAnd","typeNames":[]},{"className":"Std.IdempotentOp","name":"instIdempotentOpUInt16HAnd","typeNames":[]},{"className":"Std.IdempotentOp","name":"instIdempotentOpUInt32HAnd","typeNames":[]},{"className":"Std.IdempotentOp","name":"instIdempotentOpUInt64HAnd","typeNames":[]},{"className":"Std.IdempotentOp","name":"instIdempotentOpUSizeHAnd","typeNames":[]},{"className":"Std.LawfulCommIdentity","name":"instLawfulCommIdentityUInt8HAndNegOfNat","typeNames":["Neg.neg"]},{"className":"Std.LawfulCommIdentity","name":"instLawfulCommIdentityUInt16HAndNegOfNat","typeNames":["Neg.neg"]},{"className":"Std.LawfulCommIdentity","name":"instLawfulCommIdentityUInt32HAndNegOfNat","typeNames":["Neg.neg"]},{"className":"Std.LawfulCommIdentity","name":"instLawfulCommIdentityUInt64HAndNegOfNat","typeNames":["Neg.neg"]},{"className":"Std.LawfulCommIdentity","name":"instLawfulCommIdentityUSizeHAndNegOfNat","typeNames":["Neg.neg"]},{"className":"Std.Associative","name":"instAssociativeUInt8HXor","typeNames":[]},{"className":"Std.Associative","name":"instAssociativeUInt16HXor","typeNames":[]},{"className":"Std.Associative","name":"instAssociativeUInt32HXor","typeNames":[]},{"className":"Std.Associative","name":"instAssociativeUInt64HXor","typeNames":[]},{"className":"Std.Associative","name":"instAssociativeUSizeHXor","typeNames":[]},{"className":"Std.Commutative","name":"instCommutativeUInt8HXor","typeNames":[]},{"className":"Std.Commutative","name":"instCommutativeUInt16HXor","typeNames":[]},{"className":"Std.Commutative","name":"instCommutativeUInt32HXor","typeNames":[]},{"className":"Std.Commutative","name":"instCommutativeUInt64HXor","typeNames":[]},{"className":"Std.Commutative","name":"instCommutativeUSizeHXor","typeNames":[]},{"className":"Std.LawfulCommIdentity","name":"instLawfulCommIdentityUInt8HXorOfNat","typeNames":["OfNat.ofNat"]},{"className":"Std.LawfulCommIdentity","name":"instLawfulCommIdentityUInt16HXorOfNat","typeNames":["OfNat.ofNat"]},{"className":"Std.LawfulCommIdentity","name":"instLawfulCommIdentityUInt32HXorOfNat","typeNames":["OfNat.ofNat"]},{"className":"Std.LawfulCommIdentity","name":"instLawfulCommIdentityUInt64HXorOfNat","typeNames":["OfNat.ofNat"]},{"className":"Std.LawfulCommIdentity","name":"instLawfulCommIdentityUSizeHXorOfNat","typeNames":["OfNat.ofNat"]}],"name":"Init.Data.UInt.Bitwise"}