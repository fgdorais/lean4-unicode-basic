{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.DateTime.instToString\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">DateTime</span>.<span class=\"name\">instToString</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">tz</span> : <a href=\"./Std/Time/Zoned/TimeZone.html#Std.Time.TimeZone\">TimeZone</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <span class=\"fn\">(<a href=\"./Std/Time/Zoned/DateTime.html#Std.Time.DateTime\">DateTime</a> <span class=\"fn\">tz</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Format.html#Std.Time.DateTime.instToString","kind":"instance","line":626,"name":"Std.Time.DateTime.instToString","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L626-L627"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.DateTime.instRepr\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">DateTime</span>.<span class=\"name\">instRepr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">tz</span> : <a href=\"./Std/Time/Zoned/TimeZone.html#Std.Time.TimeZone\">TimeZone</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">(<a href=\"./Std/Time/Zoned/DateTime.html#Std.Time.DateTime\">DateTime</a> <span class=\"fn\">tz</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Format.html#Std.Time.DateTime.instRepr","kind":"instance","line":623,"name":"Std.Time.DateTime.instRepr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L623-L624"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.DateTime.parse\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">DateTime</span>.<span class=\"name\">parse</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">date</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <span class=\"fn\">(<a href=\"./Std/Time/Zoned/DateTime.html#Std.Time.DateTime\">DateTime</a> <a href=\"./Std/Time/Zoned/TimeZone.html#Std.Time.TimeZone.GMT\">TimeZone.GMT</a>)</span></span></div></div>","info":{"doc":"Parses a `String` in the `AscTime` or `LongDate` format and returns a `DateTime`.\n","docLink":"./Std/Time/Format.html#Std.Time.DateTime.parse","kind":"def","line":616,"name":"Std.Time.DateTime.parse","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L616-L621"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.DateTime.toLeanDateTimeWithZoneString\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">DateTime</span>.<span class=\"name\">toLeanDateTimeWithZoneString</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">tz</span> : <a href=\"./Std/Time/Zoned/TimeZone.html#Std.Time.TimeZone\">TimeZone</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pdt</span> : <span class=\"fn\"><a href=\"./Std/Time/Zoned/DateTime.html#Std.Time.DateTime\">DateTime</a> <span class=\"fn\">tz</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Formats a `DateTime` value into a `DateTimeWithZone` format string that can be parsed by `date%`.\n","docLink":"./Std/Time/Format.html#Std.Time.DateTime.toLeanDateTimeWithZoneString","kind":"def","line":610,"name":"Std.Time.DateTime.toLeanDateTimeWithZoneString","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L610-L614"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.DateTime.toDateTimeWithZoneString\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">DateTime</span>.<span class=\"name\">toDateTimeWithZoneString</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">tz</span> : <a href=\"./Std/Time/Zoned/TimeZone.html#Std.Time.TimeZone\">TimeZone</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pdt</span> : <span class=\"fn\"><a href=\"./Std/Time/Zoned/DateTime.html#Std.Time.DateTime\">DateTime</a> <span class=\"fn\">tz</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Formats a `DateTime` value into a `DateTimeWithZone` format string.\n","docLink":"./Std/Time/Format.html#Std.Time.DateTime.toDateTimeWithZoneString","kind":"def","line":604,"name":"Std.Time.DateTime.toDateTimeWithZoneString","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L604-L608"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.DateTime.toRFC850String\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">DateTime</span>.<span class=\"name\">toRFC850String</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">tz</span> : <a href=\"./Std/Time/Zoned/TimeZone.html#Std.Time.TimeZone\">TimeZone</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">date</span> : <span class=\"fn\"><a href=\"./Std/Time/Zoned/DateTime.html#Std.Time.DateTime\">DateTime</a> <span class=\"fn\">tz</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Formats a `DateTime` value into an RFC850 format string.\n","docLink":"./Std/Time/Format.html#Std.Time.DateTime.toRFC850String","kind":"def","line":598,"name":"Std.Time.DateTime.toRFC850String","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L598-L602"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.DateTime.toRFC822String\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">DateTime</span>.<span class=\"name\">toRFC822String</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">tz</span> : <a href=\"./Std/Time/Zoned/TimeZone.html#Std.Time.TimeZone\">TimeZone</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">date</span> : <span class=\"fn\"><a href=\"./Std/Time/Zoned/DateTime.html#Std.Time.DateTime\">DateTime</a> <span class=\"fn\">tz</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Formats a `DateTime` value into an RFC822 format string.\n","docLink":"./Std/Time/Format.html#Std.Time.DateTime.toRFC822String","kind":"def","line":592,"name":"Std.Time.DateTime.toRFC822String","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L592-L596"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.DateTime.toISO8601String\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">DateTime</span>.<span class=\"name\">toISO8601String</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">tz</span> : <a href=\"./Std/Time/Zoned/TimeZone.html#Std.Time.TimeZone\">TimeZone</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">date</span> : <span class=\"fn\"><a href=\"./Std/Time/Zoned/DateTime.html#Std.Time.DateTime\">DateTime</a> <span class=\"fn\">tz</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Formats a `DateTime` value into an ISO8601 string.\n","docLink":"./Std/Time/Format.html#Std.Time.DateTime.toISO8601String","kind":"def","line":586,"name":"Std.Time.DateTime.toISO8601String","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L586-L590"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.DateTime.toLongDateFormatString\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">DateTime</span>.<span class=\"name\">toLongDateFormatString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">datetime</span> : <span class=\"fn\"><a href=\"./Std/Time/Zoned/DateTime.html#Std.Time.DateTime\">DateTime</a> <a href=\"./Std/Time/Zoned/TimeZone.html#Std.Time.TimeZone.GMT\">TimeZone.GMT</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Formats a `DateTime` value into a LongDateFormat string.\n","docLink":"./Std/Time/Format.html#Std.Time.DateTime.toLongDateFormatString","kind":"def","line":580,"name":"Std.Time.DateTime.toLongDateFormatString","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L580-L584"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.DateTime.fromLongDateFormatString\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">DateTime</span>.<span class=\"name\">fromLongDateFormatString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <span class=\"fn\">(<a href=\"./Std/Time/Zoned/DateTime.html#Std.Time.DateTime\">DateTime</a> <a href=\"./Std/Time/Zoned/TimeZone.html#Std.Time.TimeZone.GMT\">TimeZone.GMT</a>)</span></span></div></div>","info":{"doc":"Parses a `String` in the `LongDateFormat` and returns a `DateTime` object in the GMT time zone.\n","docLink":"./Std/Time/Format.html#Std.Time.DateTime.fromLongDateFormatString","kind":"def","line":574,"name":"Std.Time.DateTime.fromLongDateFormatString","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L574-L578"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.DateTime.toAscTimeString\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">DateTime</span>.<span class=\"name\">toAscTimeString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">datetime</span> : <span class=\"fn\"><a href=\"./Std/Time/Zoned/DateTime.html#Std.Time.DateTime\">DateTime</a> <a href=\"./Std/Time/Zoned/TimeZone.html#Std.Time.TimeZone.GMT\">TimeZone.GMT</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Formats a `DateTime` value into an AscTime format string.\n","docLink":"./Std/Time/Format.html#Std.Time.DateTime.toAscTimeString","kind":"def","line":568,"name":"Std.Time.DateTime.toAscTimeString","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L568-L572"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.DateTime.fromAscTimeString\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">DateTime</span>.<span class=\"name\">fromAscTimeString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <span class=\"fn\">(<a href=\"./Std/Time/Zoned/DateTime.html#Std.Time.DateTime\">DateTime</a> <a href=\"./Std/Time/Zoned/TimeZone.html#Std.Time.TimeZone.GMT\">TimeZone.GMT</a>)</span></span></div></div>","info":{"doc":"Parses a `String` in the `AscTime` format and returns a `DateTime` object in the GMT time zone.\n","docLink":"./Std/Time/Format.html#Std.Time.DateTime.fromAscTimeString","kind":"def","line":562,"name":"Std.Time.DateTime.fromAscTimeString","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L562-L566"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.DateTime.format\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">DateTime</span>.<span class=\"name\">format</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">tz</span> : <a href=\"./Std/Time/Zoned/TimeZone.html#Std.Time.TimeZone\">TimeZone</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">data</span> : <span class=\"fn\"><a href=\"./Std/Time/Zoned/DateTime.html#Std.Time.DateTime\">DateTime</a> <span class=\"fn\">tz</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">format</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Formats a `DateTime` using a specific format.\n","docLink":"./Std/Time/Format.html#Std.Time.DateTime.format","kind":"def","line":553,"name":"Std.Time.DateTime.format","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L553-L560"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.PlainDateTime.instRepr\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">PlainDateTime</span>.<span class=\"name\">instRepr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Std/Time/DateTime/PlainDateTime.html#Std.Time.PlainDateTime\">PlainDateTime</a></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Format.html#Std.Time.PlainDateTime.instRepr","kind":"instance","line":546,"name":"Std.Time.PlainDateTime.instRepr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L546-L547"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.PlainDateTime.instToString\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">PlainDateTime</span>.<span class=\"name\">instToString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Std/Time/DateTime/PlainDateTime.html#Std.Time.PlainDateTime\">PlainDateTime</a></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Format.html#Std.Time.PlainDateTime.instToString","kind":"instance","line":543,"name":"Std.Time.PlainDateTime.instToString","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L543-L544"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.PlainDateTime.parse\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">PlainDateTime</span>.<span class=\"name\">parse</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">date</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Std/Time/DateTime/PlainDateTime.html#Std.Time.PlainDateTime\">PlainDateTime</a></span></div></div>","info":{"doc":"Parses a `String` in the `AscTime` or `LongDate` format and returns a `PlainDateTime`.\n","docLink":"./Std/Time/Format.html#Std.Time.PlainDateTime.parse","kind":"def","line":534,"name":"Std.Time.PlainDateTime.parse","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L534-L541"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.PlainDateTime.toLeanDateTimeString\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">PlainDateTime</span>.<span class=\"name\">toLeanDateTimeString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pdt</span> : <a href=\"./Std/Time/DateTime/PlainDateTime.html#Std.Time.PlainDateTime\">PlainDateTime</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Formats a `PlainDateTime` value into a `DateTime` format string.\n","docLink":"./Std/Time/Format.html#Std.Time.PlainDateTime.toLeanDateTimeString","kind":"def","line":528,"name":"Std.Time.PlainDateTime.toLeanDateTimeString","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L528-L532"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.PlainDateTime.fromLeanDateTimeString\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">PlainDateTime</span>.<span class=\"name\">fromLeanDateTimeString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Std/Time/DateTime/PlainDateTime.html#Std.Time.PlainDateTime\">PlainDateTime</a></span></div></div>","info":{"doc":"Parses a `String` in the `DateTime` format and returns a `PlainDateTime`.\n","docLink":"./Std/Time/Format.html#Std.Time.PlainDateTime.fromLeanDateTimeString","kind":"def","line":521,"name":"Std.Time.PlainDateTime.fromLeanDateTimeString","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L521-L526"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.PlainDateTime.toDateTimeString\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">PlainDateTime</span>.<span class=\"name\">toDateTimeString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pdt</span> : <a href=\"./Std/Time/DateTime/PlainDateTime.html#Std.Time.PlainDateTime\">PlainDateTime</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Formats a `PlainDateTime` value into a `DateTime` format string.\n","docLink":"./Std/Time/Format.html#Std.Time.PlainDateTime.toDateTimeString","kind":"def","line":515,"name":"Std.Time.PlainDateTime.toDateTimeString","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L515-L519"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.PlainDateTime.fromDateTimeString\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">PlainDateTime</span>.<span class=\"name\">fromDateTimeString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Std/Time/DateTime/PlainDateTime.html#Std.Time.PlainDateTime\">PlainDateTime</a></span></div></div>","info":{"doc":"Parses a `String` in the `DateTime` format and returns a `PlainDateTime`.\n","docLink":"./Std/Time/Format.html#Std.Time.PlainDateTime.fromDateTimeString","kind":"def","line":508,"name":"Std.Time.PlainDateTime.fromDateTimeString","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L508-L513"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.PlainDateTime.toLongDateFormatString\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">PlainDateTime</span>.<span class=\"name\">toLongDateFormatString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pdt</span> : <a href=\"./Std/Time/DateTime/PlainDateTime.html#Std.Time.PlainDateTime\">PlainDateTime</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Formats a `PlainDateTime` value into a LongDateFormat string.\n","docLink":"./Std/Time/Format.html#Std.Time.PlainDateTime.toLongDateFormatString","kind":"def","line":502,"name":"Std.Time.PlainDateTime.toLongDateFormatString","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L502-L506"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.PlainDateTime.fromLongDateFormatString\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">PlainDateTime</span>.<span class=\"name\">fromLongDateFormatString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Std/Time/DateTime/PlainDateTime.html#Std.Time.PlainDateTime\">PlainDateTime</a></span></div></div>","info":{"doc":"Parses a `String` in the `LongDateFormat` and returns a `PlainDateTime` object in the GMT time zone.\n","docLink":"./Std/Time/Format.html#Std.Time.PlainDateTime.fromLongDateFormatString","kind":"def","line":495,"name":"Std.Time.PlainDateTime.fromLongDateFormatString","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L495-L500"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.PlainDateTime.toAscTimeString\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">PlainDateTime</span>.<span class=\"name\">toAscTimeString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pdt</span> : <a href=\"./Std/Time/DateTime/PlainDateTime.html#Std.Time.PlainDateTime\">PlainDateTime</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Formats a `PlainDateTime` value into an AscTime format string.\n","docLink":"./Std/Time/Format.html#Std.Time.PlainDateTime.toAscTimeString","kind":"def","line":489,"name":"Std.Time.PlainDateTime.toAscTimeString","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L489-L493"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.PlainDateTime.fromAscTimeString\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">PlainDateTime</span>.<span class=\"name\">fromAscTimeString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Std/Time/DateTime/PlainDateTime.html#Std.Time.PlainDateTime\">PlainDateTime</a></span></div></div>","info":{"doc":"Parses a `String` in the `AscTime` format and returns a `PlainDateTime` object in the GMT time zone.\n","docLink":"./Std/Time/Format.html#Std.Time.PlainDateTime.fromAscTimeString","kind":"def","line":482,"name":"Std.Time.PlainDateTime.fromAscTimeString","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L482-L487"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.PlainDateTime.format\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">PlainDateTime</span>.<span class=\"name\">format</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">date</span> : <a href=\"./Std/Time/DateTime/PlainDateTime.html#Std.Time.PlainDateTime\">PlainDateTime</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">format</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Formats a `PlainDateTime` using a specific format.\n","docLink":"./Std/Time/Format.html#Std.Time.PlainDateTime.format","kind":"def","line":445,"name":"Std.Time.PlainDateTime.format","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L445-L480"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.ZonedDateTime.instRepr\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">ZonedDateTime</span>.<span class=\"name\">instRepr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Std/Time/Zoned/ZonedDateTime.html#Std.Time.ZonedDateTime\">ZonedDateTime</a></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Format.html#Std.Time.ZonedDateTime.instRepr","kind":"instance","line":438,"name":"Std.Time.ZonedDateTime.instRepr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L438-L439"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.ZonedDateTime.instToString\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">ZonedDateTime</span>.<span class=\"name\">instToString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Std/Time/Zoned/ZonedDateTime.html#Std.Time.ZonedDateTime\">ZonedDateTime</a></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Format.html#Std.Time.ZonedDateTime.instToString","kind":"instance","line":435,"name":"Std.Time.ZonedDateTime.instToString","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L435-L436"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.ZonedDateTime.parse\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">ZonedDateTime</span>.<span class=\"name\">parse</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Std/Time/Zoned/ZonedDateTime.html#Std.Time.ZonedDateTime\">ZonedDateTime</a></span></div></div>","info":{"doc":"Parses a `String` in the `ISO8601`, `RFC822` or `RFC850` format and returns a `ZonedDateTime`.\n","docLink":"./Std/Time/Format.html#Std.Time.ZonedDateTime.parse","kind":"def","line":425,"name":"Std.Time.ZonedDateTime.parse","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L425-L433"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.ZonedDateTime.toLeanDateTimeWithIdentifierString\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">ZonedDateTime</span>.<span class=\"name\">toLeanDateTimeWithIdentifierString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">zdt</span> : <a href=\"./Std/Time/Zoned/ZonedDateTime.html#Std.Time.ZonedDateTime\">ZonedDateTime</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Formats a `DateTime` value into a simple date time with timezone string that can be parsed by the date% notation with the timezone identifier.\n","docLink":"./Std/Time/Format.html#Std.Time.ZonedDateTime.toLeanDateTimeWithIdentifierString","kind":"def","line":419,"name":"Std.Time.ZonedDateTime.toLeanDateTimeWithIdentifierString","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L419-L423"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.ZonedDateTime.toLeanDateTimeWithZoneString\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">ZonedDateTime</span>.<span class=\"name\">toLeanDateTimeWithZoneString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">zdt</span> : <a href=\"./Std/Time/Zoned/ZonedDateTime.html#Std.Time.ZonedDateTime\">ZonedDateTime</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Formats a `DateTime` value into a simple date time with timezone string that can be parsed by the date% notation.\n","docLink":"./Std/Time/Format.html#Std.Time.ZonedDateTime.toLeanDateTimeWithZoneString","kind":"def","line":414,"name":"Std.Time.ZonedDateTime.toLeanDateTimeWithZoneString","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L414-L418"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.ZonedDateTime.fromLeanDateTimeWithIdentifierString\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">ZonedDateTime</span>.<span class=\"name\">fromLeanDateTimeWithIdentifierString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Std/Time/Zoned/ZonedDateTime.html#Std.Time.ZonedDateTime\">ZonedDateTime</a></span></div></div>","info":{"doc":"Parses a `String` in the lean date time format with identifier and returns a `ZonedDateTime` object.\n","docLink":"./Std/Time/Format.html#Std.Time.ZonedDateTime.fromLeanDateTimeWithIdentifierString","kind":"def","line":407,"name":"Std.Time.ZonedDateTime.fromLeanDateTimeWithIdentifierString","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L407-L412"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.ZonedDateTime.fromLeanDateTimeWithZoneString\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">ZonedDateTime</span>.<span class=\"name\">fromLeanDateTimeWithZoneString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Std/Time/Zoned/ZonedDateTime.html#Std.Time.ZonedDateTime\">ZonedDateTime</a></span></div></div>","info":{"doc":"Parses a `String` in the lean date time format with timezone format and returns a `ZonedDateTime` object.\n","docLink":"./Std/Time/Format.html#Std.Time.ZonedDateTime.fromLeanDateTimeWithZoneString","kind":"def","line":400,"name":"Std.Time.ZonedDateTime.fromLeanDateTimeWithZoneString","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L400-L405"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.ZonedDateTime.toDateTimeWithZoneString\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">ZonedDateTime</span>.<span class=\"name\">toDateTimeWithZoneString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pdt</span> : <a href=\"./Std/Time/Zoned/ZonedDateTime.html#Std.Time.ZonedDateTime\">ZonedDateTime</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Formats a `ZonedDateTime` value into a simple date time with timezone string.\n","docLink":"./Std/Time/Format.html#Std.Time.ZonedDateTime.toDateTimeWithZoneString","kind":"def","line":394,"name":"Std.Time.ZonedDateTime.toDateTimeWithZoneString","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L394-L398"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.ZonedDateTime.fromDateTimeWithZoneString\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">ZonedDateTime</span>.<span class=\"name\">fromDateTimeWithZoneString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Std/Time/Zoned/ZonedDateTime.html#Std.Time.ZonedDateTime\">ZonedDateTime</a></span></div></div>","info":{"doc":"Parses a `String` in the dateTimeWithZone format and returns a `ZonedDateTime` object in the GMT time zone.\n","docLink":"./Std/Time/Format.html#Std.Time.ZonedDateTime.fromDateTimeWithZoneString","kind":"def","line":388,"name":"Std.Time.ZonedDateTime.fromDateTimeWithZoneString","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L388-L392"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.ZonedDateTime.toRFC850String\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">ZonedDateTime</span>.<span class=\"name\">toRFC850String</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">date</span> : <a href=\"./Std/Time/Zoned/ZonedDateTime.html#Std.Time.ZonedDateTime\">ZonedDateTime</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Formats a `ZonedDateTime` value into an RFC850 format string.\n","docLink":"./Std/Time/Format.html#Std.Time.ZonedDateTime.toRFC850String","kind":"def","line":382,"name":"Std.Time.ZonedDateTime.toRFC850String","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L382-L386"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.ZonedDateTime.fromRFC850String\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">ZonedDateTime</span>.<span class=\"name\">fromRFC850String</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Std/Time/Zoned/ZonedDateTime.html#Std.Time.ZonedDateTime\">ZonedDateTime</a></span></div></div>","info":{"doc":"Parses a `String` in the rfc850 format and returns a `ZonedDateTime`.\n","docLink":"./Std/Time/Format.html#Std.Time.ZonedDateTime.fromRFC850String","kind":"def","line":376,"name":"Std.Time.ZonedDateTime.fromRFC850String","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L376-L380"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.ZonedDateTime.toRFC822String\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">ZonedDateTime</span>.<span class=\"name\">toRFC822String</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">date</span> : <a href=\"./Std/Time/Zoned/ZonedDateTime.html#Std.Time.ZonedDateTime\">ZonedDateTime</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Formats a `ZonedDateTime` value into an RFC822 format string.\n","docLink":"./Std/Time/Format.html#Std.Time.ZonedDateTime.toRFC822String","kind":"def","line":370,"name":"Std.Time.ZonedDateTime.toRFC822String","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L370-L374"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.ZonedDateTime.fromRFC822String\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">ZonedDateTime</span>.<span class=\"name\">fromRFC822String</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Std/Time/Zoned/ZonedDateTime.html#Std.Time.ZonedDateTime\">ZonedDateTime</a></span></div></div>","info":{"doc":"Parses a `String` in the rfc822 format and returns a `ZonedDateTime`.\n","docLink":"./Std/Time/Format.html#Std.Time.ZonedDateTime.fromRFC822String","kind":"def","line":364,"name":"Std.Time.ZonedDateTime.fromRFC822String","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L364-L368"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.ZonedDateTime.toISO8601String\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">ZonedDateTime</span>.<span class=\"name\">toISO8601String</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">date</span> : <a href=\"./Std/Time/Zoned/ZonedDateTime.html#Std.Time.ZonedDateTime\">ZonedDateTime</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Formats a `ZonedDateTime` value into an ISO8601 string.\n","docLink":"./Std/Time/Format.html#Std.Time.ZonedDateTime.toISO8601String","kind":"def","line":358,"name":"Std.Time.ZonedDateTime.toISO8601String","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L358-L362"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.ZonedDateTime.fromISO8601String\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">ZonedDateTime</span>.<span class=\"name\">fromISO8601String</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Std/Time/Zoned/ZonedDateTime.html#Std.Time.ZonedDateTime\">ZonedDateTime</a></span></div></div>","info":{"doc":"Parses a `String` in the `ISO8601` format and returns a `ZonedDateTime`.\n","docLink":"./Std/Time/Format.html#Std.Time.ZonedDateTime.fromISO8601String","kind":"def","line":352,"name":"Std.Time.ZonedDateTime.fromISO8601String","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L352-L356"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.ZonedDateTime.format\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">ZonedDateTime</span>.<span class=\"name\">format</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">data</span> : <a href=\"./Std/Time/Zoned/ZonedDateTime.html#Std.Time.ZonedDateTime\">ZonedDateTime</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">format</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Formats a `ZonedDateTime` using a specific format.\n","docLink":"./Std/Time/Format.html#Std.Time.ZonedDateTime.format","kind":"def","line":343,"name":"Std.Time.ZonedDateTime.format","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L343-L350"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.PlainTime.instRepr\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">PlainTime</span>.<span class=\"name\">instRepr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Std/Time/Time/PlainTime.html#Std.Time.PlainTime\">PlainTime</a></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Format.html#Std.Time.PlainTime.instRepr","kind":"instance","line":336,"name":"Std.Time.PlainTime.instRepr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L336-L337"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.PlainTime.instToString\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">PlainTime</span>.<span class=\"name\">instToString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Std/Time/Time/PlainTime.html#Std.Time.PlainTime\">PlainTime</a></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Format.html#Std.Time.PlainTime.instToString","kind":"instance","line":333,"name":"Std.Time.PlainTime.instToString","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L333-L334"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.PlainTime.parse\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">PlainTime</span>.<span class=\"name\">parse</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Std/Time/Time/PlainTime.html#Std.Time.PlainTime\">PlainTime</a></span></div></div>","info":{"doc":"Parses a `String` in the `Time12Hour` or `Time24Hour` format and returns a `PlainTime`.\n","docLink":"./Std/Time/Format.html#Std.Time.PlainTime.parse","kind":"def","line":326,"name":"Std.Time.PlainTime.parse","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L326-L331"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.PlainTime.toTime12Hour\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">PlainTime</span>.<span class=\"name\">toTime12Hour</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Std/Time/Time/PlainTime.html#Std.Time.PlainTime\">PlainTime</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Formats a `PlainTime` value into a 12-hour format string (`hh:mm:ss aa`).\n","docLink":"./Std/Time/Format.html#Std.Time.PlainTime.toTime12Hour","kind":"def","line":320,"name":"Std.Time.PlainTime.toTime12Hour","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L320-L324"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.PlainTime.fromTime12Hour\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">PlainTime</span>.<span class=\"name\">fromTime12Hour</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Std/Time/Time/PlainTime.html#Std.Time.PlainTime\">PlainTime</a></span></div></div>","info":{"doc":"Parses a time string in the 12-hour format (`hh:mm:ss aa`) and returns a `PlainTime`.\n","docLink":"./Std/Time/Format.html#Std.Time.PlainTime.fromTime12Hour","kind":"def","line":310,"name":"Std.Time.PlainTime.fromTime12Hour","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L310-L318"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.PlainTime.toLeanTime24Hour\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">PlainTime</span>.<span class=\"name\">toLeanTime24Hour</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Std/Time/Time/PlainTime.html#Std.Time.PlainTime\">PlainTime</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Formats a `PlainTime` value into a 24-hour format string (`HH:mm:ss.SSSSSSSSS`).\n","docLink":"./Std/Time/Format.html#Std.Time.PlainTime.toLeanTime24Hour","kind":"def","line":304,"name":"Std.Time.PlainTime.toLeanTime24Hour","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L304-L308"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.PlainTime.fromLeanTime24Hour\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">PlainTime</span>.<span class=\"name\">fromLeanTime24Hour</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Std/Time/Time/PlainTime.html#Std.Time.PlainTime\">PlainTime</a></span></div></div>","info":{"doc":"Parses a time string in the lean 24-hour format (`HH:mm:ss.SSSSSSSSS` or `HH:mm:ss`) and returns a `PlainTime`.\n","docLink":"./Std/Time/Format.html#Std.Time.PlainTime.fromLeanTime24Hour","kind":"def","line":297,"name":"Std.Time.PlainTime.fromLeanTime24Hour","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L297-L302"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.PlainTime.toTime24Hour\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">PlainTime</span>.<span class=\"name\">toTime24Hour</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Std/Time/Time/PlainTime.html#Std.Time.PlainTime\">PlainTime</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Formats a `PlainTime` value into a 24-hour format string (`HH:mm:ss`).\n","docLink":"./Std/Time/Format.html#Std.Time.PlainTime.toTime24Hour","kind":"def","line":291,"name":"Std.Time.PlainTime.toTime24Hour","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L291-L295"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.PlainTime.fromTime24Hour\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">PlainTime</span>.<span class=\"name\">fromTime24Hour</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Std/Time/Time/PlainTime.html#Std.Time.PlainTime\">PlainTime</a></span></div></div>","info":{"doc":"Parses a time string in the 24-hour format (`HH:mm:ss`) and returns a `PlainTime`.\n","docLink":"./Std/Time/Format.html#Std.Time.PlainTime.fromTime24Hour","kind":"def","line":285,"name":"Std.Time.PlainTime.fromTime24Hour","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L285-L289"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.PlainTime.format\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">PlainTime</span>.<span class=\"name\">format</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">time</span> : <a href=\"./Std/Time/Time/PlainTime.html#Std.Time.PlainTime\">PlainTime</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">format</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Formats a `PlainTime` using a specific format.\n","docLink":"./Std/Time/Format.html#Std.Time.PlainTime.format","kind":"def","line":260,"name":"Std.Time.PlainTime.format","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L260-L283"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.PlainDate.instRepr\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">PlainDate</span>.<span class=\"name\">instRepr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Std/Time/Date/PlainDate.html#Std.Time.PlainDate\">PlainDate</a></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Format.html#Std.Time.PlainDate.instRepr","kind":"instance","line":253,"name":"Std.Time.PlainDate.instRepr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L253-L254"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.PlainDate.instToString\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">PlainDate</span>.<span class=\"name\">instToString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Std/Time/Date/PlainDate.html#Std.Time.PlainDate\">PlainDate</a></span></div></div>","info":{"doc":"","docLink":"./Std/Time/Format.html#Std.Time.PlainDate.instToString","kind":"instance","line":250,"name":"Std.Time.PlainDate.instToString","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L250-L251"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.PlainDate.parse\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">PlainDate</span>.<span class=\"name\">parse</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Std/Time/Date/PlainDate.html#Std.Time.PlainDate\">PlainDate</a></span></div></div>","info":{"doc":"Parses a `String` in the `AmericanDate` or `SQLDate` format and returns a `PlainDate`.\n","docLink":"./Std/Time/Format.html#Std.Time.PlainDate.parse","kind":"def","line":243,"name":"Std.Time.PlainDate.parse","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L243-L248"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.PlainDate.toLeanDateString\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">PlainDate</span>.<span class=\"name\">toLeanDateString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Std/Time/Date/PlainDate.html#Std.Time.PlainDate\">PlainDate</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Converts a date in the Lean format (`uuuu-MM-dd`) into a `String`.\n","docLink":"./Std/Time/Format.html#Std.Time.PlainDate.toLeanDateString","kind":"def","line":237,"name":"Std.Time.PlainDate.toLeanDateString","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L237-L241"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.PlainDate.fromLeanDateString\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">PlainDate</span>.<span class=\"name\">fromLeanDateString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Std/Time/Date/PlainDate.html#Std.Time.PlainDate\">PlainDate</a></span></div></div>","info":{"doc":"Parses a date string in the Lean format (`uuuu-MM-dd`) and returns a `PlainDate`.\n","docLink":"./Std/Time/Format.html#Std.Time.PlainDate.fromLeanDateString","kind":"def","line":231,"name":"Std.Time.PlainDate.fromLeanDateString","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L231-L235"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.PlainDate.toSQLDateString\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">PlainDate</span>.<span class=\"name\">toSQLDateString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Std/Time/Date/PlainDate.html#Std.Time.PlainDate\">PlainDate</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Converts a date in the SQL format (`uuuu-MM-dd`) into a `String`.\n","docLink":"./Std/Time/Format.html#Std.Time.PlainDate.toSQLDateString","kind":"def","line":225,"name":"Std.Time.PlainDate.toSQLDateString","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L225-L229"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.PlainDate.fromSQLDateString\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">PlainDate</span>.<span class=\"name\">fromSQLDateString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Std/Time/Date/PlainDate.html#Std.Time.PlainDate\">PlainDate</a></span></div></div>","info":{"doc":"Parses a date string in the SQL format (`uuuu-MM-dd`) and returns a `PlainDate`.\n","docLink":"./Std/Time/Format.html#Std.Time.PlainDate.fromSQLDateString","kind":"def","line":219,"name":"Std.Time.PlainDate.fromSQLDateString","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L219-L223"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.PlainDate.toAmericanDateString\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">PlainDate</span>.<span class=\"name\">toAmericanDateString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Std/Time/Date/PlainDate.html#Std.Time.PlainDate\">PlainDate</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Converts a date in the American format (`MM-dd-uuuu`) into a `String`.\n","docLink":"./Std/Time/Format.html#Std.Time.PlainDate.toAmericanDateString","kind":"def","line":213,"name":"Std.Time.PlainDate.toAmericanDateString","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L213-L217"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.PlainDate.fromAmericanDateString\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">PlainDate</span>.<span class=\"name\">fromAmericanDateString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Std/Time/Date/PlainDate.html#Std.Time.PlainDate\">PlainDate</a></span></div></div>","info":{"doc":"Parses a date string in the American format (`MM-dd-uuuu`) and returns a `PlainDate`.\n","docLink":"./Std/Time/Format.html#Std.Time.PlainDate.fromAmericanDateString","kind":"def","line":207,"name":"Std.Time.PlainDate.fromAmericanDateString","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L207-L211"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.PlainDate.format\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">PlainDate</span>.<span class=\"name\">format</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">date</span> : <a href=\"./Std/Time/Date/PlainDate.html#Std.Time.PlainDate\">PlainDate</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">format</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Formats a `PlainDate` using a specific format.\n","docLink":"./Std/Time/Format.html#Std.Time.PlainDate.format","kind":"def","line":181,"name":"Std.Time.PlainDate.format","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L181-L205"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.TimeZone.Offset.fromOffset\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">TimeZone</span>.<span class=\"name\">Offset</span>.<span class=\"name\">fromOffset</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Std/Time/Zoned/Offset.html#Std.Time.TimeZone.Offset\">Offset</a></span></div></div>","info":{"doc":"Parses a string representing an offset into an `Offset` object. The input string must follow the `\"xxx\"` format.\n","docLink":"./Std/Time/Format.html#Std.Time.TimeZone.Offset.fromOffset","kind":"def","line":169,"name":"Std.Time.TimeZone.Offset.fromOffset","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L169-L174"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.TimeZone.fromTimeZone\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">TimeZone</span>.<span class=\"name\">fromTimeZone</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">input</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Std/Time/Zoned/TimeZone.html#Std.Time.TimeZone\">TimeZone</a></span></div></div>","info":{"doc":"Parses a string into a `TimeZone` object. The input string must be in the format `\"VV ZZZZZ\"`.\n","docLink":"./Std/Time/Format.html#Std.Time.TimeZone.fromTimeZone","kind":"def","line":160,"name":"Std.Time.TimeZone.fromTimeZone","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L160-L165"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.Formats.rfc850\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Formats</span>.<span class=\"name\">rfc850</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat\">GenericFormat</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness.any\">Awareness.any</a></span></div></div>","info":{"doc":"The RFC850 format, which follows the pattern `eee, dd-MMM-YY HH:mm:ss ZZZ`.\nThis format is an older standard for representing date and time in headers.\n","docLink":"./Std/Time/Format.html#Std.Time.Formats.rfc850","kind":"def","line":150,"name":"Std.Time.Formats.rfc850","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L150-L154"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.Formats.rfc822\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Formats</span>.<span class=\"name\">rfc822</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat\">GenericFormat</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness.any\">Awareness.any</a></span></div></div>","info":{"doc":"The RFC822 format, which follows the pattern `eee, dd MMM uuuu HH:mm:ss ZZZ`.\nThis format is used in email headers and HTTP headers.\n","docLink":"./Std/Time/Format.html#Std.Time.Formats.rfc822","kind":"def","line":144,"name":"Std.Time.Formats.rfc822","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L144-L148"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.Formats.ascTime\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Formats</span>.<span class=\"name\">ascTime</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat\">GenericFormat</a> <span class=\"fn\">(<a href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness.only\">Awareness.only</a> <a href=\"./Std/Time/Zoned/TimeZone.html#Std.Time.TimeZone.GMT\">TimeZone.GMT</a>)</span></span></div></div>","info":{"doc":"The AscTime format, which follows the pattern `EEE MMM d HH:mm:ss uuuu`. This format\nis often used in older systems for logging and time-stamping events.\n","docLink":"./Std/Time/Format.html#Std.Time.Formats.ascTime","kind":"def","line":138,"name":"Std.Time.Formats.ascTime","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L138-L142"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.Formats.longDateFormat\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Formats</span>.<span class=\"name\">longDateFormat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat\">GenericFormat</a> <span class=\"fn\">(<a href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness.only\">Awareness.only</a> <a href=\"./Std/Time/Zoned/TimeZone.html#Std.Time.TimeZone.GMT\">TimeZone.GMT</a>)</span></span></div></div>","info":{"doc":"The LongDateFormat, which follows the pattern `EEEE, MMMM d, uuuu HH:mm:ss` for\nrepresenting a full date and time with the day of the week and month name.\n","docLink":"./Std/Time/Format.html#Std.Time.Formats.longDateFormat","kind":"def","line":132,"name":"Std.Time.Formats.longDateFormat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L132-L136"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.Formats.sqlDate\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Formats</span>.<span class=\"name\">sqlDate</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat\">GenericFormat</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness.any\">Awareness.any</a></span></div></div>","info":{"doc":"The SQLDate format, which follows the pattern `uuuu-MM-dd` and is commonly used\nin SQL databases to represent dates.\n","docLink":"./Std/Time/Format.html#Std.Time.Formats.sqlDate","kind":"def","line":126,"name":"Std.Time.Formats.sqlDate","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L126-L130"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.Formats.leanDate\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Formats</span>.<span class=\"name\">leanDate</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat\">GenericFormat</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness.any\">Awareness.any</a></span></div></div>","info":{"doc":"The Lean Date format, which follows the pattern `uuuu-MM-dd`. It uses the default value that can be parsed with the\nnotation of dates.\n","docLink":"./Std/Time/Format.html#Std.Time.Formats.leanDate","kind":"def","line":120,"name":"Std.Time.Formats.leanDate","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L120-L124"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.Formats.leanDateTimeWithIdentifierAndNanos\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Formats</span>.<span class=\"name\">leanDateTimeWithIdentifierAndNanos</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat\">GenericFormat</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness.any\">Awareness.any</a></span></div></div>","info":{"doc":"The leanDateTimeWithIdentifierAndNanos format, which follows the pattern `uuuu-MM-dd'T'HH:mm:ss.SSSSSSSSS'[z]'`\nfor representing date, time, and time zone. It uses the default value that can be parsed with the\nnotation of dates.\n","docLink":"./Std/Time/Format.html#Std.Time.Formats.leanDateTimeWithIdentifierAndNanos","kind":"def","line":113,"name":"Std.Time.Formats.leanDateTimeWithIdentifierAndNanos","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L113-L118"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.Formats.leanDateTimeWithIdentifier\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Formats</span>.<span class=\"name\">leanDateTimeWithIdentifier</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat\">GenericFormat</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness.any\">Awareness.any</a></span></div></div>","info":{"doc":"The leanDateTimeWithIdentifier format, which follows the pattern `uuuu-MM-dd'T'HH:mm:ss[z]`\nfor representing date, time, and time zone. It uses the default value that can be parsed with the\nnotation of dates.\n","docLink":"./Std/Time/Format.html#Std.Time.Formats.leanDateTimeWithIdentifier","kind":"def","line":106,"name":"Std.Time.Formats.leanDateTimeWithIdentifier","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L106-L111"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.Formats.leanDateTimeWithZoneNoNanos\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Formats</span>.<span class=\"name\">leanDateTimeWithZoneNoNanos</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat\">GenericFormat</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness.any\">Awareness.any</a></span></div></div>","info":{"doc":"The leanDateTimeWithZoneNoNanos format, which follows the pattern `uuuu-MM-dd'T'HH:mm:ssZZZZZ`\nfor representing date, time, and time zone. It uses the default value that can be parsed with the\nnotation of dates.\n","docLink":"./Std/Time/Format.html#Std.Time.Formats.leanDateTimeWithZoneNoNanos","kind":"def","line":99,"name":"Std.Time.Formats.leanDateTimeWithZoneNoNanos","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L99-L104"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.Formats.leanDateTimeWithZone\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Formats</span>.<span class=\"name\">leanDateTimeWithZone</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat\">GenericFormat</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness.any\">Awareness.any</a></span></div></div>","info":{"doc":"The leanDateTimeWithZone format, which follows the pattern `uuuu-MM-dd'T'HH:mm:ss.SSSSSSSSSZZZZZ`\nfor representing date, time, and time zone. It uses the default value that can be parsed with the\nnotation of dates.\n","docLink":"./Std/Time/Format.html#Std.Time.Formats.leanDateTimeWithZone","kind":"def","line":92,"name":"Std.Time.Formats.leanDateTimeWithZone","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L92-L97"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.Formats.leanDateTime24HourNoNanos\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Formats</span>.<span class=\"name\">leanDateTime24HourNoNanos</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat\">GenericFormat</a> <span class=\"fn\">(<a href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness.only\">Awareness.only</a> <a href=\"./Std/Time/Zoned/TimeZone.html#Std.Time.TimeZone.GMT\">TimeZone.GMT</a>)</span></span></div></div>","info":{"doc":"The leanDateTime24HourNoNanos format, which follows the pattern `uuuu-MM-dd'T'HH:mm:ss` for\nrepresenting date, time, and time zone. It uses the default value that can be parsed with the\nnotation of dates.\n","docLink":"./Std/Time/Format.html#Std.Time.Formats.leanDateTime24HourNoNanos","kind":"def","line":85,"name":"Std.Time.Formats.leanDateTime24HourNoNanos","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L85-L90"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.Formats.leanDateTime24Hour\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Formats</span>.<span class=\"name\">leanDateTime24Hour</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat\">GenericFormat</a> <span class=\"fn\">(<a href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness.only\">Awareness.only</a> <a href=\"./Std/Time/Zoned/TimeZone.html#Std.Time.TimeZone.GMT\">TimeZone.GMT</a>)</span></span></div></div>","info":{"doc":"The leanDateTime24Hour format, which follows the pattern `uuuu-MM-dd'T'HH:mm:ss.SSSSSSSSS` for\nrepresenting date, time, and time zone. It uses the default value that can be parsed with the\nnotation of dates.\n","docLink":"./Std/Time/Format.html#Std.Time.Formats.leanDateTime24Hour","kind":"def","line":78,"name":"Std.Time.Formats.leanDateTime24Hour","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L78-L83"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.Formats.leanTime24HourNoNanos\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Formats</span>.<span class=\"name\">leanTime24HourNoNanos</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat\">GenericFormat</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness.any\">Awareness.any</a></span></div></div>","info":{"doc":"The leanTime24HourNoNanos format, which follows the pattern `HH:mm:ss` for representing time\nin a 24-hour clock format. It uses the default value that can be parsed with the\nnotation of dates.\n","docLink":"./Std/Time/Format.html#Std.Time.Formats.leanTime24HourNoNanos","kind":"def","line":71,"name":"Std.Time.Formats.leanTime24HourNoNanos","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L71-L76"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.Formats.leanTime24Hour\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Formats</span>.<span class=\"name\">leanTime24Hour</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat\">GenericFormat</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness.any\">Awareness.any</a></span></div></div>","info":{"doc":"The leanTime24Hour format, which follows the pattern `HH:mm:ss.SSSSSSSSS` for representing time\nin a 24-hour clock format. It uses the default value that can be parsed with the\nnotation of dates.\n","docLink":"./Std/Time/Format.html#Std.Time.Formats.leanTime24Hour","kind":"def","line":64,"name":"Std.Time.Formats.leanTime24Hour","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L64-L69"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.Formats.dateTimeWithZone\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Formats</span>.<span class=\"name\">dateTimeWithZone</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat\">GenericFormat</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness.any\">Awareness.any</a></span></div></div>","info":{"doc":"The DateTimeWithZone format, which follows the pattern `uuuu-MM-dd'T'HH:mm:ss.SSSSSSSSSZZZ`\nfor representing date, time, and time zone.\n","docLink":"./Std/Time/Format.html#Std.Time.Formats.dateTimeWithZone","kind":"def","line":58,"name":"Std.Time.Formats.dateTimeWithZone","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L58-L62"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.Formats.dateTime24Hour\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Formats</span>.<span class=\"name\">dateTime24Hour</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat\">GenericFormat</a> <span class=\"fn\">(<a href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness.only\">Awareness.only</a> <a href=\"./Std/Time/Zoned/TimeZone.html#Std.Time.TimeZone.GMT\">TimeZone.GMT</a>)</span></span></div></div>","info":{"doc":"The DateTimeZone24Hour format, which follows the pattern `uuuu-MM-dd:HH:mm:ss.SSSSSSSSS` for\nrepresenting date, time, and time zone.\n","docLink":"./Std/Time/Format.html#Std.Time.Formats.dateTime24Hour","kind":"def","line":52,"name":"Std.Time.Formats.dateTime24Hour","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L52-L56"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.Formats.time24Hour\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Formats</span>.<span class=\"name\">time24Hour</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat\">GenericFormat</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness.any\">Awareness.any</a></span></div></div>","info":{"doc":"The Time24Hour format, which follows the pattern `HH:mm:ss` for representing time\nin a 24-hour clock format.\n","docLink":"./Std/Time/Format.html#Std.Time.Formats.time24Hour","kind":"def","line":46,"name":"Std.Time.Formats.time24Hour","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L46-L50"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.Formats.time12Hour\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Formats</span>.<span class=\"name\">time12Hour</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat\">GenericFormat</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness.any\">Awareness.any</a></span></div></div>","info":{"doc":"The time12Hour format, which follows the pattern `hh:mm:ss aa` for representing time\nin a 12-hour clock format with an upper case AM/PM marker.\n","docLink":"./Std/Time/Format.html#Std.Time.Formats.time12Hour","kind":"def","line":40,"name":"Std.Time.Formats.time12Hour","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L40-L44"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.Formats.europeanDate\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Formats</span>.<span class=\"name\">europeanDate</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat\">GenericFormat</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness.any\">Awareness.any</a></span></div></div>","info":{"doc":"The europeanDate format, which follows the pattern `dd-MM-uuuu`.\n","docLink":"./Std/Time/Format.html#Std.Time.Formats.europeanDate","kind":"def","line":35,"name":"Std.Time.Formats.europeanDate","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L35-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.Formats.americanDate\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Formats</span>.<span class=\"name\">americanDate</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat\">GenericFormat</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness.any\">Awareness.any</a></span></div></div>","info":{"doc":"The americanDate format, which follows the pattern `MM-dd-uuuu`.\n","docLink":"./Std/Time/Format.html#Std.Time.Formats.americanDate","kind":"def","line":30,"name":"Std.Time.Formats.americanDate","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L30-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Time/Format.html#Std.Time.Formats.iso8601\"><span class=\"name\">Std</span>.<span class=\"name\">Time</span>.<span class=\"name\">Formats</span>.<span class=\"name\">iso8601</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Time/Format/Basic.html#Std.Time.GenericFormat\">GenericFormat</a> <a href=\"./Std/Time/Format/Basic.html#Std.Time.Awareness.any\">Awareness.any</a></span></div></div>","info":{"doc":"The ISO 8601 format, used for representing date and time in a standardized\nformat. The format follows the pattern `uuuu-MM-dd'T'HH:mm:ssXXX`.\n","docLink":"./Std/Time/Format.html#Std.Time.Formats.iso8601","kind":"def","line":23,"name":"Std.Time.Formats.iso8601","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Time/Format.lean#L23-L27"}}],"imports":["Std.Time.Notation.Spec","Std.Time.Format.Basic","Std.Time.Format.Basic","Std.Time.Internal.Bounded"],"instances":[{"className":"ToString","name":"Std.Time.PlainDate.instToString","typeNames":["Std.Time.PlainDate"]},{"className":"Repr","name":"Std.Time.PlainDate.instRepr","typeNames":["Std.Time.PlainDate"]},{"className":"ToString","name":"Std.Time.PlainTime.instToString","typeNames":["Std.Time.PlainTime"]},{"className":"Repr","name":"Std.Time.PlainTime.instRepr","typeNames":["Std.Time.PlainTime"]},{"className":"ToString","name":"Std.Time.ZonedDateTime.instToString","typeNames":["Std.Time.ZonedDateTime"]},{"className":"Repr","name":"Std.Time.ZonedDateTime.instRepr","typeNames":["Std.Time.ZonedDateTime"]},{"className":"ToString","name":"Std.Time.PlainDateTime.instToString","typeNames":["Std.Time.PlainDateTime"]},{"className":"Repr","name":"Std.Time.PlainDateTime.instRepr","typeNames":["Std.Time.PlainDateTime"]},{"className":"Repr","name":"Std.Time.DateTime.instRepr","typeNames":["Std.Time.DateTime"]},{"className":"ToString","name":"Std.Time.DateTime.instToString","typeNames":["Std.Time.DateTime"]}],"name":"Std.Time.Format"}