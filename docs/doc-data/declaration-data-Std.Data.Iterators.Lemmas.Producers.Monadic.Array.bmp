{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Lemmas/Producers/Monadic/Array.html#Array.toListRev_toIterM\"><span class=\"name\">Array</span>.<span class=\"name\">toListRev_toIterM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">array</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Std/Data/Iterators/Producers/Monadic/Array.html#Array.iterM\">iterM</a></span> <span class=\"fn\">m</span>)</span>.<a href=\"./Init/Data/Iterators/Consumers/Monadic/Collect.html#Std.Iterators.IterM.toListRev\">toListRev</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Init/Data/Array/Lemmas.html#Array.toListRev\">toListRev</a></span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/Iterators/Lemmas/Producers/Monadic/Array.html#Array.toListRev_toIterM","kind":"theorem","line":155,"name":"Array.toListRev_toIterM","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Data/Iterators/Lemmas/Producers/Monadic/Array.lean#L155-L158"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Lemmas/Producers/Monadic/Array.html#Array.toListRev_iterFromIdxM\"><span class=\"name\">Array</span>.<span class=\"name\">toListRev_iterFromIdxM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">array</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">pos</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Std/Data/Iterators/Producers/Monadic/Array.html#Array.iterFromIdxM\">iterFromIdxM</a></span> <span class=\"fn\">m</span> <span class=\"fn\">pos</span>)</span>.<a href=\"./Init/Data/Iterators/Consumers/Monadic/Collect.html#Std.Iterators.IterM.toListRev\">toListRev</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.drop\">List.drop</a> <span class=\"fn\">pos</span> <span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Init/Prelude.html#Array.toList\">toList</a></span>)</span>.<a href=\"./Init/Data/List/Basic.html#List.reverse\">reverse</a></span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/Iterators/Lemmas/Producers/Monadic/Array.html#Array.toListRev_iterFromIdxM","kind":"theorem","line":150,"name":"Array.toListRev_iterFromIdxM","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Data/Iterators/Lemmas/Producers/Monadic/Array.lean#L150-L153"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Lemmas/Producers/Monadic/Array.html#Array.toArray_toIterM\"><span class=\"name\">Array</span>.<span class=\"name\">toArray_toIterM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">array</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Std/Data/Iterators/Producers/Monadic/Array.html#Array.iterM\">iterM</a></span> <span class=\"fn\">m</span>)</span>.<a href=\"./Init/Data/Iterators/Consumers/Monadic/Collect.html#Std.Iterators.IterM.toArray\">toArray</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">array</span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/Iterators/Lemmas/Producers/Monadic/Array.html#Array.toArray_toIterM","kind":"theorem","line":145,"name":"Array.toArray_toIterM","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Data/Iterators/Lemmas/Producers/Monadic/Array.lean#L145-L148"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Lemmas/Producers/Monadic/Array.html#Array.toArray_iterFromIdxM\"><span class=\"name\">Array</span>.<span class=\"name\">toArray_iterFromIdxM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">array</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">pos</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Std/Data/Iterators/Producers/Monadic/Array.html#Array.iterFromIdxM\">iterFromIdxM</a></span> <span class=\"fn\">m</span> <span class=\"fn\">pos</span>)</span>.<a href=\"./Init/Data/Iterators/Consumers/Monadic/Collect.html#Std.Iterators.IterM.toArray\">toArray</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Init/Prelude.html#Array.extract\">extract</a></span> <span class=\"fn\">pos</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/Iterators/Lemmas/Producers/Monadic/Array.html#Array.toArray_iterFromIdxM","kind":"theorem","line":138,"name":"Array.toArray_iterFromIdxM","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Data/Iterators/Lemmas/Producers/Monadic/Array.lean#L138-L143"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Lemmas/Producers/Monadic/Array.html#Array.toList_iterM\"><span class=\"name\">Array</span>.<span class=\"name\">toList_iterM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">array</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Std/Data/Iterators/Producers/Monadic/Array.html#Array.iterM\">iterM</a></span> <span class=\"fn\">m</span>)</span>.<a href=\"./Init/Data/Iterators/Consumers/Monadic/Collect.html#Std.Iterators.IterM.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Init/Prelude.html#Array.toList\">toList</a></span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/Iterators/Lemmas/Producers/Monadic/Array.html#Array.toList_iterM","kind":"theorem","line":133,"name":"Array.toList_iterM","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Data/Iterators/Lemmas/Producers/Monadic/Array.lean#L133-L136"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Lemmas/Producers/Monadic/Array.html#Array.toList_iterFromIdxM\"><span class=\"name\">Array</span>.<span class=\"name\">toList_iterFromIdxM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">array</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">pos</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Std/Data/Iterators/Producers/Monadic/Array.html#Array.iterFromIdxM\">iterFromIdxM</a></span> <span class=\"fn\">m</span> <span class=\"fn\">pos</span>)</span>.<a href=\"./Init/Data/Iterators/Consumers/Monadic/Collect.html#Std.Iterators.IterM.toList\">toList</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.drop\">List.drop</a> <span class=\"fn\">pos</span> <span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Init/Prelude.html#Array.toList\">toList</a></span>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/Iterators/Lemmas/Producers/Monadic/Array.html#Array.toList_iterFromIdxM","kind":"theorem","line":127,"name":"Array.toList_iterFromIdxM","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Data/Iterators/Lemmas/Producers/Monadic/Array.lean#L127-L131"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Lemmas/Producers/Monadic/Array.html#Std.Iterators.Array.iterM_equiv_iterM_toList\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Array</span>.<span class=\"name\">iterM_equiv_iterM_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">array</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Std/Data/Iterators/Producers/Monadic/Array.html#Array.iterM\">iterM</a></span> <span class=\"fn\">m</span>)</span>.<a href=\"./Std/Data/Iterators/Lemmas/Equivalence/Basic.html#Std.Iterators.IterM.Equiv\">Equiv</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Init/Prelude.html#Array.toList\">toList</a></span>.<a href=\"./Std/Data/Iterators/Producers/Monadic/List.html#List.iterM\">iterM</a></span> <span class=\"fn\">m</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/Iterators/Lemmas/Producers/Monadic/Array.html#Std.Iterators.Array.iterM_equiv_iterM_toList","kind":"theorem","line":119,"name":"Std.Iterators.Array.iterM_equiv_iterM_toList","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Data/Iterators/Lemmas/Producers/Monadic/Array.lean#L119-L123"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Lemmas/Producers/Monadic/Array.html#Std.Iterators.Array.iterFromIdxM_equiv_iterM_drop_toList\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">Array</span>.<span class=\"name\">iterFromIdxM_equiv_iterM_drop_toList</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">array</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">pos</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Std/Data/Iterators/Producers/Monadic/Array.html#Array.iterFromIdxM\">iterFromIdxM</a></span> <span class=\"fn\">m</span> <span class=\"fn\">pos</span>)</span>.<a href=\"./Std/Data/Iterators/Lemmas/Equivalence/Basic.html#Std.Iterators.IterM.Equiv\">Equiv</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.drop\">List.drop</a> <span class=\"fn\">pos</span> <span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Init/Prelude.html#Array.toList\">toList</a></span>)</span>.<a href=\"./Std/Data/Iterators/Producers/Monadic/List.html#List.iterM\">iterM</a></span> <span class=\"fn\">m</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/Iterators/Lemmas/Producers/Monadic/Array.html#Std.Iterators.Array.iterFromIdxM_equiv_iterM_drop_toList","kind":"theorem","line":84,"name":"Std.Iterators.Array.iterFromIdxM_equiv_iterM_drop_toList","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Data/Iterators/Lemmas/Producers/Monadic/Array.lean#L84-L117"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Lemmas/Producers/Monadic/Array.html#Std.Iterators.ArrayIterator.stepAsHetT_iterFromIdxM\"><span class=\"name\">Std</span>.<span class=\"name\">Iterators</span>.<span class=\"name\">ArrayIterator</span>.<span class=\"name\">stepAsHetT_iterFromIdxM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Control/Lawful/Basic.html#LawfulMonad\">LawfulMonad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">array</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">pos</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Std/Data/Iterators/Producers/Monadic/Array.html#Array.iterFromIdxM\">iterFromIdxM</a></span> <span class=\"fn\">m</span> <span class=\"fn\">pos</span>)</span>.<a href=\"./Std/Data/Iterators/Lemmas/Equivalence/Basic.html#Std.Iterators.IterM.stepAsHetT\">stepAsHetT</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">if x : <span class=\"fn\">pos</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span> then <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <span class=\"fn\">(<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.yield\">IterStep.yield</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Std/Data/Iterators/Producers/Monadic/Array.html#Array.iterFromIdxM\">iterFromIdxM</a></span> <span class=\"fn\">m</span> (<span class=\"fn\">pos</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>))</span> <span class=\"fn\">array</span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">pos</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a>)</span></span> else <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterStep.done\">IterStep.done</a></span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/Iterators/Lemmas/Producers/Monadic/Array.html#Std.Iterators.ArrayIterator.stepAsHetT_iterFromIdxM","kind":"theorem","line":55,"name":"Std.Iterators.ArrayIterator.stepAsHetT_iterFromIdxM","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Data/Iterators/Lemmas/Producers/Monadic/Array.lean#L55-L82"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Lemmas/Producers/Monadic/Array.html#Array.step_iterM\"><span class=\"name\">Array</span>.<span class=\"name\">step_iterM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">array</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Std/Data/Iterators/Producers/Monadic/Array.html#Array.iterM\">iterM</a></span> <span class=\"fn\">m</span>)</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.step\">step</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a>\n    <span class=\"fn\">(if h : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span> then <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.PlausibleIterStep.yield\">Std.Iterators.PlausibleIterStep.yield</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Std/Data/Iterators/Producers/Monadic/Array.html#Array.iterFromIdxM\">iterFromIdxM</a></span> <span class=\"fn\">m</span> <span class=\"fn\">1</span>)</span> <span class=\"fn\">array</span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">0</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a> <span class=\"fn\">⋯</span></span>\n    else <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.PlausibleIterStep.done\">Std.Iterators.PlausibleIterStep.done</a> <span class=\"fn\">⋯</span></span>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/Iterators/Lemmas/Producers/Monadic/Array.html#Array.step_iterM","kind":"theorem","line":43,"name":"Array.step_iterM","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Data/Iterators/Lemmas/Producers/Monadic/Array.lean#L43-L51"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Lemmas/Producers/Monadic/Array.html#Array.step_iterFromIdxM\"><span class=\"name\">Array</span>.<span class=\"name\">step_iterFromIdxM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">array</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">pos</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Std/Data/Iterators/Producers/Monadic/Array.html#Array.iterFromIdxM\">iterFromIdxM</a></span> <span class=\"fn\">m</span> <span class=\"fn\">pos</span>)</span>.<a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.IterM.step\">step</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a>\n    <span class=\"fn\">(if h : <span class=\"fn\">pos</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Init/Prelude.html#Array.size\">size</a></span> then <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.PlausibleIterStep.yield\">Std.Iterators.PlausibleIterStep.yield</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Std/Data/Iterators/Producers/Monadic/Array.html#Array.iterFromIdxM\">iterFromIdxM</a></span> <span class=\"fn\">m</span> (<span class=\"fn\">pos</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>))</span> <span class=\"fn\">array</span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">pos</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a> <span class=\"fn\">⋯</span></span>\n    else <span class=\"fn\"><a href=\"./Init/Data/Iterators/Basic.html#Std.Iterators.PlausibleIterStep.done\">Std.Iterators.PlausibleIterStep.done</a> <span class=\"fn\">⋯</span></span>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/Iterators/Lemmas/Producers/Monadic/Array.html#Array.step_iterFromIdxM","kind":"theorem","line":33,"name":"Array.step_iterFromIdxM","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Data/Iterators/Lemmas/Producers/Monadic/Array.lean#L33-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Data/Iterators/Lemmas/Producers/Monadic/Array.html#Array.iterM_eq_iterFromIdxM\"><span class=\"name\">Array</span>.<span class=\"name\">iterM_eq_iterFromIdxM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> w → <a href=\"./foundational_types.html\">Type</a> w'</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> w}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">array</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">β</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Std/Data/Iterators/Producers/Monadic/Array.html#Array.iterM\">iterM</a></span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">array</span>.<a href=\"./Std/Data/Iterators/Producers/Monadic/Array.html#Array.iterFromIdxM\">iterFromIdxM</a></span> <span class=\"fn\">m</span> <span class=\"fn\">0</span></span></div></div>","info":{"doc":"","docLink":"./Std/Data/Iterators/Lemmas/Producers/Monadic/Array.html#Array.iterM_eq_iterFromIdxM","kind":"theorem","line":29,"name":"Array.iterM_eq_iterFromIdxM","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Data/Iterators/Lemmas/Producers/Monadic/Array.lean#L29-L31"}}],"imports":["Init.Data.Iterators.Internal.LawfulMonadLiftFunction","Init.Data.Iterators.Consumers","Std.Data.Iterators.Producers.Monadic.Array","Std.Data.Iterators.Lemmas.Consumers.Monadic","Std.Data.Iterators.Lemmas.Producers.Monadic.List","Std.Data.Iterators.Lemmas.Equivalence.Basic"],"instances":[],"name":"Std.Data.Iterators.Lemmas.Producers.Monadic.Array"}