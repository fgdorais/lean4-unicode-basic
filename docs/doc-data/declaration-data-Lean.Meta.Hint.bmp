{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Hint.html#Lean.MessageData.hint\"><span class=\"name\">Lean</span>.<span class=\"name\">MessageData</span>.<span class=\"name\">hint</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hint</span> : <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">suggestions</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Hint.html#Lean.Meta.Hint.Suggestion\">Meta.Hint.Suggestion</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">codeActionPrefix?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">forceList</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>","info":{"doc":"Creates a hint message with associated code action suggestions.\n\nTo provide a hint without an associated code action, use `MessageData.hint'`.\n\nThe arguments are as follows:\n* `hint`: the main message of the hint, which precedes its code action suggestions.\n* `suggestions`: the suggestions to display.\n* `ref?`: if specified, the syntax location for the code action suggestions; otherwise, default to\n  the syntax reference in the monadic state. Will be overridden by the `span?` field on any\n  suggestions that specify it.\n* `codeActionPrefix?`: if specified, text to display in place of \"Try this: \" in the code action\n  label\n* `forceList`: if `true`, suggestions will be displayed as a bulleted list even if there is only one.\n","docLink":"./Lean/Meta/Hint.html#Lean.MessageData.hint","kind":"def","line":384,"name":"Lean.MessageData.hint","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Hint.lean#L384-L406"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Hint.html#Lean.Meta.Hint.mkSuggestionsMessage\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Hint</span>.<span class=\"name\">mkSuggestionsMessage</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">suggestions</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Hint.html#Lean.Meta.Hint.Suggestion\">Suggestion</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">codeActionPrefix?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">forceList</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></div></div>","info":{"doc":"Creates message data corresponding to a `HintSuggestions` collection and adds the corresponding info\nleaf.\n","docLink":"./Lean/Meta/Hint.html#Lean.Meta.Hint.mkSuggestionsMessage","kind":"def","line":328,"name":"Lean.Meta.Hint.mkSuggestionsMessage","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Hint.lean#L328-L382"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Hint.html#Lean.Meta.Hint.readableDiff\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Hint</span>.<span class=\"name\">readableDiff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s </span><span class=\"fn\">s'</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">granularity</span> : <a href=\"./Lean/Meta/Hint.html#Lean.Meta.Hint.DiffGranularity\">DiffGranularity</a> := <a href=\"./Lean/Meta/Hint.html#Lean.Meta.Hint.DiffGranularity.auto\">DiffGranularity.auto</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Lean/Util/Diff.html#Lean.Diff.Action\">Diff.Action</a> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <a href=\"./Init/Prelude.html#String\">String</a>)</span></div></div>","info":{"doc":"Produces a diff that splits either on characters, tokens, or not at all, depending on the selected\n`diffMode`.\n\nGuarantees that all actions in the output will be maximally grouped; that is, instead of returning\n`#[(.insert, \"a\"), (.insert, \"b\")]`, it will return `#[(.insert, \"ab\")]`.\n","docLink":"./Lean/Meta/Hint.html#Lean.Meta.Hint.readableDiff","kind":"def","line":160,"name":"Lean.Meta.Hint.readableDiff","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Hint.lean#L160-L326"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Hint.html#Lean.Meta.Hint.instToMessageDataSuggestion\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Hint</span>.<span class=\"name\">instToMessageDataSuggestion</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">ToMessageData</a> <a href=\"./Lean/Meta/Hint.html#Lean.Meta.Hint.Suggestion\">Suggestion</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Hint.html#Lean.Meta.Hint.instToMessageDataSuggestion","kind":"instance","line":157,"name":"Lean.Meta.Hint.instToMessageDataSuggestion","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Hint.lean#L157-L158"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Hint.html#Lean.Meta.Hint.instCoeSuggestionTextSuggestion\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Hint</span>.<span class=\"name\">instCoeSuggestionTextSuggestion</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Lean/Meta/TryThis.html#Lean.Meta.Tactic.TryThis.SuggestionText\">Tactic.TryThis.SuggestionText</a> <a href=\"./Lean/Meta/Hint.html#Lean.Meta.Hint.Suggestion\">Suggestion</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Hint.html#Lean.Meta.Hint.instCoeSuggestionTextSuggestion","kind":"instance","line":154,"name":"Lean.Meta.Hint.instCoeSuggestionTextSuggestion","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Hint.lean#L154-L155"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Hint.html#Lean.Meta.Hint.Suggestion.diffGranularity\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Hint</span>.<span class=\"name\">Suggestion</span>.<span class=\"name\">diffGranularity</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Hint.html#Lean.Meta.Hint.Suggestion\">Suggestion</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Hint.html#Lean.Meta.Hint.DiffGranularity\">DiffGranularity</a></div></div>","info":{"doc":"The granularity at which the diff for this suggestion should be rendered in the Infoview. See\n`DiffMode` for the possible granularities. This is `.auto` by default.\n","docLink":"./Lean/Meta/Hint.html#Lean.Meta.Hint.Suggestion.diffGranularity","kind":"def","line":152,"name":"Lean.Meta.Hint.Suggestion.diffGranularity","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Hint.lean#L152-L152"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Hint.html#Lean.Meta.Hint.Suggestion.previewSpan?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Hint</span>.<span class=\"name\">Suggestion</span>.<span class=\"name\">previewSpan?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Hint.html#Lean.Meta.Hint.Suggestion\">Suggestion</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>","info":{"doc":"The syntax to render in the inline diff preview. This syntax must have valid position information\nand must contain the span at which the edit occurs.\n","docLink":"./Lean/Meta/Hint.html#Lean.Meta.Hint.Suggestion.previewSpan?","kind":"def","line":147,"name":"Lean.Meta.Hint.Suggestion.previewSpan?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Hint.lean#L147-L147"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Hint.html#Lean.Meta.Hint.Suggestion.span?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Hint</span>.<span class=\"name\">Suggestion</span>.<span class=\"name\">span?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Hint.html#Lean.Meta.Hint.Suggestion\">Suggestion</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>","info":{"doc":"The span at which this suggestion should apply. This allows a single hint to suggest modifications\nat different locations. If `span?` is not specified, then the syntax reference provided to\n`MessageData.hint` will be used.\n","docLink":"./Lean/Meta/Hint.html#Lean.Meta.Hint.Suggestion.span?","kind":"def","line":142,"name":"Lean.Meta.Hint.Suggestion.span?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Hint.lean#L142-L142"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Hint.html#Lean.Meta.Hint.Suggestion.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Hint</span>.<span class=\"name\">Suggestion</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toTryThisSuggestion</span> : <a href=\"./Lean/Meta/TryThis.html#Lean.Meta.Tactic.TryThis.Suggestion\">Tactic.TryThis.Suggestion</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">span? </span><span class=\"fn\">previewSpan?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">diffGranularity</span> : <a href=\"./Lean/Meta/Hint.html#Lean.Meta.Hint.DiffGranularity\">DiffGranularity</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Hint.html#Lean.Meta.Hint.Suggestion\">Suggestion</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Hint.html#Lean.Meta.Hint.Suggestion.mk","kind":"ctor","line":136,"name":"Lean.Meta.Hint.Suggestion.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Hint.lean#L136-L136"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Hint.html#Lean.Meta.Hint.Suggestion.toTryThisSuggestion\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Hint</span>.<span class=\"name\">Suggestion</span>.<span class=\"name\">toTryThisSuggestion</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Hint.html#Lean.Meta.Hint.Suggestion\">Suggestion</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/TryThis.html#Lean.Meta.Tactic.TryThis.Suggestion\">Tactic.TryThis.Suggestion</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Hint.html#Lean.Meta.Hint.Suggestion.toTryThisSuggestion","kind":"def","line":136,"name":"Lean.Meta.Hint.Suggestion.toTryThisSuggestion","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Hint.lean#L136-L152"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Hint.html#Lean.Meta.Hint.Suggestion\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Hint</span>.<span class=\"name\">Suggestion</span></a></span><span class=\"decl_extends\">extends</span> <a href=\"./Lean/Meta/TryThis.html#Lean.Meta.Tactic.TryThis.Suggestion\">Lean.Meta.Tactic.TryThis.Suggestion</a><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A code action suggestion associated with a hint in a message.\n\nRefer to `TryThis.Suggestion`. This extends that structure with several fields specific to inline\nhints.\n","docLink":"./Lean/Meta/Hint.html#Lean.Meta.Hint.Suggestion","kind":"structure","line":130,"name":"Lean.Meta.Hint.Suggestion","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Hint.lean#L130-L152"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Hint.html#Lean.Meta.Hint.DiffGranularity.none\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Hint</span>.<span class=\"name\">DiffGranularity</span>.<span class=\"name\">none</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Hint.html#Lean.Meta.Hint.DiffGranularity\">DiffGranularity</a></div></div>","info":{"doc":"No diff: Shows no deletion of the existing source, only an insertion of the suggestion.\n","docLink":"./Lean/Meta/Hint.html#Lean.Meta.Hint.DiffGranularity.none","kind":"ctor","line":125,"name":"Lean.Meta.Hint.DiffGranularity.none","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Hint.lean#L125-L128"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Hint.html#Lean.Meta.Hint.DiffGranularity.all\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Hint</span>.<span class=\"name\">DiffGranularity</span>.<span class=\"name\">all</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Hint.html#Lean.Meta.Hint.DiffGranularity\">DiffGranularity</a></div></div>","info":{"doc":"\"Monolithic\" diff: shows a deletion of the entire existing source, followed by an insertion of the\nentire suggestion.\n","docLink":"./Lean/Meta/Hint.html#Lean.Meta.Hint.DiffGranularity.all","kind":"ctor","line":120,"name":"Lean.Meta.Hint.DiffGranularity.all","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Hint.lean#L120-L124"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Hint.html#Lean.Meta.Hint.DiffGranularity.word\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Hint</span>.<span class=\"name\">DiffGranularity</span>.<span class=\"name\">word</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Hint.html#Lean.Meta.Hint.DiffGranularity\">DiffGranularity</a></div></div>","info":{"doc":"Diff using whitespace-separated tokens. ","docLink":"./Lean/Meta/Hint.html#Lean.Meta.Hint.DiffGranularity.word","kind":"ctor","line":118,"name":"Lean.Meta.Hint.DiffGranularity.word","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Hint.lean#L118-L119"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Hint.html#Lean.Meta.Hint.DiffGranularity.char\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Hint</span>.<span class=\"name\">DiffGranularity</span>.<span class=\"name\">char</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Hint.html#Lean.Meta.Hint.DiffGranularity\">DiffGranularity</a></div></div>","info":{"doc":"Character-level diff. ","docLink":"./Lean/Meta/Hint.html#Lean.Meta.Hint.DiffGranularity.char","kind":"ctor","line":116,"name":"Lean.Meta.Hint.DiffGranularity.char","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Hint.lean#L116-L117"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Hint.html#Lean.Meta.Hint.DiffGranularity.auto\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Hint</span>.<span class=\"name\">DiffGranularity</span>.<span class=\"name\">auto</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Hint.html#Lean.Meta.Hint.DiffGranularity\">DiffGranularity</a></div></div>","info":{"doc":"Automatically select diff granularity based on edit distance. ","docLink":"./Lean/Meta/Hint.html#Lean.Meta.Hint.DiffGranularity.auto","kind":"ctor","line":114,"name":"Lean.Meta.Hint.DiffGranularity.auto","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Hint.lean#L114-L115"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Hint.html#Lean.Meta.Hint.DiffGranularity\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Hint</span>.<span class=\"name\">DiffGranularity</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The granularity at which to display an inline diff for a suggested edit. ","docLink":"./Lean/Meta/Hint.html#Lean.Meta.Hint.DiffGranularity","kind":"inductive","line":112,"name":"Lean.Meta.Hint.DiffGranularity","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Hint.lean#L112-L128"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Hint.html#Lean.Meta.Hint.tryThisDiffWidget\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Hint</span>.<span class=\"name\">tryThisDiffWidget</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Widget/Types.html#Lean.Widget.Module\">Widget.Module</a></div></div>","info":{"doc":"A widget for rendering code action suggestions in error messages. Generally, this widget should not\nbe used directly; instead, use `MessageData.hint`. Note that this widget is intended only for use\nwithin message data; it may not display line breaks properly if rendered as a panel widget.\n\nThe props to this widget are of the following form:\n```json\n{\n  \"diff\": [\n    {\"type\": \"unchanged\", \"text\": \"h\"},\n    {\"type\": \"deletion\", \"text\": \"ello\"},\n    {\"type\": \"insertion\", \"text\": \"i\"}\n  ],\n  \"suggestion\": \"hi\",\n  \"range\": {\n    \"start\": {\"line\": 100, \"character\": 0},\n    \"end\":   {\"line\": 100, \"character\": 5}\n  }\n}\n```\n\nNote: we cannot add the `builtin_widget_module` attribute here because that would require importing\n`Lean.Widget.UserWidget`, which in turn imports much of `Lean.Elab` -- the module where we want to\nbe able to use this widget. Instead, we register the attribute post-hoc when we declare the regular\n\"Try This\" widget in `Lean.Meta.Tactic.TryThis`.\n","docLink":"./Lean/Meta/Hint.html#Lean.Meta.Hint.tryThisDiffWidget","kind":"def","line":25,"name":"Lean.Meta.Hint.tryThisDiffWidget","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Hint.lean#L25-L87"}}],"imports":["Lean.CoreM","Lean.Data.Lsp.Utf16","Lean.Message","Lean.Meta.TryThis","Lean.Util.Diff","Lean.Widget.Types","Lean.PrettyPrinter"],"instances":[{"className":"Coe","name":"Lean.Meta.Hint.instCoeSuggestionTextSuggestion","typeNames":["Lean.Meta.Tactic.TryThis.SuggestionText","Lean.Meta.Hint.Suggestion"]},{"className":"Lean.ToMessageData","name":"Lean.Meta.Hint.instToMessageDataSuggestion","typeNames":["Lean.Meta.Hint.Suggestion"]}],"name":"Lean.Meta.Hint"}