{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Order.html#Lean.Meta.mkPackedPPRodInstance\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">mkPackedPPRodInstance</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">insts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Given an array of CCPO instances `insts = #[CCPO α₁, ..., CCPO αₙ]`, constructs an instance\nof the type `CCPO (α₁ × ... × αₙ)`.\nCan handle `CompleteLattice` as well.\n","docLink":"./Lean/Meta/Order.html#Lean.Meta.mkPackedPPRodInstance","kind":"def","line":89,"name":"Lean.Meta.mkPackedPPRodInstance","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Order.lean#L89-L101"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Order.html#Lean.Meta.mkInstCompleteLatticePProd\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">mkInstCompleteLatticePProd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inst₁ </span><span class=\"fn\">inst₂</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Given CCPO instances `inst₁ : CompleteLattice α₁` and `inst₂ : CompleteLattice α₂`,\nconstructs an instance of the type `CompleteLattice (α₁ × α₂)`.\n","docLink":"./Lean/Meta/Order.html#Lean.Meta.mkInstCompleteLatticePProd","kind":"def","line":82,"name":"Lean.Meta.mkInstCompleteLatticePProd","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Order.lean#L82-L87"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Order.html#Lean.Meta.mkInstCCPOPProd\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">mkInstCCPOPProd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inst₁ </span><span class=\"fn\">inst₂</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Given CCPO instances `inst₁ : CCPO α₁` and `inst₂ : CCPO α₂`,\nconstructs an instance of the type `CCPO (α₁ × α₂)`.\n","docLink":"./Lean/Meta/Order.html#Lean.Meta.mkInstCCPOPProd","kind":"def","line":75,"name":"Lean.Meta.mkInstCCPOPProd","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Order.lean#L75-L80"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Order.html#Lean.Meta.toPartialOrder\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">toPartialOrder</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">packedInst</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Given `packedInst : CCPO α `, returns an underlying instance of the type\n`PartialOrder α`. Can handle `CompleteLattice` as well.\nTakes an optional argument with the type `α`. If the optional argument is `none`,\nit is treated implicitly.\n","docLink":"./Lean/Meta/Order.html#Lean.Meta.toPartialOrder","kind":"def","line":61,"name":"Lean.Meta.toPartialOrder","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Order.lean#L61-L73"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Order.html#Lean.Meta.mkFixOfMonFun\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">mkFixOfMonFun</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">packedType </span><span class=\"fn\">packedInst </span><span class=\"fn\">hmono</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Given a function `f : α → α`, an instance `inst : CCPO α`\nand a monotonicity proof `hmono : monotone f`, constructs a least fixpoint of `f`\nwith respect to the instance `inst`. The `packedType` is assumed to contain the type `α`.\nCan handle `CompleteLattice` as well.\n","docLink":"./Lean/Meta/Order.html#Lean.Meta.mkFixOfMonFun","kind":"def","line":47,"name":"Lean.Meta.mkFixOfMonFun","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Order.lean#L47-L59"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Order.html#Lean.Meta.mkInstPiOfInstsForall\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">mkInstPiOfInstsForall</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inst</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"An n-ary version of `mkInstPiOfInstForall`. Takes an array of arguments instead.\n-","docLink":"./Lean/Meta/Order.html#Lean.Meta.mkInstPiOfInstsForall","kind":"def","line":39,"name":"Lean.Meta.mkInstPiOfInstsForall","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Order.lean#L39-L45"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Order.html#Lean.Meta.mkInstPiOfInstForall\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">mkInstPiOfInstForall</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">inst</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Given `inst : CCPO (t[x])` for some FVar `x`, constructs an instance\nof the type `CCPO (∀ x, t[x])`.\nCan handle `CompleteLattice` as well.\n-","docLink":"./Lean/Meta/Order.html#Lean.Meta.mkInstPiOfInstForall","kind":"def","line":26,"name":"Lean.Meta.mkInstPiOfInstForall","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Order.lean#L26-L37"}}],"imports":["Lean.Meta.InferType","Lean.Meta.PProdN","Lean.Meta.AppBuilder","Init.Internal.Order.Basic"],"instances":[],"name":"Lean.Meta.Order"}