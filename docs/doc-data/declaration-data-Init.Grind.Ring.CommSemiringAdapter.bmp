{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.eq_normS\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">eq_normS</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommSemiring\">CommSemiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.eq_normS_cert\">eq_normS_cert</a> <span class=\"fn\">lhs</span> <span class=\"fn\">rhs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> → <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.eq_normS","kind":"theorem","line":385,"name":"Lean.Grind.Ring.OfSemiring.eq_normS","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Ring/CommSemiringAdapter.lean#L385-L390"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.eq_normS_cert\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">eq_normS_cert</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.eq_normS_cert","kind":"def","line":382,"name":"Lean.Grind.Ring.OfSemiring.eq_normS_cert","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Ring/CommSemiringAdapter.lean#L382-L383"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Expr.denoteS_toPoly\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">Expr</span>.<span class=\"name\">denoteS_toPoly</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommSemiring\">CommSemiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.denoteS\">CommRing.Poly.denoteS</a> <span class=\"fn\">ctx</span> <span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Expr.toPoly\">toPoly</a></span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Expr.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">e</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Expr.denoteS_toPoly","kind":"theorem","line":368,"name":"Lean.Grind.Ring.OfSemiring.Expr.denoteS_toPoly","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Ring/CommSemiringAdapter.lean#L368-L380"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Expr.toPoly_NonnegCoeffs\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">Expr</span>.<span class=\"name\">toPoly_NonnegCoeffs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Expr\">Expr</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">e</span>.<a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Expr.toPoly\">toPoly</a></span>.<a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Expr.toPoly_NonnegCoeffs","kind":"theorem","line":358,"name":"Lean.Grind.Ring.OfSemiring.Expr.toPoly_NonnegCoeffs","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Ring/CommSemiringAdapter.lean#L358-L366"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.denoteS_pow\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denoteS_pow</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommSemiring\">CommSemiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.denoteS\">denoteS</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.pow\">pow</a></span> <span class=\"fn\">k</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.denoteS\">denoteS</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">k</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.denoteS_pow","kind":"theorem","line":342,"name":"Lean.Grind.CommRing.Poly.denoteS_pow","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Ring/CommSemiringAdapter.lean#L342-L351"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.denoteS_mul\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denoteS_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommSemiring\">CommSemiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₂</span>.<a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.denoteS\">denoteS</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mul\">mul</a></span> <span class=\"fn\">p₂</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.denoteS\">denoteS</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.denoteS\">denoteS</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.denoteS_mul","kind":"theorem","line":337,"name":"Lean.Grind.CommRing.Poly.denoteS_mul","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Ring/CommSemiringAdapter.lean#L337-L340"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.denoteS_mul_go\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denoteS_mul_go</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommSemiring\">CommSemiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">acc</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> →\n  <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₂</span>.<a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> →\n    <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">acc</span>.<a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.denoteS\">denoteS</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mul.go\">mul.go</a> <span class=\"fn\">p₂</span> <span class=\"fn\">p₁</span> <span class=\"fn\">acc</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.denoteS\">denoteS</a> <span class=\"fn\">ctx</span> <span class=\"fn\">acc</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.denoteS\">denoteS</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.denoteS\">denoteS</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.denoteS_mul_go","kind":"theorem","line":321,"name":"Lean.Grind.CommRing.Poly.denoteS_mul_go","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Ring/CommSemiringAdapter.lean#L321-L335"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.num_zero_NonnegCoeffs\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">num_zero_NonnegCoeffs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.num\">num</a> <span class=\"fn\">0</span>)</span>.<a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.num_zero_NonnegCoeffs","kind":"theorem","line":318,"name":"Lean.Grind.CommRing.Poly.num_zero_NonnegCoeffs","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Ring/CommSemiringAdapter.lean#L318-L319"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.pow_NonnegCoeffs\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">pow_NonnegCoeffs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.pow\">pow</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.pow_NonnegCoeffs","kind":"theorem","line":312,"name":"Lean.Grind.CommRing.Poly.pow_NonnegCoeffs","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Ring/CommSemiringAdapter.lean#L312-L316"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.mul_NonnegCoeffs\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">mul_NonnegCoeffs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₂</span>.<a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mul\">mul</a></span> <span class=\"fn\">p₂</span>)</span>.<a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.mul_NonnegCoeffs","kind":"theorem","line":308,"name":"Lean.Grind.CommRing.Poly.mul_NonnegCoeffs","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Ring/CommSemiringAdapter.lean#L308-L310"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.mul_go_NonnegCoeffs\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">mul_go_NonnegCoeffs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂ </span><span class=\"fn\">acc</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₂</span>.<a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">acc</span>.<a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mul.go\">mul.go</a> <span class=\"fn\">p₂</span> <span class=\"fn\">p₁</span> <span class=\"fn\">acc</span>)</span>.<a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.mul_go_NonnegCoeffs","kind":"theorem","line":292,"name":"Lean.Grind.CommRing.Poly.mul_go_NonnegCoeffs","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Ring/CommSemiringAdapter.lean#L292-L306"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.combine_NonnegCoeffs\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">combine_NonnegCoeffs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₂</span>.<a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.combine\">combine</a></span> <span class=\"fn\">p₂</span>)</span>.<a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.combine_NonnegCoeffs","kind":"theorem","line":271,"name":"Lean.Grind.CommRing.Poly.combine_NonnegCoeffs","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Ring/CommSemiringAdapter.lean#L271-L290"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.concat_NonnegCoeffs\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">concat_NonnegCoeffs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₂</span>.<a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.concat\">concat</a></span> <span class=\"fn\">p₂</span>)</span>.<a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.concat_NonnegCoeffs","kind":"theorem","line":266,"name":"Lean.Grind.CommRing.Poly.concat_NonnegCoeffs","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Ring/CommSemiringAdapter.lean#L266-L269"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.addConst_NonnegCoeffs\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">addConst_NonnegCoeffs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.addConst\">addConst</a></span> <span class=\"fn\">k</span>)</span>.<a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.addConst_NonnegCoeffs","kind":"theorem","line":259,"name":"Lean.Grind.CommRing.Poly.addConst_NonnegCoeffs","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Ring/CommSemiringAdapter.lean#L259-L264"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.mulMon_NonnegCoeffs\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">mulMon_NonnegCoeffs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mulMon\">mulMon</a> <span class=\"fn\">k</span> <span class=\"fn\">m</span> <span class=\"fn\">p</span>)</span>.<a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.mulMon_NonnegCoeffs","kind":"theorem","line":246,"name":"Lean.Grind.CommRing.Poly.mulMon_NonnegCoeffs","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Ring/CommSemiringAdapter.lean#L246-L257"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.mulConst_NonnegCoeffs\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">mulConst_NonnegCoeffs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mulConst\">mulConst</a> <span class=\"fn\">k</span> <span class=\"fn\">p</span>)</span>.<a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.mulConst_NonnegCoeffs","kind":"theorem","line":233,"name":"Lean.Grind.CommRing.Poly.mulConst_NonnegCoeffs","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Ring/CommSemiringAdapter.lean#L233-L244"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.denoteS_combine\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denoteS_combine</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommSemiring\">CommSemiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₂</span>.<a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.denoteS\">denoteS</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.combine\">combine</a></span> <span class=\"fn\">p₂</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.denoteS\">denoteS</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.denoteS\">denoteS</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.denoteS_combine","kind":"theorem","line":200,"name":"Lean.Grind.CommRing.Poly.denoteS_combine","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Ring/CommSemiringAdapter.lean#L200-L231"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.denoteS_mulMon\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denoteS_mulMon</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommSemiring\">CommSemiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.denoteS\">denoteS</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mulMon\">mulMon</a> <span class=\"fn\">k</span> <span class=\"fn\">m</span> <span class=\"fn\">p</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">k</span>.<a href=\"./Init/Data/Int/Basic.html#Int.toNat\">toNat</a></span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.denote\">Mon.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.denoteS\">denoteS</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.denoteS_mulMon","kind":"theorem","line":177,"name":"Lean.Grind.CommRing.Poly.denoteS_mulMon","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Ring/CommSemiringAdapter.lean#L177-L198"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.denoteS_mulConst\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denoteS_mulConst</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommSemiring\">CommSemiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.denoteS\">denoteS</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.mulConst\">mulConst</a> <span class=\"fn\">k</span> <span class=\"fn\">p</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">k</span>.<a href=\"./Init/Data/Int/Basic.html#Int.toNat\">toNat</a></span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.denoteS\">denoteS</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.denoteS_mulConst","kind":"theorem","line":163,"name":"Lean.Grind.CommRing.Poly.denoteS_mulConst","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Ring/CommSemiringAdapter.lean#L163-L175"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.denoteS_concat\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denoteS_concat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommSemiring\">CommSemiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p₁ </span><span class=\"fn\">p₂</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p₂</span>.<a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.denoteS\">denoteS</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p₁</span>.<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.concat\">concat</a></span> <span class=\"fn\">p₂</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.denoteS\">denoteS</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₁</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.denoteS\">denoteS</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p₂</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.denoteS_concat","kind":"theorem","line":157,"name":"Lean.Grind.CommRing.Poly.denoteS_concat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Ring/CommSemiringAdapter.lean#L157-L161"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.denoteS_insert\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denoteS_insert</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommSemiring\">CommSemiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.denoteS\">denoteS</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.insert\">insert</a> <span class=\"fn\">k</span> <span class=\"fn\">m</span> <span class=\"fn\">p</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">k</span>.<a href=\"./Init/Data/Int/Basic.html#Int.toNat\">toNat</a></span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.denote\">Mon.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">m</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.denoteS\">denoteS</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.denoteS_insert","kind":"theorem","line":130,"name":"Lean.Grind.CommRing.Poly.denoteS_insert","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Ring/CommSemiringAdapter.lean#L130-L155"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.denoteS_addConst\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denoteS_addConst</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommSemiring\">CommSemiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.denoteS\">denoteS</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.addConst\">addConst</a></span> <span class=\"fn\">k</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.denoteS\">denoteS</a> <span class=\"fn\">ctx</span> <span class=\"fn\">p</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">k</span>.<a href=\"./Init/Data/Int/Basic.html#Int.toNat\">toNat</a></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.denoteS_addConst","kind":"theorem","line":117,"name":"Lean.Grind.CommRing.Poly.denoteS_addConst","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Ring/CommSemiringAdapter.lean#L117-L128"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.denoteS_ofVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denoteS_ofVar</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommSemiring\">CommSemiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Var\">Var</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.denoteS\">denoteS</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.ofVar\">ofVar</a> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Var.denote\">Var.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.denoteS_ofVar","kind":"theorem","line":113,"name":"Lean.Grind.CommRing.Poly.denoteS_ofVar","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Ring/CommSemiringAdapter.lean#L113-L115"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.denoteS_ofMon\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denoteS_ofMon</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommSemiring\">CommSemiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.denoteS\">denoteS</a> <span class=\"fn\">ctx</span> <span class=\"fn\">(<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.ofMon\">ofMon</a> <span class=\"fn\">m</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon.denote\">Mon.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">m</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.denoteS_ofMon","kind":"theorem","line":109,"name":"Lean.Grind.CommRing.Poly.denoteS_ofMon","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Ring/CommSemiringAdapter.lean#L109-L111"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.denoteS\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denoteS</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.denoteS","kind":"def","line":102,"name":"Lean.Grind.CommRing.Poly.denoteS","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Ring/CommSemiringAdapter.lean#L102-L105"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.denoteSInt_eq\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">denoteSInt_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.denoteSInt\">denoteSInt</a> <span class=\"fn\">k</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">k</span>.<a href=\"./Init/Data/Int/Basic.html#Int.toNat\">toNat</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.denoteSInt_eq","kind":"theorem","line":94,"name":"Lean.Grind.CommRing.denoteSInt_eq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Ring/CommSemiringAdapter.lean#L94-L100"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.denoteSInt\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">denoteSInt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.denoteSInt","kind":"def","line":88,"name":"Lean.Grind.CommRing.denoteSInt","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Ring/CommSemiringAdapter.lean#L88-L92"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.NonnegCoeffs.add\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">NonnegCoeffs</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Mon\">Mon</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">p</span>.<a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span> → <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.add\">Poly.add</a> <span class=\"fn\">a</span> <span class=\"fn\">m</span> <span class=\"fn\">p</span>)</span>.<a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.NonnegCoeffs.add","kind":"ctor","line":86,"name":"Lean.Grind.CommRing.Poly.NonnegCoeffs.add","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Ring/CommSemiringAdapter.lean#L86-L86"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.NonnegCoeffs.num\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">NonnegCoeffs</span>.<span class=\"name\">num</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">0</span> → <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly.num\">Poly.num</a> <span class=\"fn\">c</span>)</span>.<a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\">NonnegCoeffs</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.NonnegCoeffs.num","kind":"ctor","line":85,"name":"Lean.Grind.CommRing.Poly.NonnegCoeffs.num","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Ring/CommSemiringAdapter.lean#L85-L85"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.NonnegCoeffs\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">CommRing</span>.<span class=\"name\">Poly</span>.<span class=\"name\">NonnegCoeffs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Poly</a> → <a href=\"./foundational_types.html\">Prop</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.CommRing.Poly.NonnegCoeffs","kind":"inductive","line":84,"name":"Lean.Grind.CommRing.Poly.NonnegCoeffs","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Ring/CommSemiringAdapter.lean#L84-L86"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Expr.toPoly\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">Expr</span>.<span class=\"name\">toPoly</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Expr\">Expr</a> → <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">CommRing.Poly</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Expr.toPoly","kind":"def","line":65,"name":"Lean.Grind.Ring.OfSemiring.Expr.toPoly","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Ring/CommSemiringAdapter.lean#L65-L74"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.of_diseq\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">of_diseq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Module/Basic.html#Lean.Grind.AddRightCancel\">AddRightCancel</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Expr.denoteAsRing\">Expr.denoteAsRing</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Expr.denoteAsRing\">Expr.denoteAsRing</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.of_diseq","kind":"theorem","line":58,"name":"Lean.Grind.Ring.OfSemiring.of_diseq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Ring/CommSemiringAdapter.lean#L58-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.of_eq\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">of_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Expr.denote\">Expr.denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span> → <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Expr.denoteAsRing\">Expr.denoteAsRing</a> <span class=\"fn\">ctx</span> <span class=\"fn\">lhs</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Expr.denoteAsRing\">Expr.denoteAsRing</a> <span class=\"fn\">ctx</span> <span class=\"fn\">rhs</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.of_eq","kind":"theorem","line":53,"name":"Lean.Grind.Ring.OfSemiring.of_eq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Ring/CommSemiringAdapter.lean#L53-L56"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Expr.denoteAsRing_eq\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">Expr</span>.<span class=\"name\">denoteAsRing_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Expr.denoteAsRing\">denoteAsRing</a> <span class=\"fn\">ctx</span> <span class=\"fn\">e</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.toQ\">↑</a><span class=\"fn\">(<a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Expr.denote\">denote</a> <span class=\"fn\">ctx</span> <span class=\"fn\">e</span>)</span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Expr.denoteAsRing_eq","kind":"theorem","line":50,"name":"Lean.Grind.Ring.OfSemiring.Expr.denoteAsRing_eq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Ring/CommSemiringAdapter.lean#L50-L51"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Expr.denoteAsRing\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">Expr</span>.<span class=\"name\">denoteAsRing</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Init/Grind/Ring/Envelope.html#Lean.Grind.Ring.OfSemiring.Q\">Q</a> <span class=\"fn\">α</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Expr.denoteAsRing","kind":"def","line":41,"name":"Lean.Grind.Ring.OfSemiring.Expr.denoteAsRing","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Ring/CommSemiringAdapter.lean#L41-L46"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Expr.denote\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">Expr</span>.<span class=\"name\">denote</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.Semiring\">Semiring</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Expr\">Expr</a> → <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Expr.denote","kind":"def","line":32,"name":"Lean.Grind.Ring.OfSemiring.Expr.denote","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Ring/CommSemiringAdapter.lean#L32-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Var.denote\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">Var</span>.<span class=\"name\">denote</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Context\">Context</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Var\">Var</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Var.denote","kind":"def","line":29,"name":"Lean.Grind.Ring.OfSemiring.Var.denote","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Ring/CommSemiringAdapter.lean#L29-L30"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Context\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Context","kind":"def","line":27,"name":"Lean.Grind.Ring.OfSemiring.Context","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Ring/CommSemiringAdapter.lean#L27-L27"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.instHashableExpr.hash\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">instHashableExpr</span>.<span class=\"name\">hash</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Expr\">Expr</a> → <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.instHashableExpr.hash","kind":"def","line":25,"name":"Lean.Grind.Ring.OfSemiring.instHashableExpr.hash","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Ring/CommSemiringAdapter.lean#L25-L25"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.instHashableExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">instHashableExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.instHashableExpr","kind":"instance","line":25,"name":"Lean.Grind.Ring.OfSemiring.instHashableExpr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Ring/CommSemiringAdapter.lean#L25-L25"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.instBEqExpr.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">instBEqExpr</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Expr\">Expr</a> → <a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Expr\">Expr</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.instBEqExpr.beq","kind":"def","line":25,"name":"Lean.Grind.Ring.OfSemiring.instBEqExpr.beq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Ring/CommSemiringAdapter.lean#L25-L25"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.instBEqExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">instBEqExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.instBEqExpr","kind":"instance","line":25,"name":"Lean.Grind.Ring.OfSemiring.instBEqExpr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Ring/CommSemiringAdapter.lean#L25-L25"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.instInhabitedExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">instInhabitedExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.instInhabitedExpr","kind":"instance","line":25,"name":"Lean.Grind.Ring.OfSemiring.instInhabitedExpr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Ring/CommSemiringAdapter.lean#L25-L25"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.instInhabitedExpr.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">instInhabitedExpr</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.instInhabitedExpr.default","kind":"def","line":25,"name":"Lean.Grind.Ring.OfSemiring.instInhabitedExpr.default","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Ring/CommSemiringAdapter.lean#L25-L25"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Expr.pow\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">Expr</span>.<span class=\"name\">pow</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Expr.pow","kind":"ctor","line":24,"name":"Lean.Grind.Ring.OfSemiring.Expr.pow","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Ring/CommSemiringAdapter.lean#L24-L24"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Expr.mul\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">Expr</span>.<span class=\"name\">mul</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Expr.mul","kind":"ctor","line":23,"name":"Lean.Grind.Ring.OfSemiring.Expr.mul","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Ring/CommSemiringAdapter.lean#L23-L23"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Expr.add\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">Expr</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Expr.add","kind":"ctor","line":22,"name":"Lean.Grind.Ring.OfSemiring.Expr.add","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Ring/CommSemiringAdapter.lean#L22-L22"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Expr.var\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">Expr</span>.<span class=\"name\">var</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Var\">Var</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Expr.var","kind":"ctor","line":21,"name":"Lean.Grind.Ring.OfSemiring.Expr.var","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Ring/CommSemiringAdapter.lean#L21-L21"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Expr.num\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">Expr</span>.<span class=\"name\">num</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Expr.num","kind":"ctor","line":20,"name":"Lean.Grind.Ring.OfSemiring.Expr.num","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Ring/CommSemiringAdapter.lean#L20-L20"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Expr\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">Expr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Expr","kind":"inductive","line":19,"name":"Lean.Grind.Ring.OfSemiring.Expr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Ring/CommSemiringAdapter.lean#L19-L25"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Var\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Ring</span>.<span class=\"name\">OfSemiring</span>.<span class=\"name\">Var</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Init/Grind/Ring/CommSemiringAdapter.html#Lean.Grind.Ring.OfSemiring.Var","kind":"def","line":18,"name":"Lean.Grind.Ring.OfSemiring.Var","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Grind/Ring/CommSemiringAdapter.lean#L18-L18"}}],"imports":["Init.Grind.Ring.Envelope","Init.Data.Hashable","Init.Data.RArray","Init.Grind.Ring.CommSolver"],"instances":[{"className":"Inhabited","name":"Lean.Grind.Ring.OfSemiring.instInhabitedExpr","typeNames":["Lean.Grind.Ring.OfSemiring.Expr"]},{"className":"BEq","name":"Lean.Grind.Ring.OfSemiring.instBEqExpr","typeNames":["Lean.Grind.Ring.OfSemiring.Expr"]},{"className":"Hashable","name":"Lean.Grind.Ring.OfSemiring.instHashableExpr","typeNames":["Lean.Grind.Ring.OfSemiring.Expr"]}],"name":"Init.Grind.Ring.CommSemiringAdapter"}