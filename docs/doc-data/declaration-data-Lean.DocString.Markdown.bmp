{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Markdown.html#Lean.Doc.instToMarkdownPartOfMarkdownInlineOfMarkdownBlock\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instToMarkdownPartOfMarkdownInlineOfMarkdownBlock</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./foundational_types.html\">Type</a> u_3}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownInline\">MarkdownInline</a> <span class=\"fn\">i</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownBlock\">MarkdownBlock</a> <span class=\"fn\">i</span> <span class=\"fn\">b</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/DocString/Markdown.html#Lean.Doc.ToMarkdown\">ToMarkdown</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Part\">Part</a> <span class=\"fn\">i</span> <span class=\"fn\">b</span> <span class=\"fn\">p</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Markdown.html#Lean.Doc.instToMarkdownPartOfMarkdownInlineOfMarkdownBlock","kind":"instance","line":294,"name":"Lean.Doc.instToMarkdownPartOfMarkdownInlineOfMarkdownBlock","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Markdown.lean#L294-L295"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Markdown.html#Lean.Doc.instToMarkdownBlockOfMarkdownInlineOfMarkdownBlock\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instToMarkdownBlockOfMarkdownInlineOfMarkdownBlock</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./foundational_types.html\">Type</a> u_2}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownInline\">MarkdownInline</a> <span class=\"fn\">i</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownBlock\">MarkdownBlock</a> <span class=\"fn\">i</span> <span class=\"fn\">b</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/DocString/Markdown.html#Lean.Doc.ToMarkdown\">ToMarkdown</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Block\">Block</a> <span class=\"fn\">i</span> <span class=\"fn\">b</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Markdown.html#Lean.Doc.instToMarkdownBlockOfMarkdownInlineOfMarkdownBlock","kind":"instance","line":277,"name":"Lean.Doc.instToMarkdownBlockOfMarkdownInlineOfMarkdownBlock","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Markdown.lean#L277-L278"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Markdown.html#Lean.Doc.instToMarkdownInlineOfMarkdownInline\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instToMarkdownInlineOfMarkdownInline</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownInline\">MarkdownInline</a> <span class=\"fn\">i</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/DocString/Markdown.html#Lean.Doc.ToMarkdown\">ToMarkdown</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <span class=\"fn\">i</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Markdown.html#Lean.Doc.instToMarkdownInlineOfMarkdownInline","kind":"instance","line":206,"name":"Lean.Doc.instToMarkdownInlineOfMarkdownInline","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Markdown.lean#L206-L207"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Markdown.html#Lean.Doc.instMarkdownBlockEmpty\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instMarkdownBlockEmpty</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownBlock\">MarkdownBlock</a> <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#Empty\">Empty</a></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Markdown.html#Lean.Doc.instMarkdownBlockEmpty","kind":"instance","line":130,"name":"Lean.Doc.instMarkdownBlockEmpty","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Markdown.lean#L130-L131"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownBlock.toMarkdown\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">MarkdownBlock</span>.<span class=\"name\">toMarkdown</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownBlock\">MarkdownBlock</a> <span class=\"fn\">i</span> <span class=\"fn\">b</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <span class=\"fn\">i</span></span> → <span class=\"fn\"><a href=\"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownM\">MarkdownM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span>)</span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.Block\">Block</a> <span class=\"fn\">i</span> <span class=\"fn\">b</span></span> → <span class=\"fn\"><a href=\"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownM\">MarkdownM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span>)</span> → <span class=\"fn\"><span class=\"fn\">b</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Block\">Block</a> <span class=\"fn\">i</span> <span class=\"fn\">b</span>)</span></span> → <span class=\"fn\"><a href=\"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownM\">MarkdownM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span></span></span></span></div></div>","info":{"doc":"A function that transforms a `b` and its contents into Markdown, given a way to transform the\ncontents.\n","docLink":"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownBlock.toMarkdown","kind":"def","line":126,"name":"Lean.Doc.MarkdownBlock.toMarkdown","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Markdown.lean#L126-L126"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownBlock.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">MarkdownBlock</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toMarkdown</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <span class=\"fn\">i</span></span> → <span class=\"fn\"><a href=\"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownM\">MarkdownM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span>)</span> → <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.Block\">Block</a> <span class=\"fn\">i</span> <span class=\"fn\">b</span></span> → <span class=\"fn\"><a href=\"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownM\">MarkdownM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span>)</span> → <span class=\"fn\"><span class=\"fn\">b</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Block\">Block</a> <span class=\"fn\">i</span> <span class=\"fn\">b</span>)</span></span> → <span class=\"fn\"><a href=\"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownM\">MarkdownM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownBlock\">MarkdownBlock</a> <span class=\"fn\">i</span> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownBlock.mk","kind":"ctor","line":121,"name":"Lean.Doc.MarkdownBlock.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Markdown.lean#L121-L121"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownBlock\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">MarkdownBlock</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./foundational_types.html\">Type</a> v)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> (max u v)</div></div>","info":{"doc":"A way to transform block elements extended with `b` that contain inline elements extended with `i`\ninto Markdown.\n","docLink":"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownBlock","kind":"class","line":117,"name":"Lean.Doc.MarkdownBlock","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Markdown.lean#L117-L128"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Markdown.html#Lean.Doc.instMarkdownInlineEmpty\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">instMarkdownInlineEmpty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownInline\">MarkdownInline</a> <a href=\"./Init/Prelude.html#Empty\">Empty</a></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Markdown.html#Lean.Doc.instMarkdownInlineEmpty","kind":"instance","line":114,"name":"Lean.Doc.instMarkdownInlineEmpty","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Markdown.lean#L114-L115"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownInline.toMarkdown\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">MarkdownInline</span>.<span class=\"name\">toMarkdown</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownInline\">MarkdownInline</a> <span class=\"fn\">i</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <span class=\"fn\">i</span></span> → <span class=\"fn\"><a href=\"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownM\">MarkdownM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span>)</span> → <span class=\"fn\"><span class=\"fn\">i</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <span class=\"fn\">i</span>)</span></span> → <span class=\"fn\"><a href=\"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownM\">MarkdownM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span></span></span></div></div>","info":{"doc":"A function that transforms an `i` and its contents into Markdown, given a way to transform the\ncontents.\n","docLink":"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownInline.toMarkdown","kind":"def","line":112,"name":"Lean.Doc.MarkdownInline.toMarkdown","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Markdown.lean#L112-L112"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownInline.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">MarkdownInline</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toMarkdown</span> : <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <span class=\"fn\">i</span></span> → <span class=\"fn\"><a href=\"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownM\">MarkdownM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span>)</span> → <span class=\"fn\"><span class=\"fn\">i</span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/DocString/Types.html#Lean.Doc.Inline\">Inline</a> <span class=\"fn\">i</span>)</span></span> → <span class=\"fn\"><a href=\"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownM\">MarkdownM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownInline\">MarkdownInline</a> <span class=\"fn\">i</span></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownInline.mk","kind":"ctor","line":107,"name":"Lean.Doc.MarkdownInline.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Markdown.lean#L107-L107"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownInline\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">MarkdownInline</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>","info":{"doc":"A way to transform inline elements extended with `i` into Markdown.\n","docLink":"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownInline","kind":"class","line":104,"name":"Lean.Doc.MarkdownInline","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Markdown.lean#L104-L112"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Markdown.html#Lean.Doc.ToMarkdown.toMarkdown\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">ToMarkdown</span>.<span class=\"name\">toMarkdown</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/DocString/Markdown.html#Lean.Doc.ToMarkdown\">ToMarkdown</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownM\">MarkdownM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span></div></div>","info":{"doc":"A function that transforms an `α` into a Markdown representation.\n","docLink":"./Lean/DocString/Markdown.html#Lean.Doc.ToMarkdown.toMarkdown","kind":"def","line":102,"name":"Lean.Doc.ToMarkdown.toMarkdown","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Markdown.lean#L102-L102"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Markdown.html#Lean.Doc.ToMarkdown.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">ToMarkdown</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toMarkdown</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownM\">MarkdownM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/DocString/Markdown.html#Lean.Doc.ToMarkdown\">ToMarkdown</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Markdown.html#Lean.Doc.ToMarkdown.mk","kind":"ctor","line":98,"name":"Lean.Doc.ToMarkdown.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Markdown.lean#L98-L98"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Markdown.html#Lean.Doc.ToMarkdown\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">ToMarkdown</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>","info":{"doc":"A means of transforming values to Markdown representations.\n","docLink":"./Lean/DocString/Markdown.html#Lean.Doc.ToMarkdown","kind":"class","line":95,"name":"Lean.Doc.ToMarkdown","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Markdown.lean#L95-L102"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownM.run'\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">MarkdownM</span>.<span class=\"name\">run'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">act</span> : <span class=\"fn\"><a href=\"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownM\">MarkdownM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">context</span> : <a href=\"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownM.Context\">Context</a> := <a href=\"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownM.Context.mk\">{</a> <a href=\"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownM.Context.mk\">}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">state</span> : <a href=\"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownM.State\">State</a> := <a href=\"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownM.State.mk\">{</a> <a href=\"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownM.State.mk\">}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Generates Markdown, rendering the result from the final state, without producing a value.\n","docLink":"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownM.run'","kind":"def","line":82,"name":"Lean.Doc.MarkdownM.run'","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Markdown.lean#L82-L86"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownM.run\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">MarkdownM</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">act</span> : <span class=\"fn\"><a href=\"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownM\">MarkdownM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">context</span> : <a href=\"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownM.Context\">Context</a> := <a href=\"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownM.Context.mk\">{</a> <a href=\"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownM.Context.mk\">}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">state</span> : <a href=\"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownM.State\">State</a> := <a href=\"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownM.State.mk\">{</a> <a href=\"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownM.State.mk\">}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Generates Markdown, rendering the result from the final state.\n","docLink":"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownM.run","kind":"def","line":75,"name":"Lean.Doc.MarkdownM.run","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Markdown.lean#L75-L80"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownM\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">MarkdownM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The monad for generating Markdown output.\n","docLink":"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownM","kind":"def","line":70,"name":"Lean.Doc.MarkdownM","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Markdown.lean#L70-L73"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownM.State.footnotes\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">MarkdownM</span>.<span class=\"name\">State</span>.<span class=\"name\">footnotes</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownM.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#String\">String</a>)</span></div></div>","info":{"doc":"Footnotes ","docLink":"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownM.State.footnotes","kind":"def","line":42,"name":"Lean.Doc.MarkdownM.State.footnotes","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Markdown.lean#L42-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownM.State.currentBlock\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">MarkdownM</span>.<span class=\"name\">State</span>.<span class=\"name\">currentBlock</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownM.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"The block being generated. ","docLink":"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownM.State.currentBlock","kind":"def","line":40,"name":"Lean.Doc.MarkdownM.State.currentBlock","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Markdown.lean#L40-L40"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownM.State.priorBlocks\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">MarkdownM</span>.<span class=\"name\">State</span>.<span class=\"name\">priorBlocks</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownM.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"The blocks prior to the one being generated. ","docLink":"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownM.State.priorBlocks","kind":"def","line":38,"name":"Lean.Doc.MarkdownM.State.priorBlocks","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Markdown.lean#L38-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownM.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">MarkdownM</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">priorBlocks </span><span class=\"fn\">currentBlock</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">footnotes</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#String\">String</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownM.State\">State</a></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownM.State.mk","kind":"ctor","line":36,"name":"Lean.Doc.MarkdownM.State.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Markdown.lean#L36-L36"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownM.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">MarkdownM</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The state of a Markdown generation task. ","docLink":"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownM.State","kind":"structure","line":35,"name":"Lean.Doc.MarkdownM.State","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Markdown.lean#L35-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownM.Context.linePrefix\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">MarkdownM</span>.<span class=\"name\">Context</span>.<span class=\"name\">linePrefix</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownM.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"The prefix that should be added to each line (typically for indentation). ","docLink":"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownM.Context.linePrefix","kind":"def","line":33,"name":"Lean.Doc.MarkdownM.Context.linePrefix","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Markdown.lean#L33-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownM.Context.inLink\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">MarkdownM</span>.<span class=\"name\">Context</span>.<span class=\"name\">inLink</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownM.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"The current code is inside a link. ","docLink":"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownM.Context.inLink","kind":"def","line":31,"name":"Lean.Doc.MarkdownM.Context.inLink","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Markdown.lean#L31-L31"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownM.Context.inBold\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">MarkdownM</span>.<span class=\"name\">Context</span>.<span class=\"name\">inBold</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownM.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"The current code is inside strong emphasis. ","docLink":"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownM.Context.inBold","kind":"def","line":29,"name":"Lean.Doc.MarkdownM.Context.inBold","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Markdown.lean#L29-L29"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownM.Context.inEmph\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">MarkdownM</span>.<span class=\"name\">Context</span>.<span class=\"name\">inEmph</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownM.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"The current code is inside emphasis. ","docLink":"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownM.Context.inEmph","kind":"def","line":27,"name":"Lean.Doc.MarkdownM.Context.inEmph","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Markdown.lean#L27-L27"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownM.Context.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">MarkdownM</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inEmph </span><span class=\"fn\">inBold </span><span class=\"fn\">inLink</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">linePrefix</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownM.Context\">Context</a></div></div>","info":{"doc":"","docLink":"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownM.Context.mk","kind":"ctor","line":25,"name":"Lean.Doc.MarkdownM.Context.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Markdown.lean#L25-L25"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownM.Context\"><span class=\"name\">Lean</span>.<span class=\"name\">Doc</span>.<span class=\"name\">MarkdownM</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The surrounding context of Markdown that's being generated, in order to prevent nestings that\nMarkdown doesn't allow.\n","docLink":"./Lean/DocString/Markdown.html#Lean.Doc.MarkdownM.Context","kind":"structure","line":21,"name":"Lean.Doc.MarkdownM.Context","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/DocString/Markdown.lean#L21-L33"}}],"imports":["Init.Data.Repr","Init.Data.Ord","Lean.DocString.Types"],"instances":[{"className":"Lean.Doc.MarkdownInline","name":"Lean.Doc.instMarkdownInlineEmpty","typeNames":["Empty"]},{"className":"Lean.Doc.MarkdownBlock","name":"Lean.Doc.instMarkdownBlockEmpty","typeNames":["Empty"]},{"className":"Lean.Doc.ToMarkdown","name":"Lean.Doc.instToMarkdownInlineOfMarkdownInline","typeNames":["Lean.Doc.Inline"]},{"className":"Lean.Doc.ToMarkdown","name":"Lean.Doc.instToMarkdownBlockOfMarkdownInlineOfMarkdownBlock","typeNames":["Lean.Doc.Block"]},{"className":"Lean.Doc.ToMarkdown","name":"Lean.Doc.instToMarkdownPartOfMarkdownInlineOfMarkdownBlock","typeNames":["Lean.Doc.Part"]}],"name":"Lean.DocString.Markdown"}