{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/ElimDeadVars.html#Lean.IR.Decl.elimDead\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">Decl</span>.<span class=\"name\">elimDead</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a></div></div>","info":{"doc":"Eliminate dead let-declarations and join points ","docLink":"./Lean/Compiler/IR/ElimDeadVars.html#Lean.IR.Decl.elimDead","kind":"def","line":46,"name":"Lean.IR.Decl.elimDead","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/IR/ElimDeadVars.lean#L46-L50"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/ElimDeadVars.html#Lean.IR.FnBody.elimDead\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">FnBody</span>.<span class=\"name\">elimDead</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/ElimDeadVars.html#Lean.IR.FnBody.elimDead","kind":"opaque","line":36,"name":"Lean.IR.FnBody.elimDead","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/IR/ElimDeadVars.lean#L36-L44"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/ElimDeadVars.html#Lean.IR.reshapeWithoutDead\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">reshapeWithoutDead</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">term</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/ElimDeadVars.html#Lean.IR.reshapeWithoutDead","kind":"def","line":16,"name":"Lean.IR.reshapeWithoutDead","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/IR/ElimDeadVars.lean#L16-L34"}}],"imports":["Lean.Compiler.IR.Basic","Lean.Compiler.IR.FreeVars"],"instances":[],"name":"Lean.Compiler.IR.ElimDeadVars"}