{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/MBTC.html#Lean.Meta.Grind.mbtc\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">mbtc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Meta/Tactic/Grind/MBTC.html#Lean.Meta.Grind.MBTC.Context\">MBTC.Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Model-based theory combination. ","docLink":"./Lean/Meta/Tactic/Grind/MBTC.html#Lean.Meta.Grind.mbtc","kind":"def","line":55,"name":"Lean.Meta.Grind.mbtc","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Grind/MBTC.lean#L55-L104"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/MBTC.html#Lean.Meta.Grind.MBTC.Context.eqAssignment\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">MBTC</span>.<span class=\"name\">Context</span>.<span class=\"name\">eqAssignment</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/MBTC.html#Lean.Meta.Grind.MBTC.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>","info":{"doc":"`eqAssignment x y` returns `true` it the theory variables for `x` and `y` have the same\ninterpretation/assignment in the target theory. For example, suppose we have the\nconstraint `x + y ≤ 0`, and cutsat satisfied it by assigning both `x` and `y` to\n`0`. Then, `eqAssignment x y` must return `true`.\n","docLink":"./Lean/Meta/Tactic/Grind/MBTC.html#Lean.Meta.Grind.MBTC.Context.eqAssignment","kind":"def","line":33,"name":"Lean.Meta.Grind.MBTC.Context.eqAssignment","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Grind/MBTC.lean#L33-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/MBTC.html#Lean.Meta.Grind.MBTC.Context.hasTheoryVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">MBTC</span>.<span class=\"name\">Context</span>.<span class=\"name\">hasTheoryVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/MBTC.html#Lean.Meta.Grind.MBTC.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>","info":{"doc":"`hasTheoryVar e` returns `true` if `e` has a theory variable in the target theory.\nFor example, suppose we have the constraint `x + y ≤ 0`, then `x` and `y` have theory\nvars in the cutsat procedure.\n","docLink":"./Lean/Meta/Tactic/Grind/MBTC.html#Lean.Meta.Grind.MBTC.Context.hasTheoryVar","kind":"def","line":26,"name":"Lean.Meta.Grind.MBTC.Context.hasTheoryVar","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Grind/MBTC.lean#L26-L26"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/MBTC.html#Lean.Meta.Grind.MBTC.Context.isInterpreted\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">MBTC</span>.<span class=\"name\">Context</span>.<span class=\"name\">isInterpreted</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/MBTC.html#Lean.Meta.Grind.MBTC.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>","info":{"doc":"`isInterpreted e` returns `true` if `e` is an interpreted symbol in the target theory.\nExample: `+` for cutsat\n","docLink":"./Lean/Meta/Tactic/Grind/MBTC.html#Lean.Meta.Grind.MBTC.Context.isInterpreted","kind":"def","line":20,"name":"Lean.Meta.Grind.MBTC.Context.isInterpreted","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Grind/MBTC.lean#L20-L20"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/MBTC.html#Lean.Meta.Grind.MBTC.Context.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">MBTC</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isInterpreted </span><span class=\"fn\">hasTheoryVar</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">eqAssignment</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/MBTC.html#Lean.Meta.Grind.MBTC.Context\">Context</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/MBTC.html#Lean.Meta.Grind.MBTC.Context.mk","kind":"ctor","line":15,"name":"Lean.Meta.Grind.MBTC.Context.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Grind/MBTC.lean#L15-L15"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/MBTC.html#Lean.Meta.Grind.MBTC.Context\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">MBTC</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Model-based theory combination context.\n","docLink":"./Lean/Meta/Tactic/Grind/MBTC.html#Lean.Meta.Grind.MBTC.Context","kind":"structure","line":12,"name":"Lean.Meta.Grind.MBTC.Context","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Grind/MBTC.lean#L12-L33"}}],"imports":["Lean.Meta.Tactic.Grind.Types"],"instances":[],"name":"Lean.Meta.Tactic.Grind.MBTC"}