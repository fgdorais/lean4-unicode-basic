{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.explicitBoxing\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">explicitBoxing</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decls</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/CompilerM.html#Lean.IR.CompilerM\">CompilerM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.explicitBoxing","kind":"def","line":323,"name":"Lean.IR.explicitBoxing","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/IR/Boxing.lean#L323-L325"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.run\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">run</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decls</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.run","kind":"def","line":308,"name":"Lean.IR.ExplicitBoxing.run","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/IR/Boxing.lean#L308-L319"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.visitFnBody\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">visitFnBody</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a> → <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">M</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.visitFnBody","kind":"opaque","line":279,"name":"Lean.IR.ExplicitBoxing.visitFnBody","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/IR/Boxing.lean#L279-L306"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.visitVDeclExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">visitVDeclExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ty</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">M</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.visitVDeclExpr","kind":"def","line":255,"name":"Lean.IR.ExplicitBoxing.visitVDeclExpr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/IR/Boxing.lean#L255-L277"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.castResultIfNeeded\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">castResultIfNeeded</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ty</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">eType</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">M</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.castResultIfNeeded","kind":"def","line":246,"name":"Lean.IR.ExplicitBoxing.castResultIfNeeded","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/IR/Boxing.lean#L246-L253"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.unboxResultIfNeeded\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">unboxResultIfNeeded</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ty</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">M</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.unboxResultIfNeeded","kind":"def","line":239,"name":"Lean.IR.ExplicitBoxing.unboxResultIfNeeded","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/IR/Boxing.lean#L239-L244"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.boxArgsIfNeeded\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">boxArgsIfNeeded</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a></span> → <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">M</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">M</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.boxArgsIfNeeded","kind":"def","line":234,"name":"Lean.IR.ExplicitBoxing.boxArgsIfNeeded","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/IR/Boxing.lean#L234-L237"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.castArgsIfNeeded\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">castArgsIfNeeded</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Param</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a></span> → <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">M</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">M</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.castArgsIfNeeded","kind":"def","line":229,"name":"Lean.IR.ExplicitBoxing.castArgsIfNeeded","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/IR/Boxing.lean#L229-L232"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.castArgsIfNeededAux\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">castArgsIfNeededAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">typeFromIdx</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">M</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span>)</span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.castArgsIfNeededAux","kind":"def","line":207,"name":"Lean.IR.ExplicitBoxing.castArgsIfNeededAux","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/IR/Boxing.lean#L207-L227"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.castArgIfNeeded\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">castArgIfNeeded</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expected</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Arg\">Arg</a> → <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">M</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">M</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.castArgIfNeeded","kind":"def","line":202,"name":"Lean.IR.ExplicitBoxing.castArgIfNeeded","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/IR/Boxing.lean#L202-L205"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.castVarIfNeeded\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">castVarIfNeeded</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">expected</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a> → <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">M</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">M</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.castVarIfNeeded","kind":"def","line":193,"name":"Lean.IR.ExplicitBoxing.castVarIfNeeded","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/IR/Boxing.lean#L193-L200"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.mkCast\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">mkCast</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xType </span><span class=\"fn\">expectedType</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">M</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a></span></div></div>","info":{"doc":"Auxiliary function used by castVarIfNeeded.\nIt is used when the expected type does not match `xType`.\nIf `xType` is scalar, then we need to \"box\" it. Otherwise, we need to \"unbox\" it. ","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.mkCast","kind":"def","line":157,"name":"Lean.IR.ExplicitBoxing.mkCast","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/IR/Boxing.lean#L157-L191"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.withJDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">withJDecl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">j</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId\">JoinPointId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Param</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">M</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">M</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.withJDecl","kind":"def","line":138,"name":"Lean.IR.ExplicitBoxing.withJDecl","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/IR/Boxing.lean#L138-L139"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.withVDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">withVDecl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ty</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">M</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">M</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.withVDecl","kind":"def","line":135,"name":"Lean.IR.ExplicitBoxing.withVDecl","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/IR/Boxing.lean#L135-L136"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.withParams\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">withParams</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">xs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Param</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">M</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">M</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.withParams","kind":"def","line":132,"name":"Lean.IR.ExplicitBoxing.withParams","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/IR/Boxing.lean#L132-L133"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.getDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">getDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fid</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FunId\">FunId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">M</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.getDecl","kind":"def","line":126,"name":"Lean.IR.ExplicitBoxing.getDecl","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/IR/Boxing.lean#L126-L130"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.getJPParams\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">getJPParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">j</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.JoinPointId\">JoinPointId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">M</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Param\">Param</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.getJPParams","kind":"def","line":120,"name":"Lean.IR.ExplicitBoxing.getJPParams","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/IR/Boxing.lean#L120-L124"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.getVarType\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">getVarType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.VarId\">VarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">M</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.getVarType","kind":"def","line":114,"name":"Lean.IR.ExplicitBoxing.getVarType","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/IR/Boxing.lean#L114-L118"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.getResultType\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">getResultType</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">M</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.getResultType","kind":"def","line":112,"name":"Lean.IR.ExplicitBoxing.getResultType","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/IR/Boxing.lean#L112-L112"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.getLocalContext\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">getLocalContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">M</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext\">LocalContext</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.getLocalContext","kind":"def","line":111,"name":"Lean.IR.ExplicitBoxing.getLocalContext","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/IR/Boxing.lean#L111-L111"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.getEnv\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">getEnv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\">M</a> <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.getEnv","kind":"def","line":110,"name":"Lean.IR.ExplicitBoxing.getEnv","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/IR/Boxing.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">M</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.M","kind":"def","line":104,"name":"Lean.IR.ExplicitBoxing.M","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/IR/Boxing.lean#L104-L104"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingState.nextAuxId\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">BoxingState</span>.<span class=\"name\">nextAuxId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingState\">BoxingState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingState.nextAuxId","kind":"def","line":102,"name":"Lean.IR.ExplicitBoxing.BoxingState.nextAuxId","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/IR/Boxing.lean#L102-L102"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingState.auxDeclCache\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">BoxingState</span>.<span class=\"name\">auxDeclCache</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingState\">BoxingState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/AssocList.html#Lean.AssocList\">AssocList</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingState.auxDeclCache","kind":"def","line":101,"name":"Lean.IR.ExplicitBoxing.BoxingState.auxDeclCache","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/IR/Boxing.lean#L101-L101"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingState.auxDecls\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">BoxingState</span>.<span class=\"name\">auxDecls</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingState\">BoxingState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a></span></div></div>","info":{"doc":"We create auxiliary declarations when boxing constant and literals.\nThe idea is to avoid code such as\n```\nlet x1 := Uint64.inhabited;\nlet x2 := box x1;\n...\n```\nWe currently do not cache these declarations in an environment extension, but\nwe use auxDeclCache to avoid creating equivalent auxiliary declarations more than once when\nprocessing the same IR declaration.\n","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingState.auxDecls","kind":"def","line":100,"name":"Lean.IR.ExplicitBoxing.BoxingState.auxDecls","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/IR/Boxing.lean#L100-L100"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingState.nextIdx\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">BoxingState</span>.<span class=\"name\">nextIdx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingState\">BoxingState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Index\">Index</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingState.nextIdx","kind":"def","line":88,"name":"Lean.IR.ExplicitBoxing.BoxingState.nextIdx","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/IR/Boxing.lean#L88-L88"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingState.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">BoxingState</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nextIdx</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Index\">Index</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">auxDecls</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">auxDeclCache</span> : <span class=\"fn\"><a href=\"./Lean/Data/AssocList.html#Lean.AssocList\">AssocList</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FnBody\">FnBody</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nextAuxId</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingState\">BoxingState</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingState.mk","kind":"ctor","line":87,"name":"Lean.IR.ExplicitBoxing.BoxingState.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/IR/Boxing.lean#L87-L87"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingState\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">BoxingState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingState","kind":"structure","line":87,"name":"Lean.IR.ExplicitBoxing.BoxingState","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/IR/Boxing.lean#L87-L102"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingContext.env\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">BoxingContext</span>.<span class=\"name\">env</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingContext\">BoxingContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingContext.env","kind":"def","line":85,"name":"Lean.IR.ExplicitBoxing.BoxingContext.env","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/IR/Boxing.lean#L85-L85"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingContext.decls\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">BoxingContext</span>.<span class=\"name\">decls</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingContext\">BoxingContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingContext.decls","kind":"def","line":84,"name":"Lean.IR.ExplicitBoxing.BoxingContext.decls","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/IR/Boxing.lean#L84-L84"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingContext.resultType\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">BoxingContext</span>.<span class=\"name\">resultType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingContext\">BoxingContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingContext.resultType","kind":"def","line":83,"name":"Lean.IR.ExplicitBoxing.BoxingContext.resultType","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/IR/Boxing.lean#L83-L83"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingContext.localCtx\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">BoxingContext</span>.<span class=\"name\">localCtx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingContext\">BoxingContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext\">LocalContext</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingContext.localCtx","kind":"def","line":82,"name":"Lean.IR.ExplicitBoxing.BoxingContext.localCtx","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/IR/Boxing.lean#L82-L82"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingContext.f\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">BoxingContext</span>.<span class=\"name\">f</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingContext\">BoxingContext</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FunId\">FunId</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingContext.f","kind":"def","line":81,"name":"Lean.IR.ExplicitBoxing.BoxingContext.f","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/IR/Boxing.lean#L81-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingContext.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">BoxingContext</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.FunId\">FunId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">localCtx</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.LocalContext\">LocalContext</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">resultType</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decls</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingContext\">BoxingContext</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingContext.mk","kind":"ctor","line":80,"name":"Lean.IR.ExplicitBoxing.BoxingContext.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/IR/Boxing.lean#L80-L80"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingContext\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">BoxingContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.BoxingContext","kind":"structure","line":80,"name":"Lean.IR.ExplicitBoxing.BoxingContext","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/IR/Boxing.lean#L80-L85"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.eqvTypes\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">eqvTypes</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t₁ </span><span class=\"fn\">t₂</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.IRType\">IRType</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.eqvTypes","kind":"def","line":77,"name":"Lean.IR.ExplicitBoxing.eqvTypes","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/IR/Boxing.lean#L77-L78"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.addBoxedVersions\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">addBoxedVersions</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decls</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.addBoxedVersions","kind":"def","line":72,"name":"Lean.IR.ExplicitBoxing.addBoxedVersions","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/IR/Boxing.lean#L72-L75"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.mkBoxedVersion\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">mkBoxedVersion</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.mkBoxedVersion","kind":"def","line":69,"name":"Lean.IR.ExplicitBoxing.mkBoxedVersion","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/IR/Boxing.lean#L69-L70"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.mkBoxedVersionAux\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">mkBoxedVersionAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.N\">N</a> <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.mkBoxedVersionAux","kind":"def","line":48,"name":"Lean.IR.ExplicitBoxing.mkBoxedVersionAux","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/IR/Boxing.lean#L48-L67"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.requiresBoxedVersion\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">requiresBoxedVersion</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Lean/Compiler/IR/Basic.html#Lean.IR.Decl\">Decl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.requiresBoxedVersion","kind":"def","line":43,"name":"Lean.IR.ExplicitBoxing.requiresBoxedVersion","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/IR/Boxing.lean#L43-L46"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.N\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">N</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.N","kind":"def","line":38,"name":"Lean.IR.ExplicitBoxing.N","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/IR/Boxing.lean#L38-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.isBoxedName\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">isBoxedName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.isBoxedName","kind":"def","line":35,"name":"Lean.IR.ExplicitBoxing.isBoxedName","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/IR/Boxing.lean#L35-L36"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.mkBoxedName\"><span class=\"name\">Lean</span>.<span class=\"name\">IR</span>.<span class=\"name\">ExplicitBoxing</span>.<span class=\"name\">mkBoxedName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"","docLink":"./Lean/Compiler/IR/Boxing.html#Lean.IR.ExplicitBoxing.mkBoxedName","kind":"def","line":32,"name":"Lean.IR.ExplicitBoxing.mkBoxedName","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Compiler/IR/Boxing.lean#L32-L33"}}],"imports":["Lean.Runtime","Lean.Compiler.ClosedTermCache","Lean.Compiler.ExternAttr","Lean.Compiler.IR.Basic","Lean.Compiler.IR.CompilerM","Lean.Compiler.IR.FreeVars","Lean.Compiler.IR.ElimDeadVars","Lean.Compiler.IR.ToIRType","Lean.Data.AssocList"],"instances":[],"name":"Lean.Compiler.IR.Boxing"}