{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Extra.html#String.crlfToLf\"><span class=\"name\">String</span>.<span class=\"name\">crlfToLf</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">text</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Replaces each `\\r\\n` with `\\n` to normalize line endings, but does not validate that there are no\nisolated `\\r` characters.\n\nThis is an optimized version of `String.replace text \"\\r\\n\" \"\\n\"`.\n","docLink":"./Init/Data/String/Extra.html#String.crlfToLf","kind":"def","line":329,"name":"String.crlfToLf","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/String/Extra.lean#L329-L359"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Extra.html#String.removeLeadingSpaces\"><span class=\"name\">String</span>.<span class=\"name\">removeLeadingSpaces</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Consistently de-indents the lines in a string, removing the same amount of leading whitespace from\neach line such that the least-indented line has no leading whitespace.\n\nThe number of leading whitespace characters to remove from each line is determined by counting the\nnumber of leading space (`' '`) and tab (`'\\t'`) characters on lines after the first line that also\ncontain non-whitespace characters. No distinction is made between tab and space characters; both\ncount equally.\n\nThe least number of leading whitespace characters found is then removed from the beginning of each\nline. The first line's leading whitespace is not counted when determining how far to de-indent the\nstring, but leading whitespace is removed from it.\n\nExamples:\n* `\"Here:\\n  fun x =>\\n    x + 1\".removeLeadingSpaces = \"Here:\\nfun x =>\\n  x + 1\"`\n* `\"Here:\\n\\t\\tfun x =>\\n\\t  \\tx + 1\".removeLeadingSpaces = \"Here:\\nfun x =>\\n \\tx + 1\"`\n* `\"Here:\\n\\t\\tfun x =>\\n \\n\\t  \\tx + 1\".removeLeadingSpaces = \"Here:\\nfun x =>\\n\\n \\tx + 1\"`\n","docLink":"./Init/Data/String/Extra.html#String.removeLeadingSpaces","kind":"def","line":307,"name":"String.removeLeadingSpaces","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/String/Extra.lean#L307-L327"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Extra.html#String.Iterator.foldUntil\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">foldUntil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a></div></div>","info":{"doc":"Iterates over a string, updating a state at each character using the provided function `f`, until\n`f` returns `none`. Begins with the state `init`. Returns the state and character for which `f`\nreturns `none`.\n","docLink":"./Init/Data/String/Extra.html#String.Iterator.foldUntil","kind":"def","line":260,"name":"String.Iterator.foldUntil","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/String/Extra.lean#L260-L271"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Extra.html#String.Iterator.find\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">find</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Char\">Char</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a></div></div>","info":{"doc":"Moves the iterator forward until the Boolean predicate `p` returns `true` for the iterator's current\ncharacter or until the end of the string is reached. Does nothing if the current character already\nsatisfies `p`.\n","docLink":"./Init/Data/String/Extra.html#String.Iterator.find","kind":"def","line":250,"name":"String.Iterator.find","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/String/Extra.lean#L250-L258"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Extra.html#String.Iterator.sizeOf_next_lt_of_atEnd\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">sizeOf_next_lt_of_atEnd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.atEnd\">atEnd</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/SizeOf.html#SizeOf.sizeOf\">sizeOf</a> <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.next\">next</a></span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/SizeOf.html#SizeOf.sizeOf\">sizeOf</a> <span class=\"fn\">i</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Extra.html#String.Iterator.sizeOf_next_lt_of_atEnd","kind":"theorem","line":240,"name":"String.Iterator.sizeOf_next_lt_of_atEnd","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/String/Extra.lean#L240-L242"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Extra.html#String.Iterator.sizeOf_next_lt_of_hasNext\"><span class=\"name\">String</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">sizeOf_next_lt_of_hasNext</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/String/Basic.html#String.Iterator\">Iterator</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.hasNext\">hasNext</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/SizeOf.html#SizeOf.sizeOf\">sizeOf</a> <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/String/Basic.html#String.Iterator.next\">next</a></span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><a href=\"./Init/SizeOf.html#SizeOf.sizeOf\">sizeOf</a> <span class=\"fn\">i</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Extra.html#String.Iterator.sizeOf_next_lt_of_hasNext","kind":"theorem","line":232,"name":"String.Iterator.sizeOf_next_lt_of_hasNext","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/String/Extra.lean#L232-L234"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Extra.html#String.getUtf8Byte\"><span class=\"name\">String</span>.<span class=\"name\">getUtf8Byte</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.utf8ByteSize\">utf8ByteSize</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>","info":{"doc":"Accesses the indicated byte in the UTF-8 encoding of a string.\n\nAt runtime, this function is implemented by efficient, constant-time code.\n","docLink":"./Init/Data/String/Extra.html#String.getUtf8Byte","kind":"def","line":223,"name":"String.getUtf8Byte","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/String/Extra.lean#L223-L230"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Extra.html#String.size_toUTF8\"><span class=\"name\">String</span>.<span class=\"name\">size_toUTF8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Data/String/Extra.html#String.toUTF8\">toUTF8</a></span>.<a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.size\">size</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Prelude.html#String.utf8ByteSize\">utf8ByteSize</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Extra.html#String.size_toUTF8","kind":"theorem","line":219,"name":"String.size_toUTF8","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/String/Extra.lean#L219-L221"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Extra.html#String.toUTF8\"><span class=\"name\">String</span>.<span class=\"name\">toUTF8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a></div></div>","info":{"doc":"Encodes a string in UTF-8 as an array of bytes.\n","docLink":"./Init/Data/String/Extra.html#String.toUTF8","kind":"def","line":212,"name":"String.toUTF8","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/String/Extra.lean#L212-L217"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Extra.html#String.length_utf8EncodeChar\"><span class=\"name\">String</span>.<span class=\"name\">length_utf8EncodeChar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#String.utf8EncodeChar\">utf8EncodeChar</a> <span class=\"fn\">c</span>)</span>.<a href=\"./Init/Prelude.html#List.length\">length</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Prelude.html#Char.utf8Size\">utf8Size</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Extra.html#String.length_utf8EncodeChar","kind":"theorem","line":206,"name":"String.length_utf8EncodeChar","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/String/Extra.lean#L206-L210"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Extra.html#String.utf8EncodeChar_eq_utf8EncodeCharFast\"><span class=\"name\">String</span>.<span class=\"name\">utf8EncodeChar_eq_utf8EncodeCharFast</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.utf8EncodeChar\">utf8EncodeChar</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Data/String/Extra.html#String.utf8EncodeCharFast\">utf8EncodeCharFast</a></div></div>","info":{"doc":"","docLink":"./Init/Data/String/Extra.html#String.utf8EncodeChar_eq_utf8EncodeCharFast","kind":"theorem","line":160,"name":"String.utf8EncodeChar_eq_utf8EncodeCharFast","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/String/Extra.lean#L160-L204"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Extra.html#String.utf8EncodeCharFast\"><span class=\"name\">String</span>.<span class=\"name\">utf8EncodeCharFast</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>","info":{"doc":"Returns the sequence of bytes in a character's UTF-8 encoding.\n","docLink":"./Init/Data/String/Extra.html#String.utf8EncodeCharFast","kind":"def","line":136,"name":"String.utf8EncodeCharFast","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/String/Extra.lean#L136-L154"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Extra.html#String.fromUTF8!\"><span class=\"name\">String</span>.<span class=\"name\">fromUTF8!</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Decodes an array of bytes that encode a string as [UTF-8](https://en.wikipedia.org/wiki/UTF-8) into\nthe corresponding string, or panics if the array is not a valid UTF-8 encoding of a string.\n","docLink":"./Init/Data/String/Extra.html#String.fromUTF8!","kind":"def","line":129,"name":"String.fromUTF8!","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/String/Extra.lean#L129-L134"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Extra.html#String.fromUTF8?\"><span class=\"name\">String</span>.<span class=\"name\">fromUTF8?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"Decodes an array of bytes that encode a string as [UTF-8](https://en.wikipedia.org/wiki/UTF-8) into\nthe corresponding string, or returns `none` if the array is not a valid UTF-8 encoding of a string.\n","docLink":"./Init/Data/String/Extra.html#String.fromUTF8?","kind":"def","line":122,"name":"String.fromUTF8?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/String/Extra.lean#L122-L127"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Extra.html#String.fromUTF8\"><span class=\"name\">String</span>.<span class=\"name\">fromUTF8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Data/String/Extra.html#String.validateUTF8\">validateUTF8</a> <span class=\"fn\">a</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Decodes an array of bytes that encode a string as [UTF-8](https://en.wikipedia.org/wiki/UTF-8) into\nthe corresponding string. Invalid UTF-8 characters in the byte array result in `(default : Char)`,\nor `'A'`, in the string.\n","docLink":"./Init/Data/String/Extra.html#String.fromUTF8","kind":"def","line":105,"name":"String.fromUTF8","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/String/Extra.lean#L105-L120"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Extra.html#String.validateUTF8\"><span class=\"name\">String</span>.<span class=\"name\">validateUTF8</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Checks whether an array of bytes is a valid UTF-8 encoding of a string.\n","docLink":"./Init/Data/String/Extra.html#String.validateUTF8","kind":"def","line":90,"name":"String.validateUTF8","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/String/Extra.lean#L90-L103"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Extra.html#String.utf8DecodeChar?\"><span class=\"name\">String</span>.<span class=\"name\">utf8DecodeChar?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></div></div>","info":{"doc":"Decodes the UTF-8 character sequence that starts at a given index in a byte array, or `none` if\nindex `i` is out of bounds or is not the start of a valid UTF-8 character.\n","docLink":"./Init/Data/String/Extra.html#String.utf8DecodeChar?","kind":"def","line":41,"name":"String.utf8DecodeChar?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/String/Extra.lean#L41-L88"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/String/Extra.html#String.toNat!\"><span class=\"name\">String</span>.<span class=\"name\">toNat!</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"Interprets a string as the decimal representation of a natural number, returning it. Panics if the\nstring does not contain a decimal natural number.\n\nA string can be interpreted as a decimal natural number if it is not empty and all the characters in\nit are digits.\n\nUse `String.isNat` to check whether `String.toNat!` would return a value. `String.toNat?` is a safer\nalternative that returns `none` instead of panicking when the string is not a natural number.\n\nExamples:\n * `\"0\".toNat! = 0`\n * `\"5\".toNat! = 5`\n * `\"587\".toNat! = 587`\n","docLink":"./Init/Data/String/Extra.html#String.toNat!","kind":"def","line":20,"name":"String.toNat!","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/String/Extra.lean#L20-L39"}}],"imports":["Init.Data.ByteArray.Basic","Init.Data.ByteArray.Basic","Init.Data.String.Basic","Init.Data.String.Basic","Init.Data.UInt.Lemmas","Init.Data.UInt.Bitwise"],"instances":[],"name":"Init.Data.String.Extra"}