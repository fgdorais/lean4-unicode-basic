{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.eval_congr\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">CNF</span>.<span class=\"name\">eval_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a1 </span><span class=\"fn\">a2</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF\">CNF</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hw</span> : <span class=\"fn\">∀ (<span class=\"fn\">v</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Mem\">Mem</a> <span class=\"fn\">v</span> <span class=\"fn\">f</span></span> → <span class=\"fn\"><span class=\"fn\">a1</span> <span class=\"fn\">v</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a2</span> <span class=\"fn\">v</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.eval\">eval</a> <span class=\"fn\">a1</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.eval\">eval</a> <span class=\"fn\">a2</span> <span class=\"fn\">f</span></span></div></div>","info":{"doc":"","docLink":"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.eval_congr","kind":"theorem","line":180,"name":"Std.Sat.CNF.eval_congr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/CNF/Basic.lean#L180-L189"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.mem_append\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">CNF</span>.<span class=\"name\">mem_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f1 </span><span class=\"fn\">f2</span> : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF\">CNF</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Mem\">Mem</a> <span class=\"fn\">v</span> (<span class=\"fn\">f1</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">f2</span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Mem\">Mem</a> <span class=\"fn\">v</span> <span class=\"fn\">f1</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Mem\">Mem</a> <span class=\"fn\">v</span> <span class=\"fn\">f2</span></span></div></div>","info":{"doc":"","docLink":"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.mem_append","kind":"theorem","line":168,"name":"Std.Sat.CNF.mem_append","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/CNF/Basic.lean#L168-L178"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.mem_of\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">CNF</span>.<span class=\"name\">mem_of</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF\">CNF</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Clause\">Clause</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">α✝</span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">f</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Clause.Mem\">Clause.Mem</a> <span class=\"fn\">v</span> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Mem\">Mem</a> <span class=\"fn\">v</span> <span class=\"fn\">f</span></span></div></div>","info":{"doc":"","docLink":"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.mem_of","kind":"theorem","line":164,"name":"Std.Sat.CNF.mem_of","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/CNF/Basic.lean#L164-L166"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.mem_cons\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">CNF</span>.<span class=\"name\">mem_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Clause\">Clause</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF\">CNF</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Mem\">Mem</a> <span class=\"fn\">v</span> (<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">f</span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Clause.Mem\">Clause.Mem</a> <span class=\"fn\">v</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Mem\">Mem</a> <span class=\"fn\">v</span> <span class=\"fn\">f</span></span></div></div>","info":{"doc":"","docLink":"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.mem_cons","kind":"theorem","line":161,"name":"Std.Sat.CNF.mem_cons","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/CNF/Basic.lean#L161-L162"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.not_mem_nil\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">CNF</span>.<span class=\"name\">not_mem_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Mem\">Mem</a> <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span></div></div>","info":{"doc":"","docLink":"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.not_mem_nil","kind":"theorem","line":160,"name":"Std.Sat.CNF.not_mem_nil","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/CNF/Basic.lean#L160-L160"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.instDecidableExistsMemOfDecidableEq\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">CNF</span>.<span class=\"name\">instDecidableExistsMemOfDecidableEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF\">CNF</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">v</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Mem\">Mem</a> <span class=\"fn\">v</span> <span class=\"fn\">f</span></span>)</span></div></div>","info":{"doc":"","docLink":"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.instDecidableExistsMemOfDecidableEq","kind":"instance","line":157,"name":"Std.Sat.CNF.instDecidableExistsMemOfDecidableEq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/CNF/Basic.lean#L157-L158"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.not_exists_mem\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">CNF</span>.<span class=\"name\">not_exists_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF\">CNF</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Prelude.html#Not\">¬</a><a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">v</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α✝</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Mem\">Mem</a> <span class=\"fn\">v</span> <span class=\"fn\">f</span></span>) <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">n</span> <a href=\"./Init/Core.html#Exists\">:</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.replicate\">List.replicate</a> <span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span></div></div>","info":{"doc":"","docLink":"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.not_exists_mem","kind":"theorem","line":139,"name":"Std.Sat.CNF.not_exists_mem","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/CNF/Basic.lean#L139-L155"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.any_not_isEmpty_iff_exists_mem\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">CNF</span>.<span class=\"name\">any_not_isEmpty_iff_exists_mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF\">CNF</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Data/List/Basic.html#List.any\">List.any</a> <span class=\"fn\">f</span> <span class=\"fn\">fun (<span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Clause\">Clause</a> <span class=\"fn\">α</span></span>) =&gt; <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\"><a href=\"./Init/Data/List/Basic.html#List.isEmpty\">List.isEmpty</a> <span class=\"fn\">c</span></span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">v</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">α</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Mem\">Mem</a> <span class=\"fn\">v</span> <span class=\"fn\">f</span></span></div></div>","info":{"doc":"","docLink":"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.any_not_isEmpty_iff_exists_mem","kind":"theorem","line":118,"name":"Std.Sat.CNF.any_not_isEmpty_iff_exists_mem","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/CNF/Basic.lean#L118-L137"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.instDecidableMemOfDecidableEq\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">CNF</span>.<span class=\"name\">instDecidableMemOfDecidableEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF\">CNF</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Mem\">Mem</a> <span class=\"fn\">v</span> <span class=\"fn\">f</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.instDecidableMemOfDecidableEq","kind":"instance","line":115,"name":"Std.Sat.CNF.instDecidableMemOfDecidableEq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/CNF/Basic.lean#L115-L116"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Mem\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">CNF</span>.<span class=\"name\">Mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF\">CNF</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"Variable `v` occurs in `CNF` formula `f`.\n","docLink":"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Mem","kind":"def","line":110,"name":"Std.Sat.CNF.Mem","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/CNF/Basic.lean#L110-L113"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Clause.eval_congr\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">CNF</span>.<span class=\"name\">Clause</span>.<span class=\"name\">eval_congr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a1 </span><span class=\"fn\">a2</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Clause\">Clause</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hw</span> : <span class=\"fn\">∀ (<span class=\"fn\">i</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Clause.Mem\">Mem</a> <span class=\"fn\">i</span> <span class=\"fn\">c</span></span> → <span class=\"fn\"><span class=\"fn\">a1</span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">a2</span> <span class=\"fn\">i</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Clause.eval\">eval</a> <span class=\"fn\">a1</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Clause.eval\">eval</a> <span class=\"fn\">a2</span> <span class=\"fn\">c</span></span></div></div>","info":{"doc":"","docLink":"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Clause.eval_congr","kind":"theorem","line":92,"name":"Std.Sat.CNF.Clause.eval_congr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/CNF/Basic.lean#L92-L106"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Clause.mem_of\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">CNF</span>.<span class=\"name\">Clause</span>.<span class=\"name\">mem_of</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α✝</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Clause\">Clause</a> <span class=\"fn\">α✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">α✝</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">v</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">p</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <a href=\"./Init/Prelude.html#Membership.mem\">∈</a> <span class=\"fn\">c</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Clause.Mem\">Mem</a> <span class=\"fn\">v</span> <span class=\"fn\">c</span></span></div></div>","info":{"doc":"","docLink":"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Clause.mem_of","kind":"theorem","line":87,"name":"Std.Sat.CNF.Clause.mem_of","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/CNF/Basic.lean#L87-L90"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Clause.mem_cons\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">CNF</span>.<span class=\"name\">Clause</span>.<span class=\"name\">mem_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">l</span> : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Literal.html#Std.Sat.Literal\">Literal</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Std/Sat/CNF/Literal.html#Std.Sat.Literal\">Literal</a> <span class=\"fn\">α</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Clause.Mem\">Mem</a> <span class=\"fn\">v</span> (<span class=\"fn\">l</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">c</span>)</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">l</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Clause.Mem\">Mem</a> <span class=\"fn\">v</span> <span class=\"fn\">c</span></span></div></div>","info":{"doc":"","docLink":"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Clause.mem_cons","kind":"theorem","line":81,"name":"Std.Sat.CNF.Clause.mem_cons","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/CNF/Basic.lean#L81-L85"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Clause.not_mem_nil\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">CNF</span>.<span class=\"name\">Clause</span>.<span class=\"name\">not_mem_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Clause.Mem\">Mem</a> <span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span></div></div>","info":{"doc":"","docLink":"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Clause.not_mem_nil","kind":"theorem","line":80,"name":"Std.Sat.CNF.Clause.not_mem_nil","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/CNF/Basic.lean#L80-L80"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Clause.instDecidableMemOfDecidableEq\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">CNF</span>.<span class=\"name\">Clause</span>.<span class=\"name\">instDecidableMemOfDecidableEq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Clause\">Clause</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> <span class=\"fn\">(<a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Clause.Mem\">Mem</a> <span class=\"fn\">v</span> <span class=\"fn\">c</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Clause.instDecidableMemOfDecidableEq","kind":"instance","line":77,"name":"Std.Sat.CNF.Clause.instDecidableMemOfDecidableEq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/CNF/Basic.lean#L77-L78"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Clause.Mem\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">CNF</span>.<span class=\"name\">Clause</span>.<span class=\"name\">Mem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Clause\">Clause</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"Variable `v` occurs in `Clause` `c`.\n","docLink":"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Clause.Mem","kind":"def","line":72,"name":"Std.Sat.CNF.Clause.Mem","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/CNF/Basic.lean#L72-L75"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.unsat_nil_cons\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">CNF</span>.<span class=\"name\">unsat_nil_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">g</span> : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF\">CNF</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Unsat\">Unsat</a> (<a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">g</span>)</span></div></div>","info":{"doc":"","docLink":"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.unsat_nil_cons","kind":"theorem","line":67,"name":"Std.Sat.CNF.unsat_nil_cons","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/CNF/Basic.lean#L67-L68"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.sat_nil\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">CNF</span>.<span class=\"name\">sat_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">assign</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Sat\">Sat</a> <span class=\"fn\">assign</span> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span></div></div>","info":{"doc":"","docLink":"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.sat_nil","kind":"theorem","line":64,"name":"Std.Sat.CNF.sat_nil","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/CNF/Basic.lean#L64-L65"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.not_unsat_nil\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">CNF</span>.<span class=\"name\">not_unsat_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Unsat\">Unsat</a> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span></div></div>","info":{"doc":"","docLink":"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.not_unsat_nil","kind":"theorem","line":61,"name":"Std.Sat.CNF.not_unsat_nil","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/CNF/Basic.lean#L61-L62"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.unsat_def\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">CNF</span>.<span class=\"name\">unsat_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF\">CNF</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">f</span>.<a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Unsat\">Unsat</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">∀ (<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>), <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.eval\">eval</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span></div></div>","info":{"doc":"","docLink":"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.unsat_def","kind":"theorem","line":58,"name":"Std.Sat.CNF.unsat_def","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/CNF/Basic.lean#L58-L58"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.sat_def\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">CNF</span>.<span class=\"name\">sat_def</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF\">CNF</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Sat\">Sat</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.eval\">eval</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>","info":{"doc":"","docLink":"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.sat_def","kind":"theorem","line":57,"name":"Std.Sat.CNF.sat_def","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/CNF/Basic.lean#L57-L57"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Unsat\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">CNF</span>.<span class=\"name\">Unsat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF\">CNF</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"","docLink":"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Unsat","kind":"def","line":55,"name":"Std.Sat.CNF.Unsat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/CNF/Basic.lean#L55-L55"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Sat\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">CNF</span>.<span class=\"name\">Sat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF\">CNF</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"","docLink":"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Sat","kind":"def","line":54,"name":"Std.Sat.CNF.Sat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/CNF/Basic.lean#L54-L54"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.eval_append\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">CNF</span>.<span class=\"name\">eval_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f1 </span><span class=\"fn\">f2</span> : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF\">CNF</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.eval\">eval</a> <span class=\"fn\">a</span> (<span class=\"fn\">f1</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">f2</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.eval\">eval</a> <span class=\"fn\">a</span> <span class=\"fn\">f1</span></span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.eval\">eval</a> <span class=\"fn\">a</span> <span class=\"fn\">f2</span></span>)</div></div>","info":{"doc":"","docLink":"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.eval_append","kind":"theorem","line":51,"name":"Std.Sat.CNF.eval_append","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/CNF/Basic.lean#L51-L52"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.eval_cons\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">CNF</span>.<span class=\"name\">eval_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Clause\">Clause</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Clause\">Clause</a> <span class=\"fn\">α</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.eval\">eval</a> <span class=\"fn\">a</span> (<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">f</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Clause.eval\">Clause.eval</a> <span class=\"fn\">a</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.eval\">eval</a> <span class=\"fn\">a</span> <span class=\"fn\">f</span></span>)</div></div>","info":{"doc":"","docLink":"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.eval_cons","kind":"theorem","line":49,"name":"Std.Sat.CNF.eval_cons","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/CNF/Basic.lean#L49-L49"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.eval_nil\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">CNF</span>.<span class=\"name\">eval_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.eval\">eval</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>","info":{"doc":"","docLink":"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.eval_nil","kind":"theorem","line":48,"name":"Std.Sat.CNF.eval_nil","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/CNF/Basic.lean#L48-L48"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.eval\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">CNF</span>.<span class=\"name\">eval</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF\">CNF</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Evaluating a `CNF` formula with respect to an assignment `a`.\n","docLink":"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.eval","kind":"def","line":43,"name":"Std.Sat.CNF.eval","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/CNF/Basic.lean#L43-L46"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Clause.eval_cons\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">CNF</span>.<span class=\"name\">Clause</span>.<span class=\"name\">eval_cons</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Literal.html#Std.Sat.Literal\">Literal</a> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Std/Sat/CNF/Literal.html#Std.Sat.Literal\">Literal</a> <span class=\"fn\">α</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Clause.eval\">eval</a> <span class=\"fn\">a</span> (<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">c</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><span class=\"fn\">a</span> <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span> <a href=\"./Init/Prelude.html#Bool.or\">||</a> <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Clause.eval\">eval</a> <span class=\"fn\">a</span> <span class=\"fn\">c</span></span>)</div></div>","info":{"doc":"","docLink":"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Clause.eval_cons","kind":"theorem","line":40,"name":"Std.Sat.CNF.Clause.eval_cons","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/CNF/Basic.lean#L40-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Clause.eval_nil\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">CNF</span>.<span class=\"name\">Clause</span>.<span class=\"name\">eval_nil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Clause.eval\">eval</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></div></div>","info":{"doc":"","docLink":"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Clause.eval_nil","kind":"theorem","line":39,"name":"Std.Sat.CNF.Clause.eval_nil","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/CNF/Basic.lean#L39-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Clause.eval\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">CNF</span>.<span class=\"name\">Clause</span>.<span class=\"name\">eval</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Clause\">Clause</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Evaluating a `Clause` with respect to an assignment `a`.\n","docLink":"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Clause.eval","kind":"def","line":34,"name":"Std.Sat.CNF.Clause.eval","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/CNF/Basic.lean#L34-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">CNF</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>","info":{"doc":"A CNF formula.\n\nLiterals are identified by members of `α`.\n","docLink":"./Std/Sat/CNF/Basic.html#Std.Sat.CNF","kind":"def","line":25,"name":"Std.Sat.CNF","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/CNF/Basic.lean#L25-L30"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Clause\"><span class=\"name\">Std</span>.<span class=\"name\">Sat</span>.<span class=\"name\">CNF</span>.<span class=\"name\">Clause</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a> u</div></div>","info":{"doc":"A clause in a CNF.\n\nThe literal `(i, b)` is satisfied if the assignment to `i` agrees with `b`.\n","docLink":"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Clause","kind":"def","line":18,"name":"Std.Sat.CNF.Clause","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Sat/CNF/Basic.lean#L18-L23"}}],"imports":["Init.Data.List.Lemmas","Init.Data.List.Impl","Std.Sat.CNF.Literal"],"instances":[{"className":"Decidable","name":"Std.Sat.CNF.Clause.instDecidableMemOfDecidableEq","typeNames":["Std.Sat.CNF.Clause.Mem"]},{"className":"Decidable","name":"Std.Sat.CNF.instDecidableMemOfDecidableEq","typeNames":["Std.Sat.CNF.Mem"]},{"className":"Decidable","name":"Std.Sat.CNF.instDecidableExistsMemOfDecidableEq","typeNames":["Exists"]}],"name":"Std.Sat.CNF.Basic"}