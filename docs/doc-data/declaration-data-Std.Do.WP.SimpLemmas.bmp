{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.tryCatch_lift_ExceptT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">tryCatch_lift_ExceptT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sh</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">ε' </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Control/Except.html#ExceptT\">ExceptT</a> <span class=\"fn\">ε'</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">ε</span> → <span class=\"fn\"><a href=\"./Init/Control/Except.html#ExceptT\">ExceptT</a> <span class=\"fn\">ε'</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε'</span> <span class=\"fn\">sh</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">sh</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf\">MonadExceptOf</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.tryCatch\">MonadExceptOf.tryCatch</a> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.tryCatch\">MonadExceptOf.tryCatch</a> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a>\n    <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <span class=\"fn\">ε'</span> <span class=\"fn\">α</span></span>) =&gt;\n      <span class=\"fn\">match <span class=\"fn\">x</span> with\n      | <span class=\"fn\"><a href=\"./Init/Prelude.html#Except.ok\">Except.ok</a> <span class=\"fn\">a</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">a</span></span>\n      | <span class=\"fn\"><a href=\"./Init/Prelude.html#Except.error\">Except.error</a> <span class=\"fn\">e</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">e</span></span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a>       <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.tryCatch_lift_ExceptT","kind":"theorem","line":354,"name":"Std.Do.WP.tryCatch_lift_ExceptT","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/WP/SimpLemmas.lean#L354-L360"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.tryCatch_StateT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">tryCatch_StateT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sh</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">ε</span> → <span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">σ</span> <span class=\"fn\">sh</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">sh</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf\">MonadExceptOf</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.tryCatch\">MonadExceptOf.tryCatch</a> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>) =&gt;\n  <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.tryCatch\">MonadExceptOf.tryCatch</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Control/State.html#StateT.run\">run</a></span> <span class=\"fn\">s</span>)</span> <span class=\"fn\">fun (<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">h</span> <span class=\"fn\">e</span>)</span>.<a href=\"./Init/Control/State.html#StateT.run\">run</a></span> <span class=\"fn\">s</span></span></span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">xs</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">σ</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.tryCatch_StateT","kind":"theorem","line":349,"name":"Std.Do.WP.tryCatch_StateT","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/WP/SimpLemmas.lean#L349-L352"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.tryCatch_ReaderT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">tryCatch_ReaderT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sh</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#ReaderT\">ReaderT</a> <span class=\"fn\">ρ</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">ε</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#ReaderT\">ReaderT</a> <span class=\"fn\">ρ</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">ρ</span> <span class=\"fn\">sh</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">sh</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf\">MonadExceptOf</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.tryCatch\">MonadExceptOf.tryCatch</a> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">r</span> : <span class=\"fn\">ρ</span>) =&gt;\n  <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.tryCatch\">MonadExceptOf.tryCatch</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#ReaderT.run\">run</a></span> <span class=\"fn\">r</span>)</span> <span class=\"fn\">fun (<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">h</span> <span class=\"fn\">e</span>)</span>.<a href=\"./Init/Prelude.html#ReaderT.run\">run</a></span> <span class=\"fn\">r</span></span></span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">a</span> <span class=\"fn\">r</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.tryCatch_ReaderT","kind":"theorem","line":344,"name":"Std.Do.WP.tryCatch_ReaderT","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/WP/SimpLemmas.lean#L344-L347"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.tryCatch_EStateM\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">tryCatch_EStateM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">σ </span><span class=\"fn\">δ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">ε</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM\">EStateM</a> <span class=\"fn\">ε</span> <span class=\"fn\">σ</span> <span class=\"fn\">α</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">σ</span> <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.pure\">PostShape.pure</a>)</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#EStateM.Backtrackable\">EStateM.Backtrackable</a> <span class=\"fn\">δ</span> <span class=\"fn\">σ</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.tryCatch\">MonadExceptOf.tryCatch</a> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>) =&gt;\n  <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">x</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a>\n    <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">fun (<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>) (<span class=\"fn\">s'</span> : <span class=\"fn\">σ</span>) =&gt; <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><span class=\"fn\">h</span> <span class=\"fn\">e</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#EStateM.Backtrackable.restore\">EStateM.Backtrackable.restore</a> <span class=\"fn\">s'</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#EStateM.Backtrackable.save\">EStateM.Backtrackable.save</a> <span class=\"fn\">s</span>)</span>)</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a>       <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a>\n    <span class=\"fn\">s</span></span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.tryCatch_EStateM","kind":"theorem","line":337,"name":"Std.Do.WP.tryCatch_EStateM","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/WP/SimpLemmas.lean#L337-L342"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.tryCatch_ExceptT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">tryCatch_ExceptT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Control/Except.html#ExceptT\">ExceptT</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">ε</span> → <span class=\"fn\"><a href=\"./Init/Control/Except.html#ExceptT\">ExceptT</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε</span> <span class=\"fn\">ps</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.tryCatch\">MonadExceptOf.tryCatch</a> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">x</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">fun (<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>) =&gt; <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><span class=\"fn\">h</span> <span class=\"fn\">e</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.tryCatch_ExceptT","kind":"theorem","line":328,"name":"Std.Do.WP.tryCatch_ExceptT","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/WP/SimpLemmas.lean#L328-L334"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.tryCatch_Except\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">tryCatch_Except</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">ε</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε</span> <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.pure\">PostShape.pure</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.tryCatch\">MonadExceptOf.tryCatch</a> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">x</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">fun (<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>) =&gt; <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><span class=\"fn\">h</span> <span class=\"fn\">e</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.tryCatch_Except","kind":"theorem","line":321,"name":"Std.Do.WP.tryCatch_Except","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/WP/SimpLemmas.lean#L321-L326"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.tryCatchThe\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">tryCatchThe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">ε</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf\">MonadExceptOf</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#tryCatchThe\">_root_.tryCatchThe</a> <span class=\"fn\">ε</span> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.tryCatch\">MonadExceptOf.tryCatch</a> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.tryCatchThe","kind":"theorem","line":317,"name":"Std.Do.WP.tryCatchThe","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/WP/SimpLemmas.lean#L317-L319"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.tryCatch_MonadExcept\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">tryCatch_MonadExcept</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">ε</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf\">MonadExceptOf</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExcept.tryCatch\">tryCatch</a> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.tryCatch\">MonadExceptOf.tryCatch</a> <span class=\"fn\">x</span> <span class=\"fn\">h</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.tryCatch_MonadExcept","kind":"theorem","line":313,"name":"Std.Do.WP.tryCatch_MonadExcept","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/WP/SimpLemmas.lean#L313-L315"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.throw_lift_ExceptT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">throw_lift_ExceptT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sh</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">ε' </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε'</span> <span class=\"fn\">sh</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">sh</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf\">MonadExceptOf</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.throw\">MonadExceptOf.throw</a> <span class=\"fn\">e</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.throw\">MonadExceptOf.throw</a> <span class=\"fn\">e</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a>\n    <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <span class=\"fn\">ε'</span> <span class=\"fn\">α</span></span>) =&gt;\n      <span class=\"fn\">match <span class=\"fn\">x</span> with\n      | <span class=\"fn\"><a href=\"./Init/Prelude.html#Except.ok\">Except.ok</a> <span class=\"fn\">a</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">a</span></span>\n      | <span class=\"fn\"><a href=\"./Init/Prelude.html#Except.error\">Except.error</a> <span class=\"fn\">e</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">e</span></span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a>       <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.throw_lift_ExceptT","kind":"theorem","line":305,"name":"Std.Do.WP.throw_lift_ExceptT","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/WP/SimpLemmas.lean#L305-L311"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.throw_StateT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">throw_StateT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sh</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">ρ</span> <span class=\"fn\">sh</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">sh</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf\">MonadExceptOf</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.throw\">MonadExceptOf.throw</a> <span class=\"fn\">e</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift.monadLift\">MonadLift.monadLift</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#MonadExceptOf.throw\">MonadExceptOf.throw</a> <span class=\"fn\">e</span>)</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.throw_StateT","kind":"theorem","line":299,"name":"Std.Do.WP.throw_StateT","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/WP/SimpLemmas.lean#L299-L301"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.throw_ReaderT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">throw_ReaderT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sh</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">ρ</span> <span class=\"fn\">sh</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">sh</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf\">MonadExceptOf</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.throw\">MonadExceptOf.throw</a> <span class=\"fn\">e</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift.monadLift\">MonadLift.monadLift</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#MonadExceptOf.throw\">MonadExceptOf.throw</a> <span class=\"fn\">e</span>)</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.throw_ReaderT","kind":"theorem","line":295,"name":"Std.Do.WP.throw_ReaderT","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/WP/SimpLemmas.lean#L295-L297"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.throw_EStateM\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">throw_EStateM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">σ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">σ</span> <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.pure\">PostShape.pure</a>)</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.throw\">MonadExceptOf.throw</a> <span class=\"fn\">e</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">e</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.throw_EStateM","kind":"theorem","line":290,"name":"Std.Do.WP.throw_EStateM","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/WP/SimpLemmas.lean#L290-L293"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.throw_ExceptT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">throw_ExceptT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε</span> <span class=\"fn\">ps</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.throw\">MonadExceptOf.throw</a> <span class=\"fn\">e</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">e</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.throw_ExceptT","kind":"theorem","line":285,"name":"Std.Do.WP.throw_ExceptT","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/WP/SimpLemmas.lean#L285-L288"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.throw_Except\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">throw_Except</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε</span> <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.pure\">PostShape.pure</a>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.throw\">MonadExceptOf.throw</a> <span class=\"fn\">e</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">e</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.throw_Except","kind":"theorem","line":280,"name":"Std.Do.WP.throw_Except","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/WP/SimpLemmas.lean#L280-L283"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.throwThe\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">throwThe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf\">MonadExceptOf</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#throwThe\">_root_.throwThe</a> <span class=\"fn\">ε</span> <span class=\"fn\">e</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.throw\">MonadExceptOf.throw</a> <span class=\"fn\">e</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.throwThe","kind":"theorem","line":276,"name":"Std.Do.WP.throwThe","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/WP/SimpLemmas.lean#L276-L278"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.throw_MonadExcept\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">throw_MonadExcept</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf\">MonadExceptOf</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExcept.throw\">throw</a> <span class=\"fn\">e</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf.throw\">MonadExceptOf.throw</a> <span class=\"fn\">e</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.throw_MonadExcept","kind":"theorem","line":272,"name":"Std.Do.WP.throw_MonadExcept","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/WP/SimpLemmas.lean#L272-L274"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.withTheReader\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">withTheReader</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadWithReaderOf\">MonadWithReaderOf</a> <span class=\"fn\">ρ</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">ρ</span> → <span class=\"fn\">ρ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#withTheReader\">_root_.withTheReader</a> <span class=\"fn\">ρ</span> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadWithReaderOf.withReader\">MonadWithReaderOf.withReader</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.withTheReader","kind":"theorem","line":255,"name":"Std.Do.WP.withTheReader","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/WP/SimpLemmas.lean#L255-L257"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.withReader_MonadWithReader\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">withReader_MonadWithReader</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadWithReaderOf\">MonadWithReaderOf</a> <span class=\"fn\">ρ</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">ρ</span> → <span class=\"fn\">ρ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadWithReader.withReader\">withReader</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadWithReaderOf.withReader\">MonadWithReaderOf.withReader</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.withReader_MonadWithReader","kind":"theorem","line":251,"name":"Std.Do.WP.withReader_MonadWithReader","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/WP/SimpLemmas.lean#L251-L253"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.withReader_MonadWithReaderOf\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">withReader_MonadWithReaderOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">nsh</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">nsh</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadWithReaderOf\">MonadWithReaderOf</a> <span class=\"fn\">ρ</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">n</span> <span class=\"fn\">nsh</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadFunctor\">MonadFunctor</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">ρ</span> → <span class=\"fn\">ρ</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">n</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadWithReaderOf.withReader\">MonadWithReaderOf.withReader</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadFunctor.monadMap\">MonadFunctor.monadMap</a> <span class=\"fn\">(fun {<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#MonadWithReaderOf.withReader\">MonadWithReaderOf.withReader</a> <span class=\"fn\">f</span></span>)</span> <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.withReader_MonadWithReaderOf","kind":"theorem","line":247,"name":"Std.Do.WP.withReader_MonadWithReaderOf","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/WP/SimpLemmas.lean#L247-L249"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.withReader_ReaderT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">withReader_ReaderT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">ρ</span> → <span class=\"fn\">ρ</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#ReaderT\">ReaderT</a> <span class=\"fn\">ρ</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">ρ</span> <span class=\"fn\">ps</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadWithReaderOf.withReader\">MonadWithReaderOf.withReader</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">r</span> : <span class=\"fn\">ρ</span>) =&gt; <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">x</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">x</span> : <span class=\"fn\">ρ</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">a</span> <span class=\"fn\">r</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">r</span>)</span></span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.withReader_ReaderT","kind":"theorem","line":243,"name":"Std.Do.WP.withReader_ReaderT","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/WP/SimpLemmas.lean#L243-L245"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.monadMap_refl\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">monadMap_refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadFunctorT.monadMap\">monadMap</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.monadMap_refl","kind":"theorem","line":239,"name":"Std.Do.WP.monadMap_refl","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/WP/SimpLemmas.lean#L239-L241"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.monadMap_trans\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">monadMap_trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">f</span> : <span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">o</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">o</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadFunctor\">MonadFunctor</a> <span class=\"fn\">n</span> <span class=\"fn\">o</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadFunctorT\">MonadFunctorT</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadFunctorT.monadMap\">monadMap</a> <span class=\"fn\">f</span> <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadFunctor.monadMap\">MonadFunctor.monadMap</a> <span class=\"fn\">(fun {<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#MonadFunctorT.monadMap\">monadMap</a> <span class=\"fn\">fun {<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} =&gt; <span class=\"fn\">f</span></span></span>)</span> <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.monadMap_trans","kind":"theorem","line":235,"name":"Std.Do.WP.monadMap_trans","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/WP/SimpLemmas.lean#L235-L237"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.monadMap_ExceptT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">monadMap_ExceptT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Control/Except.html#ExceptT\">ExceptT</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε</span> <span class=\"fn\">ps</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadFunctor.monadMap\">MonadFunctor.monadMap</a> <span class=\"fn\">(fun {<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} =&gt; <span class=\"fn\">f</span>)</span> <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Control/Except.html#ExceptT.run\">run</a></span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a>\n    <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span></span>) =&gt;\n      <span class=\"fn\">match <span class=\"fn\">x</span> with\n      | <span class=\"fn\"><a href=\"./Init/Prelude.html#Except.ok\">Except.ok</a> <span class=\"fn\">a</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">a</span></span>\n      | <span class=\"fn\"><a href=\"./Init/Prelude.html#Except.error\">Except.error</a> <span class=\"fn\">e</span></span> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">e</span></span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a>       <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.monadMap_ExceptT","kind":"theorem","line":228,"name":"Std.Do.WP.monadMap_ExceptT","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/WP/SimpLemmas.lean#L228-L233"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.monadMap_ReaderT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">monadMap_ReaderT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#ReaderT\">ReaderT</a> <span class=\"fn\">ρ</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">ρ</span> <span class=\"fn\">ps</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadFunctor.monadMap\">MonadFunctor.monadMap</a> <span class=\"fn\">(fun {<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} =&gt; <span class=\"fn\">f</span>)</span> <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">s</span> : <span class=\"fn\">ρ</span>) =&gt; <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#ReaderT.run\">run</a></span> <span class=\"fn\">s</span>)</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.monadMap_ReaderT","kind":"theorem","line":222,"name":"Std.Do.WP.monadMap_ReaderT","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/WP/SimpLemmas.lean#L222-L226"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.monadMap_StateT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">monadMap_StateT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">σ</span> <span class=\"fn\">ps</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadFunctor.monadMap\">MonadFunctor.monadMap</a> <span class=\"fn\">(fun {<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u} =&gt; <span class=\"fn\">f</span>)</span> <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>) =&gt;\n  <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Control/State.html#StateT.run\">run</a></span> <span class=\"fn\">s</span>)</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a>\n    <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">x</span> : <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">σ</span>) =&gt;\n      <span class=\"fn\">match <span class=\"fn\">x</span> with\n      | <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">s</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a>       <span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.monadMap_StateT","kind":"theorem","line":216,"name":"Std.Do.WP.monadMap_StateT","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/WP/SimpLemmas.lean#L216-L220"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.modifyGet_EStateM\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">modifyGet_EStateM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">α </span><span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">σ</span> <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.pure\">PostShape.pure</a>)</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf.modifyGet\">MonadStateOf.modifyGet</a> <span class=\"fn\">f</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">s</span>)</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">s</span>)</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span></span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.modifyGet_EStateM","kind":"theorem","line":194,"name":"Std.Do.WP.modifyGet_EStateM","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/WP/SimpLemmas.lean#L194-L197"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.set_EStateM\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">set_EStateM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">σ</span> <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.pure\">PostShape.pure</a>)</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf.set\">set</a> <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">x_1</span> : <span class=\"fn\">σ</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#PUnit.unit\">PUnit.unit</a> <span class=\"fn\">x</span></span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.set_EStateM","kind":"theorem","line":189,"name":"Std.Do.WP.set_EStateM","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/WP/SimpLemmas.lean#L189-L192"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.get_EStateM\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">get_EStateM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">σ</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">σ</span> <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.pure\">PostShape.pure</a>)</span>)</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><a href=\"./Init/Prelude.html#MonadStateOf.get\">MonadStateOf.get</a><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">s</span> <span class=\"fn\">s</span></span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.get_EStateM","kind":"theorem","line":184,"name":"Std.Do.WP.get_EStateM","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/WP/SimpLemmas.lean#L184-L187"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.modifyGet_StateT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">modifyGet_StateT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">σ</span> <span class=\"fn\">ps</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf.modifyGet\">MonadStateOf.modifyGet</a> <span class=\"fn\">f</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">s</span>)</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">s</span>)</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span></span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.modifyGet_StateT","kind":"theorem","line":179,"name":"Std.Do.WP.modifyGet_StateT","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/WP/SimpLemmas.lean#L179-L182"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.set_StateT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">set_StateT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">σ</span> <span class=\"fn\">ps</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\">σ</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf.set\">set</a> <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">x_1</span> : <span class=\"fn\">σ</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#PUnit.unit\">PUnit.unit</a> <span class=\"fn\">x</span></span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.set_StateT","kind":"theorem","line":174,"name":"Std.Do.WP.set_StateT","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/WP/SimpLemmas.lean#L174-L177"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.get_StateT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">get_StateT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">σ</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">σ</span> <span class=\"fn\">ps</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><a href=\"./Init/Prelude.html#MonadStateOf.get\">MonadStateOf.get</a><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">s</span> <span class=\"fn\">s</span></span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.get_StateT","kind":"theorem","line":169,"name":"Std.Do.WP.get_StateT","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/WP/SimpLemmas.lean#L169-L172"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.read_ReaderT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">read_ReaderT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">ρ</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">ρ</span> <span class=\"fn\">ps</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><a href=\"./Init/Prelude.html#MonadReaderOf.read\">MonadReaderOf.read</a><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">r</span> : <span class=\"fn\">ρ</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">r</span> <span class=\"fn\">r</span></span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.read_ReaderT","kind":"theorem","line":164,"name":"Std.Do.WP.read_ReaderT","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/WP/SimpLemmas.lean#L164-L167"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.modifyThe_MonadStateOf\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">modifyThe_MonadStateOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf\">MonadStateOf</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#modifyThe\">modifyThe</a> <span class=\"fn\">σ</span> <span class=\"fn\">f</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf.modifyGet\">MonadStateOf.modifyGet</a> <span class=\"fn\">fun (<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>) =&gt; <a href=\"./Init/Prelude.html#Prod.mk\">(</a><a href=\"./Init/Prelude.html#PUnit.unit\">PUnit.unit</a><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">s</span></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.modifyThe_MonadStateOf","kind":"theorem","line":158,"name":"Std.Do.WP.modifyThe_MonadStateOf","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/WP/SimpLemmas.lean#L158-L160"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.modify_MonadStateOf\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">modify_MonadStateOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf\">MonadStateOf</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#modify\">modify</a> <span class=\"fn\">f</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf.modifyGet\">MonadStateOf.modifyGet</a> <span class=\"fn\">fun (<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>) =&gt; <a href=\"./Init/Prelude.html#Prod.mk\">(</a><a href=\"./Init/Prelude.html#PUnit.unit\">PUnit.unit</a><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">s</span></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.modify_MonadStateOf","kind":"theorem","line":154,"name":"Std.Do.WP.modify_MonadStateOf","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/WP/SimpLemmas.lean#L154-L156"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.modifyGetThe_MonadStateOf\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">modifyGetThe_MonadStateOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf\">MonadStateOf</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#modifyGetThe\">modifyGetThe</a> <span class=\"fn\">σ</span> <span class=\"fn\">f</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf.modifyGet\">MonadStateOf.modifyGet</a> <span class=\"fn\">f</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.modifyGetThe_MonadStateOf","kind":"theorem","line":150,"name":"Std.Do.WP.modifyGetThe_MonadStateOf","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/WP/SimpLemmas.lean#L150-L152"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.modifyGet_MonadState\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">modifyGet_MonadState</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf\">MonadStateOf</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadState.modifyGet\">modifyGet</a> <span class=\"fn\">f</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf.modifyGet\">MonadStateOf.modifyGet</a> <span class=\"fn\">f</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.modifyGet_MonadState","kind":"theorem","line":146,"name":"Std.Do.WP.modifyGet_MonadState","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/WP/SimpLemmas.lean#L146-L148"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.modifyGet_MonadStateOf\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">modifyGet_MonadStateOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps✝</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf\">MonadStateOf</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift\">MonadLift</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">n</span> <span class=\"fn\">ps✝</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">σ</span> → <span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">σ</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf.modifyGet\">MonadStateOf.modifyGet</a> <span class=\"fn\">f</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift.monadLift\">MonadLift.monadLift</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#MonadState.modifyGet\">modifyGet</a> <span class=\"fn\">f</span>)</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.modifyGet_MonadStateOf","kind":"theorem","line":141,"name":"Std.Do.WP.modifyGet_MonadStateOf","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/WP/SimpLemmas.lean#L141-L144"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.set_MonadState\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">set_MonadState</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">σ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf\">MonadStateOf</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadState.set\">MonadState.set</a> <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf.set\">set</a> <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.set_MonadState","kind":"theorem","line":137,"name":"Std.Do.WP.set_MonadState","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/WP/SimpLemmas.lean#L137-L139"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.set_MonadStateOf\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">set_MonadStateOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\">σ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps✝</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <a href=\"./Init/Prelude.html#PUnit\">PUnit</a> <span class=\"fn\">ps✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf\">MonadStateOf</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift\">MonadLift</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">n</span> <span class=\"fn\">ps✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf.set\">set</a> <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift.monadLift\">MonadLift.monadLift</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#MonadStateOf.set\">set</a> <span class=\"fn\">x</span>)</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.set_MonadStateOf","kind":"theorem","line":133,"name":"Std.Do.WP.set_MonadStateOf","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/WP/SimpLemmas.lean#L133-L135"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.getThe_MonadStateOf\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">getThe_MonadStateOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">σ</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf\">MonadStateOf</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#getThe\">getThe</a> <span class=\"fn\">σ</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><a href=\"./Init/Prelude.html#MonadStateOf.get\">MonadStateOf.get</a><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.getThe_MonadStateOf","kind":"theorem","line":129,"name":"Std.Do.WP.getThe_MonadStateOf","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/WP/SimpLemmas.lean#L129-L131"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.get_MonadState\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">get_MonadState</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">σ</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf\">MonadStateOf</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><a href=\"./Init/Prelude.html#MonadState.get\">get</a><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><a href=\"./Init/Prelude.html#MonadStateOf.get\">MonadStateOf.get</a><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.get_MonadState","kind":"theorem","line":125,"name":"Std.Do.WP.get_MonadState","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/WP/SimpLemmas.lean#L125-L127"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.get_MonadStateOf\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">get_MonadStateOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps✝</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">σ</span> <span class=\"fn\">ps✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadStateOf\">MonadStateOf</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift\">MonadLift</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">n</span> <span class=\"fn\">ps✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><a href=\"./Init/Prelude.html#MonadStateOf.get\">MonadStateOf.get</a><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift.monadLift\">MonadLift.monadLift</a> <a href=\"./Init/Prelude.html#MonadStateOf.get\">MonadStateOf.get</a></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.get_MonadStateOf","kind":"theorem","line":121,"name":"Std.Do.WP.get_MonadStateOf","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/WP/SimpLemmas.lean#L121-L123"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.read_MonadReader\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">read_MonadReader</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">ρ</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadReaderOf\">MonadReaderOf</a> <span class=\"fn\">ρ</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><a href=\"./Init/Prelude.html#MonadReader.read\">read</a><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><a href=\"./Init/Prelude.html#MonadReaderOf.read\">MonadReaderOf.read</a><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.read_MonadReader","kind":"theorem","line":115,"name":"Std.Do.WP.read_MonadReader","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/WP/SimpLemmas.lean#L115-L117"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.readThe\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">readThe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">ρ</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadReaderOf\">MonadReaderOf</a> <span class=\"fn\">ρ</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#readThe\">_root_.readThe</a> <span class=\"fn\">ρ</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><a href=\"./Init/Prelude.html#MonadReaderOf.read\">MonadReaderOf.read</a><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.readThe","kind":"theorem","line":111,"name":"Std.Do.WP.readThe","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/WP/SimpLemmas.lean#L111-L113"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.read_MonadReaderOf\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">read_MonadReaderOf</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps✝</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">ρ</span> <span class=\"fn\">ps✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadReaderOf\">MonadReaderOf</a> <span class=\"fn\">ρ</span> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift\">MonadLift</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">n</span> <span class=\"fn\">ps✝</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><a href=\"./Init/Prelude.html#MonadReaderOf.read\">MonadReaderOf.read</a><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift.monadLift\">MonadLift.monadLift</a> <a href=\"./Init/Prelude.html#MonadReader.read\">read</a></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.read_MonadReaderOf","kind":"theorem","line":107,"name":"Std.Do.WP.read_MonadReaderOf","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/WP/SimpLemmas.lean#L107-L109"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.lift_ExceptT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">lift_ExceptT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε</span> <span class=\"fn\">ps</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Control/Except.html#ExceptT.lift\">ExceptT.lift</a> <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift.monadLift\">MonadLift.monadLift</a> <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.lift_ExceptT","kind":"theorem","line":100,"name":"Std.Do.WP.lift_ExceptT","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/WP/SimpLemmas.lean#L100-L102"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.lift_StateT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">lift_StateT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">σ</span> <span class=\"fn\">ps</span>)</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Control/State.html#StateT.lift\">StateT.lift</a> <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift.monadLift\">MonadLift.monadLift</a> <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.lift_StateT","kind":"theorem","line":96,"name":"Std.Do.WP.lift_StateT","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/WP/SimpLemmas.lean#L96-L98"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.monadLift_refl\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">monadLift_refl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT.monadLift\">monadLift</a> <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">x</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.monadLift_refl","kind":"theorem","line":90,"name":"Std.Do.WP.monadLift_refl","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/WP/SimpLemmas.lean#L90-L92"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.monadLift_trans\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">monadLift_trans</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">o</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u_1</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">o</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift\">MonadLift</a> <span class=\"fn\">n</span> <span class=\"fn\">o</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT.monadLift\">monadLift</a> <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift.monadLift\">MonadLift.monadLift</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#MonadLiftT.monadLift\">monadLift</a> <span class=\"fn\">x</span>)</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.monadLift_trans","kind":"theorem","line":86,"name":"Std.Do.WP.monadLift_trans","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/WP/SimpLemmas.lean#L86-L88"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.monadLift_ExceptT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">monadLift_ExceptT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">ε</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.except\">PostShape.except</a> <span class=\"fn\">ε</span> <span class=\"fn\">ps</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift.monadLift\">MonadLift.monadLift</a> <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">x</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">a</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.monadLift_ExceptT","kind":"theorem","line":81,"name":"Std.Do.WP.monadLift_ExceptT","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/WP/SimpLemmas.lean#L81-L84"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.monadLift_ReaderT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">monadLift_ReaderT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">ρ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">ρ</span> <span class=\"fn\">ps</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift.monadLift\">MonadLift.monadLift</a> <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">s</span> : <span class=\"fn\">ρ</span>) =&gt; <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">x</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.monadLift_ReaderT","kind":"theorem","line":77,"name":"Std.Do.WP.monadLift_ReaderT","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/WP/SimpLemmas.lean#L77-L79"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.monadLift_StateT\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">monadLift_StateT</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">σ</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">(<a href=\"./Std/Do/PostCond.html#Std.Do.PostShape.arg\">PostShape.arg</a> <span class=\"fn\">σ</span> <span class=\"fn\">ps</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift.monadLift\">MonadLift.monadLift</a> <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">fun (<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>) =&gt; <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">x</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">a</span> <span class=\"fn\">s</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.monadLift_StateT","kind":"theorem","line":73,"name":"Std.Do.WP.monadLift_StateT","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/WP/SimpLemmas.lean#L73-L75"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.seq\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">seq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<span class=\"fn\">α</span> → <span class=\"fn\">β</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">β</span> <span class=\"fn\">ps</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><span class=\"fn\">f</span> &lt;*&gt; <span class=\"fn\">x</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">f</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>) =&gt; <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">x</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">a</span>)</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.seq","kind":"theorem","line":61,"name":"Std.Do.WP.seq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/WP/SimpLemmas.lean#L61-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.map\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">map</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\">β</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">β</span> <span class=\"fn\">ps</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">f</span> <a href=\"./Init/Prelude.html#Functor.map\">&lt;$&gt;</a> <span class=\"fn\">x</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">x</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">a</span>)</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.map","kind":"theorem","line":57,"name":"Std.Do.WP.map","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/WP/SimpLemmas.lean#L57-L59"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.bind\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">bind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">β</span> <span class=\"fn\">ps</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Bind.bind\">&gt;&gt;=</a> <span class=\"fn\">f</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">x</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">a</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.bind","kind":"theorem","line":53,"name":"Std.Do.WP.bind","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/WP/SimpLemmas.lean#L53-L55"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.pure\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">pure</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Monad.html#Std.Do.WPMonad\">WPMonad</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">Pure.pure</a> <span class=\"fn\">a</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.pure","kind":"theorem","line":49,"name":"Std.Do.WP.pure","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/WP/SimpLemmas.lean#L49-L51"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.ExceptT_run\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">ExceptT_run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ε </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Except\">Except</a> <span class=\"fn\">ε</span> <span class=\"fn\">α</span>)</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Control/Except.html#ExceptT\">ExceptT</a> <span class=\"fn\">ε</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Control/Except.html#ExceptT.run\">run</a></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">x</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Except.ok\">Except.ok</a> <span class=\"fn\">a</span>)</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">fun (<span class=\"fn\">e</span> : <span class=\"fn\">ε</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Except.error\">Except.error</a> <span class=\"fn\">e</span>)</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.ExceptT_run","kind":"theorem","line":40,"name":"Std.Do.WP.ExceptT_run","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/WP/SimpLemmas.lean#L40-L45"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.StateT_run\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">StateT_run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">σ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">σ</span>) <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Control/State.html#StateT\">StateT</a> <span class=\"fn\">σ</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Control/State.html#StateT.run\">run</a></span> <span class=\"fn\">s</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">x</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">s</span> : <span class=\"fn\">σ</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">a</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">s</span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <span class=\"fn\">s</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.StateT_run","kind":"theorem","line":36,"name":"Std.Do.WP.StateT_run","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/WP/SimpLemmas.lean#L36-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.ReaderT_run\"><span class=\"name\">Std</span>.<span class=\"name\">Do</span>.<span class=\"name\">WP</span>.<span class=\"name\">ReaderT_run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u → <a href=\"./foundational_types.html\">Type</a> v</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ps</span> : <a href=\"./Std/Do/PostCond.html#Std.Do.PostShape\">PostShape</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ρ </span><span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">r</span> : <span class=\"fn\">ρ</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">Q</span> : <span class=\"fn\"><a href=\"./Std/Do/PostCond.html#Std.Do.PostCond\">PostCond</a> <span class=\"fn\">α</span> <span class=\"fn\">ps</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Std/Do/WP/Basic.html#Std.Do.WP\">WP</a> <span class=\"fn\">m</span> <span class=\"fn\">ps</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#ReaderT\">ReaderT</a> <span class=\"fn\">ρ</span> <span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#ReaderT.run\">run</a></span> <span class=\"fn\">r</span></span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <span class=\"fn\">Q</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">wp⟦</a><span class=\"fn\">x</span><a href=\"./Std/Do/PredTrans.html#Std.Do.PredTrans.apply\">⟧</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">fun (<span class=\"fn\">a</span> : <span class=\"fn\">α</span>) (<span class=\"fn\">x</span> : <span class=\"fn\">ρ</span>) =&gt; <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.fst\">fst</a></span> <span class=\"fn\">a</span></span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\"><span class=\"fn\">Q</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a> <span class=\"fn\">r</span></span></div></div>","info":{"doc":"","docLink":"./Std/Do/WP/SimpLemmas.html#Std.Do.WP.ReaderT_run","kind":"theorem","line":32,"name":"Std.Do.WP.ReaderT_run","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Do/WP/SimpLemmas.lean#L32-L34"}}],"imports":["Std.Do.WP.Basic","Std.Do.WP.Monad"],"instances":[],"name":"Std.Do.WP.SimpLemmas"}