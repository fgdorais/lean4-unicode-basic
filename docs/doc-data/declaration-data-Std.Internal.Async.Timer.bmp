{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Interval.stop\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Interval</span>.<span class=\"name\">stop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Interval\">Interval</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"If:\n- `i` is still running this stops `i` without resolving any remaining `AsyncTask` that were created\n  through `tick`. Note that if another `AsyncTask` is binding on any of these it is going hang\n  forever without further intervention.\n- `i` is not yet or not anymore running this is a no-op.\n","docLink":"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Interval.stop","kind":"def","line":154,"name":"Std.Internal.IO.Async.Interval.stop","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Internal/Async/Timer.lean#L154-L163"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Interval.reset\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Interval</span>.<span class=\"name\">reset</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Interval\">Interval</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"If:\n- `Interval.tick` was called on `i` before the timer restarts counting from now and the next tick\n   happens in `duration`.\n- `i` is not yet or not anymore running this is a no-op.\n","docLink":"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Interval.reset","kind":"def","line":144,"name":"Std.Internal.IO.Async.Interval.reset","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Internal/Async/Timer.lean#L144-L152"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Interval.tick\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Interval</span>.<span class=\"name\">tick</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Interval\">Interval</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">(<a href=\"./Std/Internal/Async/Basic.html#Std.Internal.IO.Async.AsyncTask\">AsyncTask</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span></span></div></div>","info":{"doc":"If:\n- `i` is not yet running start it and return an `AsyncTask` that resolves right away as the 0th\n  multiple of `duration` has elapsed.\n- `i` is already running and:\n  - the tick from the last call of `i` has not yet finished return the same `AsyncTask` as the last\n    call\n  - the tick from the last call of `i` has finished return a new `AsyncTask` that waits for the\n    closest next tick from the time of calling this function.\n- `i` is not running anymore this is a no-op.\n","docLink":"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Interval.tick","kind":"def","line":128,"name":"Std.Internal.IO.Async.Interval.tick","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Internal/Async/Timer.lean#L128-L142"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Interval.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Interval</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">duration</span> : <a href=\"./Std/Time/Time/Unit/Millisecond.html#Std.Time.Millisecond.Offset\">Time.Millisecond.Offset</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Tactics.html#autoParam\">autoParam</a> (<span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">duration</span>) <a href=\"./Std/Internal/Async/Timer.html#_auto._@.Std.Internal.Async.Timer.1434432365._hygCtx._hyg.4\">_auto✝</a></span> → <span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Interval\">Interval</a></span></span></div></div>","info":{"doc":"Setup up an `Interval` that waits for `duration` milliseconds.\nThis function only initializes but does not yet start the timer.\n","docLink":"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Interval.mk","kind":"def","line":119,"name":"Std.Internal.IO.Async.Interval.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Internal/Async/Timer.lean#L119-L126"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Interval.native\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Interval</span>.<span class=\"name\">native</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Interval\">Interval</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Internal/UV/Timer.html#Std.Internal.UV.Timer\">UV.Timer</a></div></div>","info":{"doc":"","docLink":"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Interval.native","kind":"def","line":114,"name":"Std.Internal.IO.Async.Interval.native","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Internal/Async/Timer.lean#L114-L114"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Interval\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Interval</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"`Interval` can be used to repeatedly wait for some duration like a clock.\nThe underlying timer has millisecond resolution.\n","docLink":"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Interval","kind":"structure","line":108,"name":"Std.Internal.IO.Async.Interval","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Internal/Async/Timer.lean#L108-L114"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Selector.sleep\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Selector</span>.<span class=\"name\">sleep</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">duration</span> : <a href=\"./Std/Time/Time/Unit/Millisecond.html#Std.Time.Millisecond.Offset\">Time.Millisecond.Offset</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">(<a href=\"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Selector\">Selector</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span></span></div></div>","info":{"doc":"Return a `Selector` that resolves after `duration`.\n","docLink":"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Selector.sleep","kind":"def","line":101,"name":"Std.Internal.IO.Async.Selector.sleep","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Internal/Async/Timer.lean#L101-L106"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.sleep\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">sleep</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">duration</span> : <a href=\"./Std/Time/Time/Unit/Millisecond.html#Std.Time.Millisecond.Offset\">Time.Millisecond.Offset</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">(<a href=\"./Std/Internal/Async/Basic.html#Std.Internal.IO.Async.AsyncTask\">AsyncTask</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span></span></div></div>","info":{"doc":"Return an `AsyncTask` that resolves after `duration`.\n","docLink":"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.sleep","kind":"def","line":94,"name":"Std.Internal.IO.Async.sleep","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Internal/Async/Timer.lean#L94-L99"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Sleep.selector\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Sleep</span>.<span class=\"name\">selector</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Sleep\">Sleep</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">(<a href=\"./Std/Internal/Async/Select.html#Std.Internal.IO.Async.Selector\">Selector</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span></span></div></div>","info":{"doc":"Create a `Selector` that resolves once `s` has finished. Note that calling this function starts `s`\nif it hasn't already started.\n","docLink":"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Sleep.selector","kind":"def","line":72,"name":"Std.Internal.IO.Async.Sleep.selector","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Internal/Async/Timer.lean#L72-L90"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Sleep.stop\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Sleep</span>.<span class=\"name\">stop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Sleep\">Sleep</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"If:\n- `s` is still running this stops `s` without resolving any remaining `AsyncTask`s that were created\n  through `wait`. Note that if another `AsyncTask` is binding on any of these it is going hang\n  forever without further intervention.\n- `s` is not yet or not anymore running this is a no-op.\n","docLink":"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Sleep.stop","kind":"def","line":61,"name":"Std.Internal.IO.Async.Sleep.stop","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Internal/Async/Timer.lean#L61-L70"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Sleep.reset\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Sleep</span>.<span class=\"name\">reset</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Sleep\">Sleep</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"If:\n- `s` is still running the timer restarts counting from now and finishes after `duration`\n  milliseconds.\n- `s` is not yet or not anymore running this is a no-op.\n","docLink":"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Sleep.reset","kind":"def","line":51,"name":"Std.Internal.IO.Async.Sleep.reset","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Internal/Async/Timer.lean#L51-L59"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Sleep.wait\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Sleep</span>.<span class=\"name\">wait</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Sleep\">Sleep</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">(<a href=\"./Std/Internal/Async/Basic.html#Std.Internal.IO.Async.AsyncTask\">AsyncTask</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span></span></div></div>","info":{"doc":"If:\n- `s` is not yet running start it and return an `AsyncTask` that will resolve once the previously\n   configured `duration` has run out.\n- `s` is already or not anymore running return the same `AsyncTask` as the first call to `wait`.\n","docLink":"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Sleep.wait","kind":"def","line":40,"name":"Std.Internal.IO.Async.Sleep.wait","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Internal/Async/Timer.lean#L40-L49"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Sleep.mk\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Sleep</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">duration</span> : <a href=\"./Std/Time/Time/Unit/Millisecond.html#Std.Time.Millisecond.Offset\">Time.Millisecond.Offset</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Sleep\">Sleep</a></span></div></div>","info":{"doc":"Set up a `Sleep` that waits for `duration` milliseconds.\nThis function only initializes but does not yet start the timer.\n","docLink":"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Sleep.mk","kind":"def","line":31,"name":"Std.Internal.IO.Async.Sleep.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Internal/Async/Timer.lean#L31-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Sleep.native\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Sleep</span>.<span class=\"name\">native</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Sleep\">Sleep</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Std/Internal/UV/Timer.html#Std.Internal.UV.Timer\">UV.Timer</a></div></div>","info":{"doc":"","docLink":"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Sleep.native","kind":"def","line":27,"name":"Std.Internal.IO.Async.Sleep.native","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Internal/Async/Timer.lean#L27-L27"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Sleep\"><span class=\"name\">Std</span>.<span class=\"name\">Internal</span>.<span class=\"name\">IO</span>.<span class=\"name\">Async</span>.<span class=\"name\">Sleep</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"`Sleep` can be used to sleep for some duration once.\nThe underlying timer has millisecond resolution.\n","docLink":"./Std/Internal/Async/Timer.html#Std.Internal.IO.Async.Sleep","kind":"structure","line":21,"name":"Std.Internal.IO.Async.Sleep","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Internal/Async/Timer.lean#L21-L27"}}],"imports":["Std.Time","Std.Internal.UV.Timer","Std.Internal.Async.Select"],"instances":[],"name":"Std.Internal.Async.Timer"}