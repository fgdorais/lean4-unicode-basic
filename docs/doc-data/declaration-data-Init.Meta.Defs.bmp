{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Parser.Tactic.appendConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">appendConfig</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cfg </span><span class=\"fn\">cfg'</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.Parser.Tactic.optConfig</span></div></div>","info":{"doc":"Appends two tactic configurations.\nThe configurations can be `Lean.Parser.Tactic.optConfig`, `Lean.Parser.Tactic.config`,\nor these wrapped in null nodes (for example because the syntax is `(config)?`).\n","docLink":"./Init/Meta/Defs.html#Lean.Parser.Tactic.appendConfig","kind":"def","line":1673,"name":"Lean.Parser.Tactic.appendConfig","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1673-L1679"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Parser.Tactic.mkOptConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">mkOptConfig</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">items</span> : <a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">TSyntaxArray</a> <span class=\"fn\">`Lean.Parser.Tactic.configItem</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.Parser.Tactic.optConfig</span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Parser.Tactic.mkOptConfig","kind":"def","line":1670,"name":"Lean.Parser.Tactic.mkOptConfig","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1670-L1671"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Parser.Tactic.getConfigItems\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">getConfigItems</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">TSyntaxArray</a> <span class=\"fn\">`Lean.Parser.Tactic.configItem</span></div></div>","info":{"doc":"Extracts the items from a tactic configuration,\neither a `Lean.Parser.Tactic.optConfig`, `Lean.Parser.Tactic.config`, or these wrapped in null nodes.\n","docLink":"./Init/Meta/Defs.html#Lean.Parser.Tactic.getConfigItems","kind":"opaque","line":1657,"name":"Lean.Parser.Tactic.getConfigItems","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1657-L1668"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Meta.CheckTactic.CheckGoalType.intro\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CheckTactic</span>.<span class=\"name\">CheckGoalType</span>.<span class=\"name\">intro</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Meta/Defs.html#Lean.Meta.CheckTactic.CheckGoalType\">CheckGoalType</a> <span class=\"fn\">val</span></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Meta.CheckTactic.CheckGoalType.intro","kind":"ctor","line":1647,"name":"Lean.Meta.CheckTactic.CheckGoalType.intro","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1647-L1647"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Meta.CheckTactic.CheckGoalType\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">CheckTactic</span>.<span class=\"name\">CheckGoalType</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"Type used to lift an arbitrary value into a type parameter so it can\nappear in a proof goal.\n\nIt is used by the #check_tactic command.\n","docLink":"./Init/Meta/Defs.html#Lean.Meta.CheckTactic.CheckGoalType","kind":"inductive","line":1640,"name":"Lean.Meta.CheckTactic.CheckGoalType","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1640-L1647"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Meta.Omega.OmegaConfig.splitMinMax\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Omega</span>.<span class=\"name\">OmegaConfig</span>.<span class=\"name\">splitMinMax</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Meta/Defs.html#Lean.Meta.Omega.OmegaConfig\">OmegaConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Whenever `min a b` or `max a b` is found, rewrite in terms of the definition\n`if a ≤ b ...`, for later case splitting.\n","docLink":"./Init/Meta/Defs.html#Lean.Meta.Omega.OmegaConfig.splitMinMax","kind":"def","line":1634,"name":"Lean.Meta.Omega.OmegaConfig.splitMinMax","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1634-L1634"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Meta.Omega.OmegaConfig.splitNatAbs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Omega</span>.<span class=\"name\">OmegaConfig</span>.<span class=\"name\">splitNatAbs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Meta/Defs.html#Lean.Meta.Omega.OmegaConfig\">OmegaConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Whenever `Int.natAbs a` is found, register the disjunction\n`0 ≤ a ∧ Int.natAbs a = a ∨ a < 0 ∧ Int.natAbs a = - a` for later splitting.\n","docLink":"./Init/Meta/Defs.html#Lean.Meta.Omega.OmegaConfig.splitNatAbs","kind":"def","line":1629,"name":"Lean.Meta.Omega.OmegaConfig.splitNatAbs","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1629-L1629"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Meta.Omega.OmegaConfig.splitNatSub\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Omega</span>.<span class=\"name\">OmegaConfig</span>.<span class=\"name\">splitNatSub</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Meta/Defs.html#Lean.Meta.Omega.OmegaConfig\">OmegaConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Whenever `((a - b : Nat) : Int)` is found, register the disjunction\n`b ≤ a ∧ ((a - b : Nat) : Int) = a - b ∨ a < b ∧ ((a - b : Nat) : Int) = 0`\nfor later splitting.\n","docLink":"./Init/Meta/Defs.html#Lean.Meta.Omega.OmegaConfig.splitNatSub","kind":"def","line":1624,"name":"Lean.Meta.Omega.OmegaConfig.splitNatSub","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1624-L1624"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Meta.Omega.OmegaConfig.splitDisjunctions\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Omega</span>.<span class=\"name\">OmegaConfig</span>.<span class=\"name\">splitDisjunctions</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Meta/Defs.html#Lean.Meta.Omega.OmegaConfig\">OmegaConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Split disjunctions in the context.\n\nNote that with `splitDisjunctions := false` omega will not be able to solve `x = y` goals\nas these are usually handled by introducing `¬ x = y` as a hypothesis, then replacing this with\n`x < y ∨ x > y`.\n\nOn the other hand, `omega` does not currently detect disjunctions which, when split,\nintroduce no new useful information, so the presence of irrelevant disjunctions in the context\ncan significantly increase run time.\n","docLink":"./Init/Meta/Defs.html#Lean.Meta.Omega.OmegaConfig.splitDisjunctions","kind":"def","line":1618,"name":"Lean.Meta.Omega.OmegaConfig.splitDisjunctions","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1618-L1618"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Meta.Omega.OmegaConfig.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Omega</span>.<span class=\"name\">OmegaConfig</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">splitDisjunctions </span><span class=\"fn\">splitNatSub </span><span class=\"fn\">splitNatAbs </span><span class=\"fn\">splitMinMax</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta/Defs.html#Lean.Meta.Omega.OmegaConfig\">OmegaConfig</a></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Meta.Omega.OmegaConfig.mk","kind":"ctor","line":1606,"name":"Lean.Meta.Omega.OmegaConfig.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1606-L1606"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Meta.Omega.OmegaConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Omega</span>.<span class=\"name\">OmegaConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Configures the behaviour of the `omega` tactic. ","docLink":"./Init/Meta/Defs.html#Lean.Meta.Omega.OmegaConfig","kind":"structure","line":1605,"name":"Lean.Meta.Omega.OmegaConfig","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1605-L1634"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Meta.Rewrite.Config.newGoals\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Rewrite</span>.<span class=\"name\">Config</span>.<span class=\"name\">newGoals</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Meta/Defs.html#Lean.Meta.Rewrite.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta/Defs.html#Lean.Meta.Rewrite.NewGoals\">NewGoals</a></div></div>","info":{"doc":"How to convert the resulting metavariables into  new goals ","docLink":"./Init/Meta/Defs.html#Lean.Meta.Rewrite.Config.newGoals","kind":"def","line":1599,"name":"Lean.Meta.Rewrite.Config.newGoals","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1599-L1599"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Meta.Rewrite.Config.occs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Rewrite</span>.<span class=\"name\">Config</span>.<span class=\"name\">occs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Meta/Defs.html#Lean.Meta.Rewrite.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.Occurrences\">Occurrences</a></div></div>","info":{"doc":"Which occurrences to rewrite","docLink":"./Init/Meta/Defs.html#Lean.Meta.Rewrite.Config.occs","kind":"def","line":1597,"name":"Lean.Meta.Rewrite.Config.occs","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1597-L1597"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Meta.Rewrite.Config.offsetCnstrs\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Rewrite</span>.<span class=\"name\">Config</span>.<span class=\"name\">offsetCnstrs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Meta/Defs.html#Lean.Meta.Rewrite.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Whether to support offset constraints such as `?x + 1 =?= e` ","docLink":"./Init/Meta/Defs.html#Lean.Meta.Rewrite.Config.offsetCnstrs","kind":"def","line":1595,"name":"Lean.Meta.Rewrite.Config.offsetCnstrs","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1595-L1595"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Meta.Rewrite.Config.transparency\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Rewrite</span>.<span class=\"name\">Config</span>.<span class=\"name\">transparency</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Meta/Defs.html#Lean.Meta.Rewrite.Config\">Config</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">TransparencyMode</a></div></div>","info":{"doc":"The transparency mode to use for unfolding ","docLink":"./Init/Meta/Defs.html#Lean.Meta.Rewrite.Config.transparency","kind":"def","line":1593,"name":"Lean.Meta.Rewrite.Config.transparency","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1593-L1593"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Meta.Rewrite.Config.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Rewrite</span>.<span class=\"name\">Config</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">transparency</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">TransparencyMode</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">offsetCnstrs</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">occs</span> : <a href=\"./Init/MetaTypes.html#Lean.Meta.Occurrences\">Occurrences</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">newGoals</span> : <a href=\"./Init/Meta/Defs.html#Lean.Meta.Rewrite.NewGoals\">NewGoals</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta/Defs.html#Lean.Meta.Rewrite.Config\">Config</a></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Meta.Rewrite.Config.mk","kind":"ctor","line":1591,"name":"Lean.Meta.Rewrite.Config.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1591-L1591"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Meta.Rewrite.Config\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Rewrite</span>.<span class=\"name\">Config</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Configures the behavior of the `rewrite` and `rw` tactics. ","docLink":"./Init/Meta/Defs.html#Lean.Meta.Rewrite.Config","kind":"structure","line":1590,"name":"Lean.Meta.Rewrite.Config","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1590-L1599"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Meta.Rewrite.NewGoals\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Rewrite</span>.<span class=\"name\">NewGoals</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Controls which new mvars are turned in to goals by the `apply` tactic.\n- `nonDependentFirst`  mvars that don't depend on other goals appear first in the goal list.\n- `nonDependentOnly` only mvars that don't depend on other goals are added to goal list.\n- `all` all unassigned mvars are added to the goal list.\n","docLink":"./Init/Meta/Defs.html#Lean.Meta.Rewrite.NewGoals","kind":"def","line":1587,"name":"Lean.Meta.Rewrite.NewGoals","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1587-L1588"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Meta.ApplyConfig.approx\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ApplyConfig</span>.<span class=\"name\">approx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Meta/Defs.html#Lean.Meta.ApplyConfig\">ApplyConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"If `approx := true`, then we turn on `isDefEq` approximations. That is, we use\nthe `approxDefEq` combinator.\n","docLink":"./Init/Meta/Defs.html#Lean.Meta.ApplyConfig.approx","kind":"def","line":1583,"name":"Lean.Meta.ApplyConfig.approx","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1583-L1583"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Meta.ApplyConfig.allowSynthFailures\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ApplyConfig</span>.<span class=\"name\">allowSynthFailures</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Meta/Defs.html#Lean.Meta.ApplyConfig\">ApplyConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"If `allowSynthFailures` is `true`, then `apply` will return instance implicit arguments\nfor which typeclass search failed as new goals.\n","docLink":"./Init/Meta/Defs.html#Lean.Meta.ApplyConfig.allowSynthFailures","kind":"def","line":1578,"name":"Lean.Meta.ApplyConfig.allowSynthFailures","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1578-L1578"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Meta.ApplyConfig.synthAssignedInstances\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ApplyConfig</span>.<span class=\"name\">synthAssignedInstances</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Meta/Defs.html#Lean.Meta.ApplyConfig\">ApplyConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"If `synthAssignedInstances` is `true`, then `apply` will synthesize instance implicit arguments\neven if they have assigned by `isDefEq`, and then check whether the synthesized value matches the\none inferred. The `congr` tactic sets this flag to false.\n","docLink":"./Init/Meta/Defs.html#Lean.Meta.ApplyConfig.synthAssignedInstances","kind":"def","line":1573,"name":"Lean.Meta.ApplyConfig.synthAssignedInstances","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1573-L1573"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Meta.ApplyConfig.newGoals\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ApplyConfig</span>.<span class=\"name\">newGoals</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Meta/Defs.html#Lean.Meta.ApplyConfig\">ApplyConfig</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta/Defs.html#Lean.Meta.ApplyNewGoals\">ApplyNewGoals</a></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Meta.ApplyConfig.newGoals","kind":"def","line":1567,"name":"Lean.Meta.ApplyConfig.newGoals","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1567-L1567"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Meta.ApplyConfig.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ApplyConfig</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">newGoals</span> : <a href=\"./Init/Meta/Defs.html#Lean.Meta.ApplyNewGoals\">ApplyNewGoals</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">synthAssignedInstances </span><span class=\"fn\">allowSynthFailures </span><span class=\"fn\">approx</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta/Defs.html#Lean.Meta.ApplyConfig\">ApplyConfig</a></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Meta.ApplyConfig.mk","kind":"ctor","line":1566,"name":"Lean.Meta.ApplyConfig.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1566-L1566"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Meta.ApplyConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ApplyConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Configures the behaviour of the `apply` tactic. ","docLink":"./Init/Meta/Defs.html#Lean.Meta.ApplyConfig","kind":"structure","line":1564,"name":"Lean.Meta.ApplyConfig","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1564-L1583"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Meta.ApplyNewGoals.all\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ApplyNewGoals</span>.<span class=\"name\">all</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta/Defs.html#Lean.Meta.ApplyNewGoals\">ApplyNewGoals</a></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Meta.ApplyNewGoals.all","kind":"ctor","line":1562,"name":"Lean.Meta.ApplyNewGoals.all","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1562-L1562"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Meta.ApplyNewGoals.nonDependentOnly\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ApplyNewGoals</span>.<span class=\"name\">nonDependentOnly</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta/Defs.html#Lean.Meta.ApplyNewGoals\">ApplyNewGoals</a></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Meta.ApplyNewGoals.nonDependentOnly","kind":"ctor","line":1562,"name":"Lean.Meta.ApplyNewGoals.nonDependentOnly","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1562-L1562"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Meta.ApplyNewGoals.nonDependentFirst\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ApplyNewGoals</span>.<span class=\"name\">nonDependentFirst</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta/Defs.html#Lean.Meta.ApplyNewGoals\">ApplyNewGoals</a></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Meta.ApplyNewGoals.nonDependentFirst","kind":"ctor","line":1562,"name":"Lean.Meta.ApplyNewGoals.nonDependentFirst","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1562-L1562"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Meta.ApplyNewGoals\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">ApplyNewGoals</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Controls which new mvars are turned in to goals by the `apply` tactic.\n- `nonDependentFirst`  mvars that don't depend on other goals appear first in the goal list.\n- `nonDependentOnly` only mvars that don't depend on other goals are added to goal list.\n- `all` all unassigned mvars are added to the goal list.\n","docLink":"./Init/Meta/Defs.html#Lean.Meta.ApplyNewGoals","kind":"inductive","line":1554,"name":"Lean.Meta.ApplyNewGoals","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1554-L1562"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Meta.Occurrences.isAll\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Occurrences</span>.<span class=\"name\">isAll</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/MetaTypes.html#Lean.Meta.Occurrences\">Occurrences</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Meta.Occurrences.isAll","kind":"def","line":1550,"name":"Lean.Meta.Occurrences.isAll","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1550-L1552"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Meta.Occurrences.contains\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Occurrences</span>.<span class=\"name\">contains</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/MetaTypes.html#Lean.Meta.Occurrences\">Occurrences</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Meta.Occurrences.contains","kind":"def","line":1545,"name":"Lean.Meta.Occurrences.contains","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1545-L1548"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Meta.instReprConfig.repr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instReprConfig</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">DSimp.Config</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Std.Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Meta.instReprConfig.repr","kind":"def","line":1543,"name":"Lean.Meta.instReprConfig.repr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1543-L1543"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Meta.instReprConfig_1\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instReprConfig_1</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Simp.Config</a></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Meta.instReprConfig_1","kind":"instance","line":1543,"name":"Lean.Meta.instReprConfig_1","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1543-L1543"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Meta.instReprTransparencyMode.repr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instReprTransparencyMode</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">TransparencyMode</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Std.Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Meta.instReprTransparencyMode.repr","kind":"def","line":1543,"name":"Lean.Meta.instReprTransparencyMode.repr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1543-L1543"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Meta.instReprTransparencyMode\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instReprTransparencyMode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.TransparencyMode\">TransparencyMode</a></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Meta.instReprTransparencyMode","kind":"instance","line":1543,"name":"Lean.Meta.instReprTransparencyMode","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1543-L1543"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Meta.instReprEtaStructMode\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instReprEtaStructMode</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.EtaStructMode\">EtaStructMode</a></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Meta.instReprEtaStructMode","kind":"instance","line":1543,"name":"Lean.Meta.instReprEtaStructMode","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1543-L1543"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Meta.instReprConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instReprConfig</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">DSimp.Config</a></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Meta.instReprConfig","kind":"instance","line":1543,"name":"Lean.Meta.instReprConfig","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1543-L1543"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Meta.instReprConfig_1.repr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instReprConfig_1</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Simp.Config</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Std.Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Meta.instReprConfig_1.repr","kind":"def","line":1543,"name":"Lean.Meta.instReprConfig_1.repr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1543-L1543"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Meta.instReprEtaStructMode.repr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">instReprEtaStructMode</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/MetaTypes.html#Lean.Meta.EtaStructMode\">EtaStructMode</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Std.Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Meta.instReprEtaStructMode.repr","kind":"def","line":1543,"name":"Lean.Meta.instReprEtaStructMode.repr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1543-L1543"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.TSyntax.getDocString\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">getDocString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.Parser.Command.docComment</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.TSyntax.getDocString","kind":"def","line":1534,"name":"Lean.TSyntax.getDocString","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1534-L1537"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.TSyntax.expandInterpolatedStr\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">expandInterpolatedStr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">interpStr</span> : <a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <a href=\"./Init/Prelude.html#Lean.interpolatedStrKind\">interpolatedStrKind</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type </span><span class=\"fn\">ofInterpFn</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Term\">Term</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ofLitFn</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Term\">Term</a> := <span class=\"fn\">ofInterpFn</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">MacroM</a> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Term\">Term</a></span></div></div>","info":{"doc":"Expand `interpStr` into a term of type `type` (which supports ` ++ `),\ncalling `ofInterpFn` on terms within `{}`,\nand `ofLitFn` on the literals between the interpolations. ","docLink":"./Init/Meta/Defs.html#Lean.TSyntax.expandInterpolatedStr","kind":"def","line":1524,"name":"Lean.TSyntax.expandInterpolatedStr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1524-L1532"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.TSyntax.expandInterpolatedStrChunks\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">expandInterpolatedStrChunks</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">chunks</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkAppend</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> → <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">MacroM</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkElem</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">MacroM</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mkLit</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#String\">String</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">MacroM</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">MacroM</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.TSyntax.expandInterpolatedStrChunks","kind":"def","line":1505,"name":"Lean.TSyntax.expandInterpolatedStrChunks","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1505-L1521"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.getSepArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">getSepArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Syntax.getSepArgs","kind":"def","line":1498,"name":"Lean.Syntax.getSepArgs","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1498-L1499"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.isInterpolatedStrLit?\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">isInterpolatedStrLit?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Syntax.isInterpolatedStrLit?","kind":"def","line":1493,"name":"Lean.Syntax.isInterpolatedStrLit?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1493-L1496"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.instCoeTermTSyntaxConsSyntaxNodeKindMkStr4Nil\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">instCoeTermTSyntaxConsSyntaxNodeKindMkStr4Nil</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Term\">Term</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.Parser.Term.funBinder</span>)</span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Syntax.instCoeTermTSyntaxConsSyntaxNodeKindMkStr4Nil","kind":"instance","line":1456,"name":"Lean.Syntax.instCoeTermTSyntaxConsSyntaxNodeKindMkStr4Nil","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1456-L1457"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.instCoeIdentTSyntaxConsSyntaxNodeKindMkStr4Nil\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">instCoeIdentTSyntaxConsSyntaxNodeKindMkStr4Nil</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Ident\">Ident</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.Parser.Command.declId</span>)</span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Syntax.instCoeIdentTSyntaxConsSyntaxNodeKindMkStr4Nil","kind":"instance","line":1453,"name":"Lean.Syntax.instCoeIdentTSyntaxConsSyntaxNodeKindMkStr4Nil","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1453-L1454"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.instCoeOutTSyntaxArrayArray\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">instCoeOutTSyntaxArrayArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKinds\">SyntaxNodeKinds</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeOut\">CoeOut</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">TSyntaxArray</a> <span class=\"fn\">k</span>)</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Syntax.instCoeOutTSyntaxArrayArray","kind":"instance","line":1450,"name":"Lean.Syntax.instCoeOutTSyntaxArrayArray","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1450-L1451"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.instCoeTSyntaxArrayOfTSyntax\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">instCoeTSyntaxArrayOfTSyntax</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKinds\">SyntaxNodeKinds</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">k</span>)</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">k'</span>)</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">TSyntaxArray</a> <span class=\"fn\">k</span>)</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">TSyntaxArray</a> <span class=\"fn\">k'</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Syntax.instCoeTSyntaxArrayOfTSyntax","kind":"instance","line":1447,"name":"Lean.Syntax.instCoeTSyntaxArrayOfTSyntax","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1447-L1448"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.instCoeOutTSepArrayTSyntaxArray\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">instCoeOutTSepArrayTSyntaxArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKinds\">SyntaxNodeKinds</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sep</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeOut\">CoeOut</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.Syntax.TSepArray\">TSepArray</a> <span class=\"fn\">k</span> <span class=\"fn\">sep</span>)</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">TSyntaxArray</a> <span class=\"fn\">k</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Syntax.instCoeOutTSepArrayTSyntaxArray","kind":"instance","line":1444,"name":"Lean.Syntax.instCoeOutTSepArrayTSyntaxArray","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1444-L1445"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.instCoeOutSepArrayArray\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">instCoeOutSepArrayArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sep</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeOut\">CoeOut</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.Syntax.SepArray\">SepArray</a> <span class=\"fn\">sep</span>)</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Syntax.instCoeOutSepArrayArray","kind":"instance","line":1441,"name":"Lean.Syntax.instCoeOutSepArrayArray","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1441-L1442"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.instEmptyCollectionTSepArray\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">instEmptyCollectionTSepArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sep</span> : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKinds\">SyntaxNodeKinds</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection\">EmptyCollection</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.Syntax.TSepArray\">TSepArray</a> <span class=\"fn\">sep</span> <span class=\"fn\">k</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Syntax.instEmptyCollectionTSepArray","kind":"instance","line":1438,"name":"Lean.Syntax.instEmptyCollectionTSepArray","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1438-L1439"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.instEmptyCollectionSepArray\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">instEmptyCollectionSepArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sep</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection\">EmptyCollection</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.Syntax.SepArray\">SepArray</a> <span class=\"fn\">sep</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Syntax.instEmptyCollectionSepArray","kind":"instance","line":1435,"name":"Lean.Syntax.instEmptyCollectionSepArray","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1435-L1436"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.TSepArray.push\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">TSepArray</span>.<span class=\"name\">push</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKinds\">SyntaxNodeKinds</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sep</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sa</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax.TSepArray\">TSepArray</a> <span class=\"fn\">k</span> <span class=\"fn\">sep</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">k</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax.TSepArray\">TSepArray</a> <span class=\"fn\">k</span> <span class=\"fn\">sep</span></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Syntax.TSepArray.push","kind":"def","line":1429,"name":"Lean.Syntax.TSepArray.push","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1429-L1433"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.TSepArray.getElems\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">TSepArray</span>.<span class=\"name\">getElems</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKinds\">SyntaxNodeKinds</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sep</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sa</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax.TSepArray\">TSepArray</a> <span class=\"fn\">k</span> <span class=\"fn\">sep</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">TSyntaxArray</a> <span class=\"fn\">k</span></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Syntax.TSepArray.getElems","kind":"def","line":1426,"name":"Lean.Syntax.TSepArray.getElems","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1426-L1427"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.SepArray.getElems\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">SepArray</span>.<span class=\"name\">getElems</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sep</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sa</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax.SepArray\">SepArray</a> <span class=\"fn\">sep</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Syntax.SepArray.getElems","kind":"def","line":1423,"name":"Lean.Syntax.SepArray.getElems","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1423-L1424"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Array.mapSepElems\"><span class=\"name\">Array</span>.<span class=\"name\">mapSepElems</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Array.mapSepElems","kind":"def","line":1416,"name":"Array.mapSepElems","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1416-L1417"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Array.mapSepElemsM\"><span class=\"name\">Array</span>.<span class=\"name\">mapSepElemsM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Array.mapSepElemsM","kind":"def","line":1413,"name":"Array.mapSepElemsM","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1413-L1414"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Array.filterSepElems\"><span class=\"name\">Array</span>.<span class=\"name\">filterSepElems</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span></div></div>","info":{"doc":"Filters an array of syntax, treating every other element as a separator rather than an element to\ntest with the predicate `p`. The resulting array contains the tested elements for which `p` returns\n`true`, separated by the corresponding separator elements.\n","docLink":"./Init/Meta/Defs.html#Array.filterSepElems","kind":"def","line":1394,"name":"Array.filterSepElems","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1394-L1400"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Array.filterSepElemsM\"><span class=\"name\">Array</span>.<span class=\"name\">filterSepElemsM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Lean.Syntax</a>)</span></span></div></div>","info":{"doc":"Filters an array of syntax, treating every other element as a separator rather than an element to\ntest with the monadic predicate `p`. The resulting array contains the tested elements for which `p`\nreturns `true`, separated by the corresponding separator elements.\n","docLink":"./Init/Meta/Defs.html#Array.filterSepElemsM","kind":"def","line":1386,"name":"Array.filterSepElemsM","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1386-L1392"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Array.getSepElems\"><span class=\"name\">Array</span>.<span class=\"name\">getSepElems</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">as</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Array.getSepElems","kind":"def","line":1364,"name":"Array.getSepElems","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1364-L1364"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.evalOptPrio\"><span class=\"name\">Lean</span>.<span class=\"name\">evalOptPrio</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`prio</span>)</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">MacroM</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.evalOptPrio","kind":"def","line":1356,"name":"Lean.evalOptPrio","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1356-L1358"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.evalPrio\"><span class=\"name\">Lean</span>.<span class=\"name\">evalPrio</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">MacroM</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"Evaluator for `prio` DSL ","docLink":"./Init/Meta/Defs.html#Lean.evalPrio","kind":"def","line":1348,"name":"Lean.evalPrio","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1348-L1354"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.evalPrec\"><span class=\"name\">Lean</span>.<span class=\"name\">evalPrec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">MacroM</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"Evaluator for `prec` DSL ","docLink":"./Init/Meta/Defs.html#Lean.evalPrec","kind":"def","line":1340,"name":"Lean.evalPrec","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1340-L1346"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Option.hasQuote\"><span class=\"name\">Lean</span>.<span class=\"name\">Option</span>.<span class=\"name\">hasQuote</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Meta/Defs.html#Lean.Quote\">Quote</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Meta/Defs.html#Lean.Quote\">Quote</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Option.hasQuote","kind":"instance","line":1334,"name":"Lean.Option.hasQuote","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1334-L1337"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.instQuoteArrayMkStr1\"><span class=\"name\">Lean</span>.<span class=\"name\">instQuoteArrayMkStr1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Meta/Defs.html#Lean.Quote\">Quote</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Meta/Defs.html#Lean.Quote\">Quote</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.instQuoteArrayMkStr1","kind":"instance","line":1331,"name":"Lean.instQuoteArrayMkStr1","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1331-L1332"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.instQuoteListMkStr1\"><span class=\"name\">Lean</span>.<span class=\"name\">instQuoteListMkStr1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Meta/Defs.html#Lean.Quote\">Quote</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Meta/Defs.html#Lean.Quote\">Quote</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.instQuoteListMkStr1","kind":"instance","line":1314,"name":"Lean.instQuoteListMkStr1","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1314-L1315"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.instQuoteProdMkStr1\"><span class=\"name\">Lean</span>.<span class=\"name\">instQuoteProdMkStr1</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Meta/Defs.html#Lean.Quote\">Quote</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Meta/Defs.html#Lean.Quote\">Quote</a> <span class=\"fn\">β</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Meta/Defs.html#Lean.Quote\">Quote</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">β</span>)</span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.instQuoteProdMkStr1","kind":"instance","line":1306,"name":"Lean.instQuoteProdMkStr1","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1306-L1308"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.instQuoteNameMkStr1\"><span class=\"name\">Lean</span>.<span class=\"name\">instQuoteNameMkStr1</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Meta/Defs.html#Lean.Quote\">Quote</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.instQuoteNameMkStr1","kind":"instance","line":1300,"name":"Lean.instQuoteNameMkStr1","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1300-L1304"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.quoteNameMk\"><span class=\"name\">Lean</span>.<span class=\"name\">quoteNameMk</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Term\">Term</a></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.quoteNameMk","kind":"def","line":1295,"name":"Lean.quoteNameMk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1295-L1298"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.instQuoteSubstringMkStr1\"><span class=\"name\">Lean</span>.<span class=\"name\">instQuoteSubstringMkStr1</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Meta/Defs.html#Lean.Quote\">Quote</a> <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.instQuoteSubstringMkStr1","kind":"instance","line":1285,"name":"Lean.instQuoteSubstringMkStr1","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1285-L1285"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.instQuoteNatNumLitKind\"><span class=\"name\">Lean</span>.<span class=\"name\">instQuoteNatNumLitKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Meta/Defs.html#Lean.Quote\">Quote</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Lean.numLitKind\">numLitKind</a></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.instQuoteNatNumLitKind","kind":"instance","line":1284,"name":"Lean.instQuoteNatNumLitKind","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1284-L1284"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.instQuoteStringStrLitKind\"><span class=\"name\">Lean</span>.<span class=\"name\">instQuoteStringStrLitKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Meta/Defs.html#Lean.Quote\">Quote</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Init/Prelude.html#Lean.strLitKind\">strLitKind</a></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.instQuoteStringStrLitKind","kind":"instance","line":1283,"name":"Lean.instQuoteStringStrLitKind","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1283-L1283"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.instQuoteCharCharLitKind\"><span class=\"name\">Lean</span>.<span class=\"name\">instQuoteCharCharLitKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Meta/Defs.html#Lean.Quote\">Quote</a> <a href=\"./Init/Prelude.html#Char\">Char</a> <a href=\"./Init/Prelude.html#Lean.charLitKind\">charLitKind</a></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.instQuoteCharCharLitKind","kind":"instance","line":1282,"name":"Lean.instQuoteCharCharLitKind","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1282-L1282"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.instQuoteBoolMkStr1\"><span class=\"name\">Lean</span>.<span class=\"name\">instQuoteBoolMkStr1</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Meta/Defs.html#Lean.Quote\">Quote</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.instQuoteBoolMkStr1","kind":"instance","line":1281,"name":"Lean.instQuoteBoolMkStr1","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1281-L1281"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.instQuoteTermMkStr1\"><span class=\"name\">Lean</span>.<span class=\"name\">instQuoteTermMkStr1</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Meta/Defs.html#Lean.Quote\">Quote</a> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Term\">Term</a></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.instQuoteTermMkStr1","kind":"instance","line":1280,"name":"Lean.instQuoteTermMkStr1","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1280-L1280"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.instQuoteOfCoeHTCTTSyntaxConsSyntaxNodeKindNil\"><span class=\"name\">Lean</span>.<span class=\"name\">instQuoteOfCoeHTCTTSyntaxConsSyntaxNodeKindNil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k </span><span class=\"fn\">k'</span> : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">SyntaxNodeKind</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Meta/Defs.html#Lean.Quote\">Quote</a> <span class=\"fn\">α</span> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Coe.html#CoeHTCT\">CoeHTCT</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">k</span>) (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">k'</span>)</span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Meta/Defs.html#Lean.Quote\">Quote</a> <span class=\"fn\">α</span> <span class=\"fn\">k'</span></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.instQuoteOfCoeHTCTTSyntaxConsSyntaxNodeKindNil","kind":"instance","line":1278,"name":"Lean.instQuoteOfCoeHTCTTSyntaxConsSyntaxNodeKindNil","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1278-L1278"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Quote.quote\"><span class=\"name\">Lean</span>.<span class=\"name\">Quote</span>.<span class=\"name\">quote</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">SyntaxNodeKind</a> <span class=\"fn\">`term</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Meta/Defs.html#Lean.Quote\">Quote</a> <span class=\"fn\">α</span> <span class=\"fn\">k</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">k</span></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Quote.quote","kind":"def","line":1273,"name":"Lean.Quote.quote","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1273-L1273"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Quote.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Quote</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#optParam\">optParam</a> <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">SyntaxNodeKind</a> <span class=\"fn\">`term</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">quote</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">k</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Meta/Defs.html#Lean.Quote\">Quote</a> <span class=\"fn\">α</span> <span class=\"fn\">k</span></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Quote.mk","kind":"ctor","line":1272,"name":"Lean.Quote.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1272-L1272"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Quote\"><span class=\"name\">Lean</span>.<span class=\"name\">Quote</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">SyntaxNodeKind</a> := <span class=\"fn\">`term</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Reflect a runtime datum back to surface syntax (best-effort). ","docLink":"./Init/Meta/Defs.html#Lean.Quote","kind":"class","line":1271,"name":"Lean.Quote","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1271-L1273"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.HygieneInfo.mkIdent\"><span class=\"name\">Lean</span>.<span class=\"name\">HygieneInfo</span>.<span class=\"name\">mkIdent</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.HygieneInfo\">HygieneInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">canonical</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta/Defs.html#Lean.Syntax.Ident\">Ident</a></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.HygieneInfo.mkIdent","kind":"def","line":1266,"name":"Lean.HygieneInfo.mkIdent","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1266-L1269"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.TSyntax.Compat.instCoeTailArraySyntaxTSepArray\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">Compat</span>.<span class=\"name\">instCoeTailArraySyntaxTSepArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKinds\">SyntaxNodeKinds</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sep</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeTail\">CoeTail</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.Syntax.TSepArray\">Syntax.TSepArray</a> <span class=\"fn\">k</span> <span class=\"fn\">sep</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.TSyntax.Compat.instCoeTailArraySyntaxTSepArray","kind":"def","line":1259,"name":"Lean.TSyntax.Compat.instCoeTailArraySyntaxTSepArray","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1259-L1260"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.TSyntax.getHygieneInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">getHygieneInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.HygieneInfo\">HygieneInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"Decodes macro hygiene information.\n","docLink":"./Init/Meta/Defs.html#Lean.TSyntax.getHygieneInfo","kind":"def","line":1251,"name":"Lean.TSyntax.getHygieneInfo","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1251-L1255"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.TSyntax.getName\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">getName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.NameLit\">NameLit</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"Decodes a quoted name literal, returning the name.\n\nReturns `Lean.Name.anonymous` if the syntax is malformed.\n","docLink":"./Init/Meta/Defs.html#Lean.TSyntax.getName","kind":"def","line":1243,"name":"Lean.TSyntax.getName","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1243-L1249"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.TSyntax.getChar\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">getChar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.CharLit\">CharLit</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Char\">Char</a></div></div>","info":{"doc":"Decodes a character literal.\n\nReturns `(default : Char)` if the syntax is malformed.\n","docLink":"./Init/Meta/Defs.html#Lean.TSyntax.getChar","kind":"def","line":1235,"name":"Lean.TSyntax.getChar","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1235-L1241"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.TSyntax.getString\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">getString</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.StrLit\">StrLit</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Decodes a string literal, removing quotation marks and unescaping escaped characters.\n\nReturns `\"\"` if the syntax is malformed.\n","docLink":"./Init/Meta/Defs.html#Lean.TSyntax.getString","kind":"def","line":1227,"name":"Lean.TSyntax.getString","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1227-L1233"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.TSyntax.getScientific\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">getScientific</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.ScientificLit\">ScientificLit</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"Extracts the components of a scientific numeric literal.\n\nReturns a triple `(n, sign, e) : Nat × Bool × Nat`; the number's value is given by:\n\n```\nif sign then n * 10 ^ (-e) else n * 10 ^ e\n```\n\nReturns `(0, false, 0)` if the syntax is malformed.\n","docLink":"./Init/Meta/Defs.html#Lean.TSyntax.getScientific","kind":"def","line":1213,"name":"Lean.TSyntax.getScientific","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1213-L1225"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.TSyntax.getId\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">getId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Ident\">Ident</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"Extracts the parsed name from the syntax of an identifier.\n\nReturns `Name.anonymous` if the syntax is malformed.\n","docLink":"./Init/Meta/Defs.html#Lean.TSyntax.getId","kind":"def","line":1205,"name":"Lean.TSyntax.getId","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1205-L1211"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.TSyntax.getNat\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">getNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.NumLit\">NumLit</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"Interprets a numeric literal as a natural number.\n\nReturns `0` if the syntax is malformed.\n","docLink":"./Init/Meta/Defs.html#Lean.TSyntax.getNat","kind":"def","line":1197,"name":"Lean.TSyntax.getNat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1197-L1203"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.find?\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">find?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Syntax.find?","kind":"def","line":1190,"name":"Lean.Syntax.find?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1190-L1191"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.findAux\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">findAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Syntax.findAux","kind":"opaque","line":1186,"name":"Lean.Syntax.findAux","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1186-L1188"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.getOptionalIdent?\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">getOptionalIdent?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Syntax.getOptionalIdent?","kind":"def","line":1181,"name":"Lean.Syntax.getOptionalIdent?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1181-L1184"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.isNone\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">isNone</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Syntax.isNone","kind":"def","line":1174,"name":"Lean.Syntax.isNone","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1174-L1179"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.isToken\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">isToken</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">token</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Syntax.isToken","kind":"def","line":1170,"name":"Lean.Syntax.isToken","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1170-L1172"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.isAtom\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">isAtom</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Syntax.isAtom","kind":"def","line":1166,"name":"Lean.Syntax.isAtom","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1166-L1168"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.hasArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">hasArgs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Syntax.hasArgs","kind":"def","line":1162,"name":"Lean.Syntax.hasArgs","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1162-L1164"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.isNameLit?\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">isNameLit?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Syntax.isNameLit?","kind":"def","line":1157,"name":"Lean.Syntax.isNameLit?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1157-L1160"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.decodeNameLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">decodeNameLit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Syntax.decodeNameLit","kind":"def","line":1149,"name":"Lean.Syntax.decodeNameLit","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1149-L1155"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#String.toName\"><span class=\"name\">String</span>.<span class=\"name\">toName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>","info":{"doc":"Converts a string to the Lean compiler's representation of names. The resulting name is\nhierarchical, and the string is split at the dots (`'.'`).\n\n`\"a.b\".toName` is the name `a.b`, not `«a.b»`. For the latter, use `Name.mkSimple`.\n","docLink":"./Init/Meta/Defs.html#String.toName","kind":"def","line":1140,"name":"String.toName","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1140-L1147"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Substring.toName\"><span class=\"name\">Substring</span>.<span class=\"name\">toName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a></div></div>","info":{"doc":"Converts a substring to the Lean compiler's representation of names. The resulting name is\nhierarchical, and the string is split at the dots (`'.'`).\n\n`\"a.b\".toSubstring.toName` is the name `a.b`, not `«a.b»`. For the latter, use\n`Name.mkSimple ∘ Substring.toString`.\n","docLink":"./Init/Meta/Defs.html#Substring.toName","kind":"def","line":1117,"name":"Substring.toName","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1117-L1138"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.splitNameLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">splitNameLit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ss</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></div></div>","info":{"doc":"Split a name literal (without the backtick) into its dot-separated components. For example,\n`foo.bla.«bo.o»` ↦ `[\"foo\", \"bla\", \"«bo.o»\"]`. If the literal cannot be parsed, return `[]`. ","docLink":"./Init/Meta/Defs.html#Lean.Syntax.splitNameLit","kind":"def","line":1112,"name":"Lean.Syntax.splitNameLit","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1112-L1115"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.isCharLit?\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">isCharLit?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Syntax.isCharLit?","kind":"def","line":1082,"name":"Lean.Syntax.isCharLit?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1082-L1085"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.decodeCharLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">decodeCharLit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Char\">Char</a></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Syntax.decodeCharLit","kind":"def","line":1074,"name":"Lean.Syntax.decodeCharLit","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1074-L1080"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.isStrLit?\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">isStrLit?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"If the provided `Syntax` is a string literal, returns the string it represents.\n\nEven if the `Syntax` is a `str` node, the function may return `none` if its internally ill-formed.\nThe parser should always create well-formed `str` nodes.\n","docLink":"./Init/Meta/Defs.html#Lean.Syntax.isStrLit?","kind":"def","line":1063,"name":"Lean.Syntax.isStrLit?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1063-L1072"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.decodeStrLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">decodeStrLit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"Takes the string literal lexical syntax parsed by the parser and interprets it as a string.\nThis is where escape sequences are processed for example.\nThe string `s` is either a plain string literal or a raw string literal.\n\nIf it returns `none` then the string literal is ill-formed, which indicates a bug in the parser.\nThe function is not required to return `none` if the string literal is ill-formed.\n","docLink":"./Init/Meta/Defs.html#Lean.Syntax.decodeStrLit","kind":"def","line":1049,"name":"Lean.Syntax.decodeStrLit","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1049-L1061"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.decodeRawStrLitAux\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">decodeRawStrLitAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">num</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Takes a raw string literal, counts the number of `#`'s after the `r`, and interprets it as a string.\nThe position `i` should start at `1`, which is the character after the leading `r`.\nThe algorithm is simple: we are given `r##...#\"...string...\"##...#` with zero or more `#`s.\nBy counting the number of leading `#`'s, we can extract the `...string...`.\n","docLink":"./Init/Meta/Defs.html#Lean.Syntax.decodeRawStrLitAux","kind":"opaque","line":1035,"name":"Lean.Syntax.decodeRawStrLitAux","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1035-L1047"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.decodeStrLitAux\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">decodeStrLitAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">acc</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Syntax.decodeStrLitAux","kind":"opaque","line":1018,"name":"Lean.Syntax.decodeStrLitAux","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1018-L1033"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.decodeStringGap\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">decodeStringGap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></span></div></div>","info":{"doc":"Decodes a valid string gap after the `\\`.\nNote that this function matches `\"\\\" whitespace+` rather than\nthe more restrictive `\"\\\" newline whitespace*` since this simplifies the implementation.\nJustification: this does not overlap with any other sequences beginning with `\\`.\n","docLink":"./Init/Meta/Defs.html#Lean.Syntax.decodeStringGap","kind":"def","line":1008,"name":"Lean.Syntax.decodeStringGap","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L1008-L1016"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.decodeQuotedChar\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">decodeQuotedChar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Init/Prelude.html#Char\">Char</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Syntax.decodeQuotedChar","kind":"def","line":986,"name":"Lean.Syntax.decodeQuotedChar","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L986-L1006"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.toNat\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">toNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Syntax.toNat","kind":"def","line":981,"name":"Lean.Syntax.toNat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L981-L984"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.isIdOrAtom?\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">isIdOrAtom?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Syntax.isIdOrAtom?","kind":"def","line":976,"name":"Lean.Syntax.isIdOrAtom?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L976-L979"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.isScientificLit?\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">isScientificLit?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Syntax.isScientificLit?","kind":"def","line":971,"name":"Lean.Syntax.isScientificLit?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L971-L974"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.decodeScientificLitVal?\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">decodeScientificLitVal?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></div></div>","info":{"doc":"Decodes a 'scientific number' string which is consumed by the `OfScientific` class.\nTakes as input a string such as `123`, `123.456e7` and returns a triple `(n, sign, e)` with value given by\n`n * 10^-e` if `sign` else `n * 10^e`.\n","docLink":"./Init/Meta/Defs.html#Lean.Syntax.decodeScientificLitVal?","kind":"def","line":901,"name":"Lean.Syntax.decodeScientificLitVal?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L901-L969"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.isFieldIdx?\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">isFieldIdx?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Syntax.isFieldIdx?","kind":"def","line":898,"name":"Lean.Syntax.isFieldIdx?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L898-L899"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.isNatLit?\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">isNatLit?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Syntax.isNatLit?","kind":"def","line":895,"name":"Lean.Syntax.isNatLit?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L895-L896"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.isLit?\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">isLit?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">litKind</span> : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">SyntaxNodeKind</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Syntax.isLit?","kind":"def","line":879,"name":"Lean.Syntax.isLit?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L879-L888"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.decodeNatLitVal?\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">decodeNatLitVal?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Syntax.decodeNatLitVal?","kind":"def","line":862,"name":"Lean.Syntax.decodeNatLitVal?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L862-L877"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.mkNameLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">mkNameLit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">info</span> : <a href=\"./Init/Prelude.html#Lean.SourceInfo\">SourceInfo</a> := <a href=\"./Init/Prelude.html#Lean.SourceInfo.none\">SourceInfo.none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta/Defs.html#Lean.Syntax.NameLit\">NameLit</a></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Syntax.mkNameLit","kind":"def","line":811,"name":"Lean.Syntax.mkNameLit","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L811-L812"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.mkScientificLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">mkScientificLit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">info</span> : <a href=\"./Init/Prelude.html#Lean.SourceInfo\">SourceInfo</a> := <a href=\"./Init/Prelude.html#Lean.SourceInfo.none\">SourceInfo.none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <a href=\"./Init/Prelude.html#Lean.scientificLitKind\">scientificLitKind</a></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Syntax.mkScientificLit","kind":"def","line":808,"name":"Lean.Syntax.mkScientificLit","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L808-L809"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.mkNatLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">mkNatLit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">info</span> : <a href=\"./Init/Prelude.html#Lean.SourceInfo\">SourceInfo</a> := <a href=\"./Init/Prelude.html#Lean.SourceInfo.none\">SourceInfo.none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta/Defs.html#Lean.Syntax.NumLit\">NumLit</a></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Syntax.mkNatLit","kind":"def","line":805,"name":"Lean.Syntax.mkNatLit","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L805-L806"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.mkNumLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">mkNumLit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">info</span> : <a href=\"./Init/Prelude.html#Lean.SourceInfo\">SourceInfo</a> := <a href=\"./Init/Prelude.html#Lean.SourceInfo.none\">SourceInfo.none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta/Defs.html#Lean.Syntax.NumLit\">NumLit</a></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Syntax.mkNumLit","kind":"def","line":802,"name":"Lean.Syntax.mkNumLit","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L802-L803"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.mkStrLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">mkStrLit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">info</span> : <a href=\"./Init/Prelude.html#Lean.SourceInfo\">SourceInfo</a> := <a href=\"./Init/Prelude.html#Lean.SourceInfo.none\">SourceInfo.none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta/Defs.html#Lean.Syntax.StrLit\">StrLit</a></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Syntax.mkStrLit","kind":"def","line":799,"name":"Lean.Syntax.mkStrLit","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L799-L800"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.mkCharLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">mkCharLit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">info</span> : <a href=\"./Init/Prelude.html#Lean.SourceInfo\">SourceInfo</a> := <a href=\"./Init/Prelude.html#Lean.SourceInfo.none\">SourceInfo.none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta/Defs.html#Lean.Syntax.CharLit\">CharLit</a></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Syntax.mkCharLit","kind":"def","line":796,"name":"Lean.Syntax.mkCharLit","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L796-L797"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.mkLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">mkLit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">SyntaxNodeKind</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">info</span> : <a href=\"./Init/Prelude.html#Lean.SourceInfo\">SourceInfo</a> := <a href=\"./Init/Prelude.html#Lean.SourceInfo.none\">SourceInfo.none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">kind</span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Syntax.mkLit","kind":"def","line":792,"name":"Lean.Syntax.mkLit","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L792-L794"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.mkCApp\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">mkCApp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fn</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">TSyntaxArray</a> <span class=\"fn\">`term</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta/Defs.html#Lean.Syntax.Term\">Term</a></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Syntax.mkCApp","kind":"def","line":789,"name":"Lean.Syntax.mkCApp","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L789-L790"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.mkApp\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">mkApp</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fn</span> : <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Term\">Term</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">TSyntaxArray</a> <span class=\"fn\">`term</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta/Defs.html#Lean.Syntax.Term\">Term</a></div></div>","info":{"doc":"Create syntax representing a Lean term application, but avoid degenerate empty applications. ","docLink":"./Init/Meta/Defs.html#Lean.Syntax.mkApp","kind":"def","line":784,"name":"Lean.Syntax.mkApp","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L784-L787"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.instCoeTSyntaxArrayTSepArray\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">instCoeTSyntaxArrayTSepArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKinds\">SyntaxNodeKinds</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sep</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">TSyntaxArray</a> <span class=\"fn\">k</span>)</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.Syntax.TSepArray\">TSepArray</a> <span class=\"fn\">k</span> <span class=\"fn\">sep</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Syntax.instCoeTSyntaxArrayTSepArray","kind":"instance","line":781,"name":"Lean.Syntax.instCoeTSyntaxArrayTSepArray","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L781-L782"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.TSepArray.ofElems\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">TSepArray</span>.<span class=\"name\">ofElems</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKinds\">SyntaxNodeKinds</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sep</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">elems</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">k</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax.TSepArray\">TSepArray</a> <span class=\"fn\">k</span> <span class=\"fn\">sep</span></span></div></div>","info":{"doc":"Constructs a typed separated array from elements.\nThe given array does not include the separators.\n\nLike `Syntax.SepArray.ofElems` but for typed syntax.\n","docLink":"./Init/Meta/Defs.html#Lean.Syntax.TSepArray.ofElems","kind":"def","line":772,"name":"Lean.Syntax.TSepArray.ofElems","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L772-L779"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.instCoeArraySepArray\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">instCoeArraySepArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sep</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.Syntax.SepArray\">SepArray</a> <span class=\"fn\">sep</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Syntax.instCoeArraySepArray","kind":"instance","line":769,"name":"Lean.Syntax.instCoeArraySepArray","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L769-L770"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.SepArray.ofElemsUsingRef\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">SepArray</span>.<span class=\"name\">ofElemsUsingRef</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MonadRef\">MonadRef</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sep</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">elems</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.Syntax.SepArray\">SepArray</a> <span class=\"fn\">sep</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Syntax.SepArray.ofElemsUsingRef","kind":"def","line":765,"name":"Lean.Syntax.SepArray.ofElemsUsingRef","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L765-L767"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.SepArray.ofElems\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">SepArray</span>.<span class=\"name\">ofElems</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">sep</span> : <a href=\"./Init/Prelude.html#String\">String</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">elems</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax.SepArray\">SepArray</a> <span class=\"fn\">sep</span></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Syntax.SepArray.ofElems","kind":"def","line":762,"name":"Lean.Syntax.SepArray.ofElems","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L762-L763"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.mkSep\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">mkSep</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sep</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Syntax.mkSep","kind":"def","line":759,"name":"Lean.Syntax.mkSep","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L759-L760"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.mkHole\"><span class=\"name\">Lean</span>.<span class=\"name\">mkHole</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">canonical</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.mkHole","kind":"def","line":754,"name":"Lean.mkHole","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L754-L755"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.mkOptionalNode\"><span class=\"name\">Lean</span>.<span class=\"name\">mkOptionalNode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arg</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.mkOptionalNode","kind":"def","line":749,"name":"Lean.mkOptionalNode","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L749-L752"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.mkSepArray\"><span class=\"name\">Lean</span>.<span class=\"name\">mkSepArray</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">as</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sep</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.mkSepArray","kind":"def","line":738,"name":"Lean.mkSepArray","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L738-L747"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.mkGroupNode\"><span class=\"name\">Lean</span>.<span class=\"name\">mkGroupNode</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span> := <a href=\"./Init/Prelude.html#List.toArray\">#[</a><a href=\"./Init/Prelude.html#List.toArray\">]</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.mkGroupNode","kind":"def","line":735,"name":"Lean.mkGroupNode","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L735-L736"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.mkIdent\"><span class=\"name\">Lean</span>.<span class=\"name\">mkIdent</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta/Defs.html#Lean.Syntax.Ident\">Ident</a></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.mkIdent","kind":"def","line":731,"name":"Lean.mkIdent","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L731-L733"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.mkCIdent\"><span class=\"name\">Lean</span>.<span class=\"name\">mkCIdent</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta/Defs.html#Lean.Syntax.Ident\">Ident</a></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.mkCIdent","kind":"def","line":728,"name":"Lean.mkCIdent","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L728-L729"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.mkCIdentFromRef\"><span class=\"name\">Lean</span>.<span class=\"name\">mkCIdentFromRef</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MonadRef\">MonadRef</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">canonical</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.mkCIdentFromRef","kind":"def","line":725,"name":"Lean.mkCIdentFromRef","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L725-L726"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.mkCIdentFrom\"><span class=\"name\">Lean</span>.<span class=\"name\">mkCIdentFrom</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">src</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">canonical</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta/Defs.html#Lean.Syntax.Ident\">Ident</a></div></div>","info":{"doc":"Create an identifier referring to a constant `c` copying the position from `src`.\nThis variant of `mkIdentFrom` makes sure that the identifier cannot accidentally\nbe captured. ","docLink":"./Init/Meta/Defs.html#Lean.mkCIdentFrom","kind":"def","line":716,"name":"Lean.mkCIdentFrom","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L716-L723"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.mkIdentFromRef\"><span class=\"name\">Lean</span>.<span class=\"name\">mkIdentFromRef</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MonadRef\">MonadRef</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">canonical</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Ident\">Ident</a></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.mkIdentFromRef","kind":"def","line":713,"name":"Lean.mkIdentFromRef","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L713-L714"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.mkIdentFrom\"><span class=\"name\">Lean</span>.<span class=\"name\">mkIdentFrom</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">src</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">canonical</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Meta/Defs.html#Lean.Syntax.Ident\">Ident</a></div></div>","info":{"doc":"Create an identifier copying the position from `src`.\nTo refer to a specific constant, use `mkCIdentFrom` instead. ","docLink":"./Init/Meta/Defs.html#Lean.mkIdentFrom","kind":"def","line":707,"name":"Lean.mkIdentFrom","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L707-L711"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.expandMacros\"><span class=\"name\">Lean</span>.<span class=\"name\">expandMacros</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">SyntaxNodeKind</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span> := <span class=\"fn\">fun (<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">SyntaxNodeKind</a>) =&gt; <span class=\"fn\">k</span> <a href=\"./Init/Core.html#bne\">!=</a> <span class=\"fn\">`Lean.Parser.Term.byTactic</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MacroM\">MacroM</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>","info":{"doc":"Expand macros in the given syntax.\nA node with kind `k` is visited only if `p k` is true.\n\nNote that the default value for `p` returns false for `by ...` nodes.\nThis is a \"hack\". The tactic framework abuses the macro system to implement extensible tactics.\nFor example, one can define\n```lean\nsyntax \"my_trivial\" : tactic -- extensible tactic\n\nmacro_rules | `(tactic| my_trivial) => `(tactic| decide)\nmacro_rules | `(tactic| my_trivial) => `(tactic| assumption)\n```\nWhen the tactic evaluator finds the tactic `my_trivial`, it tries to evaluate the `macro_rule` expansions\nuntil one \"works\", i.e., the macro expansion is evaluated without producing an exception.\nWe say this solution is a bit hackish because the term elaborator may invoke `expandMacros` with `(p := fun _ => true)`,\nand expand the tactic macros as just macros. In the example above, `my_trivial` would be replaced with `assumption`,\n`decide` would not be tried if `assumption` fails at tactic evaluation time.\n\nWe are considering two possible solutions for this issue:\n1- A proper extensible tactic feature that does not rely on the macro system.\n\n2- Typed macros that know the syntax categories they're working in. Then, we would be able to select which\n   syntactic categories are expanded by `expandMacros`.\n","docLink":"./Init/Meta/Defs.html#Lean.expandMacros","kind":"opaque","line":666,"name":"Lean.expandMacros","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L666-L703"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.withHeadRefOnly\"><span class=\"name\">Lean</span>.<span class=\"name\">withHeadRefOnly</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MonadRef\">MonadRef</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Use the head atom/identifier of the current `ref` as the `ref` ","docLink":"./Init/Meta/Defs.html#Lean.withHeadRefOnly","kind":"def","line":660,"name":"Lean.withHeadRefOnly","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L660-L664"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.mkSynthetic\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">mkSynthetic</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>","info":{"doc":"Ensure head position is synthetic. The server regards syntax as \"original\" only if both head and tail info are `original`. ","docLink":"./Init/Meta/Defs.html#Lean.Syntax.mkSynthetic","kind":"def","line":654,"name":"Lean.Syntax.mkSynthetic","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L654-L656"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.copyHeadTailInfoFrom\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">copyHeadTailInfoFrom</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">target </span><span class=\"fn\">source</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Syntax.copyHeadTailInfoFrom","kind":"def","line":651,"name":"Lean.Syntax.copyHeadTailInfoFrom","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L651-L652"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.getHead?\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">getHead?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></span></div></div>","info":{"doc":"Return the first atom/identifier that has position information ","docLink":"./Init/Meta/Defs.html#Lean.Syntax.getHead?","kind":"opaque","line":643,"name":"Lean.Syntax.getHead?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L643-L649"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.setInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">setInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">info</span> : <a href=\"./Init/Prelude.html#Lean.SourceInfo\">SourceInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> → <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Syntax.setInfo","kind":"def","line":637,"name":"Lean.Syntax.setInfo","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L637-L641"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.setHeadInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">setHeadInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">info</span> : <a href=\"./Init/Prelude.html#Lean.SourceInfo\">SourceInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Syntax.setHeadInfo","kind":"def","line":632,"name":"Lean.Syntax.setHeadInfo","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L632-L635"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.setHeadInfoAux\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">setHeadInfoAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">info</span> : <a href=\"./Init/Prelude.html#Lean.SourceInfo\">SourceInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Syntax.setHeadInfoAux","kind":"opaque","line":623,"name":"Lean.Syntax.setHeadInfoAux","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L623-L630"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.unsetTrailing\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">unsetTrailing</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>","info":{"doc":"Replaces the trailing whitespace in `stx`, if any, with an empty substring.\n\nThe trailing substring's `startPos` and `str` are preserved in order to ensure that the result could\nhave been produced by the parser, in case any syntax consumers rely on such an assumption.\n","docLink":"./Init/Meta/Defs.html#Lean.Syntax.unsetTrailing","kind":"def","line":602,"name":"Lean.Syntax.unsetTrailing","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L602-L612"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.setTailInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">setTailInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">info</span> : <a href=\"./Init/Prelude.html#Lean.SourceInfo\">SourceInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Syntax.setTailInfo","kind":"def","line":597,"name":"Lean.Syntax.setTailInfo","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L597-L600"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.setTailInfoAux\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">setTailInfoAux</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">info</span> : <a href=\"./Init/Prelude.html#Lean.SourceInfo\">SourceInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Syntax.setTailInfoAux","kind":"opaque","line":588,"name":"Lean.Syntax.setTailInfoAux","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L588-L595"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.getSubstring?\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">getSubstring?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">withLeading </span><span class=\"fn\">withTrailing</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></div></div>","info":{"doc":"Return substring of original input covering `stx`.\nResult is meaningful only if all involved `SourceInfo.original`s refer to the same string (as is the case after parsing). ","docLink":"./Init/Meta/Defs.html#Lean.Syntax.getSubstring?","kind":"def","line":566,"name":"Lean.Syntax.getSubstring?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L566-L577"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.getTrailingTailPos?\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">getTrailingTailPos?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">canonicalOnly</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></span></div></div>","info":{"doc":"Finds the tail position of the trailing whitespace of the first `SourceInfo` from the back of `stx`.\nIf no `SourceInfo` can be found or the first `SourceInfo` from the back of `stx` contains\nno trailing whitespace and lacks a tail position, the result is `none`.\n","docLink":"./Init/Meta/Defs.html#Lean.Syntax.getTrailingTailPos?","kind":"def","line":558,"name":"Lean.Syntax.getTrailingTailPos?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L558-L564"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.getTrailing?\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">getTrailing?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Substring\">Substring</a></span></div></div>","info":{"doc":"Finds the trailing whitespace substring of the first `SourceInfo` from the back of `stx`.\nIf no `SourceInfo` can be found or the first `SourceInfo` from the back of `stx` contains\nno trailing whitespace, the result is `none`.\n","docLink":"./Init/Meta/Defs.html#Lean.Syntax.getTrailing?","kind":"def","line":550,"name":"Lean.Syntax.getTrailing?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L550-L556"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.getTrailingSize\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">getTrailingSize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"Finds the trailing size of the first `SourceInfo` from the back of `stx`.\nIf no `SourceInfo` can be found or the first `SourceInfo` from the back of `stx` contains no\ntrailing whitespace, the result is `0`.\n","docLink":"./Init/Meta/Defs.html#Lean.Syntax.getTrailingSize","kind":"def","line":540,"name":"Lean.Syntax.getTrailingSize","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L540-L548"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.getTailInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">getTailInfo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.SourceInfo\">SourceInfo</a></div></div>","info":{"doc":"Finds the first `SourceInfo` from the back of `stx` or `SourceInfo.none`\nif no `SourceInfo` can be found.\n","docLink":"./Init/Meta/Defs.html#Lean.Syntax.getTailInfo","kind":"def","line":533,"name":"Lean.Syntax.getTailInfo","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L533-L538"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.getTailInfo?\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">getTailInfo?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.SourceInfo\">SourceInfo</a></span></span></div></div>","info":{"doc":"Finds the first `SourceInfo` from the back of `stx` or `none` if no `SourceInfo` can be found.\n","docLink":"./Init/Meta/Defs.html#Lean.Syntax.getTailInfo?","kind":"opaque","line":522,"name":"Lean.Syntax.getTailInfo?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L522-L531"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.instBEqTSyntax\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">instBEqTSyntax</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKinds\">SyntaxNodeKinds</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">k</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Syntax.instBEqTSyntax","kind":"instance","line":520,"name":"Lean.Syntax.instBEqTSyntax","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L520-L520"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.instBEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">instBEq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Syntax.instBEq","kind":"instance","line":519,"name":"Lean.Syntax.instBEq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L519-L519"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.structEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">structEq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> → <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Compare syntax structures modulo source info. ","docLink":"./Init/Meta/Defs.html#Lean.Syntax.structEq","kind":"opaque","line":511,"name":"Lean.Syntax.structEq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L511-L517"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.instBEqPreresolved\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">instBEqPreresolved</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Init/Prelude.html#Lean.Syntax.Preresolved\">Preresolved</a></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Syntax.instBEqPreresolved","kind":"instance","line":509,"name":"Lean.Syntax.instBEqPreresolved","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L509-L509"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.instBEqPreresolved.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">instBEqPreresolved</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax.Preresolved\">Preresolved</a> → <a href=\"./Init/Prelude.html#Lean.Syntax.Preresolved\">Preresolved</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Syntax.instBEqPreresolved.beq","kind":"def","line":509,"name":"Lean.Syntax.instBEqPreresolved.beq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L509-L509"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.TSyntax.Compat.instCoeTailArraySyntaxTSyntaxArray\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">Compat</span>.<span class=\"name\">instCoeTailArraySyntaxTSyntaxArray</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKinds\">SyntaxNodeKinds</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeTail\">CoeTail</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">TSyntaxArray</a> <span class=\"fn\">k</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.TSyntax.Compat.instCoeTailArraySyntaxTSyntaxArray","kind":"def","line":500,"name":"Lean.TSyntax.Compat.instCoeTailArraySyntaxTSyntaxArray","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L500-L501"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.TSyntax.Compat.instCoeTailSyntax\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">Compat</span>.<span class=\"name\">instCoeTailSyntax</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKinds\">SyntaxNodeKinds</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeTail\">CoeTail</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">k</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.TSyntax.Compat.instCoeTailSyntax","kind":"def","line":497,"name":"Lean.TSyntax.Compat.instCoeTailSyntax","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L497-L498"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.TSyntax.instCoeNumLitPrec\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">instCoeNumLitPrec</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.NumLit\">NumLit</a> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Prec\">Prec</a></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.TSyntax.instCoeNumLitPrec","kind":"instance","line":492,"name":"Lean.TSyntax.instCoeNumLitPrec","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L492-L493"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.TSyntax.instCoeNumLitPrio\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">instCoeNumLitPrio</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.NumLit\">NumLit</a> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Prio\">Prio</a></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.TSyntax.instCoeNumLitPrio","kind":"instance","line":489,"name":"Lean.TSyntax.instCoeNumLitPrio","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L489-L490"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.TSyntax.instCoeIdentLevel\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">instCoeIdentLevel</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Ident\">Ident</a> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Level\">Syntax.Level</a></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.TSyntax.instCoeIdentLevel","kind":"instance","line":486,"name":"Lean.TSyntax.instCoeIdentLevel","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L486-L487"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.TSyntax.instCoeCharLitTerm\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">instCoeCharLitTerm</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.CharLit\">CharLit</a> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Term\">Term</a></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.TSyntax.instCoeCharLitTerm","kind":"instance","line":483,"name":"Lean.TSyntax.instCoeCharLitTerm","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L483-L484"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.TSyntax.instCoeNumLitTerm\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">instCoeNumLitTerm</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.NumLit\">NumLit</a> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Term\">Term</a></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.TSyntax.instCoeNumLitTerm","kind":"instance","line":480,"name":"Lean.TSyntax.instCoeNumLitTerm","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L480-L481"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.TSyntax.instCoeScientificLitTerm\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">instCoeScientificLitTerm</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.ScientificLit\">ScientificLit</a> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Term\">Term</a></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.TSyntax.instCoeScientificLitTerm","kind":"instance","line":477,"name":"Lean.TSyntax.instCoeScientificLitTerm","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L477-L478"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.TSyntax.instCoeNameLitTerm\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">instCoeNameLitTerm</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.NameLit\">NameLit</a> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Term\">Term</a></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.TSyntax.instCoeNameLitTerm","kind":"instance","line":474,"name":"Lean.TSyntax.instCoeNameLitTerm","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L474-L475"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.TSyntax.instCoeStrLitTerm\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">instCoeStrLitTerm</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.StrLit\">StrLit</a> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Term\">Term</a></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.TSyntax.instCoeStrLitTerm","kind":"instance","line":471,"name":"Lean.TSyntax.instCoeStrLitTerm","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L471-L472"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.TSyntax.instCoeDepTermMkIdentIdent\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">instCoeDepTermMkIdentIdent</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">info</span> : <a href=\"./Init/Prelude.html#Lean.SourceInfo\">SourceInfo</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ss</span> : <a href=\"./Init/Prelude.html#Substring\">Substring</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">res</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Syntax.Preresolved\">Syntax.Preresolved</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#CoeDep\">CoeDep</a> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Term\">Term</a> <a href=\"./Init/Prelude.html#Lean.TSyntax.mk\">{</a> <span class=\"fn\">raw</span> := <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax.ident\">Syntax.ident</a> <span class=\"fn\">info</span> <span class=\"fn\">ss</span> <span class=\"fn\">n</span> <span class=\"fn\">res</span></span> <a href=\"./Init/Prelude.html#Lean.TSyntax.mk\">}</a> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Ident\">Ident</a></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.TSyntax.instCoeDepTermMkIdentIdent","kind":"instance","line":468,"name":"Lean.TSyntax.instCoeDepTermMkIdentIdent","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L468-L469"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.TSyntax.instCoeIdentTerm\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">instCoeIdentTerm</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Ident\">Ident</a> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Term\">Term</a></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.TSyntax.instCoeIdentTerm","kind":"instance","line":465,"name":"Lean.TSyntax.instCoeIdentTerm","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L465-L466"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.TSyntax.instCoeConsSyntaxNodeKind\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">instCoeConsSyntaxNodeKind</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ks</span> : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKinds\">SyntaxNodeKinds</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k'</span> : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">SyntaxNodeKind</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">ks</span>)</span> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> (<span class=\"fn\">k'</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">ks</span>))</span></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.TSyntax.instCoeConsSyntaxNodeKind","kind":"instance","line":462,"name":"Lean.TSyntax.instCoeConsSyntaxNodeKind","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L462-L463"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.TSyntax.instCoeConsSyntaxNodeKindNil\"><span class=\"name\">Lean</span>.<span class=\"name\">TSyntax</span>.<span class=\"name\">instCoeConsSyntaxNodeKindNil</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">k</span> : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">SyntaxNodeKind</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ks</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKind\">SyntaxNodeKind</a></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">k</span>) <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> (<span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#List.cons\">::</a> <span class=\"fn\">ks</span>))</span></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.TSyntax.instCoeConsSyntaxNodeKindNil","kind":"instance","line":459,"name":"Lean.TSyntax.instCoeConsSyntaxNodeKindNil","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L459-L460"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.HygieneInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">HygieneInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Syntax that represents macro hygiene info.\n","docLink":"./Init/Meta/Defs.html#Lean.Syntax.HygieneInfo","kind":"def","line":448,"name":"Lean.Syntax.HygieneInfo","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L448-L451"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.NumLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">NumLit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Syntax that represents a numeric literal.\n","docLink":"./Init/Meta/Defs.html#Lean.Syntax.NumLit","kind":"def","line":444,"name":"Lean.Syntax.NumLit","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L444-L447"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.ScientificLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">ScientificLit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Syntax that represents a scientific numeric literal that may have decimal and exponential parts.\n","docLink":"./Init/Meta/Defs.html#Lean.Syntax.ScientificLit","kind":"def","line":440,"name":"Lean.Syntax.ScientificLit","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L440-L443"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.NameLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">NameLit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Syntax that represents a quoted name literal that begins with a back-tick.\n","docLink":"./Init/Meta/Defs.html#Lean.Syntax.NameLit","kind":"def","line":436,"name":"Lean.Syntax.NameLit","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L436-L439"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.CharLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">CharLit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Syntax that represents a character literal.\n","docLink":"./Init/Meta/Defs.html#Lean.Syntax.CharLit","kind":"def","line":432,"name":"Lean.Syntax.CharLit","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L432-L435"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.StrLit\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">StrLit</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Syntax that represents a string literal.\n","docLink":"./Init/Meta/Defs.html#Lean.Syntax.StrLit","kind":"def","line":428,"name":"Lean.Syntax.StrLit","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L428-L431"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.Ident\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">Ident</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Syntax that represents an identifier.\n","docLink":"./Init/Meta/Defs.html#Lean.Syntax.Ident","kind":"def","line":424,"name":"Lean.Syntax.Ident","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L424-L427"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.Prio\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">Prio</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Syntax that represents a priority (e.g. for an instance declaration).\n","docLink":"./Init/Meta/Defs.html#Lean.Syntax.Prio","kind":"def","line":420,"name":"Lean.Syntax.Prio","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L420-L423"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.Prec\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">Prec</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Syntax that represents a precedence (e.g. for an operator).\n","docLink":"./Init/Meta/Defs.html#Lean.Syntax.Prec","kind":"def","line":416,"name":"Lean.Syntax.Prec","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L416-L419"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.Tactic\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">Tactic</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Syntax that represents a tactic.\n","docLink":"./Init/Meta/Defs.html#Lean.Syntax.Tactic","kind":"def","line":412,"name":"Lean.Syntax.Tactic","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L412-L415"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.Level\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">Level</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Syntax that represents a universe level.\n","docLink":"./Init/Meta/Defs.html#Lean.Syntax.Level","kind":"def","line":408,"name":"Lean.Syntax.Level","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L408-L411"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.Command\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">Command</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Syntax that represents a command.\n","docLink":"./Init/Meta/Defs.html#Lean.Syntax.Command","kind":"def","line":404,"name":"Lean.Syntax.Command","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L404-L407"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.Term\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">Term</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Syntax that represents a Lean term.\n","docLink":"./Init/Meta/Defs.html#Lean.Syntax.Term","kind":"def","line":400,"name":"Lean.Syntax.Term","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L400-L403"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.instReprTSyntax.repr\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">instReprTSyntax</span>.<span class=\"name\">repr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ks✝</span> : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKinds\">SyntaxNodeKinds</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">ks✝</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Std.Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Syntax.instReprTSyntax.repr","kind":"def","line":398,"name":"Lean.Syntax.instReprTSyntax.repr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L398-L398"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.instReprTSyntax\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">instReprTSyntax</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">ks✝</span> : <a href=\"./Init/Prelude.html#Lean.SyntaxNodeKinds\">SyntaxNodeKinds</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">ks✝</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Syntax.instReprTSyntax","kind":"instance","line":398,"name":"Lean.Syntax.instReprTSyntax","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L398-L398"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.instRepr.repr\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">instRepr</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Std.Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Syntax.instRepr.repr","kind":"opaque","line":397,"name":"Lean.Syntax.instRepr.repr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L397-L397"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.instRepr\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">instRepr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Syntax.instRepr","kind":"instance","line":397,"name":"Lean.Syntax.instRepr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L397-L397"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.instReprPreresolved.repr\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">instReprPreresolved</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax.Preresolved\">Preresolved</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Std.Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Syntax.instReprPreresolved.repr","kind":"def","line":396,"name":"Lean.Syntax.instReprPreresolved.repr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L396-L396"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Syntax.instReprPreresolved\"><span class=\"name\">Lean</span>.<span class=\"name\">Syntax</span>.<span class=\"name\">instReprPreresolved</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Init/Prelude.html#Lean.Syntax.Preresolved\">Preresolved</a></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Syntax.instReprPreresolved","kind":"instance","line":396,"name":"Lean.Syntax.instReprPreresolved","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L396-L396"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.monadNameGeneratorLift\"><span class=\"name\">Lean</span>.<span class=\"name\">monadNameGeneratorLift</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m </span><span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift\">MonadLift</a> <span class=\"fn\">m</span> <span class=\"fn\">n</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Meta/Defs.html#Lean.MonadNameGenerator\">MonadNameGenerator</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Meta/Defs.html#Lean.MonadNameGenerator\">MonadNameGenerator</a> <span class=\"fn\">n</span></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.monadNameGeneratorLift","kind":"instance","line":389,"name":"Lean.monadNameGeneratorLift","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L389-L392"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.mkFreshId\"><span class=\"name\">Lean</span>.<span class=\"name\">mkFreshId</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Meta/Defs.html#Lean.MonadNameGenerator\">MonadNameGenerator</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"Creates a globally unique `Name`, without any semantic interpretation.\nThe names are not intended to be user-visible.\nWith the default name generator, names use `_uniq` as a base and have a numeric suffix.\n\nThis is used for example by `Lean.mkFreshFVarId`, `Lean.mkFreshMVarId`, and `Lean.mkFreshLMVarId`.\nTo create fresh user-visible identifiers, use functions such as `Lean.Core.mkFreshUserName` instead.\n","docLink":"./Init/Meta/Defs.html#Lean.mkFreshId","kind":"def","line":375,"name":"Lean.mkFreshId","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L375-L387"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.MonadNameGenerator.setNGen\"><span class=\"name\">Lean</span>.<span class=\"name\">MonadNameGenerator</span>.<span class=\"name\">setNGen</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Meta/Defs.html#Lean.MonadNameGenerator\">MonadNameGenerator</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">NameGenerator</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.MonadNameGenerator.setNGen","kind":"def","line":371,"name":"Lean.MonadNameGenerator.setNGen","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L371-L371"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.MonadNameGenerator.getNGen\"><span class=\"name\">Lean</span>.<span class=\"name\">MonadNameGenerator</span>.<span class=\"name\">getNGen</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Meta/Defs.html#Lean.MonadNameGenerator\">MonadNameGenerator</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">NameGenerator</a></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.MonadNameGenerator.getNGen","kind":"def","line":370,"name":"Lean.MonadNameGenerator.getNGen","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L370-L370"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.MonadNameGenerator.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">MonadNameGenerator</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">getNGen</span> : <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">NameGenerator</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">setNGen</span> : <span class=\"fn\"><a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">NameGenerator</a> → <span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Meta/Defs.html#Lean.MonadNameGenerator\">MonadNameGenerator</a> <span class=\"fn\">m</span></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.MonadNameGenerator.mk","kind":"ctor","line":369,"name":"Lean.MonadNameGenerator.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L369-L369"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">class</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.MonadNameGenerator\"><span class=\"name\">Lean</span>.<span class=\"name\">MonadNameGenerator</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.MonadNameGenerator","kind":"class","line":369,"name":"Lean.MonadNameGenerator","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L369-L371"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.NameGenerator.mkChild\"><span class=\"name\">Lean</span>.<span class=\"name\">NameGenerator</span>.<span class=\"name\">mkChild</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">NameGenerator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">NameGenerator</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">NameGenerator</a></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.NameGenerator.mkChild","kind":"def","line":363,"name":"Lean.NameGenerator.mkChild","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L363-L365"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.NameGenerator.next\"><span class=\"name\">Lean</span>.<span class=\"name\">NameGenerator</span>.<span class=\"name\">next</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">NameGenerator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">NameGenerator</a></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.NameGenerator.next","kind":"def","line":360,"name":"Lean.NameGenerator.next","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L360-L361"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.NameGenerator.curr\"><span class=\"name\">Lean</span>.<span class=\"name\">NameGenerator</span>.<span class=\"name\">curr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">NameGenerator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.NameGenerator.curr","kind":"def","line":357,"name":"Lean.NameGenerator.curr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L357-L358"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Name.instDecidableEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">instDecidableEq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Name.instDecidableEq","kind":"instance","line":350,"name":"Lean.Name.instDecidableEq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L350-L351"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Name.instLawfulBEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">instLawfulBEq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#LawfulBEq\">LawfulBEq</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Name.instLawfulBEq","kind":"instance","line":346,"name":"Lean.Name.instLawfulBEq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L346-L348"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Name.beq_iff_eq\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">beq_iff_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">n</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">n</span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Name.beq_iff_eq","kind":"theorem","line":342,"name":"Lean.Name.beq_iff_eq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L342-L344"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Name.appendBefore\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">appendBefore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pre</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Name.appendBefore","kind":"def","line":335,"name":"Lean.Name.appendBefore","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L335-L340"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Name.appendIndexAfter\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">appendIndexAfter</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Name.appendIndexAfter","kind":"def","line":329,"name":"Lean.Name.appendIndexAfter","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L329-L333"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Name.appendAfter\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">appendAfter</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">suffix</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Name.appendAfter","kind":"def","line":323,"name":"Lean.Name.appendAfter","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L323-L327"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Name.modifyBase\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">modifyBase</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"Remove macros scopes, apply `f`, and put them back ","docLink":"./Init/Meta/Defs.html#Lean.Name.modifyBase","kind":"def","line":315,"name":"Lean.Name.modifyBase","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L315-L321"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Name.eraseSuffix?\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">eraseSuffix?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></span></div></div>","info":{"doc":"`eraseSuffix? n s` return `n'` if `n` is of the form `n == n' ++ s`.\n","docLink":"./Init/Meta/Defs.html#Lean.Name.eraseSuffix?","kind":"def","line":306,"name":"Lean.Name.eraseSuffix?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L306-L313"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Name.replacePrefix\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">replacePrefix</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Name.replacePrefix","kind":"def","line":300,"name":"Lean.Name.replacePrefix","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L300-L304"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Name.capitalize\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">capitalize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Name.capitalize","kind":"def","line":296,"name":"Lean.Name.capitalize","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L296-L298"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Name.instRepr\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">instRepr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Name.instRepr","kind":"instance","line":293,"name":"Lean.Name.instRepr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L293-L294"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Name.reprPrec\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">reprPrec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prec</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Format/Basic.html#Std.Format\">Std.Format</a></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Name.reprPrec","kind":"def","line":283,"name":"Lean.Name.reprPrec","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L283-L291"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Name.isInaccessibleUserName\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">isInaccessibleUserName</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Name.isInaccessibleUserName","kind":"def","line":153,"name":"Lean.Name.isInaccessibleUserName","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L153-L157"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Name.getRoot\"><span class=\"name\">Lean</span>.<span class=\"name\">Name</span>.<span class=\"name\">getRoot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Name.getRoot","kind":"def","line":146,"name":"Lean.Name.getRoot","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L146-L151"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.isIdEndEscape\"><span class=\"name\">Lean</span>.<span class=\"name\">isIdEndEscape</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.isIdEndEscape","kind":"def","line":143,"name":"Lean.isIdEndEscape","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L143-L143"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.isIdBeginEscape\"><span class=\"name\">Lean</span>.<span class=\"name\">isIdBeginEscape</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.isIdBeginEscape","kind":"def","line":142,"name":"Lean.isIdBeginEscape","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L142-L142"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.idEndEscape\"><span class=\"name\">Lean</span>.<span class=\"name\">idEndEscape</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Char\">Char</a></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.idEndEscape","kind":"def","line":141,"name":"Lean.idEndEscape","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L141-L141"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.idBeginEscape\"><span class=\"name\">Lean</span>.<span class=\"name\">idBeginEscape</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Char\">Char</a></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.idBeginEscape","kind":"def","line":140,"name":"Lean.idBeginEscape","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L140-L140"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.isIdRestAscii\"><span class=\"name\">Lean</span>.<span class=\"name\">isIdRestAscii</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.isIdRestAscii","kind":"def","line":137,"name":"Lean.isIdRestAscii","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L137-L138"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.isIdRest\"><span class=\"name\">Lean</span>.<span class=\"name\">isIdRest</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.isIdRest","kind":"def","line":134,"name":"Lean.isIdRest","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L134-L135"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.isIdFirstAscii\"><span class=\"name\">Lean</span>.<span class=\"name\">isIdFirstAscii</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#UInt8\">UInt8</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.isIdFirstAscii","kind":"def","line":128,"name":"Lean.isIdFirstAscii","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L128-L129"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.isIdFirst\"><span class=\"name\">Lean</span>.<span class=\"name\">isIdFirst</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.isIdFirst","kind":"def","line":121,"name":"Lean.isIdFirst","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L121-L122"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.isSubScriptAlnum\"><span class=\"name\">Lean</span>.<span class=\"name\">isSubScriptAlnum</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.isSubScriptAlnum","kind":"def","line":115,"name":"Lean.isSubScriptAlnum","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L115-L119"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.isNumericSubscript\"><span class=\"name\">Lean</span>.<span class=\"name\">isNumericSubscript</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.isNumericSubscript","kind":"def","line":112,"name":"Lean.isNumericSubscript","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L112-L113"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.isLetterLike\"><span class=\"name\">Lean</span>.<span class=\"name\">isLetterLike</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.isLetterLike","kind":"def","line":102,"name":"Lean.isLetterLike","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L102-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.isGreek\"><span class=\"name\">Lean</span>.<span class=\"name\">isGreek</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Char\">Char</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Valid identifier names ","docLink":"./Init/Meta/Defs.html#Lean.isGreek","kind":"def","line":98,"name":"Lean.isGreek","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L98-L100"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Internal.hasLLVMBackend\"><span class=\"name\">Lean</span>.<span class=\"name\">Internal</span>.<span class=\"name\">hasLLVMBackend</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"This function can be used to detect whether the compiler has support for\ngenerating LLVM instead of C. It is used by lake instead of the --features\nflag in order to avoid having to run a compiler for this every time on startup.\nSee #2572.\n","docLink":"./Init/Meta/Defs.html#Lean.Internal.hasLLVMBackend","kind":"opaque","line":89,"name":"Lean.Internal.hasLLVMBackend","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L89-L96"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.Internal.isStage0\"><span class=\"name\">Lean</span>.<span class=\"name\">Internal</span>.<span class=\"name\">isStage0</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.Internal.isStage0","kind":"opaque","line":86,"name":"Lean.Internal.isStage0","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L86-L87"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.toolchain\"><span class=\"name\">Lean</span>.<span class=\"name\">toolchain</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.toolchain","kind":"def","line":69,"name":"Lean.toolchain","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L69-L84"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.origin\"><span class=\"name\">Lean</span>.<span class=\"name\">origin</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.origin","kind":"def","line":66,"name":"Lean.origin","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L66-L67"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.versionString\"><span class=\"name\">Lean</span>.<span class=\"name\">versionString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.versionString","kind":"def","line":58,"name":"Lean.versionString","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L58-L64"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.versionStringCore\"><span class=\"name\">Lean</span>.<span class=\"name\">versionStringCore</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.versionStringCore","kind":"def","line":49,"name":"Lean.versionStringCore","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L49-L56"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.version.specialDesc\"><span class=\"name\">Lean</span>.<span class=\"name\">version</span>.<span class=\"name\">specialDesc</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.version.specialDesc","kind":"def","line":47,"name":"Lean.version.specialDesc","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L47-L47"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.version.getSpecialDesc\"><span class=\"name\">Lean</span>.<span class=\"name\">version</span>.<span class=\"name\">getSpecialDesc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"Additional version description like \"nightly-2018-03-11\" ","docLink":"./Init/Meta/Defs.html#Lean.version.getSpecialDesc","kind":"opaque","line":44,"name":"Lean.version.getSpecialDesc","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L44-L46"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.version.isRelease\"><span class=\"name\">Lean</span>.<span class=\"name\">version</span>.<span class=\"name\">isRelease</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.version.isRelease","kind":"def","line":42,"name":"Lean.version.isRelease","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L42-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.version.getIsRelease\"><span class=\"name\">Lean</span>.<span class=\"name\">version</span>.<span class=\"name\">getIsRelease</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.version.getIsRelease","kind":"opaque","line":40,"name":"Lean.version.getIsRelease","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L40-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.githash\"><span class=\"name\">Lean</span>.<span class=\"name\">githash</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.githash","kind":"def","line":38,"name":"Lean.githash","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L38-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.getGithash\"><span class=\"name\">Lean</span>.<span class=\"name\">getGithash</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">u</span> : <a href=\"./Init/Prelude.html#Unit\">Unit</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.getGithash","kind":"opaque","line":36,"name":"Lean.getGithash","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L36-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.version.patch\"><span class=\"name\">Lean</span>.<span class=\"name\">version</span>.<span class=\"name\">patch</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.version.patch","kind":"def","line":34,"name":"Lean.version.patch","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L34-L34"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.version.minor\"><span class=\"name\">Lean</span>.<span class=\"name\">version</span>.<span class=\"name\">minor</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.version.minor","kind":"def","line":30,"name":"Lean.version.minor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L30-L30"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta/Defs.html#Lean.version.major\"><span class=\"name\">Lean</span>.<span class=\"name\">version</span>.<span class=\"name\">major</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"","docLink":"./Init/Meta/Defs.html#Lean.version.major","kind":"def","line":26,"name":"Lean.version.major","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta/Defs.lean#L26-L26"}}],"imports":["Init.Prelude","Init.Prelude","Init.MetaTypes","Init.Syntax","Init.Data.Array.GetLit","Init.Data.Option.BasicAux","Init.Data.Array.Basic","Init.Syntax"],"instances":[{"className":"Repr","name":"Lean.Name.instRepr","typeNames":["Lean.Name"]},{"className":"LawfulBEq","name":"Lean.Name.instLawfulBEq","typeNames":["Lean.Name"]},{"className":"Decidable","name":"Lean.Name.instDecidableEq","typeNames":["Eq"]},{"className":"Lean.MonadNameGenerator","name":"Lean.monadNameGeneratorLift","typeNames":[]},{"className":"Repr","name":"Lean.Syntax.instReprPreresolved","typeNames":["Lean.Syntax.Preresolved"]},{"className":"Repr","name":"Lean.Syntax.instRepr","typeNames":["Lean.Syntax"]},{"className":"Repr","name":"Lean.Syntax.instReprTSyntax","typeNames":["Lean.TSyntax"]},{"className":"Coe","name":"Lean.TSyntax.instCoeConsSyntaxNodeKindNil","typeNames":["Lean.TSyntax","Lean.TSyntax"]},{"className":"Coe","name":"Lean.TSyntax.instCoeConsSyntaxNodeKind","typeNames":["Lean.TSyntax","Lean.TSyntax"]},{"className":"Coe","name":"Lean.TSyntax.instCoeIdentTerm","typeNames":["Lean.Syntax.Ident","Lean.Syntax.Term"]},{"className":"CoeDep","name":"Lean.TSyntax.instCoeDepTermMkIdentIdent","typeNames":["Lean.Syntax.Term","Lean.TSyntax.mk","Lean.Syntax.Ident"]},{"className":"Coe","name":"Lean.TSyntax.instCoeStrLitTerm","typeNames":["Lean.Syntax.StrLit","Lean.Syntax.Term"]},{"className":"Coe","name":"Lean.TSyntax.instCoeNameLitTerm","typeNames":["Lean.Syntax.NameLit","Lean.Syntax.Term"]},{"className":"Coe","name":"Lean.TSyntax.instCoeScientificLitTerm","typeNames":["Lean.Syntax.ScientificLit","Lean.Syntax.Term"]},{"className":"Coe","name":"Lean.TSyntax.instCoeNumLitTerm","typeNames":["Lean.Syntax.NumLit","Lean.Syntax.Term"]},{"className":"Coe","name":"Lean.TSyntax.instCoeCharLitTerm","typeNames":["Lean.Syntax.CharLit","Lean.Syntax.Term"]},{"className":"Coe","name":"Lean.TSyntax.instCoeIdentLevel","typeNames":["Lean.Syntax.Ident","Lean.Syntax.Level"]},{"className":"Coe","name":"Lean.TSyntax.instCoeNumLitPrio","typeNames":["Lean.Syntax.NumLit","Lean.Syntax.Prio"]},{"className":"Coe","name":"Lean.TSyntax.instCoeNumLitPrec","typeNames":["Lean.Syntax.NumLit","Lean.Syntax.Prec"]},{"className":"BEq","name":"Lean.Syntax.instBEqPreresolved","typeNames":["Lean.Syntax.Preresolved"]},{"className":"BEq","name":"Lean.Syntax.instBEq","typeNames":["Lean.Syntax"]},{"className":"BEq","name":"Lean.Syntax.instBEqTSyntax","typeNames":["Lean.TSyntax"]},{"className":"Coe","name":"Lean.Syntax.instCoeArraySepArray","typeNames":["Array","Lean.Syntax.SepArray"]},{"className":"Coe","name":"Lean.Syntax.instCoeTSyntaxArrayTSepArray","typeNames":["Lean.TSyntaxArray","Lean.Syntax.TSepArray"]},{"className":"Lean.Quote","name":"Lean.instQuoteOfCoeHTCTTSyntaxConsSyntaxNodeKindNil","typeNames":[]},{"className":"Lean.Quote","name":"Lean.instQuoteTermMkStr1","typeNames":["Lean.Syntax.Term","Lean.Name.mkStr1"]},{"className":"Lean.Quote","name":"Lean.instQuoteBoolMkStr1","typeNames":["Bool","Lean.Name.mkStr1"]},{"className":"Lean.Quote","name":"Lean.instQuoteCharCharLitKind","typeNames":["Char","Lean.charLitKind"]},{"className":"Lean.Quote","name":"Lean.instQuoteStringStrLitKind","typeNames":["String","Lean.strLitKind"]},{"className":"Lean.Quote","name":"Lean.instQuoteNatNumLitKind","typeNames":["Nat","Lean.numLitKind"]},{"className":"Lean.Quote","name":"Lean.instQuoteSubstringMkStr1","typeNames":["Substring","Lean.Name.mkStr1"]},{"className":"Lean.Quote","name":"Lean.instQuoteNameMkStr1","typeNames":["Lean.Name","Lean.Name.mkStr1"]},{"className":"Lean.Quote","name":"Lean.instQuoteProdMkStr1","typeNames":["Prod","Lean.Name.mkStr1"]},{"className":"Lean.Quote","name":"Lean.instQuoteListMkStr1","typeNames":["List","Lean.Name.mkStr1"]},{"className":"Lean.Quote","name":"Lean.instQuoteArrayMkStr1","typeNames":["Array","Lean.Name.mkStr1"]},{"className":"Lean.Quote","name":"Lean.Option.hasQuote","typeNames":["Option","Lean.Name.mkStr1"]},{"className":"EmptyCollection","name":"Lean.Syntax.instEmptyCollectionSepArray","typeNames":["Lean.Syntax.SepArray"]},{"className":"EmptyCollection","name":"Lean.Syntax.instEmptyCollectionTSepArray","typeNames":["Lean.Syntax.TSepArray"]},{"className":"CoeOut","name":"Lean.Syntax.instCoeOutSepArrayArray","typeNames":["Lean.Syntax.SepArray","Array"]},{"className":"CoeOut","name":"Lean.Syntax.instCoeOutTSepArrayTSyntaxArray","typeNames":["Lean.Syntax.TSepArray","Lean.TSyntaxArray"]},{"className":"Coe","name":"Lean.Syntax.instCoeTSyntaxArrayOfTSyntax","typeNames":["Lean.TSyntaxArray","Lean.TSyntaxArray"]},{"className":"CoeOut","name":"Lean.Syntax.instCoeOutTSyntaxArrayArray","typeNames":["Lean.TSyntaxArray","Array"]},{"className":"Coe","name":"Lean.Syntax.instCoeIdentTSyntaxConsSyntaxNodeKindMkStr4Nil","typeNames":["Lean.Syntax.Ident","Lean.TSyntax"]},{"className":"Coe","name":"Lean.Syntax.instCoeTermTSyntaxConsSyntaxNodeKindMkStr4Nil","typeNames":["Lean.Syntax.Term","Lean.TSyntax"]},{"className":"Repr","name":"Lean.Meta.instReprConfig","typeNames":["Lean.Meta.DSimp.Config"]},{"className":"Repr","name":"Lean.Meta.instReprEtaStructMode","typeNames":["Lean.Meta.EtaStructMode"]},{"className":"Repr","name":"Lean.Meta.instReprTransparencyMode","typeNames":["Lean.Meta.TransparencyMode"]},{"className":"Repr","name":"Lean.Meta.instReprConfig_1","typeNames":["Lean.Meta.Simp.Config"]}],"name":"Init.Meta.Defs"}