{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.mkUnfoldProof\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Eqns</span>.<span class=\"name\">mkUnfoldProof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Auxiliary method for `mkUnfoldEq`. The structure is based on `mkEqnTypes`.\n`mvarId` is the goal to be proved. It is a goal of the form\n```\ndeclName x_1 ... x_n = body[x_1, ..., x_n]\n```\nThe proof is constructed using the automatically generated equational theorems.\nWe basically keep splitting the `match` and `if-then-else` expressions in the right hand side\nuntil one of the equational theorems is applicable.\n","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.mkUnfoldProof","kind":"def","line":441,"name":"Lean.Elab.Eqns.mkUnfoldProof","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/PreDefinition/Eqns.lean#L441-L479"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.mkEqns\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Eqns</span>.<span class=\"name\">mkEqns</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tryRefl</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span></div></div>","info":{"doc":"Generate equations for `declName`.\n\nThis unfolds the function application on the LHS (using an unfold theorem, if present, or else by\ndelta-reduction), calculates the types for the equational theorems using `mkEqnTypes`, and then\nproves them using `mkEqnProof`.\n\nThis is currently used for non-recursive functions, well-founded recursion and partial_fixpoint,\nbut not for structural recursion.\n","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.mkEqns","kind":"def","line":400,"name":"Lean.Elab.Eqns.mkEqns","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/PreDefinition/Eqns.lean#L400-L439"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.tryContradiction\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Eqns</span>.<span class=\"name\">tryContradiction</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.tryContradiction","kind":"def","line":315,"name":"Lean.Elab.Eqns.tryContradiction","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/PreDefinition/Eqns.lean#L315-L316"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.whnfReducibleLHS?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Eqns</span>.<span class=\"name\">whnfReducibleLHS?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span></div></div>","info":{"doc":"Apply `whnfR` to lhs, return `none` if `lhs` was not modified ","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.whnfReducibleLHS?","kind":"def","line":305,"name":"Lean.Elab.Eqns.whnfReducibleLHS?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/PreDefinition/Eqns.lean#L305-L313"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.deltaRHS?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Eqns</span>.<span class=\"name\">deltaRHS?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.deltaRHS?","kind":"def","line":292,"name":"Lean.Elab.Eqns.deltaRHS?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/PreDefinition/Eqns.lean#L292-L296"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.deltaLHS\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Eqns</span>.<span class=\"name\">deltaLHS</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span></div></div>","info":{"doc":"Delta reduce the equation left-hand-side ","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.deltaLHS","kind":"def","line":285,"name":"Lean.Elab.Eqns.deltaLHS","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/PreDefinition/Eqns.lean#L285-L290"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.removeUnusedEqnHypotheses\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Eqns</span>.<span class=\"name\">removeUnusedEqnHypotheses</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declType </span><span class=\"fn\">declValue</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> (<a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></div></div>","info":{"doc":"Some of the hypotheses added by `mkEqnTypes` may not be used by the actual proof (i.e., `value` argument).\nThis method eliminates them.\n\nAlternative solution: improve `saveEqn` and make sure it never includes unnecessary hypotheses.\nThese hypotheses are leftovers from tactics such as `splitMatch?` used in `mkEqnTypes`.\n","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.removeUnusedEqnHypotheses","kind":"def","line":254,"name":"Lean.Elab.Eqns.removeUnusedEqnHypotheses","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/PreDefinition/Eqns.lean#L254-L283"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.mkEqnTypes\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Eqns</span>.<span class=\"name\">mkEqnTypes</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.mkEqnTypes","kind":"def","line":235,"name":"Lean.Elab.Eqns.mkEqnTypes","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/PreDefinition/Eqns.lean#L235-L252"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.simpEqnType\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Eqns</span>.<span class=\"name\">simpEqnType</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">eqnType</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Eliminate `namedPatterns` from equation, and trivial hypotheses.\n","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.simpEqnType","kind":"def","line":124,"name":"Lean.Elab.Eqns.simpEqnType","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/PreDefinition/Eqns.lean#L124-L164"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.tryURefl\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Eqns</span>.<span class=\"name\">tryURefl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Try to close goal using `rfl` with smart unfolding turned off. ","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.tryURefl","kind":"def","line":119,"name":"Lean.Elab.Eqns.tryURefl","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/PreDefinition/Eqns.lean#L119-L122"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.splitMatch?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Eqns</span>.<span class=\"name\">splitMatch?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.splitMatch?","kind":"def","line":98,"name":"Lean.Elab.Eqns.splitMatch?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/PreDefinition/Eqns.lean#L98-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.simpIf?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Eqns</span>.<span class=\"name\">simpIf?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">useNewSemantics</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span></div></div>","info":{"doc":"Simplify `if-then-expression`s in the goal target.\nIf `useNewSemantics` is `true`, the flag `backward.split` is ignored.\n","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.simpIf?","kind":"def","line":53,"name":"Lean.Elab.Eqns.simpIf?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/PreDefinition/Eqns.lean#L53-L59"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.simpMatch?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Eqns</span>.<span class=\"name\">simpMatch?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.simpMatch?","kind":"def","line":49,"name":"Lean.Elab.Eqns.simpMatch?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/PreDefinition/Eqns.lean#L49-L51"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.expandRHS?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Eqns</span>.<span class=\"name\">expandRHS?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.expandRHS?","kind":"def","line":43,"name":"Lean.Elab.Eqns.expandRHS?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/PreDefinition/Eqns.lean#L43-L47"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.expand\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Eqns</span>.<span class=\"name\">expand</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">progress</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">Ã—</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"Zeta reduces `let` and `have` while consuming metadata.\nReturns true if progress is made.\n","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.expand","kind":"opaque","line":33,"name":"Lean.Elab.Eqns.expand","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/PreDefinition/Eqns.lean#L33-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.instInhabitedEqnInfoCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Eqns</span>.<span class=\"name\">instInhabitedEqnInfoCore</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.EqnInfoCore\">EqnInfoCore</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.instInhabitedEqnInfoCore","kind":"instance","line":31,"name":"Lean.Elab.Eqns.instInhabitedEqnInfoCore","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/PreDefinition/Eqns.lean#L31-L31"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.instInhabitedEqnInfoCore.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Eqns</span>.<span class=\"name\">instInhabitedEqnInfoCore</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.EqnInfoCore\">EqnInfoCore</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.instInhabitedEqnInfoCore.default","kind":"def","line":31,"name":"Lean.Elab.Eqns.instInhabitedEqnInfoCore.default","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/PreDefinition/Eqns.lean#L31-L31"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.EqnInfoCore.value\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Eqns</span>.<span class=\"name\">EqnInfoCore</span>.<span class=\"name\">value</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.EqnInfoCore\">EqnInfoCore</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.EqnInfoCore.value","kind":"def","line":30,"name":"Lean.Elab.Eqns.EqnInfoCore.value","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/PreDefinition/Eqns.lean#L30-L30"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.EqnInfoCore.type\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Eqns</span>.<span class=\"name\">EqnInfoCore</span>.<span class=\"name\">type</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.EqnInfoCore\">EqnInfoCore</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.EqnInfoCore.type","kind":"def","line":29,"name":"Lean.Elab.Eqns.EqnInfoCore.type","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/PreDefinition/Eqns.lean#L29-L29"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.EqnInfoCore.levelParams\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Eqns</span>.<span class=\"name\">EqnInfoCore</span>.<span class=\"name\">levelParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.EqnInfoCore\">EqnInfoCore</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.EqnInfoCore.levelParams","kind":"def","line":28,"name":"Lean.Elab.Eqns.EqnInfoCore.levelParams","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/PreDefinition/Eqns.lean#L28-L28"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.EqnInfoCore.declName\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Eqns</span>.<span class=\"name\">EqnInfoCore</span>.<span class=\"name\">declName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.EqnInfoCore\">EqnInfoCore</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.EqnInfoCore.declName","kind":"def","line":27,"name":"Lean.Elab.Eqns.EqnInfoCore.declName","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/PreDefinition/Eqns.lean#L27-L27"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.EqnInfoCore.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Eqns</span>.<span class=\"name\">EqnInfoCore</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">levelParams</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type </span><span class=\"fn\">value</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.EqnInfoCore\">EqnInfoCore</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.EqnInfoCore.mk","kind":"ctor","line":26,"name":"Lean.Elab.Eqns.EqnInfoCore.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/PreDefinition/Eqns.lean#L26-L26"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.EqnInfoCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Eqns</span>.<span class=\"name\">EqnInfoCore</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/Eqns.html#Lean.Elab.Eqns.EqnInfoCore","kind":"structure","line":26,"name":"Lean.Elab.Eqns.EqnInfoCore","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/PreDefinition/Eqns.lean#L26-L31"}}],"imports":["Lean.Meta.Eqns","Lean.Meta.CtorRecognizer","Lean.Util.CollectFVars","Lean.Util.ForEachExprWhere","Lean.Meta.Tactic.Split","Lean.Meta.Tactic.Apply","Lean.Meta.Tactic.Refl","Lean.Meta.Match.MatchEqs","Lean.DefEqAttrib","Lean.Meta.Tactic.SplitIf","Lean.Meta.Tactic.Simp.Main"],"instances":[{"className":"Inhabited","name":"Lean.Elab.Eqns.instInhabitedEqnInfoCore","typeNames":["Lean.Elab.Eqns.EqnInfoCore"]}],"name":"Lean.Elab.PreDefinition.Eqns"}