{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Constructor.html#Lean.MVarId.existsIntro\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">existsIntro</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Constructor.html#Lean.MVarId.existsIntro","kind":"def","line":35,"name":"Lean.MVarId.existsIntro","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Constructor.lean#L35-L51"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Constructor.html#Lean.MVarId.constructor\"><span class=\"name\">Lean</span>.<span class=\"name\">MVarId</span>.<span class=\"name\">constructor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cfg</span> : <a href=\"./Init/Meta/Defs.html#Lean.Meta.ApplyConfig\">Meta.ApplyConfig</a> := <a href=\"./Init/Meta/Defs.html#Lean.Meta.ApplyConfig.mk\">{</a> <a href=\"./Init/Meta/Defs.html#Lean.Meta.ApplyConfig.mk\">}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span></div></div>","info":{"doc":"When the goal `mvarId` type is an inductive datatype,\n`constructor` calls `apply` with the first matching constructor.\n","docLink":"./Lean/Meta/Tactic/Constructor.html#Lean.MVarId.constructor","kind":"def","line":17,"name":"Lean.MVarId.constructor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Constructor.lean#L17-L33"}}],"imports":["Lean.Meta.Check","Lean.Meta.Tactic.Util","Lean.Meta.Tactic.Apply"],"instances":[],"name":"Lean.Meta.Tactic.Constructor"}