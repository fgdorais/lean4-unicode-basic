{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.getNumBuiltinAttributesImpl\"><span class=\"name\">Lean</span>.<span class=\"name\">getNumBuiltinAttributesImpl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"`getNumBuiltinAttributes` implementation ","docLink":"./Lean/Attributes.html#Lean.getNumBuiltinAttributesImpl","kind":"def","line":495,"name":"Lean.getNumBuiltinAttributesImpl","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L495-L497"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.updateEnvAttributesImpl\"><span class=\"name\">Lean</span>.<span class=\"name\">updateEnvAttributesImpl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a></span></div></div>","info":{"doc":"`updateEnvAttributes` implementation ","docLink":"./Lean/Attributes.html#Lean.updateEnvAttributesImpl","kind":"def","line":483,"name":"Lean.updateEnvAttributesImpl","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L483-L493"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.Attribute.erase\"><span class=\"name\">Lean</span>.<span class=\"name\">Attribute</span>.<span class=\"name\">erase</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName </span><span class=\"fn\">attrName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Attributes.html#Lean.AttrM\">AttrM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.Attribute.erase","kind":"def","line":479,"name":"Lean.Attribute.erase","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L479-L481"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.Attribute.add\"><span class=\"name\">Lean</span>.<span class=\"name\">Attribute</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName </span><span class=\"fn\">attrName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Lean/Attributes.html#Lean.AttributeKind\">AttributeKind</a> := <a href=\"./Lean/Attributes.html#Lean.AttributeKind.global\">AttributeKind.global</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Attributes.html#Lean.AttrM\">AttrM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.Attribute.add","kind":"def","line":475,"name":"Lean.Attribute.add","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L475-L477"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.registerAttributeOfBuilder\"><span class=\"name\">Lean</span>.<span class=\"name\">registerAttributeOfBuilder</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">builderId </span><span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Data/KVMap.html#Lean.DataValue\">DataValue</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.registerAttributeOfBuilder","kind":"def","line":467,"name":"Lean.registerAttributeOfBuilder","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L467-L473"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.getAttributeImpl\"><span class=\"name\">Lean</span>.<span class=\"name\">getAttributeImpl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">attrName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Lean/Attributes.html#Lean.AttributeImpl\">AttributeImpl</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.getAttributeImpl","kind":"def","line":461,"name":"Lean.getAttributeImpl","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L461-L465"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.getAttributeNames\"><span class=\"name\">Lean</span>.<span class=\"name\">getAttributeNames</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.getAttributeNames","kind":"def","line":457,"name":"Lean.getAttributeNames","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L457-L459"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.isAttribute\"><span class=\"name\">Lean</span>.<span class=\"name\">isAttribute</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">attrName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.isAttribute","kind":"def","line":454,"name":"Lean.isAttribute","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L454-L455"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.getBuiltinAttributeApplicationTime\"><span class=\"name\">Lean</span>.<span class=\"name\">getBuiltinAttributeApplicationTime</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Lean/Attributes.html#Lean.AttributeApplicationTime\">AttributeApplicationTime</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.getBuiltinAttributeApplicationTime","kind":"def","line":449,"name":"Lean.getBuiltinAttributeApplicationTime","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L449-L452"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.getBuiltinAttributeImpl\"><span class=\"name\">Lean</span>.<span class=\"name\">getBuiltinAttributeImpl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">attrName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Lean/Attributes.html#Lean.AttributeImpl\">AttributeImpl</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.getBuiltinAttributeImpl","kind":"def","line":443,"name":"Lean.getBuiltinAttributeImpl","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L443-L447"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.getBuiltinAttributeNames\"><span class=\"name\">Lean</span>.<span class=\"name\">getBuiltinAttributeNames</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span></div></div>","info":{"doc":"Return the name of all registered attributes. ","docLink":"./Lean/Attributes.html#Lean.getBuiltinAttributeNames","kind":"def","line":439,"name":"Lean.getBuiltinAttributeNames","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L439-L441"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.isBuiltinAttribute\"><span class=\"name\">Lean</span>.<span class=\"name\">isBuiltinAttribute</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Return true iff `n` is the name of a registered attribute. ","docLink":"./Lean/Attributes.html#Lean.isBuiltinAttribute","kind":"def","line":434,"name":"Lean.isBuiltinAttribute","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L434-L437"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.attributeExtension\"><span class=\"name\">Lean</span>.<span class=\"name\">attributeExtension</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Attributes.html#Lean.AttributeExtension\">AttributeExtension</a></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.attributeExtension","kind":"opaque","line":425,"name":"Lean.attributeExtension","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L425-L432"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.mkAttributeImplOfConstant\"><span class=\"name\">Lean</span>.<span class=\"name\">mkAttributeImplOfConstant</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">opts</span> : <a href=\"./Lean/Data/Options.html#Lean.Options\">Options</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Lean/Attributes.html#Lean.AttributeImpl\">AttributeImpl</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.mkAttributeImplOfConstant","kind":"opaque","line":407,"name":"Lean.mkAttributeImplOfConstant","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L407-L408"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.mkAttributeImplOfConstantUnsafe\"><span class=\"name\">Lean</span>.<span class=\"name\">mkAttributeImplOfConstantUnsafe</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">opts</span> : <a href=\"./Lean/Data/Options.html#Lean.Options\">Options</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Lean/Attributes.html#Lean.AttributeImpl\">AttributeImpl</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.mkAttributeImplOfConstantUnsafe","kind":"def","line":399,"name":"Lean.mkAttributeImplOfConstantUnsafe","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L399-L405"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.AttributeExtension\"><span class=\"name\">Lean</span>.<span class=\"name\">AttributeExtension</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.AttributeExtension","kind":"def","line":393,"name":"Lean.AttributeExtension","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L393-L393"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.instInhabitedAttributeExtensionState.default\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedAttributeExtensionState</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Attributes.html#Lean.AttributeExtensionState\">AttributeExtensionState</a></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.instInhabitedAttributeExtensionState.default","kind":"def","line":391,"name":"Lean.instInhabitedAttributeExtensionState.default","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L391-L391"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.instInhabitedAttributeExtensionState\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedAttributeExtensionState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Attributes.html#Lean.AttributeExtensionState\">AttributeExtensionState</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.instInhabitedAttributeExtensionState","kind":"instance","line":391,"name":"Lean.instInhabitedAttributeExtensionState","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L391-L391"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.AttributeExtensionState.map\"><span class=\"name\">Lean</span>.<span class=\"name\">AttributeExtensionState</span>.<span class=\"name\">map</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Attributes.html#Lean.AttributeExtensionState\">AttributeExtensionState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Lean/Attributes.html#Lean.AttributeImpl\">AttributeImpl</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.AttributeExtensionState.map","kind":"def","line":390,"name":"Lean.AttributeExtensionState.map","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L390-L390"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.AttributeExtensionState.newEntries\"><span class=\"name\">Lean</span>.<span class=\"name\">AttributeExtensionState</span>.<span class=\"name\">newEntries</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Attributes.html#Lean.AttributeExtensionState\">AttributeExtensionState</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Attributes.html#Lean.AttributeExtensionOLeanEntry\">AttributeExtensionOLeanEntry</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.AttributeExtensionState.newEntries","kind":"def","line":389,"name":"Lean.AttributeExtensionState.newEntries","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L389-L389"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.AttributeExtensionState.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">AttributeExtensionState</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">newEntries</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Attributes.html#Lean.AttributeExtensionOLeanEntry\">AttributeExtensionOLeanEntry</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">map</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Lean/Attributes.html#Lean.AttributeImpl\">AttributeImpl</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Attributes.html#Lean.AttributeExtensionState\">AttributeExtensionState</a></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.AttributeExtensionState.mk","kind":"ctor","line":388,"name":"Lean.AttributeExtensionState.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L388-L388"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.AttributeExtensionState\"><span class=\"name\">Lean</span>.<span class=\"name\">AttributeExtensionState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.AttributeExtensionState","kind":"structure","line":388,"name":"Lean.AttributeExtensionState","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L388-L391"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.mkAttributeImplOfEntry\"><span class=\"name\">Lean</span>.<span class=\"name\">mkAttributeImplOfEntry</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Attributes.html#Lean.AttributeExtensionOLeanEntry\">AttributeExtensionOLeanEntry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Lean/Attributes.html#Lean.AttributeImpl\">AttributeImpl</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.mkAttributeImplOfEntry","kind":"def","line":382,"name":"Lean.mkAttributeImplOfEntry","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L382-L386"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.AttributeExtensionOLeanEntry.args\"><span class=\"name\">Lean</span>.<span class=\"name\">AttributeExtensionOLeanEntry</span>.<span class=\"name\">args</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Attributes.html#Lean.AttributeExtensionOLeanEntry\">AttributeExtensionOLeanEntry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Data/KVMap.html#Lean.DataValue\">DataValue</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.AttributeExtensionOLeanEntry.args","kind":"def","line":380,"name":"Lean.AttributeExtensionOLeanEntry.args","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L380-L380"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.AttributeExtensionOLeanEntry.ref\"><span class=\"name\">Lean</span>.<span class=\"name\">AttributeExtensionOLeanEntry</span>.<span class=\"name\">ref</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Attributes.html#Lean.AttributeExtensionOLeanEntry\">AttributeExtensionOLeanEntry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.AttributeExtensionOLeanEntry.ref","kind":"def","line":379,"name":"Lean.AttributeExtensionOLeanEntry.ref","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L379-L379"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.AttributeExtensionOLeanEntry.builderId\"><span class=\"name\">Lean</span>.<span class=\"name\">AttributeExtensionOLeanEntry</span>.<span class=\"name\">builderId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Attributes.html#Lean.AttributeExtensionOLeanEntry\">AttributeExtensionOLeanEntry</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.AttributeExtensionOLeanEntry.builderId","kind":"def","line":378,"name":"Lean.AttributeExtensionOLeanEntry.builderId","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L378-L378"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.AttributeExtensionOLeanEntry.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">AttributeExtensionOLeanEntry</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">builderId </span><span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Data/KVMap.html#Lean.DataValue\">DataValue</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Attributes.html#Lean.AttributeExtensionOLeanEntry\">AttributeExtensionOLeanEntry</a></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.AttributeExtensionOLeanEntry.mk","kind":"ctor","line":377,"name":"Lean.AttributeExtensionOLeanEntry.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L377-L377"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.AttributeExtensionOLeanEntry\"><span class=\"name\">Lean</span>.<span class=\"name\">AttributeExtensionOLeanEntry</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.AttributeExtensionOLeanEntry","kind":"structure","line":377,"name":"Lean.AttributeExtensionOLeanEntry","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L377-L380"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.registerAttributeImplBuilder\"><span class=\"name\">Lean</span>.<span class=\"name\">registerAttributeImplBuilder</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">builderId</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">builder</span> : <a href=\"./Lean/Attributes.html#Lean.AttributeImplBuilder\">AttributeImplBuilder</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.registerAttributeImplBuilder","kind":"def","line":372,"name":"Lean.registerAttributeImplBuilder","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L372-L375"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.attributeImplBuilderTableRef\"><span class=\"name\">Lean</span>.<span class=\"name\">attributeImplBuilderTableRef</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <a href=\"./Lean/Attributes.html#Lean.AttributeImplBuilderTable\">AttributeImplBuilderTable</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.attributeImplBuilderTableRef","kind":"opaque","line":370,"name":"Lean.attributeImplBuilderTableRef","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L370-L370"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.AttributeImplBuilderTable\"><span class=\"name\">Lean</span>.<span class=\"name\">AttributeImplBuilderTable</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.AttributeImplBuilderTable","kind":"def","line":368,"name":"Lean.AttributeImplBuilderTable","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L368-L368"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.AttributeImplBuilder\"><span class=\"name\">Lean</span>.<span class=\"name\">AttributeImplBuilder</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.AttributeImplBuilder","kind":"def","line":367,"name":"Lean.AttributeImplBuilder","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L367-L367"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.EnumAttributes.setValue\"><span class=\"name\">Lean</span>.<span class=\"name\">EnumAttributes</span>.<span class=\"name\">setValue</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">attrs</span> : <span class=\"fn\"><a href=\"./Lean/Attributes.html#Lean.EnumAttributes\">EnumAttributes</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">val</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.EnumAttributes.setValue","kind":"def","line":351,"name":"Lean.EnumAttributes.setValue","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L351-L359"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.EnumAttributes.getValue\"><span class=\"name\">Lean</span>.<span class=\"name\">EnumAttributes</span>.<span class=\"name\">getValue</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">attr</span> : <span class=\"fn\"><a href=\"./Lean/Attributes.html#Lean.EnumAttributes\">EnumAttributes</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.EnumAttributes.getValue","kind":"def","line":343,"name":"Lean.EnumAttributes.getValue","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L343-L349"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.registerEnumAttributes\"><span class=\"name\">Lean</span>.<span class=\"name\">registerEnumAttributes</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">attrDescrs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">validate</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Lean/Attributes.html#Lean.AttrM\">AttrM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span></span> := <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>) (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <a href=\"./Init/Prelude.html#Unit.unit\">(</a><a href=\"./Init/Prelude.html#Unit.unit\">)</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">applicationTime</span> : <a href=\"./Lean/Attributes.html#Lean.AttributeApplicationTime\">AttributeApplicationTime</a> := <a href=\"./Lean/Attributes.html#Lean.AttributeApplicationTime.afterTypeChecking\">AttributeApplicationTime.afterTypeChecking</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> := by exact decl_name%)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">(<a href=\"./Lean/Attributes.html#Lean.EnumAttributes\">EnumAttributes</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.registerEnumAttributes","kind":"def","line":300,"name":"Lean.registerEnumAttributes","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L300-L339"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.instInhabitedEnumAttributes\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedEnumAttributes</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Lean/Attributes.html#Lean.EnumAttributes\">EnumAttributes</a> <span class=\"fn\">a✝</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.instInhabitedEnumAttributes","kind":"instance","line":298,"name":"Lean.instInhabitedEnumAttributes","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L298-L298"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.instInhabitedEnumAttributes.default\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedEnumAttributes</span>.<span class=\"name\">default</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Attributes.html#Lean.EnumAttributes\">EnumAttributes</a> <span class=\"fn\">a✝</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.instInhabitedEnumAttributes.default","kind":"def","line":298,"name":"Lean.instInhabitedEnumAttributes.default","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L298-L298"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.EnumAttributes.ext\"><span class=\"name\">Lean</span>.<span class=\"name\">EnumAttributes</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Attributes.html#Lean.EnumAttributes\">EnumAttributes</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.PersistentEnvExtension\">PersistentEnvExtension</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span>) (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span>) <span class=\"fn\">(<a href=\"./Lean/Data/NameMap/Basic.html#Lean.NameMap\">NameMap</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.EnumAttributes.ext","kind":"def","line":297,"name":"Lean.EnumAttributes.ext","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L297-L297"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.EnumAttributes.attrs\"><span class=\"name\">Lean</span>.<span class=\"name\">EnumAttributes</span>.<span class=\"name\">attrs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Attributes.html#Lean.EnumAttributes\">EnumAttributes</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Attributes.html#Lean.AttributeImpl\">AttributeImpl</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.EnumAttributes.attrs","kind":"def","line":296,"name":"Lean.EnumAttributes.attrs","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L296-L296"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.EnumAttributes.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">EnumAttributes</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">attrs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Attributes.html#Lean.AttributeImpl\">AttributeImpl</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ext</span> : <span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.PersistentEnvExtension\">PersistentEnvExtension</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span>) (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span>) <span class=\"fn\">(<a href=\"./Lean/Data/NameMap/Basic.html#Lean.NameMap\">NameMap</a> <span class=\"fn\">α</span>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Attributes.html#Lean.EnumAttributes\">EnumAttributes</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.EnumAttributes.mk","kind":"ctor","line":295,"name":"Lean.EnumAttributes.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L295-L295"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.EnumAttributes\"><span class=\"name\">Lean</span>.<span class=\"name\">EnumAttributes</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Given a list `[a₁, ..., a_n]` of elements of type `α`, `EnumAttributes` provides an attribute `Attr_i` for\nassociating a value `a_i` with an declaration. `α` is usually an enumeration type.\nNote that whenever we register an `EnumAttributes`, we create `n` attributes, but only one environment extension. ","docLink":"./Lean/Attributes.html#Lean.EnumAttributes","kind":"structure","line":291,"name":"Lean.EnumAttributes","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L291-L298"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.ParametricAttribute.setParam\"><span class=\"name\">Lean</span>.<span class=\"name\">ParametricAttribute</span>.<span class=\"name\">setParam</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">attr</span> : <span class=\"fn\"><a href=\"./Lean/Attributes.html#Lean.ParametricAttribute\">ParametricAttribute</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">param</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.ParametricAttribute.setParam","kind":"def","line":281,"name":"Lean.ParametricAttribute.setParam","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L281-L287"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.ParametricAttribute.getParam?\"><span class=\"name\">Lean</span>.<span class=\"name\">ParametricAttribute</span>.<span class=\"name\">getParam?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">α</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">attr</span> : <span class=\"fn\"><a href=\"./Lean/Attributes.html#Lean.ParametricAttribute\">ParametricAttribute</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.ParametricAttribute.getParam?","kind":"def","line":269,"name":"Lean.ParametricAttribute.getParam?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L269-L279"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.registerParametricAttribute\"><span class=\"name\">Lean</span>.<span class=\"name\">registerParametricAttribute</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">impl</span> : <span class=\"fn\"><a href=\"./Lean/Attributes.html#Lean.ParametricAttributeImpl\">ParametricAttributeImpl</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">(<a href=\"./Lean/Attributes.html#Lean.ParametricAttribute\">ParametricAttribute</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.registerParametricAttribute","kind":"def","line":237,"name":"Lean.registerParametricAttribute","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L237-L265"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.ParametricAttributeImpl.preserveOrder\"><span class=\"name\">Lean</span>.<span class=\"name\">ParametricAttributeImpl</span>.<span class=\"name\">preserveOrder</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Attributes.html#Lean.ParametricAttributeImpl\">ParametricAttributeImpl</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"If set, entries are not resorted on export and `getParam?` will fall back to a linear instead of\nbinary search insde an imported module's entries.\n","docLink":"./Lean/Attributes.html#Lean.ParametricAttributeImpl.preserveOrder","kind":"def","line":235,"name":"Lean.ParametricAttributeImpl.preserveOrder","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L235-L235"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.ParametricAttributeImpl.afterImport\"><span class=\"name\">Lean</span>.<span class=\"name\">ParametricAttributeImpl</span>.<span class=\"name\">afterImport</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Attributes.html#Lean.ParametricAttributeImpl\">ParametricAttributeImpl</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span>))</span></span> → <span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.ImportM\">ImportM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.ParametricAttributeImpl.afterImport","kind":"def","line":230,"name":"Lean.ParametricAttributeImpl.afterImport","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L230-L230"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.ParametricAttributeImpl.afterSet\"><span class=\"name\">Lean</span>.<span class=\"name\">ParametricAttributeImpl</span>.<span class=\"name\">afterSet</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Attributes.html#Lean.ParametricAttributeImpl\">ParametricAttributeImpl</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Lean/Attributes.html#Lean.AttrM\">AttrM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.ParametricAttributeImpl.afterSet","kind":"def","line":229,"name":"Lean.ParametricAttributeImpl.afterSet","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L229-L229"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.ParametricAttributeImpl.getParam\"><span class=\"name\">Lean</span>.<span class=\"name\">ParametricAttributeImpl</span>.<span class=\"name\">getParam</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Attributes.html#Lean.ParametricAttributeImpl\">ParametricAttributeImpl</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> → <span class=\"fn\"><a href=\"./Lean/Attributes.html#Lean.AttrM\">AttrM</a> <span class=\"fn\">α</span></span></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.ParametricAttributeImpl.getParam","kind":"def","line":228,"name":"Lean.ParametricAttributeImpl.getParam","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L228-L228"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.ParametricAttributeImpl.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">ParametricAttributeImpl</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toAttributeImplCore</span> : <a href=\"./Lean/Attributes.html#Lean.AttributeImplCore\">AttributeImplCore</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">getParam</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> → <span class=\"fn\"><a href=\"./Lean/Attributes.html#Lean.AttrM\">AttrM</a> <span class=\"fn\">α</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">afterSet</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Lean/Attributes.html#Lean.AttrM\">AttrM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">afterImport</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span>))</span></span> → <span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.ImportM\">ImportM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">preserveOrder</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Attributes.html#Lean.ParametricAttributeImpl\">ParametricAttributeImpl</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.ParametricAttributeImpl.mk","kind":"ctor","line":227,"name":"Lean.ParametricAttributeImpl.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L227-L227"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.ParametricAttributeImpl.toAttributeImplCore\"><span class=\"name\">Lean</span>.<span class=\"name\">ParametricAttributeImpl</span>.<span class=\"name\">toAttributeImplCore</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Attributes.html#Lean.ParametricAttributeImpl\">ParametricAttributeImpl</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Attributes.html#Lean.AttributeImplCore\">AttributeImplCore</a></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.ParametricAttributeImpl.toAttributeImplCore","kind":"def","line":227,"name":"Lean.ParametricAttributeImpl.toAttributeImplCore","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L227-L235"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.ParametricAttributeImpl\"><span class=\"name\">Lean</span>.<span class=\"name\">ParametricAttributeImpl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_extends\">extends</span> <a href=\"./Lean/Attributes.html#Lean.AttributeImplCore\">Lean.AttributeImplCore</a><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.ParametricAttributeImpl","kind":"structure","line":227,"name":"Lean.ParametricAttributeImpl","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L227-L235"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.instInhabitedParametricAttribute\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedParametricAttribute</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Lean/Attributes.html#Lean.ParametricAttribute\">ParametricAttribute</a> <span class=\"fn\">a✝</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.instInhabitedParametricAttribute","kind":"instance","line":225,"name":"Lean.instInhabitedParametricAttribute","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L225-L225"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.instInhabitedParametricAttribute.default\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedParametricAttribute</span>.<span class=\"name\">default</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a✝</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Attributes.html#Lean.ParametricAttribute\">ParametricAttribute</a> <span class=\"fn\">a✝</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.instInhabitedParametricAttribute.default","kind":"def","line":225,"name":"Lean.instInhabitedParametricAttribute.default","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L225-L225"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.ParametricAttribute.preserveOrder\"><span class=\"name\">Lean</span>.<span class=\"name\">ParametricAttribute</span>.<span class=\"name\">preserveOrder</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Attributes.html#Lean.ParametricAttribute\">ParametricAttribute</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.ParametricAttribute.preserveOrder","kind":"def","line":224,"name":"Lean.ParametricAttribute.preserveOrder","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L224-L224"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.ParametricAttribute.ext\"><span class=\"name\">Lean</span>.<span class=\"name\">ParametricAttribute</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Attributes.html#Lean.ParametricAttribute\">ParametricAttribute</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.PersistentEnvExtension\">PersistentEnvExtension</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span>) (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span>) (<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Lean/Data/NameMap/Basic.html#Lean.NameMap\">NameMap</a> <span class=\"fn\">α</span></span>)</span></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.ParametricAttribute.ext","kind":"def","line":223,"name":"Lean.ParametricAttribute.ext","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L223-L223"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.ParametricAttribute.attr\"><span class=\"name\">Lean</span>.<span class=\"name\">ParametricAttribute</span>.<span class=\"name\">attr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Lean/Attributes.html#Lean.ParametricAttribute\">ParametricAttribute</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Attributes.html#Lean.AttributeImpl\">AttributeImpl</a></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.ParametricAttribute.attr","kind":"def","line":222,"name":"Lean.ParametricAttribute.attr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L222-L222"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.ParametricAttribute.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">ParametricAttribute</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">attr</span> : <a href=\"./Lean/Attributes.html#Lean.AttributeImpl\">AttributeImpl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ext</span> : <span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.PersistentEnvExtension\">PersistentEnvExtension</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span>) (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\">α</span>) (<span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Lean/Data/NameMap/Basic.html#Lean.NameMap\">NameMap</a> <span class=\"fn\">α</span></span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">preserveOrder</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Attributes.html#Lean.ParametricAttribute\">ParametricAttribute</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.ParametricAttribute.mk","kind":"ctor","line":221,"name":"Lean.ParametricAttribute.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L221-L221"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.ParametricAttribute\"><span class=\"name\">Lean</span>.<span class=\"name\">ParametricAttribute</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A `TagAttribute` variant where we can attach parameters to attributes.\nIt is slightly more expensive and consumes a little bit more memory than `TagAttribute`.\n\nThey provide the function `pAttr.getParam env decl` which returns `some p` iff declaration `decl`\ncontains the attribute `pAttr` with parameter `p`. ","docLink":"./Lean/Attributes.html#Lean.ParametricAttribute","kind":"structure","line":215,"name":"Lean.ParametricAttribute","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L215-L225"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.TagAttribute.hasTag\"><span class=\"name\">Lean</span>.<span class=\"name\">TagAttribute</span>.<span class=\"name\">hasTag</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">attr</span> : <a href=\"./Lean/Attributes.html#Lean.TagAttribute\">TagAttribute</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.TagAttribute.hasTag","kind":"def","line":208,"name":"Lean.TagAttribute.hasTag","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L208-L211"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.TagAttribute.setTag\"><span class=\"name\">Lean</span>.<span class=\"name\">TagAttribute</span>.<span class=\"name\">setTag</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Exception.html#Lean.MonadError\">MonadError</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">MonadEnv</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">attr</span> : <a href=\"./Lean/Attributes.html#Lean.TagAttribute\">TagAttribute</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Sets the attribute (without running `validate`) ","docLink":"./Lean/Attributes.html#Lean.TagAttribute.setTag","kind":"def","line":199,"name":"Lean.TagAttribute.setTag","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L199-L206"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.registerTagAttribute\"><span class=\"name\">Lean</span>.<span class=\"name\">registerTagAttribute</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">descr</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">validate</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <span class=\"fn\"><a href=\"./Lean/Attributes.html#Lean.AttrM\">AttrM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span> := <span class=\"fn\">fun (<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>) =&gt; <span class=\"fn\"><a href=\"./Init/Prelude.html#Pure.pure\">pure</a> <a href=\"./Init/Prelude.html#Unit.unit\">(</a><a href=\"./Init/Prelude.html#Unit.unit\">)</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> := by exact decl_name%)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">applicationTime</span> : <a href=\"./Lean/Attributes.html#Lean.AttributeApplicationTime\">AttributeApplicationTime</a> := <a href=\"./Lean/Attributes.html#Lean.AttributeApplicationTime.afterTypeChecking\">AttributeApplicationTime.afterTypeChecking</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">asyncMode</span> : <a href=\"./Lean/Environment.html#Lean.EnvExtension.AsyncMode\">EnvExtension.AsyncMode</a> := <a href=\"./Lean/Environment.html#Lean.EnvExtension.AsyncMode.mainOnly\">EnvExtension.AsyncMode.mainOnly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Lean/Attributes.html#Lean.TagAttribute\">TagAttribute</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.registerTagAttribute","kind":"def","line":159,"name":"Lean.registerTagAttribute","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L159-L195"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.instInhabitedTagAttribute\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedTagAttribute</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Attributes.html#Lean.TagAttribute\">TagAttribute</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.instInhabitedTagAttribute","kind":"instance","line":157,"name":"Lean.instInhabitedTagAttribute","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L157-L157"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.instInhabitedTagAttribute.default\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedTagAttribute</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Attributes.html#Lean.TagAttribute\">TagAttribute</a></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.instInhabitedTagAttribute.default","kind":"def","line":157,"name":"Lean.instInhabitedTagAttribute.default","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L157-L157"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.TagAttribute.ext\"><span class=\"name\">Lean</span>.<span class=\"name\">TagAttribute</span>.<span class=\"name\">ext</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Attributes.html#Lean.TagAttribute\">TagAttribute</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.PersistentEnvExtension\">PersistentEnvExtension</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Lean/Data/NameMap/Basic.html#Lean.NameSet\">NameSet</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.TagAttribute.ext","kind":"def","line":156,"name":"Lean.TagAttribute.ext","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L156-L156"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.TagAttribute.attr\"><span class=\"name\">Lean</span>.<span class=\"name\">TagAttribute</span>.<span class=\"name\">attr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Attributes.html#Lean.TagAttribute\">TagAttribute</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Attributes.html#Lean.AttributeImpl\">AttributeImpl</a></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.TagAttribute.attr","kind":"def","line":155,"name":"Lean.TagAttribute.attr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L155-L155"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.TagAttribute.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">TagAttribute</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">attr</span> : <a href=\"./Lean/Attributes.html#Lean.AttributeImpl\">AttributeImpl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ext</span> : <span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.PersistentEnvExtension\">PersistentEnvExtension</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Lean/Data/NameMap/Basic.html#Lean.NameSet\">NameSet</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Attributes.html#Lean.TagAttribute\">TagAttribute</a></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.TagAttribute.mk","kind":"ctor","line":154,"name":"Lean.TagAttribute.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L154-L154"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.TagAttribute\"><span class=\"name\">Lean</span>.<span class=\"name\">TagAttribute</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Tag attributes are simple and efficient. They are useful for marking declarations in the modules where\nthey were defined.\n\nThe startup cost for this kind of attribute is very small since `addImportedFn` is a constant function.\n\nThey provide the predicate `tagAttr.hasTag env decl` which returns true iff declaration `decl`\nis tagged in the environment `env`. ","docLink":"./Lean/Attributes.html#Lean.TagAttribute","kind":"structure","line":146,"name":"Lean.TagAttribute","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L146-L157"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.throwAttrDeclNotOfExpectedType\"><span class=\"name\">Lean</span>.<span class=\"name\">throwAttrDeclNotOfExpectedType</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Exception.html#Lean.MonadError\">MonadError</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">attrName </span><span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">givenType </span><span class=\"fn\">expectedType</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.throwAttrDeclNotOfExpectedType","kind":"def","line":141,"name":"Lean.throwAttrDeclNotOfExpectedType","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L141-L143"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.throwAttrNotInAsyncCtx\"><span class=\"name\">Lean</span>.<span class=\"name\">throwAttrNotInAsyncCtx</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Exception.html#Lean.MonadError\">MonadError</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">attrName </span><span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">asyncPrefix?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.throwAttrNotInAsyncCtx","kind":"def","line":137,"name":"Lean.throwAttrNotInAsyncCtx","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L137-L139"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.throwAttrDeclInImportedModule\"><span class=\"name\">Lean</span>.<span class=\"name\">throwAttrDeclInImportedModule</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Exception.html#Lean.MonadError\">MonadError</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">attrName </span><span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.throwAttrDeclInImportedModule","kind":"def","line":134,"name":"Lean.throwAttrDeclInImportedModule","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L134-L135"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.throwAttrMustBeGlobal\"><span class=\"name\">Lean</span>.<span class=\"name\">throwAttrMustBeGlobal</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Exception.html#Lean.MonadError\">MonadError</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Lean/Attributes.html#Lean.AttributeKind\">AttributeKind</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.throwAttrMustBeGlobal","kind":"def","line":131,"name":"Lean.throwAttrMustBeGlobal","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L131-L132"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.Attribute.Builtin.getPrio\"><span class=\"name\">Lean</span>.<span class=\"name\">Attribute</span>.<span class=\"name\">Builtin</span>.<span class=\"name\">getPrio</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Attributes.html#Lean.AttrM\">AttrM</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.Attribute.Builtin.getPrio","kind":"def","line":122,"name":"Lean.Attribute.Builtin.getPrio","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L122-L126"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.getAttrParamOptPrio\"><span class=\"name\">Lean</span>.<span class=\"name\">getAttrParamOptPrio</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">optPrioStx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Attributes.html#Lean.AttrM\">AttrM</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.getAttrParamOptPrio","kind":"def","line":115,"name":"Lean.getAttrParamOptPrio","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L115-L120"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.Attribute.Builtin.getId\"><span class=\"name\">Lean</span>.<span class=\"name\">Attribute</span>.<span class=\"name\">Builtin</span>.<span class=\"name\">getId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Attributes.html#Lean.AttrM\">AttrM</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.Attribute.Builtin.getId","kind":"def","line":112,"name":"Lean.Attribute.Builtin.getId","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L112-L113"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.Attribute.Builtin.getId?\"><span class=\"name\">Lean</span>.<span class=\"name\">Attribute</span>.<span class=\"name\">Builtin</span>.<span class=\"name\">getId?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Attributes.html#Lean.AttrM\">AttrM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.Attribute.Builtin.getId?","kind":"def","line":108,"name":"Lean.Attribute.Builtin.getId?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L108-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.Attribute.Builtin.getIdent\"><span class=\"name\">Lean</span>.<span class=\"name\">Attribute</span>.<span class=\"name\">Builtin</span>.<span class=\"name\">getIdent</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Attributes.html#Lean.AttrM\">AttrM</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.Attribute.Builtin.getIdent","kind":"def","line":102,"name":"Lean.Attribute.Builtin.getIdent","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L102-L106"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.Attribute.Builtin.getIdent?\"><span class=\"name\">Lean</span>.<span class=\"name\">Attribute</span>.<span class=\"name\">Builtin</span>.<span class=\"name\">getIdent?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Attributes.html#Lean.AttrM\">AttrM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.Attribute.Builtin.getIdent?","kind":"def","line":90,"name":"Lean.Attribute.Builtin.getIdent?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L90-L100"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.Attribute.Builtin.ensureNoArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Attribute</span>.<span class=\"name\">Builtin</span>.<span class=\"name\">ensureNoArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Attributes.html#Lean.AttrM\">AttrM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.Attribute.Builtin.ensureNoArgs","kind":"def","line":81,"name":"Lean.Attribute.Builtin.ensureNoArgs","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L81-L88"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.registerBuiltinAttribute\"><span class=\"name\">Lean</span>.<span class=\"name\">registerBuiltinAttribute</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">attr</span> : <a href=\"./Lean/Attributes.html#Lean.AttributeImpl\">AttributeImpl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Low level attribute registration function. ","docLink":"./Lean/Attributes.html#Lean.registerBuiltinAttribute","kind":"def","line":62,"name":"Lean.registerBuiltinAttribute","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L62-L68"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.attributeMapRef\"><span class=\"name\">Lean</span>.<span class=\"name\">attributeMapRef</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <span class=\"fn\">(<a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Lean/Attributes.html#Lean.AttributeImpl\">AttributeImpl</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.attributeMapRef","kind":"opaque","line":60,"name":"Lean.attributeMapRef","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L60-L60"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.instInhabitedAttributeImpl.default\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedAttributeImpl</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Attributes.html#Lean.AttributeImpl\">AttributeImpl</a></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.instInhabitedAttributeImpl.default","kind":"def","line":58,"name":"Lean.instInhabitedAttributeImpl.default","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L58-L58"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.instInhabitedAttributeImpl\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedAttributeImpl</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Attributes.html#Lean.AttributeImpl\">AttributeImpl</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.instInhabitedAttributeImpl","kind":"instance","line":58,"name":"Lean.instInhabitedAttributeImpl","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L58-L58"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.AttributeImpl.erase\"><span class=\"name\">Lean</span>.<span class=\"name\">AttributeImpl</span>.<span class=\"name\">erase</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Attributes.html#Lean.AttributeImpl\">AttributeImpl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Attributes.html#Lean.AttrM\">AttrM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.AttributeImpl.erase","kind":"def","line":57,"name":"Lean.AttributeImpl.erase","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L57-L57"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.AttributeImpl.add\"><span class=\"name\">Lean</span>.<span class=\"name\">AttributeImpl</span>.<span class=\"name\">add</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Attributes.html#Lean.AttributeImpl\">AttributeImpl</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">decl</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Lean/Attributes.html#Lean.AttributeKind\">AttributeKind</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Attributes.html#Lean.AttrM\">AttrM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"This is run when the attribute is applied to a declaration `decl`. `stx` is the syntax of the attribute including arguments. ","docLink":"./Lean/Attributes.html#Lean.AttributeImpl.add","kind":"def","line":56,"name":"Lean.AttributeImpl.add","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L56-L56"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.AttributeImpl.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">AttributeImpl</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toAttributeImplCore</span> : <a href=\"./Lean/Attributes.html#Lean.AttributeImplCore\">AttributeImplCore</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">add</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> → <span class=\"fn\"><a href=\"./Lean/Attributes.html#Lean.AttributeKind\">AttributeKind</a> → <span class=\"fn\"><a href=\"./Lean/Attributes.html#Lean.AttrM\">AttrM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">erase</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <span class=\"fn\"><a href=\"./Lean/Attributes.html#Lean.AttrM\">AttrM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Attributes.html#Lean.AttributeImpl\">AttributeImpl</a></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.AttributeImpl.mk","kind":"ctor","line":54,"name":"Lean.AttributeImpl.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L54-L54"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.AttributeImpl.toAttributeImplCore\"><span class=\"name\">Lean</span>.<span class=\"name\">AttributeImpl</span>.<span class=\"name\">toAttributeImplCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Attributes.html#Lean.AttributeImpl\">AttributeImpl</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Attributes.html#Lean.AttributeImplCore\">AttributeImplCore</a></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.AttributeImpl.toAttributeImplCore","kind":"def","line":54,"name":"Lean.AttributeImpl.toAttributeImplCore","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L54-L58"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.AttributeImpl\"><span class=\"name\">Lean</span>.<span class=\"name\">AttributeImpl</span></a></span><span class=\"decl_extends\">extends</span> <a href=\"./Lean/Attributes.html#Lean.AttributeImplCore\">Lean.AttributeImplCore</a><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.AttributeImpl","kind":"structure","line":54,"name":"Lean.AttributeImpl","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L54-L58"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.instToStringAttributeKind\"><span class=\"name\">Lean</span>.<span class=\"name\">instToStringAttributeKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Lean/Attributes.html#Lean.AttributeKind\">AttributeKind</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.instToStringAttributeKind","kind":"instance","line":48,"name":"Lean.instToStringAttributeKind","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L48-L52"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.instInhabitedAttributeKind\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedAttributeKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Attributes.html#Lean.AttributeKind\">AttributeKind</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.instInhabitedAttributeKind","kind":"instance","line":46,"name":"Lean.instInhabitedAttributeKind","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L46-L46"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.instInhabitedAttributeKind.default\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedAttributeKind</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Attributes.html#Lean.AttributeKind\">AttributeKind</a></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.instInhabitedAttributeKind.default","kind":"def","line":46,"name":"Lean.instInhabitedAttributeKind.default","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L46-L46"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.instBEqAttributeKind\"><span class=\"name\">Lean</span>.<span class=\"name\">instBEqAttributeKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Attributes.html#Lean.AttributeKind\">AttributeKind</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.instBEqAttributeKind","kind":"instance","line":46,"name":"Lean.instBEqAttributeKind","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L46-L46"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.instBEqAttributeKind.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">instBEqAttributeKind</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Attributes.html#Lean.AttributeKind\">AttributeKind</a> → <a href=\"./Lean/Attributes.html#Lean.AttributeKind\">AttributeKind</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.instBEqAttributeKind.beq","kind":"def","line":46,"name":"Lean.instBEqAttributeKind.beq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L46-L46"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.AttributeKind.scoped\"><span class=\"name\">Lean</span>.<span class=\"name\">AttributeKind</span>.<span class=\"name\">scoped</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Attributes.html#Lean.AttributeKind\">AttributeKind</a></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.AttributeKind.scoped","kind":"ctor","line":45,"name":"Lean.AttributeKind.scoped","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L45-L45"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.AttributeKind.local\"><span class=\"name\">Lean</span>.<span class=\"name\">AttributeKind</span>.<span class=\"name\">local</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Attributes.html#Lean.AttributeKind\">AttributeKind</a></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.AttributeKind.local","kind":"ctor","line":45,"name":"Lean.AttributeKind.local","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L45-L45"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.AttributeKind.global\"><span class=\"name\">Lean</span>.<span class=\"name\">AttributeKind</span>.<span class=\"name\">global</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Attributes.html#Lean.AttributeKind\">AttributeKind</a></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.AttributeKind.global","kind":"ctor","line":45,"name":"Lean.AttributeKind.global","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L45-L45"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.AttributeKind\"><span class=\"name\">Lean</span>.<span class=\"name\">AttributeKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"You can tag attributes with the 'local' or 'scoped' kind.\nFor example: `attribute [local myattr, scoped yourattr, theirattr]`.\n\nThis is used to indicate how an attribute should be scoped.\n- local means that the attribute should only be applied in the current scope and forgotten once the current section, namespace, or file is closed.\n- scoped means that the attribute should only be applied while the namespace is open.\n- global means that the attribute should always be applied.\n\nNote that the attribute handler (`AttributeImpl.add`) is responsible for interpreting the kind and\nmaking sure that these kinds are respected.\n","docLink":"./Lean/Attributes.html#Lean.AttributeKind","kind":"inductive","line":33,"name":"Lean.AttributeKind","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L33-L46"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.instInhabitedAttributeImplCore\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedAttributeImplCore</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Attributes.html#Lean.AttributeImplCore\">AttributeImplCore</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.instInhabitedAttributeImplCore","kind":"instance","line":31,"name":"Lean.instInhabitedAttributeImplCore","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L31-L31"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.instInhabitedAttributeImplCore.default\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedAttributeImplCore</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Attributes.html#Lean.AttributeImplCore\">AttributeImplCore</a></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.instInhabitedAttributeImplCore.default","kind":"def","line":31,"name":"Lean.instInhabitedAttributeImplCore.default","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L31-L31"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.AttributeImplCore.applicationTime\"><span class=\"name\">Lean</span>.<span class=\"name\">AttributeImplCore</span>.<span class=\"name\">applicationTime</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Attributes.html#Lean.AttributeImplCore\">AttributeImplCore</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Attributes.html#Lean.AttributeApplicationTime\">AttributeApplicationTime</a></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.AttributeImplCore.applicationTime","kind":"def","line":30,"name":"Lean.AttributeImplCore.applicationTime","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L30-L30"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.AttributeImplCore.descr\"><span class=\"name\">Lean</span>.<span class=\"name\">AttributeImplCore</span>.<span class=\"name\">descr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Attributes.html#Lean.AttributeImplCore\">AttributeImplCore</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.AttributeImplCore.descr","kind":"def","line":29,"name":"Lean.AttributeImplCore.descr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L29-L29"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.AttributeImplCore.name\"><span class=\"name\">Lean</span>.<span class=\"name\">AttributeImplCore</span>.<span class=\"name\">name</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Attributes.html#Lean.AttributeImplCore\">AttributeImplCore</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.AttributeImplCore.name","kind":"def","line":28,"name":"Lean.AttributeImplCore.name","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L28-L28"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.AttributeImplCore.ref\"><span class=\"name\">Lean</span>.<span class=\"name\">AttributeImplCore</span>.<span class=\"name\">ref</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Attributes.html#Lean.AttributeImplCore\">AttributeImplCore</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"This is used as the target for go-to-definition queries for simple attributes ","docLink":"./Lean/Attributes.html#Lean.AttributeImplCore.ref","kind":"def","line":27,"name":"Lean.AttributeImplCore.ref","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L27-L27"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.AttributeImplCore.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">AttributeImplCore</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> := by exact decl_name%)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">descr</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">applicationTime</span> : <a href=\"./Lean/Attributes.html#Lean.AttributeApplicationTime\">AttributeApplicationTime</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Attributes.html#Lean.AttributeImplCore\">AttributeImplCore</a></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.AttributeImplCore.mk","kind":"ctor","line":25,"name":"Lean.AttributeImplCore.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L25-L25"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.AttributeImplCore\"><span class=\"name\">Lean</span>.<span class=\"name\">AttributeImplCore</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.AttributeImplCore","kind":"structure","line":25,"name":"Lean.AttributeImplCore","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L25-L31"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.instMonadLiftImportMAttrM\"><span class=\"name\">Lean</span>.<span class=\"name\">instMonadLiftImportMAttrM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift\">MonadLift</a> <a href=\"./Lean/Environment.html#Lean.ImportM\">ImportM</a> <a href=\"./Lean/Attributes.html#Lean.AttrM\">AttrM</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.instMonadLiftImportMAttrM","kind":"instance","line":22,"name":"Lean.instMonadLiftImportMAttrM","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L22-L23"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.AttrM\"><span class=\"name\">Lean</span>.<span class=\"name\">AttrM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.AttrM","kind":"def","line":20,"name":"Lean.AttrM","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L20-L20"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.instBEqAttributeApplicationTime.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">instBEqAttributeApplicationTime</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Attributes.html#Lean.AttributeApplicationTime\">AttributeApplicationTime</a> → <a href=\"./Lean/Attributes.html#Lean.AttributeApplicationTime\">AttributeApplicationTime</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.instBEqAttributeApplicationTime.beq","kind":"def","line":18,"name":"Lean.instBEqAttributeApplicationTime.beq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L18-L18"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.instBEqAttributeApplicationTime\"><span class=\"name\">Lean</span>.<span class=\"name\">instBEqAttributeApplicationTime</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Attributes.html#Lean.AttributeApplicationTime\">AttributeApplicationTime</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.instBEqAttributeApplicationTime","kind":"instance","line":18,"name":"Lean.instBEqAttributeApplicationTime","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L18-L18"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.instInhabitedAttributeApplicationTime\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedAttributeApplicationTime</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Attributes.html#Lean.AttributeApplicationTime\">AttributeApplicationTime</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.instInhabitedAttributeApplicationTime","kind":"instance","line":18,"name":"Lean.instInhabitedAttributeApplicationTime","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L18-L18"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.instInhabitedAttributeApplicationTime.default\"><span class=\"name\">Lean</span>.<span class=\"name\">instInhabitedAttributeApplicationTime</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Attributes.html#Lean.AttributeApplicationTime\">AttributeApplicationTime</a></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.instInhabitedAttributeApplicationTime.default","kind":"def","line":18,"name":"Lean.instInhabitedAttributeApplicationTime.default","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L18-L18"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.AttributeApplicationTime.beforeElaboration\"><span class=\"name\">Lean</span>.<span class=\"name\">AttributeApplicationTime</span>.<span class=\"name\">beforeElaboration</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Attributes.html#Lean.AttributeApplicationTime\">AttributeApplicationTime</a></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.AttributeApplicationTime.beforeElaboration","kind":"ctor","line":17,"name":"Lean.AttributeApplicationTime.beforeElaboration","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L17-L17"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.AttributeApplicationTime.afterCompilation\"><span class=\"name\">Lean</span>.<span class=\"name\">AttributeApplicationTime</span>.<span class=\"name\">afterCompilation</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Attributes.html#Lean.AttributeApplicationTime\">AttributeApplicationTime</a></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.AttributeApplicationTime.afterCompilation","kind":"ctor","line":17,"name":"Lean.AttributeApplicationTime.afterCompilation","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L17-L17"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.AttributeApplicationTime.afterTypeChecking\"><span class=\"name\">Lean</span>.<span class=\"name\">AttributeApplicationTime</span>.<span class=\"name\">afterTypeChecking</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Attributes.html#Lean.AttributeApplicationTime\">AttributeApplicationTime</a></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.AttributeApplicationTime.afterTypeChecking","kind":"ctor","line":17,"name":"Lean.AttributeApplicationTime.afterTypeChecking","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L17-L17"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Attributes.html#Lean.AttributeApplicationTime\"><span class=\"name\">Lean</span>.<span class=\"name\">AttributeApplicationTime</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Attributes.html#Lean.AttributeApplicationTime","kind":"inductive","line":16,"name":"Lean.AttributeApplicationTime","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Attributes.lean#L16-L18"}}],"imports":["Lean.CoreM","Lean.MonadEnv"],"instances":[{"className":"Inhabited","name":"Lean.instInhabitedAttributeApplicationTime","typeNames":["Lean.AttributeApplicationTime"]},{"className":"BEq","name":"Lean.instBEqAttributeApplicationTime","typeNames":["Lean.AttributeApplicationTime"]},{"className":"MonadLift","name":"Lean.instMonadLiftImportMAttrM","typeNames":["Lean.ImportM","Lean.AttrM"]},{"className":"Inhabited","name":"Lean.instInhabitedAttributeImplCore","typeNames":["Lean.AttributeImplCore"]},{"className":"BEq","name":"Lean.instBEqAttributeKind","typeNames":["Lean.AttributeKind"]},{"className":"Inhabited","name":"Lean.instInhabitedAttributeKind","typeNames":["Lean.AttributeKind"]},{"className":"ToString","name":"Lean.instToStringAttributeKind","typeNames":["Lean.AttributeKind"]},{"className":"Inhabited","name":"Lean.instInhabitedAttributeImpl","typeNames":["Lean.AttributeImpl"]},{"className":"Inhabited","name":"Lean.instInhabitedTagAttribute","typeNames":["Lean.TagAttribute"]},{"className":"Inhabited","name":"Lean.instInhabitedParametricAttribute","typeNames":["Lean.ParametricAttribute"]},{"className":"Inhabited","name":"Lean.instInhabitedEnumAttributes","typeNames":["Lean.EnumAttributes"]},{"className":"Inhabited","name":"Lean.instInhabitedAttributeExtensionState","typeNames":["Lean.AttributeExtensionState"]}],"name":"Lean.Attributes"}