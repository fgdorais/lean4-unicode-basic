{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.evalRIntro\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">evalRIntro</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.Tactic\">Tactic</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.evalRIntro","kind":"def","line":553,"name":"Lean.Elab.Tactic.RCases.evalRIntro","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/RCases.lean#L553-L558"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.evalObtain\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">evalObtain</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.Tactic\">Tactic</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.evalObtain","kind":"def","line":533,"name":"Lean.Elab.Tactic.RCases.evalObtain","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/RCases.lean#L533-L551"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.evalRCases\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">evalRCases</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.Tactic\">Tactic</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.evalRCases","kind":"def","line":520,"name":"Lean.Elab.Tactic.RCases.evalRCases","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/RCases.lean#L520-L531"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.rintro\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">rintro</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pats</span> : <a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">TSyntaxArray</a> <span class=\"fn\">`rintroPat</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ty?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Term\">Term</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span></div></div>","info":{"doc":"The implementation of the `rintro` tactic. It takes a list of patterns `pats` and\nan optional type ascription `ty?` and introduces the patterns, resulting in zero or more goals.\n","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.rintro","kind":"def","line":512,"name":"Lean.Elab.Tactic.RCases.rintro","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/RCases.lean#L512-L518"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.rintroContinue\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">rintroContinue</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fs</span> : <a href=\"./Lean/Meta/Tactic/FVarSubst.html#Lean.Meta.FVarSubst\">Meta.FVarSubst</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">clears</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pats</span> : <a href=\"./Init/Prelude.html#Lean.TSyntaxArray\">TSyntaxArray</a> <span class=\"fn\">`rintroPat</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ty?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Term\">Term</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cont</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/FVarSubst.html#Lean.Meta.FVarSubst\">Meta.FVarSubst</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"This introduces the list of patterns `pats`. It has the same arguments as `rcasesCore`, plus:\n* `ty?`: the nearest enclosing type ascription on the current pattern\n","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.rintroContinue","kind":"opaque","line":495,"name":"Lean.Elab.Tactic.RCases.rintroContinue","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/RCases.lean#L495-L508"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.rintroCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">rintroCore</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fs</span> : <a href=\"./Lean/Meta/Tactic/FVarSubst.html#Lean.Meta.FVarSubst\">Meta.FVarSubst</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">clears</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pat</span> : <a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`rintroPat</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ty?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Term\">Term</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cont</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/FVarSubst.html#Lean.Meta.FVarSubst\">Meta.FVarSubst</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"This introduces the pattern `pat`. It has the same arguments as `rcasesCore`, plus:\n* `ty?`: the nearest enclosing type ascription on the current pattern\n","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.rintroCore","kind":"opaque","line":478,"name":"Lean.Elab.Tactic.RCases.rintroCore","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/RCases.lean#L478-L493"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.expandRIntroPats\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">expandRIntroPats</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pats</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`rintroPat</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">acc</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`rcasesPat</span>)</span> := <a href=\"./Init/Prelude.html#List.toArray\">#[</a><a href=\"./Init/Prelude.html#List.toArray\">]</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ty?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Term\">Term</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`rcasesPat</span>)</span></div></div>","info":{"doc":"Expand a list of `rintroPat` into an equivalent list of `rcasesPat` patterns. ","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.expandRIntroPats","kind":"opaque","line":468,"name":"Lean.Elab.Tactic.RCases.expandRIntroPats","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/RCases.lean#L468-L472"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.expandRIntroPat\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">expandRIntroPat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pat</span> : <a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`rintroPat</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">acc</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`rcasesPat</span>)</span> := <a href=\"./Init/Prelude.html#List.toArray\">#[</a><a href=\"./Init/Prelude.html#List.toArray\">]</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ty?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Term\">Term</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`rcasesPat</span>)</span></div></div>","info":{"doc":"Expand a `rintroPat` into an equivalent list of `rcasesPat` patterns. ","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.expandRIntroPat","kind":"opaque","line":457,"name":"Lean.Elab.Tactic.RCases.expandRIntroPat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/RCases.lean#L457-L466"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.obtainNone\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">obtainNone</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pat</span> : <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ty</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span></div></div>","info":{"doc":"The `obtain` tactic in the no-target case. Given a type `T`, create a goal `|- T` and\nand pattern match `T` against the given pattern. Returns the list of goals, with the assumed goal\nfirst followed by the goals produced by the pattern match.\n","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.obtainNone","kind":"def","line":441,"name":"Lean.Elab.Tactic.RCases.obtainNone","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/RCases.lean#L441-L452"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.rcases\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">rcases</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tgts</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Ident\">Ident</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pat</span> : <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span></div></div>","info":{"doc":"Given a list of targets of the form `e` or `h : e`, and a pattern, match all the targets\nagainst the pattern. Returns the list of produced subgoals.\n","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.rcases","kind":"def","line":418,"name":"Lean.Elab.Tactic.RCases.rcases","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/RCases.lean#L418-L439"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.generalizeExceptFVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">generalizeExceptFVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Generalize.html#Lean.Meta.GeneralizeArg\">Meta.GeneralizeArg</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></div></div>","info":{"doc":"Generalize all the arguments as specified in `args` to fvars if they aren't already ","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.generalizeExceptFVar","kind":"def","line":403,"name":"Lean.Elab.Tactic.RCases.generalizeExceptFVar","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/RCases.lean#L403-L416"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.parse\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">RCasesPatt</span>.<span class=\"name\">parse</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></span></div></div>","info":{"doc":"Parses a `Syntax` into the `RCasesPatt` type used by the `RCases` tactic. ","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.parse","kind":"opaque","line":388,"name":"Lean.Elab.Tactic.RCases.RCasesPatt.parse","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/RCases.lean#L388-L400"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.finish\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">finish</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toTag</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Meta/Defs.html#Lean.Syntax.Ident\">Ident</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span> := <a href=\"./Init/Prelude.html#List.toArray\">#[</a><a href=\"./Init/Prelude.html#List.toArray\">]</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fs</span> : <a href=\"./Lean/Meta/Tactic/FVarSubst.html#Lean.Meta.FVarSubst\">Meta.FVarSubst</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">clears</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">gs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span></div></div>","info":{"doc":"The terminating continuation used in `rcasesCore` and `rcasesContinue`. We specialize the type\n`α` to `Array MVarId` to collect the list of goals, and given the list of `clears`, it attempts to\nclear them from the goal and adds the goal to the list.\n","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.finish","kind":"def","line":371,"name":"Lean.Elab.Tactic.RCases.finish","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/RCases.lean#L371-L384"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.tryClearMany'\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">tryClearMany'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarIds</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span></div></div>","info":{"doc":"Like `tryClearMany`, but also clears dependent hypotheses if possible ","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.tryClearMany'","kind":"def","line":363,"name":"Lean.Elab.Tactic.RCases.tryClearMany'","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/RCases.lean#L363-L369"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.rcasesContinue\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">rcasesContinue</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fs</span> : <a href=\"./Lean/Meta/Tactic/FVarSubst.html#Lean.Meta.FVarSubst\">Meta.FVarSubst</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">clears</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pats</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cont</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/FVarSubst.html#Lean.Meta.FVarSubst\">Meta.FVarSubst</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"This will match a list of patterns against a list of hypotheses `e`. The arguments are similar\nto `rcasesCore`, but the patterns and local variables are in `pats`. Because the calls are all\nnested in continuations, later arguments can be matched many times, once per goal produced by\nearlier arguments. For example `⟨a | b, ⟨c, d⟩⟩` performs the `⟨c, d⟩` match twice, once on the\n`a` branch and once on `b`.\n","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.rcasesContinue","kind":"opaque","line":345,"name":"Lean.Elab.Tactic.RCases.rcasesContinue","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/RCases.lean#L345-L359"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.rcasesCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">rcasesCore</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fs</span> : <a href=\"./Lean/Meta/Tactic/FVarSubst.html#Lean.Meta.FVarSubst\">Meta.FVarSubst</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">clears</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">pat</span> : <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cont</span> : <span class=\"fn\"><a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a> → <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/FVarSubst.html#Lean.Meta.FVarSubst\">Meta.FVarSubst</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span> → <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span></span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"This will match a pattern `pat` against a local hypothesis `e`.\n* `g`: The initial subgoal\n* `fs`: A running variable substitution, the result of `cases` operations upstream.\n  The variable `e` must be run through this map before locating it in the context of `g`,\n  and the output variable substitutions will be end extensions of this one.\n* `clears`: The list of variables to clear in all subgoals generated from this point on.\n  We defer clear operations because clearing too early can cause `cases` to fail.\n  The actual clearing happens in `RCases.finish`.\n* `e`: a local hypothesis, the scrutinee to match against.\n* `a`: opaque \"user data\" which is passed through all the goal calls at the end.\n* `pat`: the pattern to match against\n* `cont`: A continuation. This is called on every goal generated by the result of the pattern\n  match, with updated values for `g` , `fs`, `clears`, and `a`.\n","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.rcasesCore","kind":"opaque","line":253,"name":"Lean.Elab.Tactic.RCases.rcasesCore","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/RCases.lean#L253-L343"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.processConstructors\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">processConstructors</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">params</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">altVarNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Induction.html#Lean.Meta.AltVarNames\">Meta.AltVarNames</a></span> := <a href=\"./Init/Prelude.html#List.toArray\">#[</a><a href=\"./Init/Prelude.html#List.toArray\">]</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></span> → <span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Induction.html#Lean.Meta.AltVarNames\">Meta.AltVarNames</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Init/Prelude.html#Lean.Name\">Name</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></span>)</span>)</span></span></span></div></div>","info":{"doc":"Takes a list of constructor names, and an (alternation) list of patterns, and matches each\npattern against its constructor. It returns the list of names that will be passed to `cases`,\nand the list of `(constructor name, patterns)` for each constructor, where `patterns` is the\n(conjunctive) list of patterns to apply to each constructor argument.\n","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.processConstructors","kind":"def","line":229,"name":"Lean.Elab.Tactic.RCases.processConstructors","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/RCases.lean#L229-L247"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.processConstructor\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">processConstructor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">info</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.ParamInfo\">Meta.ParamInfo</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">explicit</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></span></div></div>","info":{"doc":"Takes the number of fields of a single constructor and patterns to match its fields against\n(not necessarily the same number). The returned lists each contain one element per field of the\nconstructor. The `name` is the name which will be used in the top-level `cases` tactic, and the\n`rcases_patt` is the pattern which the field will be matched against by subsequent `cases`\ntactics.\n","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.processConstructor","kind":"def","line":205,"name":"Lean.Elab.Tactic.RCases.processConstructor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/RCases.lean#L205-L227"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.instToMessageData.fmt\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">RCasesPatt</span>.<span class=\"name\">instToMessageData</span>.<span class=\"name\">fmt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a> → <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></span></span></div></div>","info":{"doc":"format an `RCasesPatt` with the given precedence: 0 = lo, 1 = med, 2 = hi ","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.instToMessageData.fmt","kind":"opaque","line":194,"name":"Lean.Elab.Tactic.RCases.RCasesPatt.instToMessageData.fmt","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/RCases.lean#L194-L201"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.instToMessageData.parenAbove\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">RCasesPatt</span>.<span class=\"name\">instToMessageData</span>.<span class=\"name\">parenAbove</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tgt </span><span class=\"fn\">p</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageData\">MessageData</a></div></div>","info":{"doc":"parenthesize the message if the precedence is above `tgt` ","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.instToMessageData.parenAbove","kind":"def","line":191,"name":"Lean.Elab.Tactic.RCases.RCasesPatt.instToMessageData.parenAbove","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/RCases.lean#L191-L192"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.instToMessageData\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">RCasesPatt</span>.<span class=\"name\">instToMessageData</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.ToMessageData\">ToMessageData</a> <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.instToMessageData","kind":"instance","line":189,"name":"Lean.Elab.Tactic.RCases.RCasesPatt.instToMessageData","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/RCases.lean#L189-L201"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.alts₁\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">RCasesPatt</span>.<span class=\"name\">alts₁</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a>)</span></span> → <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></span></div></div>","info":{"doc":"This function is used for producing rcases patterns based on a case tree. This is like\n`alts₁Core`, but it produces a cases pattern directly instead of a list of alternatives. We\nspecially translate the empty alternation to `⟨⟩`, and translate `|(a | b)` to `⟨a | b⟩` (because we\ndon't have any syntax for unary alternation). Otherwise we can use the regular merging of\nalternations at the last argument so that `a | b | (c | d)` becomes `a | b | c | d`.\n","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.alts₁","kind":"def","line":176,"name":"Lean.Elab.Tactic.RCases.RCasesPatt.alts₁","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/RCases.lean#L176-L186"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.alts₁Core\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">RCasesPatt</span>.<span class=\"name\">alts₁Core</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a>)</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></span></span></div></div>","info":{"doc":"This function is used for producing rcases patterns based on a case tree. Here we are given\nthe list of patterns to apply to each argument of each constructor after the main case, and must\nproduce a list of alternatives with the same effect. This function calls `tuple₁` to make the\nindividual alternatives, and handles merging `[a, b, c | d]` to `a | b | c | d` instead of\n`a | b | (c | d)`.\n","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.alts₁Core","kind":"def","line":164,"name":"Lean.Elab.Tactic.RCases.RCasesPatt.alts₁Core","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/RCases.lean#L164-L174"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.tuple₁\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">RCasesPatt</span>.<span class=\"name\">tuple₁</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></span> → <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></span></div></div>","info":{"doc":"This function is used for producing rcases patterns based on a case tree. This is like\n`tuple₁Core` but it produces a pattern instead of a tuple pattern list, converting `[n]` to `n`\ninstead of `⟨n⟩` and `[]` to `_`, and otherwise just converting `[a, b, c]` to `⟨a, b, c⟩`.\n","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.tuple₁","kind":"def","line":154,"name":"Lean.Elab.Tactic.RCases.RCasesPatt.tuple₁","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/RCases.lean#L154-L162"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.tuple₁Core\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">RCasesPatt</span>.<span class=\"name\">tuple₁Core</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></span></span></div></div>","info":{"doc":"This function is used for producing rcases patterns based on a case tree. Suppose that we have\na list of patterns `ps` that will match correctly against the branches of the case tree for one\nconstructor. This function will merge tuples at the end of the list, so that `[a, b, ⟨c, d⟩]`\nbecomes `⟨a, b, c, d⟩` instead of `⟨a, b, ⟨c, d⟩⟩`.\n\nWe must be careful to turn `[a, ⟨⟩]` into `⟨a, ⟨⟩⟩` instead of `⟨a⟩` (which will not perform the\nnested match).\n","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.tuple₁Core","kind":"def","line":139,"name":"Lean.Elab.Tactic.RCases.RCasesPatt.tuple₁Core","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/RCases.lean#L139-L152"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.alts'\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">RCasesPatt</span>.<span class=\"name\">alts'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></span> → <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></span></div></div>","info":{"doc":"Convert a list of patterns to an alternation pattern, but mapping `[p]` to `p` instead of\na unary alternation `|p`.\n","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.alts'","kind":"def","line":131,"name":"Lean.Elab.Tactic.RCases.RCasesPatt.alts'","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/RCases.lean#L131-L137"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.tuple'\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">RCasesPatt</span>.<span class=\"name\">tuple'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></span> → <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></span></div></div>","info":{"doc":"Convert a list of patterns to a tuple pattern, but mapping `[p]` to `p` instead of `⟨p⟩`. ","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.tuple'","kind":"def","line":126,"name":"Lean.Elab.Tactic.RCases.RCasesPatt.tuple'","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/RCases.lean#L126-L129"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.typed?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">RCasesPatt</span>.<span class=\"name\">typed?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a> → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Term\">Term</a></span> → <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></span></span></div></div>","info":{"doc":"Convert a list of patterns to a tuple pattern, but mapping `[p]` to `p` instead of `⟨p⟩`. ","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.typed?","kind":"def","line":121,"name":"Lean.Elab.Tactic.RCases.RCasesPatt.typed?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/RCases.lean#L121-L124"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.asAlts\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">RCasesPatt</span>.<span class=\"name\">asAlts</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></span></span></div></div>","info":{"doc":"Interpret an rcases pattern as an alternation, where non-alternations are treated as one\nalternative.\n","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.asAlts","kind":"def","line":112,"name":"Lean.Elab.Tactic.RCases.RCasesPatt.asAlts","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/RCases.lean#L112-L119"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.asTuple\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">RCasesPatt</span>.<span class=\"name\">asTuple</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></span></span></div></div>","info":{"doc":"Interpret an rcases pattern as a tuple, where `p` becomes `⟨p⟩` if `p` is not already a tuple.\n","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.asTuple","kind":"def","line":103,"name":"Lean.Elab.Tactic.RCases.RCasesPatt.asTuple","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/RCases.lean#L103-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.ref\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">RCasesPatt</span>.<span class=\"name\">ref</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a> → <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>","info":{"doc":"Get the syntax node from which this pattern was parsed. Used for error messages ","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.ref","kind":"def","line":93,"name":"Lean.Elab.Tactic.RCases.RCasesPatt.ref","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/RCases.lean#L93-L101"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.name?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">RCasesPatt</span>.<span class=\"name\">name?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></span></div></div>","info":{"doc":"Get the name from a pattern, if provided ","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.name?","kind":"opaque","line":83,"name":"Lean.Elab.Tactic.RCases.RCasesPatt.name?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/RCases.lean#L83-L91"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.instInhabited\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">RCasesPatt</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.instInhabited","kind":"instance","line":81,"name":"Lean.Elab.Tactic.RCases.RCasesPatt.instInhabited","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/RCases.lean#L81-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.instReprRCasesPatt.repr\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">instReprRCasesPatt</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.instReprRCasesPatt.repr","kind":"opaque","line":77,"name":"Lean.Elab.Tactic.RCases.instReprRCasesPatt.repr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/RCases.lean#L77-L77"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.instReprRCasesPatt\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">instReprRCasesPatt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.instReprRCasesPatt","kind":"instance","line":77,"name":"Lean.Elab.Tactic.RCases.instReprRCasesPatt","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/RCases.lean#L77-L77"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.alts\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">RCasesPatt</span>.<span class=\"name\">alts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></span> → <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></span></div></div>","info":{"doc":"An alternation / variant pattern `p1 | p2 | p3` ","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.alts","kind":"ctor","line":75,"name":"Lean.Elab.Tactic.RCases.RCasesPatt.alts","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/RCases.lean#L75-L76"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.tuple\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">RCasesPatt</span>.<span class=\"name\">tuple</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></span> → <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></span></div></div>","info":{"doc":"A tuple constructor like `⟨p1, p2, p3⟩` ","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.tuple","kind":"ctor","line":73,"name":"Lean.Elab.Tactic.RCases.RCasesPatt.tuple","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/RCases.lean#L73-L74"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.typed\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">RCasesPatt</span>.<span class=\"name\">typed</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a> → <span class=\"fn\"><a href=\"./Init/Meta/Defs.html#Lean.Syntax.Term\">Term</a> → <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></span></span></div></div>","info":{"doc":"A type ascription like `pat : ty` (parentheses are optional) ","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.typed","kind":"ctor","line":71,"name":"Lean.Elab.Tactic.RCases.RCasesPatt.typed","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/RCases.lean#L71-L72"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.explicit\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">RCasesPatt</span>.<span class=\"name\">explicit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a> → <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></span></div></div>","info":{"doc":"An explicit pattern `@pat`. ","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.explicit","kind":"ctor","line":69,"name":"Lean.Elab.Tactic.RCases.RCasesPatt.explicit","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/RCases.lean#L69-L70"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.clear\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">RCasesPatt</span>.<span class=\"name\">clear</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></div></div>","info":{"doc":"A hyphen `-`, which clears the active hypothesis and any dependents. ","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.clear","kind":"ctor","line":67,"name":"Lean.Elab.Tactic.RCases.RCasesPatt.clear","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/RCases.lean#L67-L68"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.one\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">RCasesPatt</span>.<span class=\"name\">one</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a> → <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></span></div></div>","info":{"doc":"A named pattern like `foo` ","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.one","kind":"ctor","line":65,"name":"Lean.Elab.Tactic.RCases.RCasesPatt.one","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/RCases.lean#L65-L66"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.paren\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">RCasesPatt</span>.<span class=\"name\">paren</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a> → <a href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\">RCasesPatt</a></span></div></div>","info":{"doc":"A parenthesized expression, used for hovers ","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt.paren","kind":"ctor","line":63,"name":"Lean.Elab.Tactic.RCases.RCasesPatt.paren","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/RCases.lean#L63-L64"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">RCasesPatt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"An `rcases` pattern can be one of the following, in a nested combination:\n\n* A name like `foo`\n* The special keyword `rfl` (for pattern matching on equality using `subst`)\n* A hyphen `-`, which clears the active hypothesis and any dependents.\n* A type ascription like `pat : ty` (parentheses are optional)\n* A tuple constructor like `⟨p1, p2, p3⟩`\n* An alternation / variant pattern `p1 | p2 | p3`\n\nParentheses can be used for grouping; alternation is higher precedence than type ascription, so\n`p1 | p2 | p3 : ty` means `(p1 | p2 | p3) : ty`.\n\nN-ary alternations are treated as a group, so `p1 | p2 | p3` is not the same as `p1 | (p2 | p3)`,\nand similarly for tuples. However, note that an n-ary alternation or tuple can match an n-ary\nconjunction or disjunction, because if the number of patterns exceeds the number of constructors in\nthe type being destructed, the extra patterns will match on the last element, meaning that\n`p1 | p2 | p3` will act like `p1 | (p2 | p3)` when matching `a1 ∨ a2 ∨ a3`. If matching against a\ntype with 3 constructors,  `p1 | (p2 | p3)` will act like `p1 | (p2 | p3) | _` instead.\n","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.RCasesPatt","kind":"inductive","line":42,"name":"Lean.Elab.Tactic.RCases.RCasesPatt","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/RCases.lean#L42-L77"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.instCoeTSyntaxConsSyntaxNodeKindMkStr1Nil_lean\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">instCoeTSyntaxConsSyntaxNodeKindMkStr1Nil_lean</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`rcasesPat</span>) (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`rintroPat</span>)</span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.instCoeTSyntaxConsSyntaxNodeKindMkStr1Nil_lean","kind":"instance","line":32,"name":"Lean.Elab.Tactic.RCases.instCoeTSyntaxConsSyntaxNodeKindMkStr1Nil_lean","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/RCases.lean#L32-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.instCoeTSyntaxConsSyntaxNodeKindMkStr4Nil_lean\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">instCoeTSyntaxConsSyntaxNodeKindMkStr4Nil_lean</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.Parser.Tactic.rcasesPatMed</span>) (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.Parser.Tactic.rcasesPatLo</span>)</span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.instCoeTSyntaxConsSyntaxNodeKindMkStr4Nil_lean","kind":"instance","line":30,"name":"Lean.Elab.Tactic.RCases.instCoeTSyntaxConsSyntaxNodeKindMkStr4Nil_lean","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/RCases.lean#L30-L31"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.instCoeTSyntaxConsSyntaxNodeKindMkStr1NilMkStr4_lean\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">instCoeTSyntaxConsSyntaxNodeKindMkStr1NilMkStr4_lean</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`rcasesPat</span>) (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.Parser.Tactic.rcasesPatMed</span>)</span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.instCoeTSyntaxConsSyntaxNodeKindMkStr1NilMkStr4_lean","kind":"instance","line":28,"name":"Lean.Elab.Tactic.RCases.instCoeTSyntaxConsSyntaxNodeKindMkStr1NilMkStr4_lean","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/RCases.lean#L28-L29"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.instCoeIdentTSyntaxConsSyntaxNodeKindMkStr1Nil_lean\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">instCoeIdentTSyntaxConsSyntaxNodeKindMkStr1Nil_lean</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Coe.html#Coe\">Coe</a> <a href=\"./Init/Meta/Defs.html#Lean.Syntax.Ident\">Ident</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`rcasesPat</span>)</span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.instCoeIdentTSyntaxConsSyntaxNodeKindMkStr1Nil_lean","kind":"instance","line":26,"name":"Lean.Elab.Tactic.RCases.instCoeIdentTSyntaxConsSyntaxNodeKindMkStr1Nil_lean","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/RCases.lean#L26-L27"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.linter.unusedRCasesPattern\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">RCases</span>.<span class=\"name\">linter</span>.<span class=\"name\">unusedRCasesPattern</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Enables the 'unused rcases pattern' linter. This will warn when a pattern is ignored by\n`rcases`, `rintro`, `ext` and similar tactics.\n","docLink":"./Lean/Elab/Tactic/RCases.html#Lean.Elab.Tactic.RCases.linter.unusedRCasesPattern","kind":"opaque","line":17,"name":"Lean.Elab.Tactic.RCases.linter.unusedRCasesPattern","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/RCases.lean#L17-L24"}}],"imports":["Lean.Elab.Tactic.Induction","Lean.Meta.Tactic.Replace"],"instances":[{"className":"Coe","name":"Lean.Elab.Tactic.RCases.instCoeIdentTSyntaxConsSyntaxNodeKindMkStr1Nil_lean","typeNames":["Lean.Syntax.Ident","Lean.TSyntax"]},{"className":"Coe","name":"Lean.Elab.Tactic.RCases.instCoeTSyntaxConsSyntaxNodeKindMkStr1NilMkStr4_lean","typeNames":["Lean.TSyntax","Lean.TSyntax"]},{"className":"Coe","name":"Lean.Elab.Tactic.RCases.instCoeTSyntaxConsSyntaxNodeKindMkStr4Nil_lean","typeNames":["Lean.TSyntax","Lean.TSyntax"]},{"className":"Coe","name":"Lean.Elab.Tactic.RCases.instCoeTSyntaxConsSyntaxNodeKindMkStr1Nil_lean","typeNames":["Lean.TSyntax","Lean.TSyntax"]},{"className":"Repr","name":"Lean.Elab.Tactic.RCases.instReprRCasesPatt","typeNames":["Lean.Elab.Tactic.RCases.RCasesPatt"]},{"className":"Inhabited","name":"Lean.Elab.Tactic.RCases.RCasesPatt.instInhabited","typeNames":["Lean.Elab.Tactic.RCases.RCasesPatt"]},{"className":"Lean.ToMessageData","name":"Lean.Elab.Tactic.RCases.RCasesPatt.instToMessageData","typeNames":["Lean.Elab.Tactic.RCases.RCasesPatt"]}],"name":"Lean.Elab.Tactic.RCases"}