{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command/Scope.html#Lean.Elab.Command.instInhabitedScope\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">instInhabitedScope</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/Command/Scope.html#Lean.Elab.Command.Scope\">Scope</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command/Scope.html#Lean.Elab.Command.instInhabitedScope","kind":"instance","line":83,"name":"Lean.Elab.Command.instInhabitedScope","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command/Scope.lean#L83-L83"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command/Scope.html#Lean.Elab.Command.instInhabitedScope.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">instInhabitedScope</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command/Scope.html#Lean.Elab.Command.Scope\">Scope</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command/Scope.html#Lean.Elab.Command.instInhabitedScope.default","kind":"def","line":83,"name":"Lean.Elab.Command.instInhabitedScope.default","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command/Scope.lean#L83-L83"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command/Scope.html#Lean.Elab.Command.Scope.attrs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">Scope</span>.<span class=\"name\">attrs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Command/Scope.html#Lean.Elab.Command.Scope\">Scope</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.Parser.Term.attrInstance</span>)</span></div></div>","info":{"doc":"Attributes that should be applied to all matching declaration in the section. Inherited from\nparent scopes.\n","docLink":"./Lean/Elab/Command/Scope.html#Lean.Elab.Command.Scope.attrs","kind":"def","line":82,"name":"Lean.Elab.Command.Scope.attrs","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command/Scope.lean#L82-L82"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command/Scope.html#Lean.Elab.Command.Scope.isPublic\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">Scope</span>.<span class=\"name\">isPublic</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Command/Scope.html#Lean.Elab.Command.Scope\">Scope</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"True if a `public section` is in scope. ","docLink":"./Lean/Elab/Command/Scope.html#Lean.Elab.Command.Scope.isPublic","kind":"def","line":77,"name":"Lean.Elab.Command.Scope.isPublic","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command/Scope.lean#L77-L77"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command/Scope.html#Lean.Elab.Command.Scope.isNoncomputable\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">Scope</span>.<span class=\"name\">isNoncomputable</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Command/Scope.html#Lean.Elab.Command.Scope\">Scope</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"If true (default: false), all declarations that fail to compile\nautomatically receive the `noncomputable` modifier.\nA scope with this flag set is created by `noncomputable section`.\n\nRecall that a new scope inherits all values from its parent scope,\nso all sections and namespaces nested within a `noncomputable` section also have this flag set.\n","docLink":"./Lean/Elab/Command/Scope.html#Lean.Elab.Command.Scope.isNoncomputable","kind":"def","line":75,"name":"Lean.Elab.Command.Scope.isNoncomputable","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command/Scope.lean#L75-L75"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command/Scope.html#Lean.Elab.Command.Scope.omittedVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">Scope</span>.<span class=\"name\">omittedVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Command/Scope.html#Lean.Elab.Command.Scope\">Scope</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"`omit`ted section variable names (from `varUIds`) ","docLink":"./Lean/Elab/Command/Scope.html#Lean.Elab.Command.Scope.omittedVars","kind":"def","line":66,"name":"Lean.Elab.Command.Scope.omittedVars","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command/Scope.lean#L66-L66"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command/Scope.html#Lean.Elab.Command.Scope.includedVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">Scope</span>.<span class=\"name\">includedVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Command/Scope.html#Lean.Elab.Command.Scope\">Scope</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"`include`d section variable names (from `varUIds`) ","docLink":"./Lean/Elab/Command/Scope.html#Lean.Elab.Command.Scope.includedVars","kind":"def","line":64,"name":"Lean.Elab.Command.Scope.includedVars","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command/Scope.lean#L64-L64"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command/Scope.html#Lean.Elab.Command.Scope.varUIds\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">Scope</span>.<span class=\"name\">varUIds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Command/Scope.html#Lean.Elab.Command.Scope\">Scope</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"Globally unique internal identifiers for the `varDecls`.\nThere is one identifier per variable introduced by the binders\n(recall that a binder such as `(a b c : Ty)` can produce more than one variable),\nand each identifier is the user-provided variable name with a macro scope.\nThis is used by `TermElabM` in `Lean.Elab.Term.Context` to help with processing macros\nthat capture these variables.\n","docLink":"./Lean/Elab/Command/Scope.html#Lean.Elab.Command.Scope.varUIds","kind":"def","line":62,"name":"Lean.Elab.Command.Scope.varUIds","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command/Scope.lean#L62-L62"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command/Scope.html#Lean.Elab.Command.Scope.varDecls\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">Scope</span>.<span class=\"name\">varDecls</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Command/Scope.html#Lean.Elab.Command.Scope\">Scope</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.Parser.Term.bracketedBinder</span>)</span></div></div>","info":{"doc":"The current list of binders to use for new declarations.\nThis is managed by the `variable` command.\nEach binder is represented in `Syntax` form, and it is re-elaborated\nwithin each command that uses this information.\n\nThis is also used by commands, such as `#check`, to create an initial local context,\neven if they do not work with binders per se.\n","docLink":"./Lean/Elab/Command/Scope.html#Lean.Elab.Command.Scope.varDecls","kind":"def","line":53,"name":"Lean.Elab.Command.Scope.varDecls","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command/Scope.lean#L53-L53"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command/Scope.html#Lean.Elab.Command.Scope.levelNames\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">Scope</span>.<span class=\"name\">levelNames</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Command/Scope.html#Lean.Elab.Command.Scope\">Scope</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"The current list of names for universe level variables to use for new declarations. This is managed by the `universe` command. ","docLink":"./Lean/Elab/Command/Scope.html#Lean.Elab.Command.Scope.levelNames","kind":"def","line":43,"name":"Lean.Elab.Command.Scope.levelNames","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command/Scope.lean#L43-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command/Scope.html#Lean.Elab.Command.Scope.openDecls\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">Scope</span>.<span class=\"name\">openDecls</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Command/Scope.html#Lean.Elab.Command.Scope\">Scope</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Data/OpenDecl.html#Lean.OpenDecl\">OpenDecl</a></span></div></div>","info":{"doc":"All currently `open`ed namespaces and names. ","docLink":"./Lean/Elab/Command/Scope.html#Lean.Elab.Command.Scope.openDecls","kind":"def","line":41,"name":"Lean.Elab.Command.Scope.openDecls","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command/Scope.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command/Scope.html#Lean.Elab.Command.Scope.currNamespace\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">Scope</span>.<span class=\"name\">currNamespace</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Command/Scope.html#Lean.Elab.Command.Scope\">Scope</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"The current namespace. The top-level namespace is represented by `Name.anonymous`. ","docLink":"./Lean/Elab/Command/Scope.html#Lean.Elab.Command.Scope.currNamespace","kind":"def","line":39,"name":"Lean.Elab.Command.Scope.currNamespace","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command/Scope.lean#L39-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command/Scope.html#Lean.Elab.Command.Scope.opts\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">Scope</span>.<span class=\"name\">opts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Command/Scope.html#Lean.Elab.Command.Scope\">Scope</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Data/Options.html#Lean.Options\">Options</a></div></div>","info":{"doc":"The current state of all set options at this point in the scope. Note that this is the\nfull current set of options and does *not* simply contain the options set\nwhile this scope has been active.\n","docLink":"./Lean/Elab/Command/Scope.html#Lean.Elab.Command.Scope.opts","kind":"def","line":37,"name":"Lean.Elab.Command.Scope.opts","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command/Scope.lean#L37-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command/Scope.html#Lean.Elab.Command.Scope.header\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">Scope</span>.<span class=\"name\">header</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Command/Scope.html#Lean.Elab.Command.Scope\">Scope</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"The component of the `namespace` or `section` that this scope is associated to.\nFor example, `section a.b.c` and `namespace a.b.c` each create three scopes with headers\nnamed `a`, `b`, and `c`.\nThis is used for checking the `end` command. The \"base scope\" has `\"\"` as its header.\n","docLink":"./Lean/Elab/Command/Scope.html#Lean.Elab.Command.Scope.header","kind":"def","line":31,"name":"Lean.Elab.Command.Scope.header","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command/Scope.lean#L31-L31"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command/Scope.html#Lean.Elab.Command.Scope.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">Scope</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">header</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">opts</span> : <a href=\"./Lean/Data/Options.html#Lean.Options\">Options</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">currNamespace</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">openDecls</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Data/OpenDecl.html#Lean.OpenDecl\">OpenDecl</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">levelNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">varDecls</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.Parser.Term.bracketedBinder</span>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">varUIds</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">includedVars </span><span class=\"fn\">omittedVars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isNoncomputable </span><span class=\"fn\">isPublic</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">attrs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.Parser.Term.attrInstance</span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command/Scope.html#Lean.Elab.Command.Scope\">Scope</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command/Scope.html#Lean.Elab.Command.Scope.mk","kind":"ctor","line":24,"name":"Lean.Elab.Command.Scope.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command/Scope.lean#L24-L24"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command/Scope.html#Lean.Elab.Command.Scope\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">Scope</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A `Scope` records the part of the `CommandElabM` state that respects scoping,\nsuch as the data for `universe`, `open`, and `variable` declarations, the current namespace,\nand currently enabled options.\nThe `CommandElabM` state contains a stack of scopes, and only the top `Scope`\non the stack is read from or modified. There is always at least one `Scope` on the stack,\neven outside any `section` or `namespace`, and each new pushed `Scope`\nstarts as a modified copy of the previous top scope.\n","docLink":"./Lean/Elab/Command/Scope.html#Lean.Elab.Command.Scope","kind":"structure","line":15,"name":"Lean.Elab.Command.Scope","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command/Scope.lean#L15-L83"}}],"imports":["Lean.Data.Options","Lean.Parser.Term"],"instances":[{"className":"Inhabited","name":"Lean.Elab.Command.instInhabitedScope","typeNames":["Lean.Elab.Command.Scope"]}],"name":"Lean.Elab.Command.Scope"}