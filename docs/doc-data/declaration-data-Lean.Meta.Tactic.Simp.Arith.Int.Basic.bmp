{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Arith/Int/Basic.html#Lean.Meta.Simp.Arith.Int.toContextExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Int</span>.<span class=\"name\">toContextExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Simp/Arith/Int/Basic.html#Lean.Meta.Simp.Arith.Int.toContextExpr","kind":"def","line":252,"name":"Lean.Meta.Simp.Arith.Int.toContextExpr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/Arith/Int/Basic.lean#L252-L256"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Arith/Int/Basic.html#Lean.Meta.Simp.Arith.Int.dvdCnstr?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Int</span>.<span class=\"name\">dvdCnstr?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Int.Linear.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>))</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Simp/Arith/Int/Basic.html#Lean.Meta.Simp.Arith.Int.dvdCnstr?","kind":"def","line":242,"name":"Lean.Meta.Simp.Arith.Int.dvdCnstr?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/Arith/Int/Basic.lean#L242-L250"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Arith/Int/Basic.html#Lean.Meta.Simp.Arith.Int.leCnstr?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Int</span>.<span class=\"name\">leCnstr?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Int.Linear.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Int.Linear.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>))</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Simp/Arith/Int/Basic.html#Lean.Meta.Simp.Arith.Int.leCnstr?","kind":"def","line":239,"name":"Lean.Meta.Simp.Arith.Int.leCnstr?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/Arith/Int/Basic.lean#L239-L240"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Arith/Int/Basic.html#Lean.Meta.Simp.Arith.Int.eqCnstr?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Int</span>.<span class=\"name\">eqCnstr?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Int.Linear.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Int.Linear.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>))</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Simp/Arith/Int/Basic.html#Lean.Meta.Simp.Arith.Int.eqCnstr?","kind":"def","line":236,"name":"Lean.Meta.Simp.Arith.Int.eqCnstr?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/Arith/Int/Basic.lean#L236-L237"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Arith/Int/Basic.html#Lean.Meta.Simp.Arith.Int.toLinearExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Int</span>.<span class=\"name\">toLinearExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> (<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Int.Linear.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Simp/Arith/Int/Basic.html#Lean.Meta.Simp.Arith.Int.toLinearExpr","kind":"def","line":213,"name":"Lean.Meta.Simp.Arith.Int.toLinearExpr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/Arith/Int/Basic.lean#L213-L220"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Arith/Int/Basic.html#Lean.Meta.Simp.Arith.Int.ToLinear.run\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Int</span>.<span class=\"name\">ToLinear</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Arith/Int/Basic.html#Lean.Meta.Simp.Arith.Int.ToLinear.M\">M</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Simp/Arith/Int/Basic.html#Lean.Meta.Simp.Arith.Int.ToLinear.run","kind":"def","line":207,"name":"Lean.Meta.Simp.Arith.Int.ToLinear.run","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/Arith/Int/Basic.lean#L207-L209"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Arith/Int/Basic.html#Lean.Meta.Simp.Arith.Int.ToLinear.dvdCnstr?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Int</span>.<span class=\"name\">ToLinear</span>.<span class=\"name\">dvdCnstr?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Arith/Int/Basic.html#Lean.Meta.Simp.Arith.Int.ToLinear.M\">M</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Int.Linear.Expr</a>))</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Simp/Arith/Int/Basic.html#Lean.Meta.Simp.Arith.Int.ToLinear.dvdCnstr?","kind":"def","line":201,"name":"Lean.Meta.Simp.Arith.Int.ToLinear.dvdCnstr?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/Arith/Int/Basic.lean#L201-L205"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Arith/Int/Basic.html#Lean.Meta.Simp.Arith.Int.ToLinear.leCnstr?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Int</span>.<span class=\"name\">ToLinear</span>.<span class=\"name\">leCnstr?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Arith/Int/Basic.html#Lean.Meta.Simp.Arith.Int.ToLinear.M\">M</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Int.Linear.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Int.Linear.Expr</a>))</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Simp/Arith/Int/Basic.html#Lean.Meta.Simp.Arith.Int.ToLinear.leCnstr?","kind":"def","line":181,"name":"Lean.Meta.Simp.Arith.Int.ToLinear.leCnstr?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/Arith/Int/Basic.lean#L181-L199"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Arith/Int/Basic.html#Lean.Meta.Simp.Arith.Int.ToLinear.eqCnstr?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Int</span>.<span class=\"name\">ToLinear</span>.<span class=\"name\">eqCnstr?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Arith/Int/Basic.html#Lean.Meta.Simp.Arith.Int.ToLinear.M\">M</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Int.Linear.Expr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Int.Linear.Expr</a>))</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Simp/Arith/Int/Basic.html#Lean.Meta.Simp.Arith.Int.ToLinear.eqCnstr?","kind":"def","line":167,"name":"Lean.Meta.Simp.Arith.Int.ToLinear.eqCnstr?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/Arith/Int/Basic.lean#L167-L179"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Arith/Int/Basic.html#Lean.Meta.Simp.Arith.Int.ToLinear.toLinearExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Int</span>.<span class=\"name\">ToLinear</span>.<span class=\"name\">toLinearExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Arith/Int/Basic.html#Lean.Meta.Simp.Arith.Int.ToLinear.M\">M</a> <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Int.Linear.Expr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Simp/Arith/Int/Basic.html#Lean.Meta.Simp.Arith.Int.ToLinear.toLinearExpr","kind":"opaque","line":122,"name":"Lean.Meta.Simp.Arith.Int.ToLinear.toLinearExpr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/Arith/Int/Basic.lean#L122-L165"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Arith/Int/Basic.html#Lean.Meta.Simp.Arith.Int.ToLinear.addAsVar\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Int</span>.<span class=\"name\">ToLinear</span>.<span class=\"name\">addAsVar</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Arith/Int/Basic.html#Lean.Meta.Simp.Arith.Int.ToLinear.M\">M</a> <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Int.Linear.Expr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Simp/Arith/Int/Basic.html#Lean.Meta.Simp.Arith.Int.ToLinear.addAsVar","kind":"def","line":113,"name":"Lean.Meta.Simp.Arith.Int.ToLinear.addAsVar","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/Arith/Int/Basic.lean#L113-L120"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Arith/Int/Basic.html#Lean.Meta.Simp.Arith.Int.ToLinear.M\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Int</span>.<span class=\"name\">ToLinear</span>.<span class=\"name\">M</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Simp/Arith/Int/Basic.html#Lean.Meta.Simp.Arith.Int.ToLinear.M","kind":"def","line":109,"name":"Lean.Meta.Simp.Arith.Int.ToLinear.M","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/Arith/Int/Basic.lean#L109-L109"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Arith/Int/Basic.html#Lean.Meta.Simp.Arith.Int.ToLinear.State.vars\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Int</span>.<span class=\"name\">ToLinear</span>.<span class=\"name\">State</span>.<span class=\"name\">vars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Simp/Arith/Int/Basic.html#Lean.Meta.Simp.Arith.Int.ToLinear.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Simp/Arith/Int/Basic.html#Lean.Meta.Simp.Arith.Int.ToLinear.State.vars","kind":"def","line":107,"name":"Lean.Meta.Simp.Arith.Int.ToLinear.State.vars","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/Arith/Int/Basic.lean#L107-L107"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Arith/Int/Basic.html#Lean.Meta.Simp.Arith.Int.ToLinear.State.varMap\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Int</span>.<span class=\"name\">ToLinear</span>.<span class=\"name\">State</span>.<span class=\"name\">varMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Simp/Arith/Int/Basic.html#Lean.Meta.Simp.Arith.Int.ToLinear.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/KExprMap.html#Lean.Meta.KExprMap\">KExprMap</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Simp/Arith/Int/Basic.html#Lean.Meta.Simp.Arith.Int.ToLinear.State.varMap","kind":"def","line":106,"name":"Lean.Meta.Simp.Arith.Int.ToLinear.State.varMap","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/Arith/Int/Basic.lean#L106-L106"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Arith/Int/Basic.html#Lean.Meta.Simp.Arith.Int.ToLinear.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Int</span>.<span class=\"name\">ToLinear</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">varMap</span> : <span class=\"fn\"><a href=\"./Lean/Meta/KExprMap.html#Lean.Meta.KExprMap\">KExprMap</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">vars</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Arith/Int/Basic.html#Lean.Meta.Simp.Arith.Int.ToLinear.State\">State</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Simp/Arith/Int/Basic.html#Lean.Meta.Simp.Arith.Int.ToLinear.State.mk","kind":"ctor","line":105,"name":"Lean.Meta.Simp.Arith.Int.ToLinear.State.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/Arith/Int/Basic.lean#L105-L105"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Arith/Int/Basic.html#Lean.Meta.Simp.Arith.Int.ToLinear.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Int</span>.<span class=\"name\">ToLinear</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Simp/Arith/Int/Basic.html#Lean.Meta.Simp.Arith.Int.ToLinear.State","kind":"structure","line":105,"name":"Lean.Meta.Simp.Arith.Int.ToLinear.State","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/Arith/Int/Basic.lean#L105-L107"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Arith/Int/Basic.html#Int.Linear.Poly.denoteExpr\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">denoteExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Simp/Arith/Int/Basic.html#Int.Linear.Poly.denoteExpr","kind":"def","line":90,"name":"Int.Linear.Poly.denoteExpr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/Arith/Int/Basic.lean#L90-L101"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Arith/Int/Basic.html#Int.Linear.Expr.denoteExpr\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Expr</span>.<span class=\"name\">denoteExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">Lean.MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Simp/Arith/Int/Basic.html#Int.Linear.Expr.denoteExpr","kind":"def","line":80,"name":"Int.Linear.Expr.denoteExpr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/Arith/Int/Basic.lean#L80-L88"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Arith/Int/Basic.html#Lean.Meta.Simp.Arith.Int.instToExprExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Int</span>.<span class=\"name\">instToExprExpr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/ToExpr.html#Lean.ToExpr\">ToExpr</a> <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Int.Linear.Expr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Simp/Arith/Int/Basic.html#Lean.Meta.Simp.Arith.Int.instToExprExpr","kind":"instance","line":76,"name":"Lean.Meta.Simp.Arith.Int.instToExprExpr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/Arith/Int/Basic.lean#L76-L78"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Arith/Int/Basic.html#Lean.Meta.Simp.Arith.Int.ofLinearExpr\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Int</span>.<span class=\"name\">ofLinearExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Int.Linear.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Simp/Arith/Int/Basic.html#Lean.Meta.Simp.Arith.Int.ofLinearExpr","kind":"def","line":65,"name":"Lean.Meta.Simp.Arith.Int.ofLinearExpr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/Arith/Int/Basic.lean#L65-L74"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Arith/Int/Basic.html#Lean.Meta.Simp.Arith.Int.instToExprPoly\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Int</span>.<span class=\"name\">instToExprPoly</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/ToExpr.html#Lean.ToExpr\">ToExpr</a> <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Int.Linear.Poly</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Simp/Arith/Int/Basic.html#Lean.Meta.Simp.Arith.Int.instToExprPoly","kind":"instance","line":61,"name":"Lean.Meta.Simp.Arith.Int.instToExprPoly","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/Arith/Int/Basic.lean#L61-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Arith/Int/Basic.html#Lean.Meta.Simp.Arith.Int.ofPoly\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Simp</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Int</span>.<span class=\"name\">ofPoly</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Int.Linear.Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Simp/Arith/Int/Basic.html#Lean.Meta.Simp.Arith.Int.ofPoly","kind":"def","line":55,"name":"Lean.Meta.Simp.Arith.Int.ofPoly","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/Arith/Int/Basic.lean#L55-L59"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Arith/Int/Basic.html#Int.Linear.instReprExpr_lean\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">instReprExpr_lean</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Simp/Arith/Int/Basic.html#Int.Linear.instReprExpr_lean","kind":"instance","line":49,"name":"Int.Linear.instReprExpr_lean","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/Arith/Int/Basic.lean#L49-L49"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Arith/Int/Basic.html#Int.Linear.instReprExpr_lean.repr\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">instReprExpr_lean</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Std.Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Simp/Arith/Int/Basic.html#Int.Linear.instReprExpr_lean.repr","kind":"def","line":49,"name":"Int.Linear.instReprExpr_lean.repr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/Arith/Int/Basic.lean#L49-L49"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Arith/Int/Basic.html#Int.Linear.instReprPoly_lean.repr\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">instReprPoly_lean</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Std.Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Simp/Arith/Int/Basic.html#Int.Linear.instReprPoly_lean.repr","kind":"def","line":48,"name":"Int.Linear.instReprPoly_lean.repr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/Arith/Int/Basic.lean#L48-L48"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Arith/Int/Basic.html#Int.Linear.instReprPoly_lean\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">instReprPoly_lean</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Simp/Arith/Int/Basic.html#Int.Linear.instReprPoly_lean","kind":"instance","line":48,"name":"Int.Linear.instReprPoly_lean","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/Arith/Int/Basic.lean#L48-L48"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Arith/Int/Basic.html#Int.Linear.Expr.applyPerm\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Expr</span>.<span class=\"name\">applyPerm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">perm</span> : <a href=\"./Lean/Util/SortExprs.html#Lean.Perm\">Lean.Perm</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a></div></div>","info":{"doc":"Applies the given variable permutation to `e` ","docLink":"./Lean/Meta/Tactic/Simp/Arith/Int/Basic.html#Int.Linear.Expr.applyPerm","kind":"def","line":35,"name":"Int.Linear.Expr.applyPerm","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/Arith/Int/Basic.lean#L35-L46"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/Arith/Int/Basic.html#Int.Linear.Poly.toExpr\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">toExpr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/Int/Linear.html#Int.Linear.Expr\">Expr</a></div></div>","info":{"doc":"Converts the linear polynomial into the \"simplified\" expression ","docLink":"./Lean/Meta/Tactic/Simp/Arith/Int/Basic.html#Int.Linear.Poly.toExpr","kind":"def","line":22,"name":"Int.Linear.Poly.toExpr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/Arith/Int/Basic.lean#L22-L33"}}],"imports":["Init.Data.Int.Linear","Lean.Util.SortExprs","Lean.Meta.Check","Lean.Meta.Offset","Lean.Meta.IntInstTesters","Lean.Meta.AppBuilder","Lean.Meta.KExprMap","Lean.Data.RArray"],"instances":[{"className":"Repr","name":"Int.Linear.instReprPoly_lean","typeNames":["Int.Linear.Poly"]},{"className":"Repr","name":"Int.Linear.instReprExpr_lean","typeNames":["Int.Linear.Expr"]},{"className":"Lean.ToExpr","name":"Lean.Meta.Simp.Arith.Int.instToExprPoly","typeNames":["Int.Linear.Poly"]},{"className":"Lean.ToExpr","name":"Lean.Meta.Simp.Arith.Int.instToExprExpr","typeNames":["Int.Linear.Expr"]}],"name":"Lean.Meta.Tactic.Simp.Arith.Int.Basic"}