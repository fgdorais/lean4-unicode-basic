{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">trim</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">proof</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/Tactic/BVDecide/LRAT/Actions.html#Std.Tactic.BVDecide.LRAT.IntAction\">Std.Tactic.BVDecide.LRAT.IntAction</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/Tactic/BVDecide/LRAT/Actions.html#Std.Tactic.BVDecide.LRAT.IntAction\">Std.Tactic.BVDecide.LRAT.IntAction</a>)</span></span></div></div>","info":{"doc":"Trim the LRAT `proof` by removing all steps that are not used in reaching the empty clause\nconclusion.\n","docLink":"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim","kind":"def","line":220,"name":"Lean.Elab.Tactic.BVDecide.LRAT.trim","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/BVDecide/LRAT/Trim.lean#L220-L225"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.go\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">trim</span>.<span class=\"name\">go</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M\">M</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/Tactic/BVDecide/LRAT/Actions.html#Std.Tactic.BVDecide.LRAT.IntAction\">Std.Tactic.BVDecide.LRAT.IntAction</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.go","kind":"def","line":214,"name":"Lean.Elab.Tactic.BVDecide.LRAT.trim.go","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/BVDecide/LRAT/Trim.lean#L214-L216"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.mapping\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">trim</span>.<span class=\"name\">mapping</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M\">M</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/Tactic/BVDecide/LRAT/Actions.html#Std.Tactic.BVDecide.LRAT.IntAction\">Std.Tactic.BVDecide.LRAT.IntAction</a>)</span></span></div></div>","info":{"doc":"Map the set of used proof steps to a new LRAT proof that has no holes in the sequence of proof\nidentifiers.\n","docLink":"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.mapping","kind":"def","line":194,"name":"Lean.Elab.Tactic.BVDecide.LRAT.trim.mapping","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/BVDecide/LRAT/Trim.lean#L194-L212"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.useAnalysis\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">trim</span>.<span class=\"name\">useAnalysis</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Perform a use-def analysis of LRAT proof steps, starting at the empty clause and working its way\nup with DFS.\n","docLink":"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.useAnalysis","kind":"def","line":157,"name":"Lean.Elab.Tactic.BVDecide.LRAT.trim.useAnalysis","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/BVDecide/LRAT/Trim.lean#L157-L192"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M.mapStep\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">trim</span>.<span class=\"name\">M</span>.<span class=\"name\">mapStep</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">step</span> : <a href=\"./Std/Tactic/BVDecide/LRAT/Actions.html#Std.Tactic.BVDecide.LRAT.IntAction\">Std.Tactic.BVDecide.LRAT.IntAction</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M\">M</a> <a href=\"./Std/Tactic/BVDecide/LRAT/Actions.html#Std.Tactic.BVDecide.LRAT.IntAction\">Std.Tactic.BVDecide.LRAT.IntAction</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M.mapStep","kind":"def","line":124,"name":"Lean.Elab.Tactic.BVDecide.LRAT.trim.M.mapStep","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/BVDecide/LRAT/Trim.lean#L124-L153"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M.registerIdMap\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">trim</span>.<span class=\"name\">M</span>.<span class=\"name\">registerIdMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">oldId </span><span class=\"fn\">newId</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M.registerIdMap","kind":"def","line":119,"name":"Lean.Elab.Tactic.BVDecide.LRAT.trim.M.registerIdMap","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/BVDecide/LRAT/Trim.lean#L119-L122"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M.markUsed\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">trim</span>.<span class=\"name\">M</span>.<span class=\"name\">markUsed</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">id</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M\">M</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M.markUsed","kind":"def","line":111,"name":"Lean.Elab.Tactic.BVDecide.LRAT.trim.M.markUsed","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/BVDecide/LRAT/Trim.lean#L111-L117"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M.isUsed\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">trim</span>.<span class=\"name\">M</span>.<span class=\"name\">isUsed</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">id</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M\">M</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M.isUsed","kind":"def","line":106,"name":"Lean.Elab.Tactic.BVDecide.LRAT.trim.M.isUsed","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/BVDecide/LRAT/Trim.lean#L106-L109"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M.getProofStep\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">trim</span>.<span class=\"name\">M</span>.<span class=\"name\">getProofStep</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">id</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M\">M</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Std/Tactic/BVDecide/LRAT/Actions.html#Std.Tactic.BVDecide.LRAT.IntAction\">Std.Tactic.BVDecide.LRAT.IntAction</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M.getProofStep","kind":"def","line":101,"name":"Lean.Elab.Tactic.BVDecide.LRAT.trim.M.getProofStep","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/BVDecide/LRAT/Trim.lean#L101-L104"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M.getEmptyId\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">trim</span>.<span class=\"name\">M</span>.<span class=\"name\">getEmptyId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M\">M</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M.getEmptyId","kind":"def","line":92,"name":"Lean.Elab.Tactic.BVDecide.LRAT.trim.M.getEmptyId","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/BVDecide/LRAT/Trim.lean#L92-L95"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M.getInitialId\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">trim</span>.<span class=\"name\">M</span>.<span class=\"name\">getInitialId</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M\">M</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M.getInitialId","kind":"def","line":87,"name":"Lean.Elab.Tactic.BVDecide.LRAT.trim.M.getInitialId","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/BVDecide/LRAT/Trim.lean#L87-L90"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M.run\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">trim</span>.<span class=\"name\">M</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">proof</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/Tactic/BVDecide/LRAT/Actions.html#Std.Tactic.BVDecide.LRAT.IntAction\">Std.Tactic.BVDecide.LRAT.IntAction</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M\">M</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M.run","kind":"def","line":75,"name":"Lean.Elab.Tactic.BVDecide.LRAT.trim.M.run","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/BVDecide/LRAT/Trim.lean#L75-L85"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M.findEmptyId\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">trim</span>.<span class=\"name\">M</span>.<span class=\"name\">findEmptyId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">proof</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/Tactic/BVDecide/LRAT/Actions.html#Std.Tactic.BVDecide.LRAT.IntAction\">Std.Tactic.BVDecide.LRAT.IntAction</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M.findEmptyId","kind":"def","line":70,"name":"Lean.Elab.Tactic.BVDecide.LRAT.trim.M.findEmptyId","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/BVDecide/LRAT/Trim.lean#L70-L73"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M.findInitialId\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">trim</span>.<span class=\"name\">M</span>.<span class=\"name\">findInitialId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">proof</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/Tactic/BVDecide/LRAT/Actions.html#Std.Tactic.BVDecide.LRAT.IntAction\">Std.Tactic.BVDecide.LRAT.IntAction</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">curr</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Except\">Except</a> <a href=\"./Init/Prelude.html#String\">String</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M.findInitialId","kind":"opaque","line":62,"name":"Lean.Elab.Tactic.BVDecide.LRAT.trim.M.findInitialId","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/BVDecide/LRAT/Trim.lean#L62-L68"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">trim</span>.<span class=\"name\">M</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.M","kind":"def","line":58,"name":"Lean.Elab.Tactic.BVDecide.LRAT.trim.M","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/BVDecide/LRAT/Trim.lean#L58-L58"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.State.mapped\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">trim</span>.<span class=\"name\">State</span>.<span class=\"name\">mapped</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"For each proof step `i` contains at index `i - initialId` the step that `i` maps to in the new\nproof or `0` if that step is not yet set. Used such that the proof remains a sequence without\ngaps.\n","docLink":"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.State.mapped","kind":"def","line":56,"name":"Lean.Elab.Tactic.BVDecide.LRAT.trim.State.mapped","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/BVDecide/LRAT/Trim.lean#L56-L56"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.State.used\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">trim</span>.<span class=\"name\">State</span>.<span class=\"name\">used</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a></div></div>","info":{"doc":"For each proof step `i` contains  at index `i - initialId` `0` if `i` is unused, `1` if it is\nused.\n","docLink":"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.State.used","kind":"def","line":50,"name":"Lean.Elab.Tactic.BVDecide.LRAT.trim.State.used","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/BVDecide/LRAT/Trim.lean#L50-L50"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">trim</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">used</span> : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mapped</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.State\">State</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.State.mk","kind":"ctor","line":45,"name":"Lean.Elab.Tactic.BVDecide.LRAT.trim.State.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/BVDecide/LRAT/Trim.lean#L45-L45"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">trim</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.State","kind":"structure","line":45,"name":"Lean.Elab.Tactic.BVDecide.LRAT.trim.State","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/BVDecide/LRAT/Trim.lean#L45-L56"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.Context.addEmptyId\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">trim</span>.<span class=\"name\">Context</span>.<span class=\"name\">addEmptyId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"The id of the empty proof step.\n","docLink":"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.Context.addEmptyId","kind":"def","line":43,"name":"Lean.Elab.Tactic.BVDecide.LRAT.trim.Context.addEmptyId","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/BVDecide/LRAT/Trim.lean#L43-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.Context.initialId\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">trim</span>.<span class=\"name\">Context</span>.<span class=\"name\">initialId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"The id of the first proof step.\n","docLink":"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.Context.initialId","kind":"def","line":39,"name":"Lean.Elab.Tactic.BVDecide.LRAT.trim.Context.initialId","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/BVDecide/LRAT/Trim.lean#L39-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.Context.proof\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">trim</span>.<span class=\"name\">Context</span>.<span class=\"name\">proof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Std/Tactic/BVDecide/LRAT/Actions.html#Std.Tactic.BVDecide.LRAT.IntAction\">Std.Tactic.BVDecide.LRAT.IntAction</a></span></div></div>","info":{"doc":"The proof as a map from proof step ids to their actions.\n","docLink":"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.Context.proof","kind":"def","line":35,"name":"Lean.Elab.Tactic.BVDecide.LRAT.trim.Context.proof","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/BVDecide/LRAT/Trim.lean#L35-L35"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.Context.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">trim</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">proof</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Std/Tactic/BVDecide/LRAT/Actions.html#Std.Tactic.BVDecide.LRAT.IntAction\">Std.Tactic.BVDecide.LRAT.IntAction</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">initialId </span><span class=\"fn\">addEmptyId</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.Context\">Context</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.Context.mk","kind":"ctor","line":31,"name":"Lean.Elab.Tactic.BVDecide.LRAT.trim.Context.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/BVDecide/LRAT/Trim.lean#L31-L31"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.Context\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">trim</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The context used for trimming LRAT proofs.\n","docLink":"./Lean/Elab/Tactic/BVDecide/LRAT/Trim.html#Lean.Elab.Tactic.BVDecide.LRAT.trim.Context","kind":"structure","line":28,"name":"Lean.Elab.Tactic.BVDecide.LRAT.trim.Context","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/BVDecide/LRAT/Trim.lean#L28-L43"}}],"imports":["Init.Data.Nat.Fold","Std.Tactic.BVDecide.LRAT.Actions","Std.Data.HashMap"],"instances":[],"name":"Lean.Elab.Tactic.BVDecide.LRAT.Trim"}