{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Parser.Tactic.getDSimpArgs?\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">getDSimpArgs?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span></span></div></div>","info":{"doc":"Extract the arguments from a `dsimpArgs` syntax as an array of syntaxes ","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Parser.Tactic.getDSimpArgs?","kind":"def","line":728,"name":"Lean.Parser.Tactic.getDSimpArgs?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L728-L731"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Parser.Tactic.getSimpArgs?\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">getSimpArgs?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span></span></div></div>","info":{"doc":"Extract the arguments from a `simpArgs` syntax as an array of syntaxes ","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Parser.Tactic.getSimpArgs?","kind":"def","line":723,"name":"Lean.Parser.Tactic.getSimpArgs?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L723-L726"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.evalDSimp\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">evalDSimp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.Tactic\">Tactic</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.evalDSimp","kind":"def","line":710,"name":"Lean.Elab.Tactic.evalDSimp","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L710-L712"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.dsimpLocation\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">dsimpLocation</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context\">Meta.Simp.Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">simprocs</span> : <a href=\"./Lean/Meta/Tactic/Simp/Simproc.html#Lean.Meta.Simp.SimprocsArray\">Meta.Simp.SimprocsArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">loc</span> : <a href=\"./Lean/Elab/Tactic/Location.html#Lean.Elab.Tactic.Location\">Location</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.dsimpLocation","kind":"def","line":690,"name":"Lean.Elab.Tactic.dsimpLocation","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L690-L708"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.evalSimpAll\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">evalSimpAll</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.Tactic\">Tactic</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.evalSimpAll","kind":"def","line":675,"name":"Lean.Elab.Tactic.evalSimpAll","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L675-L688"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.evalSimp\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">evalSimp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.Tactic\">Tactic</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.evalSimp","kind":"def","line":663,"name":"Lean.Elab.Tactic.evalSimp","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L663-L673"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.withSimpDiagnostics\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">withSimpDiagnostics</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Diagnostics\">Meta.Simp.Diagnostics</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.withSimpDiagnostics","kind":"def","line":655,"name":"Lean.Elab.Tactic.withSimpDiagnostics","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L655-L657"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.simpLocation\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">simpLocation</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context\">Meta.Simp.Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">simprocs</span> : <a href=\"./Lean/Meta/Tactic/Simp/Simproc.html#Lean.Meta.Simp.SimprocsArray\">Meta.Simp.SimprocsArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">discharge?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.Discharge\">Meta.Simp.Discharge</a></span> := <a href=\"./Init/Prelude.html#Option.none\">none</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">loc</span> : <a href=\"./Lean/Elab/Tactic/Location.html#Lean.Elab.Tactic.Location\">Location</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Stats\">Meta.Simp.Stats</a></span></div></div>","info":{"doc":"`simpLocation ctx discharge? varIdToLemmaId loc`\nruns the simplifier at locations specified by `loc`,\nusing the simp theorems collected in `ctx`\noptionally running a discharger specified in `discharge?` on generated subgoals.\n\nIts primary use is as the implementation of the\n`simp [...] at ...` and `simp only [...] at ...` syntaxes,\nbut can also be used by other tactics when a `Syntax` is not available.\n\nFor many tactics other than the simplifier,\none should use the `withLocation` tactic combinator\nwhen working with a `location`.\n","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.simpLocation","kind":"def","line":623,"name":"Lean.Elab.Tactic.simpLocation","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L623-L653"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.warnUnusedSimpArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">warnUnusedSimpArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">simpArgs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgResult\">ElabSimpArgResult</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">usedSimps</span> : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.UsedSimps\">Meta.Simp.UsedSimps</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Checks the simp arguments for unused ones, and stores a bitmask of unused ones in the info tree,\nto be picked up by the linter.\n(This indirection is necessary because the same `simp` syntax may be executed multiple times,\nand different simp arguments may be used in each step.)\n","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.warnUnusedSimpArgs","kind":"def","line":575,"name":"Lean.Elab.Tactic.warnUnusedSimpArgs","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L575-L620"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.pushUnusedSimpArgsInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">pushUnusedSimpArgsInfo</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MonadInfoTree\">MonadInfoTree</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">simpStx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mask</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.pushUnusedSimpArgsInfo","kind":"def","line":570,"name":"Lean.Elab.Tactic.pushUnusedSimpArgsInfo","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L570-L573"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.instTypeNameUnusedSimpArgsInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">instTypeNameUnusedSimpArgsInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Dynamic.html#TypeName\">TypeName</a> <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.UnusedSimpArgsInfo\">UnusedSimpArgsInfo</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.instTypeNameUnusedSimpArgsInfo","kind":"instance","line":568,"name":"Lean.Elab.Tactic.instTypeNameUnusedSimpArgsInfo","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L568-L568"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.UnusedSimpArgsInfo.mask\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">UnusedSimpArgsInfo</span>.<span class=\"name\">mask</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.UnusedSimpArgsInfo\">UnusedSimpArgsInfo</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.UnusedSimpArgsInfo.mask","kind":"def","line":567,"name":"Lean.Elab.Tactic.UnusedSimpArgsInfo.mask","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L567-L567"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.UnusedSimpArgsInfo.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">UnusedSimpArgsInfo</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mask</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.UnusedSimpArgsInfo\">UnusedSimpArgsInfo</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.UnusedSimpArgsInfo.mk","kind":"ctor","line":566,"name":"Lean.Elab.Tactic.UnusedSimpArgsInfo.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L566-L566"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.UnusedSimpArgsInfo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">UnusedSimpArgsInfo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.UnusedSimpArgsInfo","kind":"structure","line":566,"name":"Lean.Elab.Tactic.UnusedSimpArgsInfo","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L566-L568"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.linter.unusedSimpArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">linter</span>.<span class=\"name\">unusedSimpArgs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.linter.unusedSimpArgs","kind":"opaque","line":551,"name":"Lean.Elab.Tactic.linter.unusedSimpArgs","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L551-L564"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.traceSimpCall\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">traceSimpCall</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">usedSimps</span> : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.UsedSimps\">Meta.Simp.UsedSimps</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.traceSimpCall","kind":"def","line":547,"name":"Lean.Elab.Tactic.traceSimpCall","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L547-L548"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.mkSimpOnly\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">mkSimpOnly</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">usedSimps</span> : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.UsedSimps\">Meta.Simp.UsedSimps</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>","info":{"doc":"If `stx` is the syntax of a `simp`, `simp_all` or `dsimp` tactic invocation, and\n`usedSimps` is the set of simp lemmas used by this invocation, then `mkSimpOnly`\ncreates the syntax of an equivalent `simp only`, `simp_all only` or `dsimp only`\ninvocation.\n","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.mkSimpOnly","kind":"def","line":488,"name":"Lean.Elab.Tactic.mkSimpOnly","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L488-L545"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.tactic.simp.trace\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">tactic</span>.<span class=\"name\">simp</span>.<span class=\"name\">trace</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.tactic.simp.trace","kind":"opaque","line":483,"name":"Lean.Elab.Tactic.tactic.simp.trace","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L483-L486"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.withLoopChecking\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">withLoopChecking</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> → <a href=\"./foundational_types.html\">Type</a></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExcept\">MonadExcept</a> <a href=\"./Lean/Exception.html#Lean.Exception\">Exception</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.MonadRuntimeException\">MonadRuntimeException</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.MkSimpContextResult\">MkSimpContextResult</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Runs the given action.\nIf it throws a maxRecDepth exception (nested or not), run the loop checking.\nIf it does not throw, run the loop checking only if explicitly enabled.\n","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.withLoopChecking","kind":"def","line":458,"name":"Lean.Elab.Tactic.withLoopChecking","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L458-L481"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.mkSimpContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">mkSimpContext</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">eraseLocal</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.SimpKind\">SimpKind</a> := <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.SimpKind.simp\">SimpKind.simp</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ignoreStarArg</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">simpTheorems</span> : <span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorems\">Meta.SimpTheorems</a></span> := <a href=\"./Lean/Meta/Tactic/Simp/Attr.html#Lean.Meta.getSimpTheorems\">Meta.getSimpTheorems</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.MkSimpContextResult\">MkSimpContextResult</a></span></div></div>","info":{"doc":"Create the `Simp.Context` for the `simp`, `dsimp`, and `simp_all` tactics.\nIf `kind != SimpKind.simp`, the `discharge` option must be `none`\n\nTODO: generate error message if non `rfl` theorems are provided as arguments to `dsimp`.\n\nThe argument `simpTheorems` defaults to `getSimpTheorems`,\nbut allows overriding with an arbitrary mechanism to choose\nthe simp theorems besides those specified in the syntax.\nNote that if the syntax includes `simp only`, the `simpTheorems` argument is ignored.\n","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.mkSimpContext","kind":"def","line":424,"name":"Lean.Elab.Tactic.mkSimpContext","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L424-L456"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.MkSimpContextResult.simpArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">MkSimpContextResult</span>.<span class=\"name\">simpArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.MkSimpContextResult\">MkSimpContextResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgResult\">ElabSimpArgResult</a>)</span></div></div>","info":{"doc":"The elaborated simp arguments with syntax ","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.MkSimpContextResult.simpArgs","kind":"def","line":422,"name":"Lean.Elab.Tactic.MkSimpContextResult.simpArgs","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L422-L422"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.MkSimpContextResult.dischargeWrapper\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">MkSimpContextResult</span>.<span class=\"name\">dischargeWrapper</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.MkSimpContextResult\">MkSimpContextResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.Simp.DischargeWrapper\">Simp.DischargeWrapper</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.MkSimpContextResult.dischargeWrapper","kind":"def","line":420,"name":"Lean.Elab.Tactic.MkSimpContextResult.dischargeWrapper","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L420-L420"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.MkSimpContextResult.simprocs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">MkSimpContextResult</span>.<span class=\"name\">simprocs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.MkSimpContextResult\">MkSimpContextResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Simproc.html#Lean.Meta.Simp.SimprocsArray\">Meta.Simp.SimprocsArray</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.MkSimpContextResult.simprocs","kind":"def","line":419,"name":"Lean.Elab.Tactic.MkSimpContextResult.simprocs","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L419-L419"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.MkSimpContextResult.ctx\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">MkSimpContextResult</span>.<span class=\"name\">ctx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.MkSimpContextResult\">MkSimpContextResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context\">Meta.Simp.Context</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.MkSimpContextResult.ctx","kind":"def","line":418,"name":"Lean.Elab.Tactic.MkSimpContextResult.ctx","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L418-L418"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.MkSimpContextResult.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">MkSimpContextResult</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context\">Meta.Simp.Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">simprocs</span> : <a href=\"./Lean/Meta/Tactic/Simp/Simproc.html#Lean.Meta.Simp.SimprocsArray\">Meta.Simp.SimprocsArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">dischargeWrapper</span> : <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.Simp.DischargeWrapper\">Simp.DischargeWrapper</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">simpArgs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgResult\">ElabSimpArgResult</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.MkSimpContextResult\">MkSimpContextResult</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.MkSimpContextResult.mk","kind":"ctor","line":417,"name":"Lean.Elab.Tactic.MkSimpContextResult.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L417-L417"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.MkSimpContextResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">MkSimpContextResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.MkSimpContextResult","kind":"structure","line":417,"name":"Lean.Elab.Tactic.MkSimpContextResult","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L417-L422"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.simpOnlyBuiltins\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">simpOnlyBuiltins</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.simpOnlyBuiltins","kind":"def","line":415,"name":"Lean.Elab.Tactic.simpOnlyBuiltins","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L415-L415"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.setSimpParams\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">setSimpParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`tactic</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">params</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`tactic</span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.setSimpParams","kind":"def","line":408,"name":"Lean.Elab.Tactic.setSimpParams","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L408-L413"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.getSimpParams\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">getSimpParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`tactic</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.getSimpParams","kind":"def","line":405,"name":"Lean.Elab.Tactic.getSimpParams","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L405-L406"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.isSimpOnly\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">isSimpOnly</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`tactic</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.isSimpOnly","kind":"def","line":402,"name":"Lean.Elab.Tactic.isSimpOnly","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L402-L403"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.simpOnlyPos\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">simpOnlyPos</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"Position for the `only` child syntax in the `simp` tactic. ","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.simpOnlyPos","kind":"def","line":399,"name":"Lean.Elab.Tactic.simpOnlyPos","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L399-L400"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.simpParamsPos\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">simpParamsPos</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"Position for the `[..]` child syntax in the `simp` tactic. ","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.simpParamsPos","kind":"def","line":396,"name":"Lean.Elab.Tactic.simpParamsPos","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L396-L397"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.elabSimpArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">elabSimpArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context\">Meta.Simp.Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">simprocs</span> : <a href=\"./Lean/Meta/Tactic/Simp/Simproc.html#Lean.Meta.Simp.SimprocsArray\">Meta.Simp.SimprocsArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">eraseLocal</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.SimpKind\">SimpKind</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ignoreStarArg</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgsResult\">ElabSimpArgsResult</a></span></div></div>","info":{"doc":"Elaborate extra simp theorems provided to `simp`. `stx` is of the form `\"[\" simpTheorem,* \"]\"`\nIf `eraseLocal == true`, then we consider local declarations when resolving names for erased theorems (`- id`),\nthis option only makes sense for `simp_all` or `*` is used.\nWhen `recover := true`, try to recover from errors as much as possible so that users keep seeing\nthe current goal.\n","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.elabSimpArgs","kind":"def","line":307,"name":"Lean.Elab.Tactic.elabSimpArgs","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L307-L394"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgsResult.simpArgs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElabSimpArgsResult</span>.<span class=\"name\">simpArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgsResult\">ElabSimpArgsResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgResult\">ElabSimpArgResult</a>)</span></div></div>","info":{"doc":"The elaborated simp arguments with syntax ","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgsResult.simpArgs","kind":"def","line":292,"name":"Lean.Elab.Tactic.ElabSimpArgsResult.simpArgs","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L292-L292"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgsResult.simprocs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElabSimpArgsResult</span>.<span class=\"name\">simprocs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgsResult\">ElabSimpArgsResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Simproc.html#Lean.Meta.Simp.SimprocsArray\">Meta.Simp.SimprocsArray</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgsResult.simprocs","kind":"def","line":290,"name":"Lean.Elab.Tactic.ElabSimpArgsResult.simprocs","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L290-L290"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgsResult.ctx\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElabSimpArgsResult</span>.<span class=\"name\">ctx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgsResult\">ElabSimpArgsResult</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context\">Meta.Simp.Context</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgsResult.ctx","kind":"def","line":289,"name":"Lean.Elab.Tactic.ElabSimpArgsResult.ctx","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L289-L289"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgsResult.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElabSimpArgsResult</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctx</span> : <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Context\">Meta.Simp.Context</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">simprocs</span> : <a href=\"./Lean/Meta/Tactic/Simp/Simproc.html#Lean.Meta.Simp.SimprocsArray\">Meta.Simp.SimprocsArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">simpArgs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> (<a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgResult\">ElabSimpArgResult</a>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgsResult\">ElabSimpArgsResult</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgsResult.mk","kind":"ctor","line":288,"name":"Lean.Elab.Tactic.ElabSimpArgsResult.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L288-L288"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgsResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElabSimpArgsResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The result of elaborating a full array of simp arguments and applying them to the simp context.\n","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgsResult","kind":"structure","line":285,"name":"Lean.Elab.Tactic.ElabSimpArgsResult","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L285-L292"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgResult.simpTheorems\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElabSimpArgResult</span>.<span class=\"name\">simpTheorems</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgResult\">ElabSimpArgResult</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpTheorem\">Meta.SimpTheorem</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgResult.simpTheorems","kind":"def","line":162,"name":"Lean.Elab.Tactic.ElabSimpArgResult.simpTheorems","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L162-L169"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgResult.none\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElabSimpArgResult</span>.<span class=\"name\">none</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgResult\">ElabSimpArgResult</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgResult.none","kind":"ctor","line":160,"name":"Lean.Elab.Tactic.ElabSimpArgResult.none","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L160-L160"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgResult.star\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElabSimpArgResult</span>.<span class=\"name\">star</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgResult\">ElabSimpArgResult</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgResult.star","kind":"ctor","line":159,"name":"Lean.Elab.Tactic.ElabSimpArgResult.star","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L159-L159"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgResult.eraseSimproc\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElabSimpArgResult</span>.<span class=\"name\">eraseSimproc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toErase</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgResult\">ElabSimpArgResult</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgResult.eraseSimproc","kind":"ctor","line":158,"name":"Lean.Elab.Tactic.ElabSimpArgResult.eraseSimproc","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L158-L158"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgResult.erase\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElabSimpArgResult</span>.<span class=\"name\">erase</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toErase</span> : <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.Origin\">Meta.Origin</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgResult\">ElabSimpArgResult</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgResult.erase","kind":"ctor","line":157,"name":"Lean.Elab.Tactic.ElabSimpArgResult.erase","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L157-L157"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgResult.ext\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElabSimpArgResult</span>.<span class=\"name\">ext</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ext₁?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpExtension\">Meta.SimpExtension</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ext₂?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Tactic/Simp/Simproc.html#Lean.Meta.Simp.SimprocExtension\">Meta.Simp.SimprocExtension</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : (<span class=\"fn\"><span class=\"fn\">ext₁?</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Bool.or\">||</a> <span class=\"fn\"><span class=\"fn\">ext₂?</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgResult\">ElabSimpArgResult</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgResult.ext","kind":"ctor","line":156,"name":"Lean.Elab.Tactic.ElabSimpArgResult.ext","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L156-L156"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgResult.addLetToUnfold\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElabSimpArgResult</span>.<span class=\"name\">addLetToUnfold</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgResult\">ElabSimpArgResult</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgResult.addLetToUnfold","kind":"ctor","line":155,"name":"Lean.Elab.Tactic.ElabSimpArgResult.addLetToUnfold","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L155-L155"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgResult.addSimproc\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElabSimpArgResult</span>.<span class=\"name\">addSimproc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">«simproc»</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">post</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgResult\">ElabSimpArgResult</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgResult.addSimproc","kind":"ctor","line":154,"name":"Lean.Elab.Tactic.ElabSimpArgResult.addSimproc","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L154-L154"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgResult.addEntries\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElabSimpArgResult</span>.<span class=\"name\">addEntries</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">entries</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpEntry\">Meta.SimpEntry</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgResult\">ElabSimpArgResult</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgResult.addEntries","kind":"ctor","line":153,"name":"Lean.Elab.Tactic.ElabSimpArgResult.addEntries","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L153-L153"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ElabSimpArgResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"The result of elaborating a single `simp` argument\n","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ElabSimpArgResult","kind":"inductive","line":149,"name":"Lean.Elab.Tactic.ElabSimpArgResult","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L149-L160"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ResolveSimpIdResult.ext\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ResolveSimpIdResult</span>.<span class=\"name\">ext</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ext₁?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Tactic/Simp/SimpTheorems.html#Lean.Meta.SimpExtension\">Meta.SimpExtension</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ext₂?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Tactic/Simp/Simproc.html#Lean.Meta.Simp.SimprocExtension\">Meta.Simp.SimprocExtension</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : (<span class=\"fn\"><span class=\"fn\">ext₁?</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span> <a href=\"./Init/Prelude.html#Bool.or\">||</a> <span class=\"fn\"><span class=\"fn\">ext₂?</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ResolveSimpIdResult\">ResolveSimpIdResult</a></div></div>","info":{"doc":"Recall that when we declare a `simp` attribute using `register_simp_attr`, we automatically\ncreate a `simproc` attribute. However, if the user creates `simp` and `simproc` attributes\nprogrammatically, then one of them may be missing. Moreover, when we write `simp [seval]`,\nwe want to retrieve both the simp and simproc sets. We want to hide from users that\n`simp` and `simproc` sets are stored in different data-structures.\n","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ResolveSimpIdResult.ext","kind":"ctor","line":104,"name":"Lean.Elab.Tactic.ResolveSimpIdResult.ext","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L104-L111"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ResolveSimpIdResult.simproc\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ResolveSimpIdResult</span>.<span class=\"name\">simproc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ResolveSimpIdResult\">ResolveSimpIdResult</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ResolveSimpIdResult.simproc","kind":"ctor","line":103,"name":"Lean.Elab.Tactic.ResolveSimpIdResult.simproc","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L103-L103"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ResolveSimpIdResult.expr\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ResolveSimpIdResult</span>.<span class=\"name\">expr</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ResolveSimpIdResult\">ResolveSimpIdResult</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ResolveSimpIdResult.expr","kind":"ctor","line":102,"name":"Lean.Elab.Tactic.ResolveSimpIdResult.expr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L102-L102"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ResolveSimpIdResult.none\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ResolveSimpIdResult</span>.<span class=\"name\">none</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ResolveSimpIdResult\">ResolveSimpIdResult</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ResolveSimpIdResult.none","kind":"ctor","line":101,"name":"Lean.Elab.Tactic.ResolveSimpIdResult.none","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L101-L101"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ResolveSimpIdResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">ResolveSimpIdResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.ResolveSimpIdResult","kind":"inductive","line":100,"name":"Lean.Elab.Tactic.ResolveSimpIdResult","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L100-L111"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.elabSimpConfig\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">elabSimpConfig</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">optConfig</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.SimpKind\">SimpKind</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Meta.Simp.Config</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.elabSimpConfig","kind":"def","line":94,"name":"Lean.Elab.Tactic.elabSimpConfig","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L94-L98"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.Simp.DischargeWrapper.with\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Simp</span>.<span class=\"name\">DischargeWrapper</span>.<span class=\"name\">with</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.Simp.DischargeWrapper\">DischargeWrapper</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.Discharge\">Meta.Simp.Discharge</a></span> → <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.Simp.DischargeWrapper.with","kind":"def","line":73,"name":"Lean.Elab.Tactic.Simp.DischargeWrapper.with","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L73-L81"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.Simp.DischargeWrapper.custom\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Simp</span>.<span class=\"name\">DischargeWrapper</span>.<span class=\"name\">custom</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.State\">Term.State</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">discharge</span> : <a href=\"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.Discharge\">Meta.Simp.Discharge</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.Simp.DischargeWrapper\">DischargeWrapper</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.Simp.DischargeWrapper.custom","kind":"ctor","line":71,"name":"Lean.Elab.Tactic.Simp.DischargeWrapper.custom","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L71-L71"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.Simp.DischargeWrapper.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Simp</span>.<span class=\"name\">DischargeWrapper</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.Simp.DischargeWrapper\">DischargeWrapper</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.Simp.DischargeWrapper.default","kind":"ctor","line":70,"name":"Lean.Elab.Tactic.Simp.DischargeWrapper.default","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L70-L70"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.Simp.DischargeWrapper\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Simp</span>.<span class=\"name\">DischargeWrapper</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.Simp.DischargeWrapper","kind":"inductive","line":69,"name":"Lean.Elab.Tactic.Simp.DischargeWrapper","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L69-L71"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.tacticToDischarge\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">tacticToDischarge</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tacticCode</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> (<span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.State\">Term.State</a></span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Meta/Tactic/Simp/Rewrite.html#Lean.Meta.Simp.Discharge\">Meta.Simp.Discharge</a>)</span></div></div>","info":{"doc":"Implement a `simp` discharge function using the given tactic syntax code.\nRecall that `simp` dischargers are in `SimpM` which does not have access to `Term.State`.\nWe need access to `Term.State` to store messages and update the info tree.\nThus, we create an `IO.ref` to track these changes at `Term.State` when we execute `tacticCode`.\nWe must set this reference with the current `Term.State` before we execute `simp` using the\ngenerated `Simp.Discharge`. ","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.tacticToDischarge","kind":"def","line":35,"name":"Lean.Elab.Tactic.tacticToDischarge","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L35-L67"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.instBEqSimpKind.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">instBEqSimpKind</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.SimpKind\">SimpKind</a> → <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.SimpKind\">SimpKind</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.instBEqSimpKind.beq","kind":"def","line":33,"name":"Lean.Elab.Tactic.instBEqSimpKind.beq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L33-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.instBEqSimpKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">instBEqSimpKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.SimpKind\">SimpKind</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.instBEqSimpKind","kind":"instance","line":33,"name":"Lean.Elab.Tactic.instBEqSimpKind","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L33-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.instInhabitedSimpKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">instInhabitedSimpKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.SimpKind\">SimpKind</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.instInhabitedSimpKind","kind":"instance","line":33,"name":"Lean.Elab.Tactic.instInhabitedSimpKind","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L33-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.instInhabitedSimpKind.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">instInhabitedSimpKind</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.SimpKind\">SimpKind</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.instInhabitedSimpKind.default","kind":"def","line":33,"name":"Lean.Elab.Tactic.instInhabitedSimpKind.default","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L33-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.SimpKind.dsimp\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">SimpKind</span>.<span class=\"name\">dsimp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.SimpKind\">SimpKind</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.SimpKind.dsimp","kind":"ctor","line":32,"name":"Lean.Elab.Tactic.SimpKind.dsimp","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L32-L32"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.SimpKind.simpAll\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">SimpKind</span>.<span class=\"name\">simpAll</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.SimpKind\">SimpKind</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.SimpKind.simpAll","kind":"ctor","line":31,"name":"Lean.Elab.Tactic.SimpKind.simpAll","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L31-L31"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.SimpKind.simp\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">SimpKind</span>.<span class=\"name\">simp</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.SimpKind\">SimpKind</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.SimpKind.simp","kind":"ctor","line":30,"name":"Lean.Elab.Tactic.SimpKind.simp","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L30-L30"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.SimpKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">SimpKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.SimpKind","kind":"inductive","line":29,"name":"Lean.Elab.Tactic.SimpKind","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L29-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.elabDSimpConfigCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">elabDSimpConfigCore</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> → <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.DSimp.Config\">Meta.DSimp.Config</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.elabDSimpConfigCore","kind":"def","line":27,"name":"Lean.Elab.Tactic.elabDSimpConfigCore","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L27-L27"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.elabSimpConfigCtxCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">elabSimpConfigCtxCore</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> → <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.ConfigCtx\">Meta.Simp.ConfigCtx</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.elabSimpConfigCtxCore","kind":"def","line":26,"name":"Lean.Elab.Tactic.elabSimpConfigCtxCore","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L26-L26"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.elabSimpConfigCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">elabSimpConfigCore</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> → <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Basic.html#Lean.Elab.Tactic.TacticM\">TacticM</a> <a href=\"./Init/MetaTypes.html#Lean.Meta.Simp.Config\">Meta.Simp.Config</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Simp.html#Lean.Elab.Tactic.elabSimpConfigCore","kind":"def","line":25,"name":"Lean.Elab.Tactic.elabSimpConfigCore","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Simp.lean#L25-L25"}}],"imports":["Lean.Meta.Tactic.Simp","Lean.Meta.Tactic.Simp.LoopProtection","Lean.Meta.Tactic.Replace","Lean.Meta.Hint","Lean.Elab.BuiltinNotation","Lean.Elab.Tactic.Basic","Lean.Elab.Tactic.ElabTerm","Lean.Elab.Tactic.Location","Lean.Elab.Tactic.Config"],"instances":[{"className":"Inhabited","name":"Lean.Elab.Tactic.instInhabitedSimpKind","typeNames":["Lean.Elab.Tactic.SimpKind"]},{"className":"BEq","name":"Lean.Elab.Tactic.instBEqSimpKind","typeNames":["Lean.Elab.Tactic.SimpKind"]},{"className":"TypeName","name":"Lean.Elab.Tactic.instTypeNameUnusedSimpArgsInfo","typeNames":["Lean.Elab.Tactic.UnusedSimpArgsInfo"]}],"name":"Lean.Elab.Tactic.Simp"}