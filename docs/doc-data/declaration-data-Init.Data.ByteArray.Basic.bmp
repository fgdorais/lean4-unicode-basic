{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#instToStringByteArray\"><span class=\"name\">instToStringByteArray</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#instToStringByteArray","kind":"instance","line":362,"name":"instToStringByteArray","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L362-L362"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#List.toByteArray.loop\"><span class=\"name\">List</span>.<span class=\"name\">toByteArray</span>.<span class=\"name\">loop</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span> → <span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a> → <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#List.toByteArray.loop","kind":"def","line":357,"name":"List.toByteArray.loop","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L357-L359"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#List.toByteArray\"><span class=\"name\">List</span>.<span class=\"name\">toByteArray</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a></div></div>","info":{"doc":"Converts a list of bytes into a `ByteArray`.\n","docLink":"./Init/Data/ByteArray/Basic.html#List.toByteArray","kind":"def","line":353,"name":"List.toByteArray","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L353-L360"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.prevn\"><span class=\"name\">ByteArray</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">prevn</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator\">Iterator</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator\">Iterator</a></span></span></div></div>","info":{"doc":"Moves the iterator's position several bytes back.\n\nIf asked to go back more bytes than available, stops at the beginning of the array. ","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.prevn","kind":"def","line":343,"name":"ByteArray.Iterator.prevn","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L343-L348"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.nextn\"><span class=\"name\">ByteArray</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">nextn</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator\">Iterator</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator\">Iterator</a></span></span></div></div>","info":{"doc":"Moves the iterator's position several bytes forward.\n\nThe resulting iterator is only valid if the number of bytes to skip is less than or equal to\nthe number of bytes left in the iterator. ","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.nextn","kind":"def","line":340,"name":"ByteArray.Iterator.nextn","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L340-L341"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.forward\"><span class=\"name\">ByteArray</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">forward</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator\">Iterator</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator\">Iterator</a></span></span></div></div>","info":{"doc":"Moves the iterator's position several bytes forward.\n\nThe resulting iterator is only valid if the number of bytes to skip is less than or equal to\nthe number of bytes left in the iterator. ","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.forward","kind":"def","line":332,"name":"ByteArray.Iterator.forward","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L332-L338"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.toEnd\"><span class=\"name\">ByteArray</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">toEnd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator\">Iterator</a> → <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator\">Iterator</a></span></div></div>","info":{"doc":"Moves the iterator's position to the end of the array.\n\nNote that `i.toEnd.atEnd` is always `true`. ","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.toEnd","kind":"def","line":325,"name":"ByteArray.Iterator.toEnd","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L325-L330"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.hasPrev\"><span class=\"name\">ByteArray</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">hasPrev</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator\">Iterator</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"True if the position is not zero. ","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.hasPrev","kind":"def","line":320,"name":"ByteArray.Iterator.hasPrev","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L320-L323"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.next'\"><span class=\"name\">ByteArray</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">next'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator\">Iterator</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">_h</span> : <span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.hasNext\">hasNext</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator\">Iterator</a></div></div>","info":{"doc":"Moves the iterator's position forward by one byte. -","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.next'","kind":"def","line":314,"name":"ByteArray.Iterator.next'","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L314-L318"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.curr'\"><span class=\"name\">ByteArray</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">curr'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">it</span> : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator\">Iterator</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">it</span>.<a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.hasNext\">hasNext</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>","info":{"doc":"The byte at the current position. -","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.curr'","kind":"def","line":304,"name":"ByteArray.Iterator.curr'","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L304-L312"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.hasNext\"><span class=\"name\">ByteArray</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">hasNext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator\">Iterator</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"True if the iterator is not past the array's last byte. ","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.hasNext","kind":"def","line":299,"name":"ByteArray.Iterator.hasNext","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L299-L302"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.atEnd\"><span class=\"name\">ByteArray</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">atEnd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator\">Iterator</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"True if the iterator is past the array's last byte. ","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.atEnd","kind":"def","line":294,"name":"ByteArray.Iterator.atEnd","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L294-L297"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.prev\"><span class=\"name\">ByteArray</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">prev</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator\">Iterator</a> → <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator\">Iterator</a></span></div></div>","info":{"doc":"Decreases the iterator's position.\n\nIf the position is zero, this function is the identity. ","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.prev","kind":"def","line":287,"name":"ByteArray.Iterator.prev","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L287-L292"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.next\"><span class=\"name\">ByteArray</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">next</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator\">Iterator</a> → <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator\">Iterator</a></span></div></div>","info":{"doc":"Moves the iterator's position forward by one byte, unconditionally.\n\nIt is only valid to call this function if the iterator is not at the end of the array, *i.e.*\n`Iterator.atEnd` is `false`; otherwise, the resulting iterator will be invalid. ","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.next","kind":"def","line":279,"name":"ByteArray.Iterator.next","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L279-L285"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.curr\"><span class=\"name\">ByteArray</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">curr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator\">Iterator</a> → <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>","info":{"doc":"The byte at the current position.\n\nOn an invalid position, returns `(default : UInt8)`. ","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.curr","kind":"def","line":268,"name":"ByteArray.Iterator.curr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L268-L277"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.pos\"><span class=\"name\">ByteArray</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">pos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator\">Iterator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"The current position.\n\nThis position is not necessarily valid for the array, for instance if one keeps calling\n`Iterator.next` when `Iterator.atEnd` is true. If the position is not valid, then the\ncurrent byte is `(default : UInt8)`. ","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.pos","kind":"def","line":265,"name":"ByteArray.Iterator.pos","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L265-L266"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.remainingBytes\"><span class=\"name\">ByteArray</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">remainingBytes</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator\">Iterator</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"Number of bytes remaining in the iterator. ","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.remainingBytes","kind":"def","line":261,"name":"ByteArray.Iterator.remainingBytes","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L261-L263"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.sizeOf_eq\"><span class=\"name\">ByteArray</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">sizeOf_eq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator\">Iterator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/SizeOf.html#SizeOf.sizeOf\">sizeOf</a> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.array\">array</a></span>.<a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.size\">size</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.idx\">idx</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.sizeOf_eq","kind":"theorem","line":256,"name":"ByteArray.Iterator.sizeOf_eq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L256-L257"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.instSizeOfIterator\"><span class=\"name\">ByteArray</span>.<span class=\"name\">instSizeOfIterator</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/SizeOf.html#SizeOf\">SizeOf</a> <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator\">Iterator</a></span></div></div>","info":{"doc":"The size of an array iterator is the number of bytes remaining. ","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.instSizeOfIterator","kind":"instance","line":252,"name":"ByteArray.instSizeOfIterator","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L252-L254"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.iter\"><span class=\"name\">ByteArray</span>.<span class=\"name\">iter</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arr</span> : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator\">Iterator</a></div></div>","info":{"doc":"Creates an iterator at the beginning of an array. ","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.iter","kind":"def","line":249,"name":"ByteArray.iter","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L249-L250"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.mkIterator\"><span class=\"name\">ByteArray</span>.<span class=\"name\">mkIterator</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arr</span> : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator\">Iterator</a></div></div>","info":{"doc":"Creates an iterator at the beginning of an array. ","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.mkIterator","kind":"def","line":245,"name":"ByteArray.mkIterator","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L245-L247"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.instInhabitedIterator\"><span class=\"name\">ByteArray</span>.<span class=\"name\">instInhabitedIterator</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator\">Iterator</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.instInhabitedIterator","kind":"instance","line":243,"name":"ByteArray.instInhabitedIterator","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L243-L243"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.instInhabitedIterator.default\"><span class=\"name\">ByteArray</span>.<span class=\"name\">instInhabitedIterator</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator\">Iterator</a></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.instInhabitedIterator.default","kind":"def","line":243,"name":"ByteArray.instInhabitedIterator.default","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L243-L243"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.idx\"><span class=\"name\">ByteArray</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">idx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator\">Iterator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"The current position.\n\nThis position is not necessarily valid for the array, for instance if one keeps calling\n`Iterator.next` when `Iterator.atEnd` is true. If the position is not valid, then the\ncurrent byte is `(default : UInt8)`. ","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.idx","kind":"def","line":242,"name":"ByteArray.Iterator.idx","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L242-L242"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.array\"><span class=\"name\">ByteArray</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">array</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator\">Iterator</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a></div></div>","info":{"doc":"The array the iterator is for. ","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.array","kind":"def","line":236,"name":"ByteArray.Iterator.array","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L236-L236"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.mk\"><span class=\"name\">ByteArray</span>.<span class=\"name\">Iterator</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">array</span> : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idx</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator\">Iterator</a></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator.mk","kind":"ctor","line":234,"name":"ByteArray.Iterator.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L234-L234"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator\"><span class=\"name\">ByteArray</span>.<span class=\"name\">Iterator</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Iterator over the bytes (`UInt8`) of a `ByteArray`.\n\nTypically created by `arr.iter`, where `arr` is a `ByteArray`.\n\nAn iterator is *valid* if the position `i` is *valid* for the array `arr`, meaning `0 ≤ i ≤ arr.size`\n\nMost operations on iterators return arbitrary values if the iterator is not valid. The functions in\nthe `ByteArray.Iterator` API should rule out the creation of invalid iterators, with two exceptions:\n\n- `Iterator.next iter` is invalid if `iter` is already at the end of the array (`iter.atEnd` is\n  `true`)\n- `Iterator.forward iter n`/`Iterator.nextn iter n` is invalid if `n` is strictly greater than the\n  number of remaining bytes.\n","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.Iterator","kind":"structure","line":220,"name":"ByteArray.Iterator","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L220-L243"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.foldl\"><span class=\"name\">ByteArray</span>.<span class=\"name\">foldl</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a> → <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">as</span> : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">start</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stop</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\"><span class=\"fn\">as</span>.<a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">β</span></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.foldl","kind":"def","line":216,"name":"ByteArray.foldl","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L216-L218"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.foldlM.loop\"><span class=\"name\">ByteArray</span>.<span class=\"name\">foldlM</span>.<span class=\"name\">loop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> v → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">as</span> : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stop</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">stop</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">as</span>.<a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.size\">size</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i </span><span class=\"fn\">j</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.foldlM.loop","kind":"def","line":202,"name":"ByteArray.foldlM.loop","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L202-L209"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.foldlM\"><span class=\"name\">ByteArray</span>.<span class=\"name\">foldlM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> v → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">as</span> : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">start</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stop</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\"><span class=\"fn\">as</span>.<a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"Reference implementation for `foldlM` ","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.foldlM","kind":"def","line":198,"name":"ByteArray.foldlM","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L198-L214"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.foldlMUnsafe.fold\"><span class=\"name\">ByteArray</span>.<span class=\"name\">foldlMUnsafe</span>.<span class=\"name\">fold</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> v → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">as</span> : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i </span><span class=\"fn\">stop</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.foldlMUnsafe.fold","kind":"def","line":185,"name":"ByteArray.foldlMUnsafe.fold","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L185-L189"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.foldlMUnsafe\"><span class=\"name\">ByteArray</span>.<span class=\"name\">foldlMUnsafe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> v → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">init</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">as</span> : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">start</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stop</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\"><span class=\"fn\">as</span>.<a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.size\">size</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"See comment at `forInUnsafe` ","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.foldlMUnsafe","kind":"def","line":181,"name":"ByteArray.foldlMUnsafe","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L181-L196"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.instForInUInt8\"><span class=\"name\">ByteArray</span>.<span class=\"name\">instForInUInt8</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> u_1 → <a href=\"./foundational_types.html\">Type</a> u_2</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#ForIn\">ForIn</a> <span class=\"fn\">m</span> <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.instForInUInt8","kind":"instance","line":178,"name":"ByteArray.instForInUInt8","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L178-L179"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.forIn.loop\"><span class=\"name\">ByteArray</span>.<span class=\"name\">forIn</span>.<span class=\"name\">loop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> v → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">as</span> : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">β</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">as</span>.<a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.size\">size</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.forIn.loop","kind":"def","line":166,"name":"ByteArray.forIn.loop","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L166-L175"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.forIn\"><span class=\"name\">ByteArray</span>.<span class=\"name\">forIn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> v → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">as</span> : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">β</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"Reference implementation for `forIn` ","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.forIn","kind":"def","line":163,"name":"ByteArray.forIn","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L163-L176"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.forInUnsafe.loop\"><span class=\"name\">ByteArray</span>.<span class=\"name\">forInUnsafe</span>.<span class=\"name\">loop</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> v → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">as</span> : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">β</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">sz </span><span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.forInUnsafe.loop","kind":"def","line":153,"name":"ByteArray.forInUnsafe.loop","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L153-L160"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">unsafe def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.forInUnsafe\"><span class=\"name\">ByteArray</span>.<span class=\"name\">forInUnsafe</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a> v}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">m</span> : <span class=\"fn\"><a href=\"./foundational_types.html\">Type</a> v → <a href=\"./foundational_types.html\">Type</a> w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">[<span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <span class=\"fn\">m</span></span>]</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">as</span> : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\">β</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a> → <span class=\"fn\"><span class=\"fn\">β</span> → <span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">(<a href=\"./Init/Core.html#ForInStep\">ForInStep</a> <span class=\"fn\">β</span>)</span></span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">m</span> <span class=\"fn\">β</span></span></div></div>","info":{"doc":"We claim this unsafe implementation is correct because an array cannot have more than `usizeSz` elements in our runtime.\nThis is similar to the `Array` version.\n\nTODO: avoid code duplication in the future after we improve the compiler.\n","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.forInUnsafe","kind":"def","line":145,"name":"ByteArray.forInUnsafe","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L145-L161"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.findFinIdx?.loop\"><span class=\"name\">ByteArray</span>.<span class=\"name\">findFinIdx?</span>.<span class=\"name\">loop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.size\">size</a></span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.findFinIdx?.loop","kind":"def","line":136,"name":"ByteArray.findFinIdx?.loop","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L136-L140"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.findFinIdx?\"><span class=\"name\">ByteArray</span>.<span class=\"name\">findFinIdx?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">start</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.size\">size</a></span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.findFinIdx?","kind":"def","line":135,"name":"ByteArray.findFinIdx?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L135-L143"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.findIdx?.loop\"><span class=\"name\">ByteArray</span>.<span class=\"name\">findIdx?</span>.<span class=\"name\">loop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.findIdx?.loop","kind":"def","line":126,"name":"ByteArray.findIdx?.loop","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L126-L130"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.findIdx?\"><span class=\"name\">ByteArray</span>.<span class=\"name\">findIdx?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">start</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.findIdx?","kind":"def","line":125,"name":"ByteArray.findIdx?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L125-L133"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.toList.loop\"><span class=\"name\">ByteArray</span>.<span class=\"name\">toList</span>.<span class=\"name\">loop</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bs</span> : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.toList.loop","kind":"def","line":116,"name":"ByteArray.toList.loop","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L116-L120"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.toList\"><span class=\"name\">ByteArray</span>.<span class=\"name\">toList</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bs</span> : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.toList","kind":"def","line":115,"name":"ByteArray.toList","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L115-L123"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.instAppend\"><span class=\"name\">ByteArray</span>.<span class=\"name\">instAppend</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Append\">Append</a> <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.instAppend","kind":"instance","line":113,"name":"ByteArray.instAppend","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L113-L113"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.append\"><span class=\"name\">ByteArray</span>.<span class=\"name\">append</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.append","kind":"def","line":109,"name":"ByteArray.append","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L109-L111"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.extract\"><span class=\"name\">ByteArray</span>.<span class=\"name\">extract</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b </span><span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.extract","kind":"def","line":106,"name":"ByteArray.extract","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L106-L107"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.copySlice\"><span class=\"name\">ByteArray</span>.<span class=\"name\">copySlice</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">src</span> : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">srcOff</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">dest</span> : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">destOff </span><span class=\"fn\">len</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">exact</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a></div></div>","info":{"doc":"Copy the slice at `[srcOff, srcOff + len)` in `src` to `[destOff, destOff + len)` in `dest`, growing `dest` if necessary.\nIf `exact` is `false`, the capacity will be doubled when grown. ","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.copySlice","kind":"def","line":99,"name":"ByteArray.copySlice","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L99-L104"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.isEmpty\"><span class=\"name\">ByteArray</span>.<span class=\"name\">isEmpty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.isEmpty","kind":"def","line":96,"name":"ByteArray.isEmpty","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L96-L97"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.instHashable\"><span class=\"name\">ByteArray</span>.<span class=\"name\">instHashable</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Hashable\">Hashable</a> <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.instHashable","kind":"instance","line":93,"name":"ByteArray.instHashable","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L93-L94"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.hash\"><span class=\"name\">ByteArray</span>.<span class=\"name\">hash</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt64\">UInt64</a></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.hash","kind":"opaque","line":90,"name":"ByteArray.hash","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L90-L91"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.uset\"><span class=\"name\">ByteArray</span>.<span class=\"name\">uset</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a> → <span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Tactics.html#autoParam\">autoParam</a> (<span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/UInt/BasicAux.html#USize.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.size\">size</a></span>) <a href=\"./Init/Data/ByteArray/Basic.html#_auto._@.Init.Data.ByteArray.Basic.2154413398._hygCtx._hyg.9\">_auto✝</a></span>) → <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.uset","kind":"def","line":86,"name":"ByteArray.uset","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L86-L88"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.set\"><span class=\"name\">ByteArray</span>.<span class=\"name\">set</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a> → <span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Tactics.html#autoParam\">autoParam</a> (<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.size\">size</a></span>) <a href=\"./Init/Data/ByteArray/Basic.html#_auto._@.Init.Data.ByteArray.Basic.3103831426._hygCtx._hyg.10\">_auto✝</a></span>) → <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.set","kind":"def","line":82,"name":"ByteArray.set","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L82-L84"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.set!\"><span class=\"name\">ByteArray</span>.<span class=\"name\">set!</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a> → <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.set!","kind":"def","line":78,"name":"ByteArray.set!","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L78-L80"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.instGetElemUSizeUInt8LtNatValToFinSize\"><span class=\"name\">ByteArray</span>.<span class=\"name\">instGetElemUSizeUInt8LtNatValToFinSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/GetElem.html#GetElem\">GetElem</a> <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a> <a href=\"./Init/Prelude.html#USize\">USize</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a> <span class=\"fn\">fun (<span class=\"fn\">xs</span> : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>) (<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>) =&gt; <span class=\"fn\">↑<span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/UInt/BasicAux.html#USize.toFin\">toFin</a></span></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.size\">size</a></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.instGetElemUSizeUInt8LtNatValToFinSize","kind":"instance","line":75,"name":"ByteArray.instGetElemUSizeUInt8LtNatValToFinSize","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L75-L76"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.instGetElemNatUInt8LtSize\"><span class=\"name\">ByteArray</span>.<span class=\"name\">instGetElemNatUInt8LtSize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/GetElem.html#GetElem\">GetElem</a> <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a> <span class=\"fn\">fun (<span class=\"fn\">xs</span> : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>) (<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) =&gt; <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">xs</span>.<a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.size\">size</a></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.instGetElemNatUInt8LtSize","kind":"instance","line":72,"name":"ByteArray.instGetElemNatUInt8LtSize","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L72-L73"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.get\"><span class=\"name\">ByteArray</span>.<span class=\"name\">get</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.size\">size</a></span> := by get_elem_tactic)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.get","kind":"def","line":68,"name":"ByteArray.get","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L68-L70"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.get!\"><span class=\"name\">ByteArray</span>.<span class=\"name\">get!</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.get!","kind":"def","line":64,"name":"ByteArray.get!","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L64-L66"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.uget\"><span class=\"name\">ByteArray</span>.<span class=\"name\">uget</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#USize\">USize</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">i</span>.<a href=\"./Init/Data/UInt/BasicAux.html#USize.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.size\">size</a></span> := by get_elem_tactic)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.uget","kind":"def","line":60,"name":"ByteArray.uget","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L60-L62"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.usize\"><span class=\"name\">ByteArray</span>.<span class=\"name\">usize</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#USize\">USize</a></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.usize","kind":"def","line":56,"name":"ByteArray.usize","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L56-L58"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.size\"><span class=\"name\">ByteArray</span>.<span class=\"name\">size</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a> → <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.size","kind":"def","line":52,"name":"ByteArray.size","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L52-L54"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.push\"><span class=\"name\">ByteArray</span>.<span class=\"name\">push</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#UInt8\">UInt8</a> → <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.push","kind":"def","line":48,"name":"ByteArray.push","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L48-L50"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.instEmptyCollection\"><span class=\"name\">ByteArray</span>.<span class=\"name\">instEmptyCollection</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#EmptyCollection\">EmptyCollection</a> <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.instEmptyCollection","kind":"instance","line":45,"name":"ByteArray.instEmptyCollection","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L45-L46"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.instInhabited\"><span class=\"name\">ByteArray</span>.<span class=\"name\">instInhabited</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.instInhabited","kind":"instance","line":42,"name":"ByteArray.instInhabited","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L42-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.empty\"><span class=\"name\">ByteArray</span>.<span class=\"name\">empty</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.empty","kind":"def","line":40,"name":"ByteArray.empty","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L40-L40"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.mkEmpty\"><span class=\"name\">ByteArray</span>.<span class=\"name\">mkEmpty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.mkEmpty","kind":"def","line":37,"name":"ByteArray.mkEmpty","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L37-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.emptyWithCapacity\"><span class=\"name\">ByteArray</span>.<span class=\"name\">emptyWithCapacity</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.emptyWithCapacity","kind":"def","line":33,"name":"ByteArray.emptyWithCapacity","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L33-L35"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.instDecidableEq\"><span class=\"name\">ByteArray</span>.<span class=\"name\">instDecidableEq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.instDecidableEq","kind":"instance","line":30,"name":"ByteArray.instDecidableEq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L30-L31"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.ext_iff\"><span class=\"name\">ByteArray</span>.<span class=\"name\">ext_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.data\">data</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.data\">data</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.ext_iff","kind":"theorem","line":28,"name":"ByteArray.ext_iff","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L28-L28"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.ext\"><span class=\"name\">ByteArray</span>.<span class=\"name\">ext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">data</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.data\">data</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/ByteArray/Basic.html#ByteArray.data\">data</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.ext","kind":"theorem","line":28,"name":"ByteArray.ext","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L28-L28"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.instBEq\"><span class=\"name\">ByteArray</span>.<span class=\"name\">instBEq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.instBEq","kind":"instance","line":26,"name":"ByteArray.instBEq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L26-L26"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.instBEq.beq\"><span class=\"name\">ByteArray</span>.<span class=\"name\">instBEq</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a> → <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.instBEq.beq","kind":"def","line":26,"name":"ByteArray.instBEq.beq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L26-L26"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.data\"><span class=\"name\">ByteArray</span>.<span class=\"name\">data</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.data","kind":"def","line":19,"name":"ByteArray.data","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L19-L19"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray.mk\"><span class=\"name\">ByteArray</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">data</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#UInt8\">UInt8</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Data/ByteArray/Basic.html#ByteArray\">ByteArray</a></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray.mk","kind":"ctor","line":18,"name":"ByteArray.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L18-L18"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/ByteArray/Basic.html#ByteArray\"><span class=\"name\">ByteArray</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Init/Data/ByteArray/Basic.html#ByteArray","kind":"structure","line":18,"name":"ByteArray","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/ByteArray/Basic.lean#L18-L19"}}],"imports":["Init.Data.Array.DecidableEq","Init.Data.UInt.Basic","Init.Data.UInt.BasicAux","Init.Data.UInt.BasicAux","Init.Data.Option.Basic"],"instances":[{"className":"BEq","name":"ByteArray.instBEq","typeNames":["ByteArray"]},{"className":"Decidable","name":"ByteArray.instDecidableEq","typeNames":["Eq"]},{"className":"Inhabited","name":"ByteArray.instInhabited","typeNames":["ByteArray"]},{"className":"EmptyCollection","name":"ByteArray.instEmptyCollection","typeNames":["ByteArray"]},{"className":"GetElem","name":"ByteArray.instGetElemNatUInt8LtSize","typeNames":["ByteArray","Nat","UInt8"]},{"className":"GetElem","name":"ByteArray.instGetElemUSizeUInt8LtNatValToFinSize","typeNames":["ByteArray","USize","UInt8"]},{"className":"Hashable","name":"ByteArray.instHashable","typeNames":["ByteArray"]},{"className":"Append","name":"ByteArray.instAppend","typeNames":["ByteArray"]},{"className":"ForIn","name":"ByteArray.instForInUInt8","typeNames":["ByteArray","UInt8"]},{"className":"Inhabited","name":"ByteArray.instInhabitedIterator","typeNames":["ByteArray.Iterator"]},{"className":"SizeOf","name":"ByteArray.instSizeOfIterator","typeNames":["ByteArray.Iterator"]},{"className":"ToString","name":"instToStringByteArray","typeNames":["ByteArray"]}],"name":"Init.Data.ByteArray.Basic"}