{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/PartialFixpoint/Induction.html#Lean.Elab.PartialFixpoint.derivePartialCorrectness\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">PartialFixpoint</span>.<span class=\"name\">derivePartialCorrectness</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isConclusionMutual</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/PartialFixpoint/Induction.html#Lean.Elab.PartialFixpoint.derivePartialCorrectness","kind":"def","line":374,"name":"Lean.Elab.PartialFixpoint.derivePartialCorrectness","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/PreDefinition/PartialFixpoint/Induction.lean#L374-L433"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/PartialFixpoint/Induction.html#Lean.Elab.PartialFixpoint.mkOptionAdm\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">PartialFixpoint</span>.<span class=\"name\">mkOptionAdm</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">motive</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Given `motive : α → β → γ → Prop`, construct a proof of\n`admissible (fun f => ∀ x y r, f x y = r → motive x y r)`\n","docLink":"./Lean/Elab/PreDefinition/PartialFixpoint/Induction.html#Lean.Elab.PartialFixpoint.mkOptionAdm","kind":"def","line":356,"name":"Lean.Elab.PartialFixpoint.mkOptionAdm","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/PreDefinition/PartialFixpoint/Induction.lean#L356-L372"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/PartialFixpoint/Induction.html#Lean.Elab.PartialFixpoint.isPartialCorrectnessName\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">PartialFixpoint</span>.<span class=\"name\">isPartialCorrectnessName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/PartialFixpoint/Induction.html#Lean.Elab.PartialFixpoint.isPartialCorrectnessName","kind":"def","line":346,"name":"Lean.Elab.PartialFixpoint.isPartialCorrectnessName","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/PreDefinition/PartialFixpoint/Induction.lean#L346-L354"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/PartialFixpoint/Induction.html#Lean.Elab.PartialFixpoint.isOptionFixpoint\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">PartialFixpoint</span>.<span class=\"name\">isOptionFixpoint</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Returns true if `name` defined by `partial_fixpoint`, the first in its mutual group,\nand all functions are defined using the `CCPO` instance for `Option`.\n","docLink":"./Lean/Elab/PreDefinition/PartialFixpoint/Induction.html#Lean.Elab.PartialFixpoint.isOptionFixpoint","kind":"def","line":326,"name":"Lean.Elab.PartialFixpoint.isOptionFixpoint","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/PreDefinition/PartialFixpoint/Induction.lean#L326-L344"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/PartialFixpoint/Induction.html#Lean.Elab.PartialFixpoint.isInductName\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">PartialFixpoint</span>.<span class=\"name\">isInductName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/PartialFixpoint/Induction.html#Lean.Elab.PartialFixpoint.isInductName","kind":"def","line":288,"name":"Lean.Elab.PartialFixpoint.isInductName","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/PreDefinition/PartialFixpoint/Induction.lean#L288-L313"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/PartialFixpoint/Induction.html#Lean.Elab.PartialFixpoint.deriveInduction\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">PartialFixpoint</span>.<span class=\"name\">deriveInduction</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isMutual</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/PartialFixpoint/Induction.html#Lean.Elab.PartialFixpoint.deriveInduction","kind":"def","line":125,"name":"Lean.Elab.PartialFixpoint.deriveInduction","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/PreDefinition/PartialFixpoint/Induction.lean#L125-L286"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/PartialFixpoint/Induction.html#Lean.Elab.PartialFixpoint.getInductionPrinciplePostfix\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">PartialFixpoint</span>.<span class=\"name\">getInductionPrinciplePostfix</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">isMutual</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/PartialFixpoint/Induction.html#Lean.Elab.PartialFixpoint.getInductionPrinciplePostfix","kind":"def","line":114,"name":"Lean.Elab.PartialFixpoint.getInductionPrinciplePostfix","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/PreDefinition/PartialFixpoint/Induction.lean#L114-L123"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/PartialFixpoint/Induction.html#Lean.Elab.PartialFixpoint.unfoldPredRelMutual\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">PartialFixpoint</span>.<span class=\"name\">unfoldPredRelMutual</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">eqnInfo</span> : <a href=\"./Lean/Elab/PreDefinition/PartialFixpoint/Eqns.html#Lean.Elab.PartialFixpoint.EqnInfo\">EqnInfo</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">body</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">reduceConclusion</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span></div></div>","info":{"doc":"Unfolds a PartialOrder relation between tuples of predicates into an array of quantified implications.\n\nThis function handles mutual recursion cases where we have a tuple of predicates being compared. For each predicate in the tuple it projects out the corresponding components from both sides of the relation and unfolds the partial order relation into quantified implications using `unfoldPredRel`\n\nParameters:\n- `eqnInfo`: Equation information containing declaration names and fixpoint types for each predicate in the mutual block\n- `body`: The partial order relation expression to unfold\n- `reduceConclusion`: Optional parameter (defaults to false) that determines whether to perform weak head normalization on the conclusion\n\nReturns:\nAn array of expressions, where each element represents the unfolded implication for the corresponding predicate in the mutual block.\n","docLink":"./Lean/Elab/PreDefinition/PartialFixpoint/Induction.html#Lean.Elab.PartialFixpoint.unfoldPredRelMutual","kind":"def","line":76,"name":"Lean.Elab.PartialFixpoint.unfoldPredRelMutual","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/PreDefinition/PartialFixpoint/Induction.lean#L76-L99"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/PartialFixpoint/Induction.html#Lean.Elab.PartialFixpoint.unfoldPredRel\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">PartialFixpoint</span>.<span class=\"name\">unfoldPredRel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">predType </span><span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fixpointType</span> : <a href=\"./Lean/Elab/PreDefinition/TerminationHint.html#Lean.Elab.PartialFixpointType\">PartialFixpointType</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">reducePremise</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Unfolds an appropriate `PartialOrder` instance on predicates to quantifications and implications.\nI.e. `ImplicationOrder.instPartialOrder.rel P Q` becomes\n`∀ x y, P x y → Q x y`.\nIn the premise of the Park induction principle (`lfp_le_of_le_monotone`) we use a monotone map defining the predicate in the eta expanded form. In such a case, besides desugaring the predicate, we need to perform a weak head reduction.\nThe optional parameter `reducePremise` (false by default) indicates whether we need to perform this reduction.\n","docLink":"./Lean/Elab/PreDefinition/PartialFixpoint/Induction.html#Lean.Elab.PartialFixpoint.unfoldPredRel","kind":"def","line":56,"name":"Lean.Elab.PartialFixpoint.unfoldPredRel","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/PreDefinition/PartialFixpoint/Induction.lean#L56-L75"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/PartialFixpoint/Induction.html#Lean.Elab.PartialFixpoint.CCPOProdProjs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">PartialFixpoint</span>.<span class=\"name\">CCPOProdProjs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">inst</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/PartialFixpoint/Induction.html#Lean.Elab.PartialFixpoint.CCPOProdProjs","kind":"def","line":45,"name":"Lean.Elab.PartialFixpoint.CCPOProdProjs","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/PreDefinition/PartialFixpoint/Induction.lean#L45-L54"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/PartialFixpoint/Induction.html#Lean.Elab.PartialFixpoint.mkAdmProj\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">PartialFixpoint</span>.<span class=\"name\">mkAdmProj</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">packedInst</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/PartialFixpoint/Induction.html#Lean.Elab.PartialFixpoint.mkAdmProj","kind":"opaque","line":33,"name":"Lean.Elab.PartialFixpoint.mkAdmProj","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/PreDefinition/PartialFixpoint/Induction.lean#L33-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/PreDefinition/PartialFixpoint/Induction.html#Lean.Elab.PartialFixpoint.mkAdmAnd\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">PartialFixpoint</span>.<span class=\"name\">mkAdmAnd</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α </span><span class=\"fn\">instα </span><span class=\"fn\">adm₁ </span><span class=\"fn\">adm₂</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/PreDefinition/PartialFixpoint/Induction.html#Lean.Elab.PartialFixpoint.mkAdmAnd","kind":"def","line":30,"name":"Lean.Elab.PartialFixpoint.mkAdmAnd","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/PreDefinition/PartialFixpoint/Induction.lean#L30-L31"}}],"imports":["Lean.Meta.Basic","Lean.Meta.Match.MatcherApp.Transform","Lean.Meta.Check","Lean.Meta.Tactic.Subst","Lean.Meta.Injective","Lean.Meta.ArgsPacker","Lean.Meta.PProdN","Lean.Meta.Tactic.Apply","Lean.Elab.PreDefinition.PartialFixpoint.Eqns","Lean.Elab.Command","Lean.Meta.Tactic.ElimInfo"],"instances":[],"name":"Lean.Elab.PreDefinition.PartialFixpoint.Induction"}