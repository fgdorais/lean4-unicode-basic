{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.withSetOptionIn\"><span class=\"name\">Lean</span>.<span class=\"name\">withSetOptionIn</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cmd</span> : <a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElab\">Elab.Command.CommandElab</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElab\">Elab.Command.CommandElab</a></div></div>","info":{"doc":"Given a command elaborator `cmd`, returns a new command elaborator that\nfirst evaluates any local `set_option ... in ...` clauses and then invokes `cmd` on what remains.\n","docLink":"./Lean/Elab/Command.html#Lean.withSetOptionIn","kind":"opaque","line":858,"name":"Lean.withSetOptionIn","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L858-L869"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.liftCommandElabM\"><span class=\"name\">Lean</span>.<span class=\"name\">liftCommandElabM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cmd</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">Elab.Command.CommandElabM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">throwOnError</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Lifts an action in `CommandElabM` into `CoreM`, updating the environment,\nmessages, info trees, traces, the name generator, and macro scopes.\nThe action is run in a context with an empty message log, empty trace state, and empty info trees.\n\nIf `throwOnError` is true, then if the command produces an error message, it is converted into an exception.\nIn this case, info trees and messages are not carried over.\n\nCommands that modify the processing of subsequent commands,\nsuch as `open` and `namespace` commands,\nonly have an effect for the remainder of the `CommandElabM` computation passed here,\nand do not affect subsequent commands.\n\n*Warning:* when using this from `MetaM` monads, the caches are *not* reset.\nIf the command defines new instances for example, you should use `Lean.Meta.resetSynthInstanceCache`\nto reset the instance cache.\nWhile the `modifyEnv` function for `MetaM` clears its caches entirely,\n`liftCommandElabM` has no way to reset these caches.\n","docLink":"./Lean/Elab/Command.html#Lean.liftCommandElabM","kind":"def","line":835,"name":"Lean.liftCommandElabM","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L835-L856"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.addUnivLevel\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">addUnivLevel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">idStx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.addUnivLevel","kind":"def","line":785,"name":"Lean.Elab.Command.addUnivLevel","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L785-L791"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.getLevelNames\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">getLevelNames</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.getLevelNames","kind":"def","line":782,"name":"Lean.Elab.Command.getLevelNames","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L782-L783"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.withScope\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">withScope</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Command/Scope.html#Lean.Elab.Command.Scope\">Scope</a> → <a href=\"./Lean/Elab/Command/Scope.html#Lean.Elab.Command.Scope\">Scope</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.withScope","kind":"def","line":772,"name":"Lean.Elab.Command.withScope","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L772-L780"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.modifyScope\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">modifyScope</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Command/Scope.html#Lean.Elab.Command.Scope\">Scope</a> → <a href=\"./Lean/Elab/Command/Scope.html#Lean.Elab.Command.Scope\">Scope</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.modifyScope","kind":"def","line":765,"name":"Lean.Elab.Command.modifyScope","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L765-L770"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.getScopes\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">getScopes</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/Command/Scope.html#Lean.Elab.Command.Scope\">Scope</a>)</span></span></div></div>","info":{"doc":"Return the stack of all currently active scopes:\nthe base scope always comes last; new scopes are prepended in the front.\nIn particular, the current scope is always the first element.\n","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.getScopes","kind":"def","line":757,"name":"Lean.Elab.Command.getScopes","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L757-L763"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.runTermElabM\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">runTermElabM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">elabFn</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span> → <span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Execute the monadic action `elabFn xs` as a `CommandElabM` monadic action, where `xs` are free variables\ncorresponding to all active scoped variables declared using the `variable` command.\n\nThis method is similar to `liftTermElabM`, but it elaborates all scoped variables declared using the `variable`\ncommand.\n\nExample:\n```\npublic import Lean\n\npublic section\n\nopen Lean Elab Command Meta\n\nvariable {α : Type u} {f : α → α}\nvariable (n : Nat)\n\n#eval\n  runTermElabM fun xs => do\n    for x in xs do\n      IO.println s!\"{← ppExpr x} : {← ppExpr (← inferType x)}\"\n```\n","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.runTermElabM","kind":"def","line":704,"name":"Lean.Elab.Command.runTermElabM","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L704-L752"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.instMonadEvalTermElabMCommandElabM\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">instMonadEvalTermElabMCommandElabM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadEval\">MonadEval</a> <a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.instMonadEvalTermElabMCommandElabM","kind":"instance","line":701,"name":"Lean.Elab.Command.instMonadEvalTermElabMCommandElabM","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L701-L702"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.liftTermElabM\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">liftTermElabM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.TermElabM\">TermElabM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Lift the `TermElabM` monadic action `x` into a `CommandElabM` monadic action.\n\nNote that `x` is executed with an empty message log. Thus, `x` cannot modify/view messages produced by\nprevious commands.\n\nIf you need to access the free variables corresponding to the ones declared using the `variable` command,\nconsider using `runTermElabM`.\n\nRecall that `TermElabM` actions can automatically lift `MetaM` and `CoreM` actions.\nExample:\n```\npublic import Lean\n\nopen Lean Elab Command Meta\n\ndef printExpr (e : Expr) : MetaM Unit := do\n  IO.println s!\"{← ppExpr e} : {← ppExpr (← inferType e)}\"\n\n#eval\n  liftTermElabM do\n    printExpr (mkConst ``Nat)\n```\n","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.liftTermElabM","kind":"def","line":661,"name":"Lean.Elab.Command.liftTermElabM","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L661-L699"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.getBracketedBinderIds\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">getBracketedBinderIds</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> → <span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span></span></div></div>","info":{"doc":"Return identifier names in the given bracketed binder. ","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.getBracketedBinderIds","kind":"def","line":642,"name":"Lean.Elab.Command.getBracketedBinderIds","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L642-L649"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.mkMetaContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">mkMetaContext</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.Context\">Meta.Context</a></div></div>","info":{"doc":"The environment linter framework needs to be able to run linters with the same context\nas `liftTermElabM`, so we expose that context as a public function here.\n","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.mkMetaContext","kind":"def","line":633,"name":"Lean.Elab.Command.mkMetaContext","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L633-L639"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.instInhabitedCommandElabM\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">instInhabitedCommandElabM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <span class=\"fn\">(<a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a> <span class=\"fn\">α</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.instInhabitedCommandElabM","kind":"instance","line":630,"name":"Lean.Elab.Command.instInhabitedCommandElabM","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L630-L631"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.adaptExpander\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">adaptExpander</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">exp</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> → <span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElab\">CommandElab</a></div></div>","info":{"doc":"Adapt a syntax transformation to a regular, command-producing elaborator. ","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.adaptExpander","kind":"def","line":622,"name":"Lean.Elab.Command.adaptExpander","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L622-L625"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.elabCommandTopLevel\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">elabCommandTopLevel</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"`elabCommand` wrapper that should be used for the initial invocation, not for recursive calls after\nmacro expansion etc.\n","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.elabCommandTopLevel","kind":"def","line":585,"name":"Lean.Elab.Command.elabCommandTopLevel","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L585-L620"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.withInitQuotContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">withInitQuotContext</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hint?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#UInt64\">UInt64</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">act</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"If `hint?` is `some hint`, establishes a new context for macro scope naming and runs `act` in it,\notherwise runs `act` directly without changes.\n\nContext names as documented in Note `Macro Scope Representation` help with avoiding rebuilds and\n`prefer_native` lookup misses from macro scopes in declaration names and other exported information.\nThis function establishes a new context with a globally unique name by combining the name of the\ncurrent module with `hint` while also checking for previously used `hint`s in the same module.\nThus `hint` does not need to be unique but ensuring it is usually unique helps with keeping the\ncontext name stable.\n\nIn the current implementation, we call `withInitQuotContext` once in `elabCommandTopLevel` using the\nsource input of the command as the hint. This helps with keeping macro scopes stable on changes to\nother parts of the file but not on changes to the command itself. Thus in each *declaration*\nelaborator we call `withInitQuotContext` again with the declaration name(s) as a hint so that\nchanges to any other part of the declaration do not change the context name.\n","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.withInitQuotContext","kind":"def","line":548,"name":"Lean.Elab.Command.withInitQuotContext","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L548-L583"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.showPartialSyntaxErrors\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">showPartialSyntaxErrors</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.Option\">Lean.Option</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Option for showing elaboration errors from partial syntax errors. ","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.showPartialSyntaxErrors","kind":"opaque","line":538,"name":"Lean.Elab.Command.showPartialSyntaxErrors","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L538-L542"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.elabCommand\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">elabCommand</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.elabCommand","kind":"opaque","line":447,"name":"Lean.Elab.Command.elabCommand","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L447-L534"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.instToSnapshotTreeMacroExpandedSnapshot\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">instToSnapshotTreeMacroExpandedSnapshot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.ToSnapshotTree\">Language.ToSnapshotTree</a> <a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.MacroExpandedSnapshot\">MacroExpandedSnapshot</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.instToSnapshotTreeMacroExpandedSnapshot","kind":"instance","line":444,"name":"Lean.Elab.Command.instToSnapshotTreeMacroExpandedSnapshot","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L444-L445"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.instTypeNameMacroExpandedSnapshot\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">instTypeNameMacroExpandedSnapshot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Dynamic.html#TypeName\">TypeName</a> <a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.MacroExpandedSnapshot\">MacroExpandedSnapshot</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.instTypeNameMacroExpandedSnapshot","kind":"instance","line":442,"name":"Lean.Elab.Command.instTypeNameMacroExpandedSnapshot","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L442-L442"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.MacroExpandedSnapshot.next\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">MacroExpandedSnapshot</span>.<span class=\"name\">next</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.MacroExpandedSnapshot\">MacroExpandedSnapshot</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask\">Language.SnapshotTask</a> <a href=\"./Lean/Language/Basic.html#Lean.Language.DynamicSnapshot\">Language.DynamicSnapshot</a>)</span></span></div></div>","info":{"doc":"Follow-up elaboration snapshots, one per command if `newStx` is a sequence of commands.\n","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.MacroExpandedSnapshot.next","kind":"def","line":441,"name":"Lean.Elab.Command.MacroExpandedSnapshot.next","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L441-L441"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.MacroExpandedSnapshot.hasTraces\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">MacroExpandedSnapshot</span>.<span class=\"name\">hasTraces</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.MacroExpandedSnapshot\">MacroExpandedSnapshot</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Whether any traces were present after expansion. ","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.MacroExpandedSnapshot.hasTraces","kind":"def","line":437,"name":"Lean.Elab.Command.MacroExpandedSnapshot.hasTraces","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L437-L437"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.MacroExpandedSnapshot.newNextMacroScope\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">MacroExpandedSnapshot</span>.<span class=\"name\">newNextMacroScope</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.MacroExpandedSnapshot\">MacroExpandedSnapshot</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"`State.nextMacroScope` after expansion. ","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.MacroExpandedSnapshot.newNextMacroScope","kind":"def","line":435,"name":"Lean.Elab.Command.MacroExpandedSnapshot.newNextMacroScope","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L435-L435"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.MacroExpandedSnapshot.newStx\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">MacroExpandedSnapshot</span>.<span class=\"name\">newStx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.MacroExpandedSnapshot\">MacroExpandedSnapshot</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>","info":{"doc":"The expanded syntax tree. ","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.MacroExpandedSnapshot.newStx","kind":"def","line":433,"name":"Lean.Elab.Command.MacroExpandedSnapshot.newStx","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L433-L433"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.MacroExpandedSnapshot.macroDecl\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">MacroExpandedSnapshot</span>.<span class=\"name\">macroDecl</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.MacroExpandedSnapshot\">MacroExpandedSnapshot</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"The declaration name of the macro. ","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.MacroExpandedSnapshot.macroDecl","kind":"def","line":431,"name":"Lean.Elab.Command.MacroExpandedSnapshot.macroDecl","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L431-L431"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.MacroExpandedSnapshot.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">MacroExpandedSnapshot</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toSnapshot</span> : <a href=\"./Lean/Language/Basic.html#Lean.Language.Snapshot\">Language.Snapshot</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">macroDecl</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">newStx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">newNextMacroScope</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hasTraces</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">next</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask\">Language.SnapshotTask</a> <a href=\"./Lean/Language/Basic.html#Lean.Language.DynamicSnapshot\">Language.DynamicSnapshot</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.MacroExpandedSnapshot\">MacroExpandedSnapshot</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.MacroExpandedSnapshot.mk","kind":"ctor","line":429,"name":"Lean.Elab.Command.MacroExpandedSnapshot.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L429-L429"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.MacroExpandedSnapshot.toSnapshot\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">MacroExpandedSnapshot</span>.<span class=\"name\">toSnapshot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.MacroExpandedSnapshot\">MacroExpandedSnapshot</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Language/Basic.html#Lean.Language.Snapshot\">Language.Snapshot</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.MacroExpandedSnapshot.toSnapshot","kind":"def","line":429,"name":"Lean.Elab.Command.MacroExpandedSnapshot.toSnapshot","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L429-L442"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.MacroExpandedSnapshot\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">MacroExpandedSnapshot</span></a></span><span class=\"decl_extends\">extends</span> <a href=\"./Lean/Language/Basic.html#Lean.Language.Snapshot\">Lean.Language.Snapshot</a><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Snapshot after macro expansion of a command. ","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.MacroExpandedSnapshot","kind":"structure","line":428,"name":"Lean.Elab.Command.MacroExpandedSnapshot","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L428-L442"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.instMonadRecDepthCommandElabM\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">instMonadRecDepthCommandElabM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Exception.html#Lean.MonadRecDepth\">MonadRecDepth</a> <a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.instMonadRecDepthCommandElabM","kind":"instance","line":420,"name":"Lean.Elab.Command.instMonadRecDepthCommandElabM","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L420-L423"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.instMonadMacroAdapterCommandElabM\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">instMonadMacroAdapterCommandElabM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Util.html#Lean.Elab.MonadMacroAdapter\">MonadMacroAdapter</a> <a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.instMonadMacroAdapterCommandElabM","kind":"instance","line":416,"name":"Lean.Elab.Command.instMonadMacroAdapterCommandElabM","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L416-L418"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.withMacroExpansion\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">withMacroExpansion</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">beforeStx </span><span class=\"fn\">afterStx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Elaborate `x` with `stx` on the macro stack ","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.withMacroExpansion","kind":"def","line":411,"name":"Lean.Elab.Command.withMacroExpansion","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L411-L414"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.withoutCommandIncrementality\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">withoutCommandIncrementality</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cond</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">act</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Disables incremental command reuse *and* reporting for `act` if `cond` is true by setting\n`Context.snap?` to `none`.\n","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.withoutCommandIncrementality","kind":"def","line":386,"name":"Lean.Elab.Command.withoutCommandIncrementality","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L386-L397"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.commandElabAttribute\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">commandElabAttribute</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/KeyedDeclsAttribute.html#Lean.KeyedDeclsAttribute\">KeyedDeclsAttribute</a> <a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElab\">CommandElab</a></span></div></div>","info":{"doc":"Registers a command elaborator for the given syntax node kind.\n\nA command elaborator should have type `Lean.Elab.Command.CommandElab` (which is\n`Lean.Syntax → Lean.Elab.Term.CommandElabM Unit`), i.e. should take syntax of the given syntax\nnode kind as a parameter and perform an action.\n\nThe `elab_rules` and `elab` commands should usually be preferred over using this attribute\ndirectly.\n","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.commandElabAttribute","kind":"opaque","line":361,"name":"Lean.Elab.Command.commandElabAttribute","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L361-L373"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.runLintersAsync\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">runLintersAsync</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.runLintersAsync","kind":"def","line":332,"name":"Lean.Elab.Command.runLintersAsync","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L332-L359"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.logSnapshotTask\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">logSnapshotTask</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">task</span> : <span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask\">Language.SnapshotTask</a> <a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTree\">Language.SnapshotTree</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Includes a given task (such as from `wrapAsyncAsSnapshot`) in the overall snapshot tree for this\ncommand's elaboration, making its result available to reporting and the language server. The\nreporter will not know about this snapshot tree node until the main elaboration thread for this\ncommand has finished so this function is not useful for incremental reporting within a longer\nelaboration thread but only for tasks that outlive it such as background kernel checking or proof\nelaboration.\n","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.logSnapshotTask","kind":"def","line":327,"name":"Lean.Elab.Command.logSnapshotTask","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L327-L329"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.wrapAsyncAsSnapshot\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">wrapAsyncAsSnapshot</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">act</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cancelTk?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/System/IO.html#IO.CancelToken\">IO.CancelToken</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">desc</span> : <a href=\"./Init/Prelude.html#String\">String</a> := by exact decl_name%.toString)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a> <span class=\"fn\">(<span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/System/IO.html#BaseIO\">BaseIO</a> <a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTree\">Language.SnapshotTree</a></span>)</span></span></div></div>","info":{"doc":"Wraps the given action for use in `BaseIO.asTask` etc., discarding its final state except for\n`logSnapshotTask` tasks, which are reported as part of the returned tree. The given cancellation\ntoken, if any, should be stored in a `SnapshotTask` for the server to trigger it when the result is\nno longer needed.\n","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.wrapAsyncAsSnapshot","kind":"def","line":285,"name":"Lean.Elab.Command.wrapAsyncAsSnapshot","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L285-L325"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.wrapAsync\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">wrapAsync</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α </span><span class=\"fn\">β</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">act</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a> <span class=\"fn\">β</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cancelTk?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/System/IO.html#IO.CancelToken\">IO.CancelToken</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a> <span class=\"fn\">(<span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/System/IO.html#EIO\">EIO</a> <a href=\"./Lean/Exception.html#Lean.Exception\">Exception</a> <span class=\"fn\">β</span></span>)</span></span></div></div>","info":{"doc":"Wraps the given action for use in `EIO.asTask` etc., discarding its final monadic state. ","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.wrapAsync","kind":"def","line":273,"name":"Lean.Elab.Command.wrapAsync","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L273-L282"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.withLoggingExceptions\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">withLoggingExceptions</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Catches and logs exceptions occurring in `x`. Unlike `try catch` in `CommandElabM`, this function\ncatches interrupt exceptions as well and thus is intended for use at the top level of elaboration.\nInterrupt and abort exceptions are caught but not logged.\n","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.withLoggingExceptions","kind":"def","line":265,"name":"Lean.Elab.Command.withLoggingExceptions","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L265-L271"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.runLinters\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">runLinters</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.runLinters","kind":"def","line":243,"name":"Lean.Elab.Command.runLinters","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L243-L263"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.instMonadLogCommandElabM\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">instMonadLogCommandElabM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Log.html#Lean.MonadLog\">MonadLog</a> <a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.instMonadLogCommandElabM","kind":"instance","line":228,"name":"Lean.Elab.Command.instMonadLogCommandElabM","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L228-L241"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.instMonadResolveNameCommandElabM\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">instMonadResolveNameCommandElabM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/ResolveName.html#Lean.MonadResolveName\">MonadResolveName</a> <a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.instMonadResolveNameCommandElabM","kind":"instance","line":224,"name":"Lean.Elab.Command.instMonadResolveNameCommandElabM","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L224-L226"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.getScope\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">getScope</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a> <a href=\"./Lean/Elab/Command/Scope.html#Lean.Elab.Command.Scope\">Scope</a></span></div></div>","info":{"doc":"Return the current scope. ","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.getScope","kind":"def","line":221,"name":"Lean.Elab.Command.getScope","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L221-L222"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.instMonadLiftTIOCommandElabM\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">instMonadLiftTIOCommandElabM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLiftT\">MonadLiftT</a> <a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.instMonadLiftTIOCommandElabM","kind":"instance","line":218,"name":"Lean.Elab.Command.instMonadLiftTIOCommandElabM","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L218-L219"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.liftIO\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">liftIO</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.liftIO","kind":"def","line":214,"name":"Lean.Elab.Command.liftIO","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L214-L216"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.liftCoreM\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">liftCoreM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.Core.CoreM\">CoreM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.liftCoreM","kind":"def","line":211,"name":"Lean.Elab.Command.liftCoreM","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L211-L212"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.instMonadQuotationCommandElabM\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">instMonadQuotationCommandElabM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MonadQuotation\">MonadQuotation</a> <a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.instMonadQuotationCommandElabM","kind":"instance","line":161,"name":"Lean.Elab.Command.instMonadQuotationCommandElabM","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L161-L164"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.withFreshMacroScope\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">withFreshMacroScope</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.withFreshMacroScope","kind":"def","line":157,"name":"Lean.Elab.Command.withFreshMacroScope","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L157-L159"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.getMainModule\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">getMainModule</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.getMainModule","kind":"def","line":155,"name":"Lean.Elab.Command.getMainModule","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L155-L155"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.getCurrMacroScope\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">getCurrMacroScope</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.getCurrMacroScope","kind":"def","line":154,"name":"Lean.Elab.Command.getCurrMacroScope","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L154-L154"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.instMonadDeclNameGeneratorCommandElabM\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">instMonadDeclNameGeneratorCommandElabM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/CoreM.html#Lean.MonadDeclNameGenerator\">MonadDeclNameGenerator</a> <a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.instMonadDeclNameGeneratorCommandElabM","kind":"instance","line":150,"name":"Lean.Elab.Command.instMonadDeclNameGeneratorCommandElabM","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L150-L152"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.instAddErrorMessageContextCommandElabM\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">instAddErrorMessageContextCommandElabM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Exception.html#Lean.AddErrorMessageContext\">AddErrorMessageContext</a> <a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.instAddErrorMessageContextCommandElabM","kind":"instance","line":142,"name":"Lean.Elab.Command.instAddErrorMessageContextCommandElabM","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L142-L148"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.instMonadTraceCommandElabM\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">instMonadTraceCommandElabM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Util/Trace.html#Lean.MonadTrace\">MonadTrace</a> <a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.instMonadTraceCommandElabM","kind":"instance","line":138,"name":"Lean.Elab.Command.instMonadTraceCommandElabM","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L138-L140"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.instMonadRefCommandElabM\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">instMonadRefCommandElabM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.MonadRef\">MonadRef</a> <a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.instMonadRefCommandElabM","kind":"instance","line":134,"name":"Lean.Elab.Command.instMonadRefCommandElabM","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L134-L136"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.instAddMessageContextCommandElabM\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">instAddMessageContextCommandElabM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Message.html#Lean.AddMessageContext\">AddMessageContext</a> <a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.instAddMessageContextCommandElabM","kind":"instance","line":131,"name":"Lean.Elab.Command.instAddMessageContextCommandElabM","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L131-L132"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.getRef\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">getRef</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.getRef","kind":"def","line":128,"name":"Lean.Elab.Command.getRef","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L128-L129"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.instMonadOptionsCommandElabM\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">instMonadOptionsCommandElabM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Data/Options.html#Lean.MonadOptions\">MonadOptions</a> <a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.instMonadOptionsCommandElabM","kind":"instance","line":124,"name":"Lean.Elab.Command.instMonadOptionsCommandElabM","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L124-L126"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.instMonadEnvCommandElabM\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">instMonadEnvCommandElabM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Environment.html#Lean.MonadEnv\">MonadEnv</a> <a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.instMonadEnvCommandElabM","kind":"instance","line":120,"name":"Lean.Elab.Command.instMonadEnvCommandElabM","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L120-L122"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.instMonadInfoTreeCommandElabM\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">instMonadInfoTreeCommandElabM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.MonadInfoTree\">MonadInfoTree</a> <a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.instMonadInfoTreeCommandElabM","kind":"instance","line":116,"name":"Lean.Elab.Command.instMonadInfoTreeCommandElabM","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L116-L118"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.addLinter\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">addLinter</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">l</span> : <a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Linter\">Linter</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO\">IO</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.addLinter","kind":"def","line":112,"name":"Lean.Elab.Command.addLinter","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L112-L114"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">opaque</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.lintersRef\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">lintersRef</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/System/IO.html#IO.Ref\">IO.Ref</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Linter\">Linter</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.lintersRef","kind":"opaque","line":109,"name":"Lean.Elab.Command.lintersRef","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L109-L109"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.mkState\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">mkState</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">messages</span> : <a href=\"./Lean/Message.html#Lean.MessageLog\">MessageLog</a> := <a href=\"./Lean/Message.html#Lean.MessageLog.mk\">{</a> <a href=\"./Lean/Message.html#Lean.MessageLog.mk\">}</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">opts</span> : <a href=\"./Lean/Data/Options.html#Lean.Options\">Options</a> := <a href=\"./Lean/Data/KVMap.html#Lean.KVMap.mk\">{</a> <a href=\"./Lean/Data/KVMap.html#Lean.KVMap.mk\">}</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.State\">State</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.mkState","kind":"def","line":98,"name":"Lean.Elab.Command.mkState","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L98-L105"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.instMonadExceptOfExceptionCommandElabM\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">instMonadExceptOfExceptionCommandElabM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadExceptOf\">MonadExceptOf</a> <a href=\"./Lean/Exception.html#Lean.Exception\">Exception</a> <a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.instMonadExceptOfExceptionCommandElabM","kind":"instance","line":94,"name":"Lean.Elab.Command.instMonadExceptOfExceptionCommandElabM","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L94-L96"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.tryCatch\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">tryCatch</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Lean/Exception.html#Lean.Exception\">Exception</a> → <span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a> <span class=\"fn\">α</span></span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"Like `Core.tryCatchRuntimeEx`; runtime errors are generally used to abort term elaboration, so we do\nwant to catch and process them at the command level.\n","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.tryCatch","kind":"def","line":80,"name":"Lean.Elab.Command.tryCatch","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L80-L92"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.instMonadCommandElabM\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">instMonadCommandElabM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Monad\">Monad</a> <a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.instMonadCommandElabM","kind":"instance","line":77,"name":"Lean.Elab.Command.instMonadCommandElabM","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L77-L78"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Linter.name\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">Linter</span>.<span class=\"name\">name</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Linter\">Linter</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.Linter.name","kind":"def","line":69,"name":"Lean.Elab.Command.Linter.name","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L69-L69"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Linter.run\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">Linter</span>.<span class=\"name\">run</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Linter\">Linter</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> → <span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.Linter.run","kind":"def","line":68,"name":"Lean.Elab.Command.Linter.run","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L68-L68"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Linter.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">Linter</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">run</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a> → <span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">name</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a> := by exact decl_name%)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Linter\">Linter</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.Linter.mk","kind":"ctor","line":67,"name":"Lean.Elab.Command.Linter.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L67-L67"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Linter\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">Linter</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.Linter","kind":"structure","line":67,"name":"Lean.Elab.Command.Linter","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L67-L69"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElab\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">CommandElab</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElab","kind":"def","line":66,"name":"Lean.Elab.Command.CommandElab","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L66-L66"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">CommandElabM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM","kind":"def","line":65,"name":"Lean.Elab.Command.CommandElabM","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L65-L65"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Context.suppressElabErrors\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">Context</span>.<span class=\"name\">suppressElabErrors</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"If set (when `showPartialSyntaxErrors` is not set and parsing failed), suppresses most elaboration\nerrors; see also `logMessage` below.\n","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.Context.suppressElabErrors","kind":"def","line":63,"name":"Lean.Elab.Command.Context.suppressElabErrors","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L63-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Context.cancelTk?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">Context</span>.<span class=\"name\">cancelTk?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/System/IO.html#IO.CancelToken\">IO.CancelToken</a></span></div></div>","info":{"doc":"Cancellation token forwarded to `Core.cancelTk?`. ","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.Context.cancelTk?","kind":"def","line":58,"name":"Lean.Elab.Command.Context.cancelTk?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L58-L58"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Context.snap?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">Context</span>.<span class=\"name\">snap?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotBundle\">Language.SnapshotBundle</a> <a href=\"./Lean/Language/Basic.html#Lean.Language.DynamicSnapshot\">Language.DynamicSnapshot</a>)</span></span></div></div>","info":{"doc":"Snapshot for incremental reuse and reporting of command elaboration. Currently only used for\n(mutual) defs and contained tactics, in which case the `DynamicSnapshot` is a\n`HeadersParsedSnapshot`.\n\nDefinitely resolved in `Lean.Elab.Command.elabCommandTopLevel`.\n\nInvariant: if the bundle's `old?` is set, the context and state at the beginning of current and\nold elaboration are identical.\n","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.Context.snap?","kind":"def","line":56,"name":"Lean.Elab.Command.Context.snap?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L56-L56"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Context.ref\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">Context</span>.<span class=\"name\">ref</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.Context.ref","kind":"def","line":45,"name":"Lean.Elab.Command.Context.ref","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L45-L45"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Context.currMacroScope\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">Context</span>.<span class=\"name\">currMacroScope</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.MacroScope\">MacroScope</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.Context.currMacroScope","kind":"def","line":44,"name":"Lean.Elab.Command.Context.currMacroScope","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L44-L44"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Context.quotContext?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">Context</span>.<span class=\"name\">quotContext?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.Context.quotContext?","kind":"def","line":43,"name":"Lean.Elab.Command.Context.quotContext?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L43-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Context.macroStack\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">Context</span>.<span class=\"name\">macroStack</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Util.html#Lean.Elab.MacroStack\">MacroStack</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.Context.macroStack","kind":"def","line":42,"name":"Lean.Elab.Command.Context.macroStack","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L42-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Context.cmdPos\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">Context</span>.<span class=\"name\">cmdPos</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.Context.cmdPos","kind":"def","line":41,"name":"Lean.Elab.Command.Context.cmdPos","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Context.currRecDepth\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">Context</span>.<span class=\"name\">currRecDepth</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.Context.currRecDepth","kind":"def","line":40,"name":"Lean.Elab.Command.Context.currRecDepth","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L40-L40"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Context.fileMap\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">Context</span>.<span class=\"name\">fileMap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Data/Position.html#Lean.FileMap\">FileMap</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.Context.fileMap","kind":"def","line":39,"name":"Lean.Elab.Command.Context.fileMap","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L39-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Context.fileName\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">Context</span>.<span class=\"name\">fileName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Context\">Context</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#String\">String</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.Context.fileName","kind":"def","line":38,"name":"Lean.Elab.Command.Context.fileName","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L38-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Context.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">Context</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fileName</span> : <a href=\"./Init/Prelude.html#String\">String</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fileMap</span> : <a href=\"./Lean/Data/Position.html#Lean.FileMap\">FileMap</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">currRecDepth</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cmdPos</span> : <a href=\"./Init/Prelude.html#String.Pos\">String.Pos</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">macroStack</span> : <a href=\"./Lean/Elab/Util.html#Lean.Elab.MacroStack\">MacroStack</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">quotContext?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">currMacroScope</span> : <a href=\"./Init/Prelude.html#Lean.MacroScope\">MacroScope</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">snap?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotBundle\">Language.SnapshotBundle</a> <a href=\"./Lean/Language/Basic.html#Lean.Language.DynamicSnapshot\">Language.DynamicSnapshot</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cancelTk?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/System/IO.html#IO.CancelToken\">IO.CancelToken</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">suppressElabErrors</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Context\">Context</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.Context.mk","kind":"ctor","line":37,"name":"Lean.Elab.Command.Context.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L37-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.Context\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">Context</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.Context","kind":"structure","line":37,"name":"Lean.Elab.Command.Context","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L37-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.instNonemptyState\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">instNonemptyState</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.State\">State</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.instNonemptyState","kind":"instance","line":35,"name":"Lean.Elab.Command.instNonemptyState","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L35-L35"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.State.snapshotTasks\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">State</span>.<span class=\"name\">snapshotTasks</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask\">Language.SnapshotTask</a> <a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTree\">Language.SnapshotTree</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.State.snapshotTasks","kind":"def","line":34,"name":"Lean.Elab.Command.State.snapshotTasks","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L34-L34"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.State.traceState\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">State</span>.<span class=\"name\">traceState</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Util/Trace.html#Lean.TraceState\">TraceState</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.State.traceState","kind":"def","line":33,"name":"Lean.Elab.Command.State.traceState","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L33-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.State.infoState\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">State</span>.<span class=\"name\">infoState</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoState\">InfoState</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.State.infoState","kind":"def","line":32,"name":"Lean.Elab.Command.State.infoState","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L32-L32"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.State.auxDeclNGen\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">State</span>.<span class=\"name\">auxDeclNGen</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/CoreM.html#Lean.DeclNameGenerator\">DeclNameGenerator</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.State.auxDeclNGen","kind":"def","line":31,"name":"Lean.Elab.Command.State.auxDeclNGen","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L31-L31"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.State.ngen\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">State</span>.<span class=\"name\">ngen</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">NameGenerator</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.State.ngen","kind":"def","line":30,"name":"Lean.Elab.Command.State.ngen","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L30-L30"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.State.maxRecDepth\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">State</span>.<span class=\"name\">maxRecDepth</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.State.maxRecDepth","kind":"def","line":29,"name":"Lean.Elab.Command.State.maxRecDepth","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L29-L29"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.State.nextMacroScope\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">State</span>.<span class=\"name\">nextMacroScope</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.State.nextMacroScope","kind":"def","line":28,"name":"Lean.Elab.Command.State.nextMacroScope","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L28-L28"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.State.usedQuotCtxts\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">State</span>.<span class=\"name\">usedQuotCtxts</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Data/NameMap/Basic.html#Lean.NameSet\">NameSet</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.State.usedQuotCtxts","kind":"def","line":27,"name":"Lean.Elab.Command.State.usedQuotCtxts","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L27-L27"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.State.scopes\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">State</span>.<span class=\"name\">scopes</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/Command/Scope.html#Lean.Elab.Command.Scope\">Scope</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.State.scopes","kind":"def","line":26,"name":"Lean.Elab.Command.State.scopes","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L26-L26"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.State.messages\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">State</span>.<span class=\"name\">messages</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Message.html#Lean.MessageLog\">MessageLog</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.State.messages","kind":"def","line":25,"name":"Lean.Elab.Command.State.messages","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L25-L25"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.State.env\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">State</span>.<span class=\"name\">env</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.State.env","kind":"def","line":24,"name":"Lean.Elab.Command.State.env","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L24-L24"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">env</span> : <a href=\"./Lean/Environment.html#Lean.Environment\">Environment</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">messages</span> : <a href=\"./Lean/Message.html#Lean.MessageLog\">MessageLog</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">scopes</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/Command/Scope.html#Lean.Elab.Command.Scope\">Scope</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">usedQuotCtxts</span> : <a href=\"./Lean/Data/NameMap/Basic.html#Lean.NameSet\">NameSet</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">nextMacroScope </span><span class=\"fn\">maxRecDepth</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ngen</span> : <a href=\"./Init/MetaTypes.html#Lean.NameGenerator\">NameGenerator</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">auxDeclNGen</span> : <a href=\"./Lean/CoreM.html#Lean.DeclNameGenerator\">DeclNameGenerator</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">infoState</span> : <a href=\"./Lean/Elab/InfoTree/Types.html#Lean.Elab.InfoState\">InfoState</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">traceState</span> : <a href=\"./Lean/Util/Trace.html#Lean.TraceState\">TraceState</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">snapshotTasks</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask\">Language.SnapshotTask</a> <a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTree\">Language.SnapshotTree</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.State\">State</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.State.mk","kind":"ctor","line":23,"name":"Lean.Elab.Command.State.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L23-L23"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Command.html#Lean.Elab.Command.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Command.html#Lean.Elab.Command.State","kind":"structure","line":23,"name":"Lean.Elab.Command.State","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Command.lean#L23-L35"}}],"imports":["Init.Data.Range.Polymorphic.Stream","Lean.Meta.Diagnostics","Lean.Elab.Binders","Lean.Elab.Command.Scope","Lean.Elab.SyntheticMVars","Lean.Elab.SetOption","Lean.Language.Basic","Lean.Meta.ForEachExpr","Lean.Parser.Command"],"instances":[{"className":"Nonempty","name":"Lean.Elab.Command.instNonemptyState","typeNames":["Lean.Elab.Command.State"]},{"className":"Monad","name":"Lean.Elab.Command.instMonadCommandElabM","typeNames":["Lean.Elab.Command.CommandElabM"]},{"className":"MonadExceptOf","name":"Lean.Elab.Command.instMonadExceptOfExceptionCommandElabM","typeNames":["Lean.Exception","Lean.Elab.Command.CommandElabM"]},{"className":"Lean.Elab.MonadInfoTree","name":"Lean.Elab.Command.instMonadInfoTreeCommandElabM","typeNames":["Lean.Elab.Command.CommandElabM"]},{"className":"Lean.MonadEnv","name":"Lean.Elab.Command.instMonadEnvCommandElabM","typeNames":["Lean.Elab.Command.CommandElabM"]},{"className":"Lean.MonadOptions","name":"Lean.Elab.Command.instMonadOptionsCommandElabM","typeNames":["Lean.Elab.Command.CommandElabM"]},{"className":"Lean.AddMessageContext","name":"Lean.Elab.Command.instAddMessageContextCommandElabM","typeNames":["Lean.Elab.Command.CommandElabM"]},{"className":"Lean.MonadRef","name":"Lean.Elab.Command.instMonadRefCommandElabM","typeNames":["Lean.Elab.Command.CommandElabM"]},{"className":"Lean.MonadTrace","name":"Lean.Elab.Command.instMonadTraceCommandElabM","typeNames":["Lean.Elab.Command.CommandElabM"]},{"className":"Lean.AddErrorMessageContext","name":"Lean.Elab.Command.instAddErrorMessageContextCommandElabM","typeNames":["Lean.Elab.Command.CommandElabM"]},{"className":"Lean.MonadDeclNameGenerator","name":"Lean.Elab.Command.instMonadDeclNameGeneratorCommandElabM","typeNames":["Lean.Elab.Command.CommandElabM"]},{"className":"Lean.MonadQuotation","name":"Lean.Elab.Command.instMonadQuotationCommandElabM","typeNames":["Lean.Elab.Command.CommandElabM"]},{"className":"MonadLiftT","name":"Lean.Elab.Command.instMonadLiftTIOCommandElabM","typeNames":["IO","Lean.Elab.Command.CommandElabM"]},{"className":"Lean.MonadResolveName","name":"Lean.Elab.Command.instMonadResolveNameCommandElabM","typeNames":["Lean.Elab.Command.CommandElabM"]},{"className":"Lean.MonadLog","name":"Lean.Elab.Command.instMonadLogCommandElabM","typeNames":["Lean.Elab.Command.CommandElabM"]},{"className":"Lean.Elab.MonadMacroAdapter","name":"Lean.Elab.Command.instMonadMacroAdapterCommandElabM","typeNames":["Lean.Elab.Command.CommandElabM"]},{"className":"Lean.MonadRecDepth","name":"Lean.Elab.Command.instMonadRecDepthCommandElabM","typeNames":["Lean.Elab.Command.CommandElabM"]},{"className":"TypeName","name":"Lean.Elab.Command.instTypeNameMacroExpandedSnapshot","typeNames":["Lean.Elab.Command.MacroExpandedSnapshot"]},{"className":"Lean.Language.ToSnapshotTree","name":"Lean.Elab.Command.instToSnapshotTreeMacroExpandedSnapshot","typeNames":["Lean.Elab.Command.MacroExpandedSnapshot"]},{"className":"Inhabited","name":"Lean.Elab.Command.instInhabitedCommandElabM","typeNames":["Lean.Elab.Command.CommandElabM"]},{"className":"MonadEval","name":"Lean.Elab.Command.instMonadEvalTermElabMCommandElabM","typeNames":["Lean.Elab.Term.TermElabM","Lean.Elab.Command.CommandElabM"]}],"name":"Lean.Elab.Command"}