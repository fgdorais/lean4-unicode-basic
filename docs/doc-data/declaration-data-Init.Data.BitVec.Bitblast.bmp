{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.fastUmulOverflow\"><span class=\"name\">BitVec</span>.<span class=\"name\">fastUmulOverflow</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.umulOverflow\">umulOverflow</a></span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">if hw : <span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">1</span> then <a href=\"./Init/Prelude.html#Bool.false\">false</a> else (<span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.setWidth\">setWidth</a> (<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.setWidth\">setWidth</a> (<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">y</span></span>)<a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">w</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a> <a href=\"./Init/Prelude.html#Bool.or\">||</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.resRec\">resRec</a></span> <span class=\"fn\">y</span> (<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>) <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span></span></span></div></div>","info":{"doc":"Complete fast overflow detection circuit for unsigned multiplication.\n","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.fastUmulOverflow","kind":"theorem","line":2321,"name":"BitVec.fastUmulOverflow","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L2321-L2390"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.resRec_of_clz_le\"><span class=\"name\">BitVec</span>.<span class=\"name\">resRec_of_clz_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hw</span> : <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">≠</a> 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hy</span> : <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Ne\">≠</a> 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.clz\">clz</a></span>.<a href=\"./Init/Prelude.html#BitVec.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.clz\">clz</a></span>.<a href=\"./Init/Prelude.html#BitVec.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">2</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.resRec\">resRec</a></span> <span class=\"fn\">y</span> (<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>) <span class=\"fn\">⋯</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></div></div>","info":{"doc":"If the sum of the leading zeroes of two bitvecs with bitwidth `w` is less than or equal to\n(`w - 2`), then the preliminary overflow flag is true and their unsigned multiplication overflows.\nThe explanation is in `Efficient integer multiplication overflow detection circuits`\nhttps://ieeexplore.ieee.org/abstract/document/987767\n","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.resRec_of_clz_le","kind":"theorem","line":2300,"name":"BitVec.resRec_of_clz_le","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L2300-L2319"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.resRec_true_iff\"><span class=\"name\">BitVec</span>.<span class=\"name\">resRec_true_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hs</span> : <span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hs'</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">s</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.resRec\">resRec</a></span> <span class=\"fn\">y</span> <span class=\"fn\">s</span> <span class=\"fn\">hs</span> <span class=\"fn\">hs'</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">k</span> <a href=\"./Init/Core.html#Exists\">:</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">h</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">k</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">s</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">x_1</span> <a href=\"./Init/Core.html#Exists\">:</a> <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">k</span><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.aandRec\">aandRec</a></span> <span class=\"fn\">y</span> <span class=\"fn\">k</span> <span class=\"fn\">⋯</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>","info":{"doc":"The preliminary overflow flag is true for a certain `s` if and only if the conjunction returns true at\nany `k` smaller than or equal to `s`. ","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.resRec_true_iff","kind":"theorem","line":2248,"name":"BitVec.resRec_true_iff","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L2248-L2298"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.resRec\"><span class=\"name\">BitVec</span>.<span class=\"name\">resRec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hs</span> : <span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hslt</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">s</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Preliminary overflow flag for fast umulOverflow circuit as introduced in\n`Efficient integer multiplication overflow detection circuits` (https://ieeexplore.ieee.org/abstract/document/987767).\n","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.resRec","kind":"def","line":2235,"name":"BitVec.resRec","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L2235-L2246"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.aandRec\"><span class=\"name\">BitVec</span>.<span class=\"name\">aandRec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hs</span> : <span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Conjunction for fast umulOverflow circuit\n","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.aandRec","kind":"def","line":2228,"name":"BitVec.aandRec","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L2228-L2232"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.uppcRec_true_iff\"><span class=\"name\">BitVec</span>.<span class=\"name\">uppcRec_true_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.uppcRec\">uppcRec</a></span> <span class=\"fn\">s</span> <span class=\"fn\">h</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> (<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> (<span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)) <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#BitVec.toNat\">toNat</a></span></div></div>","info":{"doc":"The unsigned parallel prefix of `x` at `s` is `true` if and only if x interpreted\nas a natural number is greater or equal than `2 ^ (w - 1 - (s - 1))`. ","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.uppcRec_true_iff","kind":"theorem","line":2192,"name":"BitVec.uppcRec_true_iff","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L2192-L2226"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.uppcRec\"><span class=\"name\">BitVec</span>.<span class=\"name\">uppcRec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hs</span> : <span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"`uppcRec` is the unsigned parallel prefix, `x.uppcRec s = true` iff `x.toNat` is greater or equal\nthan `2 ^ (w - 1 - (s - 1))`.\n","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.uppcRec","kind":"def","line":2183,"name":"BitVec.uppcRec","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L2183-L2190"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.shiftLeft_add_eq_shiftLeft_or\"><span class=\"name\">BitVec</span>.<span class=\"name\">shiftLeft_add_eq_shiftLeft_or</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">x</span></div></div>","info":{"doc":"Heuristically, `y <<< x` is much larger than `x`,\nand hence low bits of `y <<< x`. Thus, `(y <<< x) + x = (y <<< x) ||| x.` ","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.shiftLeft_add_eq_shiftLeft_or","kind":"theorem","line":2152,"name":"BitVec.shiftLeft_add_eq_shiftLeft_or","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L2152-L2156"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.add_shiftLeft_eq_or_shiftLeft\"><span class=\"name\">BitVec</span>.<span class=\"name\">add_shiftLeft_eq_or_shiftLeft</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">x</span></div></div>","info":{"doc":"Heuristically, `y <<< x` is much larger than `x`,\nand hence low bits of `y <<< x`. Thus, `x + (y <<< x) = x ||| (y <<< x).` ","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.add_shiftLeft_eq_or_shiftLeft","kind":"theorem","line":2139,"name":"BitVec.add_shiftLeft_eq_or_shiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L2139-L2150"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.zero_append_add_append_zero\"><span class=\"name\">BitVec</span>.<span class=\"name\">zero_append_add_append_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v </span><span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">v</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">y</span></div></div>","info":{"doc":"Adding bitvectors that are zero in complementary positions equals concatenation. ","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.zero_append_add_append_zero","kind":"theorem","line":2132,"name":"BitVec.zero_append_add_append_zero","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L2132-L2137"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.append_zero_add_zero_append\"><span class=\"name\">BitVec</span>.<span class=\"name\">append_zero_add_zero_append</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v </span><span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">v</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> (0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">v</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">y</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAppend.hAppend\">++</a> <span class=\"fn\">y</span></div></div>","info":{"doc":"Adding bitvectors that are zero in complementary positions equals concatenation.\nWe add a `no_index` annotation to `HAppend.hAppend` such that the width `v + w`\ndoes not act as a key in the discrimination tree.\nThis is important to allow matching, when the type of the result of append\n`x : BitVec 3` and `y : BitVec 4` has been reduced to `x ++ y : BitVec 7`.\n","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.append_zero_add_zero_append","kind":"theorem","line":2120,"name":"BitVec.append_zero_add_zero_append","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L2120-L2130"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.extractLsb'_mul\"><span class=\"name\">BitVec</span>.<span class=\"name\">extractLsb'_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w </span><span class=\"fn\">len</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hlen</span> : <span class=\"fn\">len</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">w</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.extractLsb'\">extractLsb'</a> <span class=\"fn\">0</span> <span class=\"fn\">len</span> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.extractLsb'\">extractLsb'</a> <span class=\"fn\">0</span> <span class=\"fn\">len</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.extractLsb'\">extractLsb'</a> <span class=\"fn\">0</span> <span class=\"fn\">len</span> <span class=\"fn\">y</span></span></div></div>","info":{"doc":"`extractLsb'` commutes with multiplication. ","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.extractLsb'_mul","kind":"theorem","line":2115,"name":"BitVec.extractLsb'_mul","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L2115-L2118"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.extractLsb'_add\"><span class=\"name\">BitVec</span>.<span class=\"name\">extractLsb'_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w </span><span class=\"fn\">len</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hlen</span> : <span class=\"fn\">len</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">w</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.extractLsb'\">extractLsb'</a> <span class=\"fn\">0</span> <span class=\"fn\">len</span> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.extractLsb'\">extractLsb'</a> <span class=\"fn\">0</span> <span class=\"fn\">len</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.extractLsb'\">extractLsb'</a> <span class=\"fn\">0</span> <span class=\"fn\">len</span> <span class=\"fn\">y</span></span></div></div>","info":{"doc":"The `[0..len)` low bits of `x + y` can be computed by truncating `x` and `y`\nto `len` bits and then adding.\n","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.extractLsb'_add","kind":"theorem","line":2105,"name":"BitVec.extractLsb'_add","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L2105-L2113"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.carry_extractLsb'_eq_carry\"><span class=\"name\">BitVec</span>.<span class=\"name\">carry_extractLsb'_eq_carry</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w </span><span class=\"fn\">i </span><span class=\"fn\">len</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hi</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">len</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.carry\">carry</a> <span class=\"fn\">i</span> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.extractLsb'\">extractLsb'</a> <span class=\"fn\">0</span> <span class=\"fn\">len</span> <span class=\"fn\">x</span>)</span> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.extractLsb'\">extractLsb'</a> <span class=\"fn\">0</span> <span class=\"fn\">len</span> <span class=\"fn\">y</span>)</span> <span class=\"fn\">b</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.carry\">carry</a> <span class=\"fn\">i</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"The value of `(carry i x y false)` can be computed by truncating `x` and `y`\nto `len` bits where `len ≥ i`. ","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.carry_extractLsb'_eq_carry","kind":"theorem","line":2092,"name":"BitVec.carry_extractLsb'_eq_carry","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L2092-L2103"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.not_sub_eq_not_add\"><span class=\"name\">BitVec</span>.<span class=\"name\">not_sub_eq_not_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a>(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.not_sub_eq_not_add","kind":"theorem","line":2089,"name":"BitVec.not_sub_eq_not_add","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L2089-L2090"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.not_sub_one_eq_not_add_one\"><span class=\"name\">BitVec</span>.<span class=\"name\">not_sub_one_eq_not_add_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a>(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> 1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> 1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.not_sub_one_eq_not_add_one","kind":"theorem","line":2085,"name":"BitVec.not_sub_one_eq_not_add_one","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L2085-L2087"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.not_add_eq_not_neg\"><span class=\"name\">BitVec</span>.<span class=\"name\">not_add_eq_not_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a>(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.not_add_eq_not_neg","kind":"theorem","line":2080,"name":"BitVec.not_add_eq_not_neg","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L2080-L2083"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.not_add_one\"><span class=\"name\">BitVec</span>.<span class=\"name\">not_add_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Complement.complement\">~~~</a>(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> 1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> 1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.not_add_one","kind":"theorem","line":2077,"name":"BitVec.not_add_one","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L2077-L2078"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.sub_add_comm\"><span class=\"name\">BitVec</span>.<span class=\"name\">sub_add_comm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">z </span><span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.sub_add_comm","kind":"theorem","line":2074,"name":"BitVec.sub_add_comm","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L2074-L2075"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.add_sub_comm\"><span class=\"name\">BitVec</span>.<span class=\"name\">add_sub_comm</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">z </span><span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.add_sub_comm","kind":"theorem","line":2068,"name":"BitVec.add_sub_comm","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L2068-L2072"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.msb_smod\"><span class=\"name\">BitVec</span>.<span class=\"name\">msb_smod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> (<span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.smod\">smod</a></span> <span class=\"fn\">y</span>)</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> (<span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>)</span>))</span> <a href=\"./Init/Prelude.html#Bool.or\">||</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> (<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.smod\">smod</a></span> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.msb_smod","kind":"theorem","line":2042,"name":"BitVec.msb_smod","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L2042-L2064"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.getMsbD_smod\"><span class=\"name\">BitVec</span>.<span class=\"name\">getMsbD_smod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w </span><span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.smod\">smod</a></span> <span class=\"fn\">y</span>)</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getMsbD\">getMsbD</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span>, <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> with\n  | <a href=\"./Init/Prelude.html#Bool.false\">false</a>, <a href=\"./Init/Prelude.html#Bool.false\">false</a> =&gt; <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">y</span>).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getMsbD\">getMsbD</a></span> <span class=\"fn\">i</span></span>\n  | <a href=\"./Init/Prelude.html#Bool.false\">false</a>, <a href=\"./Init/Prelude.html#Bool.true\">true</a> =&gt; <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span>).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getMsbD\">getMsbD</a></span> <span class=\"fn\">i</span></span>\n  | <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <a href=\"./Init/Prelude.html#Bool.false\">false</a> =&gt; <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#ite\">if</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#ite\">then</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">y</span>).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getMsbD\">getMsbD</a></span> <span class=\"fn\">i</span></span>\n  | <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <a href=\"./Init/Prelude.html#Bool.true\">true</a> =&gt; <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span>)).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getMsbD\">getMsbD</a></span> <span class=\"fn\">i</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.getMsbD_smod","kind":"theorem","line":2031,"name":"BitVec.getMsbD_smod","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L2031-L2040"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.getLsbD_smod\"><span class=\"name\">BitVec</span>.<span class=\"name\">getLsbD_smod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w </span><span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.smod\">smod</a></span> <span class=\"fn\">y</span>)</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span>, <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> with\n  | <a href=\"./Init/Prelude.html#Bool.false\">false</a>, <a href=\"./Init/Prelude.html#Bool.false\">false</a> =&gt; <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">y</span>).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> <span class=\"fn\">i</span></span>\n  | <a href=\"./Init/Prelude.html#Bool.false\">false</a>, <a href=\"./Init/Prelude.html#Bool.true\">true</a> =&gt; <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#ite\">then</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span>).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> <span class=\"fn\">i</span></span>\n  | <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <a href=\"./Init/Prelude.html#Bool.false\">false</a> =&gt; <a href=\"./Init/Prelude.html#ite\">if</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#ite\">then</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">y</span>).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> <span class=\"fn\">i</span></span>\n  | <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <a href=\"./Init/Prelude.html#Bool.true\">true</a> =&gt; <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span>)).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> <span class=\"fn\">i</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.getLsbD_smod","kind":"theorem","line":2017,"name":"BitVec.getLsbD_smod","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L2017-L2029"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.getElem_smod\"><span class=\"name\">BitVec</span>.<span class=\"name\">getElem_smod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w </span><span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.smod\">smod</a></span> <span class=\"fn\">y</span>)</span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span>, <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> with\n  | <a href=\"./Init/Prelude.html#Bool.false\">false</a>, <a href=\"./Init/Prelude.html#Bool.false\">false</a> =&gt; (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">y</span>)<a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a>\n  | <a href=\"./Init/Prelude.html#Bool.false\">false</a>, <a href=\"./Init/Prelude.html#Bool.true\">true</a> =&gt; (<a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span>)<a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a>\n  | <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <a href=\"./Init/Prelude.html#Bool.false\">false</a> =&gt; (<a href=\"./Init/Prelude.html#ite\">if</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#ite\">then</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">y</span>)<a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a>\n  | <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <a href=\"./Init/Prelude.html#Bool.true\">true</a> =&gt; (<a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span>))<a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.getElem_smod","kind":"theorem","line":2006,"name":"BitVec.getElem_smod","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L2006-L2015"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.toInt_smod\"><span class=\"name\">BitVec</span>.<span class=\"name\">toInt_smod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.smod\">smod</a></span> <span class=\"fn\">y</span>)</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.toInt\">toInt</a></span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.fmod\">fmod</a></span> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.toInt\">toInt</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.toInt_smod","kind":"theorem","line":1974,"name":"BitVec.toInt_smod","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1974-L2004"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.msb_srem\"><span class=\"name\">BitVec</span>.<span class=\"name\">msb_srem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.srem\">srem</a></span> <span class=\"fn\">y</span>)</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> (<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.srem\">srem</a></span> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\">0</span>)</span>)</div></div>","info":{"doc":"The remainder for `srem`, i.e. division with rounding to zero is negative\niff `x` is negative and `y` does not divide `x`.\n\nWe can eventually build fast circuits for the divisibility test `x.srem y = 0`.\n","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.msb_srem","kind":"theorem","line":1943,"name":"BitVec.msb_srem","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1943-L1972"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.srem_zero_of_dvd\"><span class=\"name\">BitVec</span>.<span class=\"name\">srem_zero_of_dvd</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.srem\">srem</a></span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.srem_zero_of_dvd","kind":"theorem","line":1936,"name":"BitVec.srem_zero_of_dvd","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1936-L1941"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.toInt_sub_neg_umod\"><span class=\"name\">BitVec</span>.<span class=\"name\">toInt_sub_neg_umod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hxmsb</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hymsb</span> : <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hdvd</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">y</span>).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.toInt\">toInt</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.toInt_sub_neg_umod","kind":"theorem","line":1918,"name":"BitVec.toInt_sub_neg_umod","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1918-L1934"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.toInt_umod_neg_add\"><span class=\"name\">BitVec</span>.<span class=\"name\">toInt_umod_neg_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hymsb</span> : <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hxmsb</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hdvd</span> : <a href=\"./Init/Prelude.html#Not\">¬</a><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.toInt\">toInt</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span>).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.toInt\">toInt</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.toInt_umod_neg_add","kind":"theorem","line":1903,"name":"BitVec.toInt_umod_neg_add","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1903-L1916"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.neg_toInt_neg_umod_eq_of_msb_true_msb_true\"><span class=\"name\">BitVec</span>.<span class=\"name\">neg_toInt_neg_umod_eq_of_msb_true_msb_true</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hy</span> : <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span>)).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span>).<a href=\"./Init/Prelude.html#BitVec.toNat\">toNat</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.neg_toInt_neg_umod_eq_of_msb_true_msb_true","kind":"theorem","line":1895,"name":"BitVec.neg_toInt_neg_umod_eq_of_msb_true_msb_true","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1895-L1901"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.toInt_dvd_toInt_iff_of_msb_false_msb_true\"><span class=\"name\">BitVec</span>.<span class=\"name\">toInt_dvd_toInt_iff_of_msb_false_msb_true</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hy</span> : <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.toInt\">toInt</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.toInt_dvd_toInt_iff_of_msb_false_msb_true","kind":"theorem","line":1891,"name":"BitVec.toInt_dvd_toInt_iff_of_msb_false_msb_true","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1891-L1893"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.toInt_dvd_toInt_iff_of_msb_true_msb_false\"><span class=\"name\">BitVec</span>.<span class=\"name\">toInt_dvd_toInt_iff_of_msb_true_msb_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hy</span> : <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.toInt\">toInt</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.toInt_dvd_toInt_iff_of_msb_true_msb_false","kind":"theorem","line":1887,"name":"BitVec.toInt_dvd_toInt_iff_of_msb_true_msb_false","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1887-L1889"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.toInt_dvd_toInt_iff\"><span class=\"name\">BitVec</span>.<span class=\"name\">toInt_dvd_toInt_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Dvd.dvd\">∣</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.toInt\">toInt</a></span> <a href=\"./Init/Core.html#Iff\">↔</a> ((<a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">x</span>) <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">y</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.toInt_dvd_toInt_iff","kind":"theorem","line":1873,"name":"BitVec.toInt_dvd_toInt_iff","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1873-L1885"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.msb_neg_umod_neg_of_msb_true_of_msb_true\"><span class=\"name\">BitVec</span>.<span class=\"name\">msb_neg_umod_neg_of_msb_true_of_msb_true</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hy</span> : <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span>).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.msb_neg_umod_neg_of_msb_true_of_msb_true","kind":"theorem","line":1866,"name":"BitVec.msb_neg_umod_neg_of_msb_true_of_msb_true","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1866-L1871"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.msb_intMin_umod_neg_of_msb_true\"><span class=\"name\">BitVec</span>.<span class=\"name\">msb_intMin_umod_neg_of_msb_true</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hy</span> : <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.intMin\">intMin</a> <span class=\"fn\">w</span></span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span>).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.msb_intMin_umod_neg_of_msb_true","kind":"theorem","line":1858,"name":"BitVec.msb_intMin_umod_neg_of_msb_true","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1858-L1864"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.toInt_srem\"><span class=\"name\">BitVec</span>.<span class=\"name\">toInt_srem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.srem\">srem</a></span> <span class=\"fn\">y</span>)</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.toInt\">toInt</a></span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.tmod\">tmod</a></span> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.toInt\">toInt</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.toInt_srem","kind":"theorem","line":1830,"name":"BitVec.toInt_srem","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1830-L1856"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.getMsbD_srem\"><span class=\"name\">BitVec</span>.<span class=\"name\">getMsbD_srem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w </span><span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.srem\">srem</a></span> <span class=\"fn\">y</span>)</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getMsbD\">getMsbD</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span>, <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> with\n  | <a href=\"./Init/Prelude.html#Bool.false\">false</a>, <a href=\"./Init/Prelude.html#Bool.false\">false</a> =&gt; <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">y</span>).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getMsbD\">getMsbD</a></span> <span class=\"fn\">i</span></span>\n  | <a href=\"./Init/Prelude.html#Bool.false\">false</a>, <a href=\"./Init/Prelude.html#Bool.true\">true</a> =&gt; <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span>).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getMsbD\">getMsbD</a></span> <span class=\"fn\">i</span></span>\n  | <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <a href=\"./Init/Prelude.html#Bool.false\">false</a> =&gt; <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">y</span>)).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getMsbD\">getMsbD</a></span> <span class=\"fn\">i</span></span>\n  | <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <a href=\"./Init/Prelude.html#Bool.true\">true</a> =&gt; <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span>)).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getMsbD\">getMsbD</a></span> <span class=\"fn\">i</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.getMsbD_srem","kind":"theorem","line":1819,"name":"BitVec.getMsbD_srem","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1819-L1828"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.getLsbD_srem\"><span class=\"name\">BitVec</span>.<span class=\"name\">getLsbD_srem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w </span><span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.srem\">srem</a></span> <span class=\"fn\">y</span>)</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span>, <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> with\n  | <a href=\"./Init/Prelude.html#Bool.false\">false</a>, <a href=\"./Init/Prelude.html#Bool.false\">false</a> =&gt; <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">y</span>).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> <span class=\"fn\">i</span></span>\n  | <a href=\"./Init/Prelude.html#Bool.false\">false</a>, <a href=\"./Init/Prelude.html#Bool.true\">true</a> =&gt; <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span>).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> <span class=\"fn\">i</span></span>\n  | <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <a href=\"./Init/Prelude.html#Bool.false\">false</a> =&gt; <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">y</span>)).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> <span class=\"fn\">i</span></span>\n  | <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <a href=\"./Init/Prelude.html#Bool.true\">true</a> =&gt; <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span>)).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> <span class=\"fn\">i</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.getLsbD_srem","kind":"theorem","line":1808,"name":"BitVec.getLsbD_srem","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1808-L1817"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.getElem_srem\"><span class=\"name\">BitVec</span>.<span class=\"name\">getElem_srem</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w </span><span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.srem\">srem</a></span> <span class=\"fn\">y</span>)</span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span>, <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> with\n  | <a href=\"./Init/Prelude.html#Bool.false\">false</a>, <a href=\"./Init/Prelude.html#Bool.false\">false</a> =&gt; (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">y</span>)<a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a>\n  | <a href=\"./Init/Prelude.html#Bool.false\">false</a>, <a href=\"./Init/Prelude.html#Bool.true\">true</a> =&gt; (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span>)<a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a>\n  | <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <a href=\"./Init/Prelude.html#Bool.false\">false</a> =&gt; (<a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">y</span>))<a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a>\n  | <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <a href=\"./Init/Prelude.html#Bool.true\">true</a> =&gt; (<a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span>))<a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.getElem_srem","kind":"theorem","line":1797,"name":"BitVec.getElem_srem","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1797-L1806"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.msb_umod_of_le_of_ne_zero_of_le\"><span class=\"name\">BitVec</span>.<span class=\"name\">msb_umod_of_le_of_ne_zero_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.intMin\">intMin</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hy</span> : <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Ne\">≠</a> 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hy'</span> : <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.intMin\">intMin</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">y</span>).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.msb_umod_of_le_of_ne_zero_of_le","kind":"theorem","line":1789,"name":"BitVec.msb_umod_of_le_of_ne_zero_of_le","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1789-L1795"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.msb_umod_eq_false_of_left\"><span class=\"name\">BitVec</span>.<span class=\"name\">msb_umod_eq_false_of_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">y</span>).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.msb_umod_eq_false_of_left","kind":"theorem","line":1782,"name":"BitVec.msb_umod_eq_false_of_left","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1782-L1787"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.msb_sdiv_eq_decide\"><span class=\"name\">BitVec</span>.<span class=\"name\">msb_sdiv_eq_decide</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.sdiv\">sdiv</a></span> <span class=\"fn\">y</span>)</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   (<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> (<span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span>)</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> (<a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">x</span>)</span>) <a href=\"./Init/Prelude.html#Bool.or\">||</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> (<span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span>)</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> (<span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span>)</span> <a href=\"./Init/Prelude.html#Bool.or\">||</a>     <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.intMin\">intMin</a> <span class=\"fn\">w</span></span>)</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> (<span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a>1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span>)</span>)</div></div>","info":{"doc":"the most significant bit of the signed division `x.sdiv y` can be computed\nby the following cases:\n(1) x nonneg, y nonneg: never neg.\n(2) x nonneg, y neg: neg when result nonzero.\n   We know that y is nonzero since it is negative, so we only check `|x| ≥ |y|`.\n(3) x neg, y nonneg: neg when result nonzero.\n  We check that `y ≠ 0` and `|x| ≥ |y|`.\n(4) x neg, y neg: neg when `x = intMin, `y = -1`, since `intMin / -1 = intMin`.\n\nThe proof strategy is to perform a case analysis on the sign of `x` and `y`,\nfollowed by unfolding the `sdiv` into `udiv`.\n","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.msb_sdiv_eq_decide","kind":"theorem","line":1719,"name":"BitVec.msb_sdiv_eq_decide","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1719-L1780"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.getMsbD_sdiv\"><span class=\"name\">BitVec</span>.<span class=\"name\">getMsbD_sdiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w </span><span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.sdiv\">sdiv</a></span> <span class=\"fn\">y</span>)</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getMsbD\">getMsbD</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span>, <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> with\n  | <a href=\"./Init/Prelude.html#Bool.false\">false</a>, <a href=\"./Init/Prelude.html#Bool.false\">false</a> =&gt; <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">y</span>).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getMsbD\">getMsbD</a></span> <span class=\"fn\">i</span></span>\n  | <a href=\"./Init/Prelude.html#Bool.false\">false</a>, <a href=\"./Init/Prelude.html#Bool.true\">true</a> =&gt; <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span>)).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getMsbD\">getMsbD</a></span> <span class=\"fn\">i</span></span>\n  | <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <a href=\"./Init/Prelude.html#Bool.false\">false</a> =&gt; <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">y</span>)).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getMsbD\">getMsbD</a></span> <span class=\"fn\">i</span></span>\n  | <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <a href=\"./Init/Prelude.html#Bool.true\">true</a> =&gt; <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span>).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getMsbD\">getMsbD</a></span> <span class=\"fn\">i</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.getMsbD_sdiv","kind":"theorem","line":1708,"name":"BitVec.getMsbD_sdiv","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1708-L1717"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.getLsbD_sdiv\"><span class=\"name\">BitVec</span>.<span class=\"name\">getLsbD_sdiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w </span><span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.sdiv\">sdiv</a></span> <span class=\"fn\">y</span>)</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span>, <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> with\n  | <a href=\"./Init/Prelude.html#Bool.false\">false</a>, <a href=\"./Init/Prelude.html#Bool.false\">false</a> =&gt; <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">y</span>).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> <span class=\"fn\">i</span></span>\n  | <a href=\"./Init/Prelude.html#Bool.false\">false</a>, <a href=\"./Init/Prelude.html#Bool.true\">true</a> =&gt; <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span>)).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> <span class=\"fn\">i</span></span>\n  | <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <a href=\"./Init/Prelude.html#Bool.false\">false</a> =&gt; <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">y</span>)).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> <span class=\"fn\">i</span></span>\n  | <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <a href=\"./Init/Prelude.html#Bool.true\">true</a> =&gt; <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span>).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> <span class=\"fn\">i</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.getLsbD_sdiv","kind":"theorem","line":1697,"name":"BitVec.getLsbD_sdiv","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1697-L1706"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.getElem_sdiv\"><span class=\"name\">BitVec</span>.<span class=\"name\">getElem_sdiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w </span><span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.sdiv\">sdiv</a></span> <span class=\"fn\">y</span>)</span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">match <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span>, <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> with\n  | <a href=\"./Init/Prelude.html#Bool.false\">false</a>, <a href=\"./Init/Prelude.html#Bool.false\">false</a> =&gt; (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">y</span>)<a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a>\n  | <a href=\"./Init/Prelude.html#Bool.false\">false</a>, <a href=\"./Init/Prelude.html#Bool.true\">true</a> =&gt; (<a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span>))<a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a>\n  | <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <a href=\"./Init/Prelude.html#Bool.false\">false</a> =&gt; (<a href=\"./Init/Prelude.html#Neg.neg\">-</a>(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">y</span>))<a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a>\n  | <a href=\"./Init/Prelude.html#Bool.true\">true</a>, <a href=\"./Init/Prelude.html#Bool.true\">true</a> =&gt; (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span>)<a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.getElem_sdiv","kind":"theorem","line":1686,"name":"BitVec.getElem_sdiv","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1686-L1695"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.toInt_sdiv\"><span class=\"name\">BitVec</span>.<span class=\"name\">toInt_sdiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.sdiv\">sdiv</a></span> <span class=\"fn\">b</span>)</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.toInt\">toInt</a></span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.tdiv\">tdiv</a></span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.toInt\">toInt</a></span>)</span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> (<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">w</span>)</span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.toInt_sdiv","kind":"theorem","line":1656,"name":"BitVec.toInt_sdiv","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1656-L1666"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.intMin_sdiv_neg_one\"><span class=\"name\">BitVec</span>.<span class=\"name\">intMin_sdiv_neg_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.intMin\">intMin</a> <span class=\"fn\">w</span>)</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.sdiv\">sdiv</a></span> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a>1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.intMin\">intMin</a> <span class=\"fn\">w</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.intMin_sdiv_neg_one","kind":"theorem","line":1647,"name":"BitVec.intMin_sdiv_neg_one","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1647-L1654"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.toInt_sdiv_of_ne_or_ne\"><span class=\"name\">BitVec</span>.<span class=\"name\">toInt_sdiv_of_ne_or_ne</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">a</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.intMin\">intMin</a> <span class=\"fn\">w</span></span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Ne\">≠</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a>1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.sdiv\">sdiv</a></span> <span class=\"fn\">b</span>)</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.toInt\">toInt</a></span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.tdiv\">tdiv</a></span> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.toInt\">toInt</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.toInt_sdiv_of_ne_or_ne","kind":"theorem","line":1576,"name":"BitVec.toInt_sdiv_of_ne_or_ne","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1576-L1645"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.intMin_udiv_ne_zero_of_ne_zero\"><span class=\"name\">BitVec</span>.<span class=\"name\">intMin_udiv_ne_zero_of_ne_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb0</span> : <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Ne\">≠</a> 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.intMin\">intMin</a> <span class=\"fn\">w</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Ne\">≠</a> 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.intMin_udiv_ne_zero_of_ne_zero","kind":"theorem","line":1564,"name":"BitVec.intMin_udiv_ne_zero_of_ne_zero","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1564-L1574"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.intMin_udiv_eq_intMin_iff\"><span class=\"name\">BitVec</span>.<span class=\"name\">intMin_udiv_eq_intMin_iff</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.intMin\">intMin</a> <span class=\"fn\">w</span></span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.intMin\">intMin</a> <span class=\"fn\">w</span></span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> 1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.intMin_udiv_eq_intMin_iff","kind":"theorem","line":1544,"name":"BitVec.intMin_udiv_eq_intMin_iff","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1544-L1562"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.toInt_eq_neg_toNat_neg_of_nonpos\"><span class=\"name\">BitVec</span>.<span class=\"name\">toInt_eq_neg_toNat_neg_of_nonpos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#Or\">∨</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span>).<a href=\"./Init/Prelude.html#BitVec.toNat\">toNat</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.toInt_eq_neg_toNat_neg_of_nonpos","kind":"theorem","line":1536,"name":"BitVec.toInt_eq_neg_toNat_neg_of_nonpos","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1536-L1542"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.toInt_eq_neg_toNat_neg_of_msb_true\"><span class=\"name\">BitVec</span>.<span class=\"name\">toInt_eq_neg_toNat_neg_of_msb_true</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span>).<a href=\"./Init/Prelude.html#BitVec.toNat\">toNat</a></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.toInt_eq_neg_toNat_neg_of_msb_true","kind":"theorem","line":1525,"name":"BitVec.toInt_eq_neg_toNat_neg_of_msb_true","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1525-L1534"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.sdiv_ne_intMin_of_ne_intMin\"><span class=\"name\">BitVec</span>.<span class=\"name\">sdiv_ne_intMin_of_ne_intMin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.intMin\">intMin</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.sdiv\">sdiv</a></span> <span class=\"fn\">y</span></span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.intMin\">intMin</a> <span class=\"fn\">w</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.sdiv_ne_intMin_of_ne_intMin","kind":"theorem","line":1509,"name":"BitVec.sdiv_ne_intMin_of_ne_intMin","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1509-L1523"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.toInt_bmod_cancel\"><span class=\"name\">BitVec</span>.<span class=\"name\">toInt_bmod_cancel</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.toInt\">toInt</a></span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> (<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">w</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">b</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.toInt\">toInt</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.toInt_bmod_cancel","kind":"theorem","line":1505,"name":"BitVec.toInt_bmod_cancel","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1505-L1507"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.toInt_intMin_eq_bmod\"><span class=\"name\">BitVec</span>.<span class=\"name\">toInt_intMin_eq_bmod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.intMin\">intMin</a> <span class=\"fn\">w</span>)</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.toInt\">toInt</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> (<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)).<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> (<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">w</span>)</span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.toInt_intMin_eq_bmod","kind":"theorem","line":1502,"name":"BitVec.toInt_intMin_eq_bmod","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1502-L1503"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.intMin_eq_neg_two_pow\"><span class=\"name\">BitVec</span>.<span class=\"name\">intMin_eq_neg_two_pow</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.intMin\">intMin</a> <span class=\"fn\">w</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.ofInt\">BitVec.ofInt</a> <span class=\"fn\">w</span> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> (<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>))</span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.intMin_eq_neg_two_pow","kind":"theorem","line":1494,"name":"BitVec.intMin_eq_neg_two_pow","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1494-L1500"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.neg_sdiv_neg\"><span class=\"name\">BitVec</span>.<span class=\"name\">neg_sdiv_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.intMin\">intMin</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span>).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.sdiv\">sdiv</a></span> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.sdiv\">sdiv</a></span> <span class=\"fn\">y</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.neg_sdiv_neg","kind":"theorem","line":1478,"name":"BitVec.neg_sdiv_neg","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1478-L1492"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.neg_sdiv\"><span class=\"name\">BitVec</span>.<span class=\"name\">neg_sdiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.intMin\">intMin</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span>).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.sdiv\">sdiv</a></span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.sdiv\">sdiv</a></span> <span class=\"fn\">y</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.neg_sdiv","kind":"theorem","line":1470,"name":"BitVec.neg_sdiv","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1470-L1476"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.sdiv_neg\"><span class=\"name\">BitVec</span>.<span class=\"name\">sdiv_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.intMin\">intMin</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.sdiv\">sdiv</a></span> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">y</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.sdiv\">sdiv</a></span> <span class=\"fn\">y</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.sdiv_neg","kind":"theorem","line":1462,"name":"BitVec.sdiv_neg","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1462-L1468"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.sdiv_intMin\"><span class=\"name\">BitVec</span>.<span class=\"name\">sdiv_intMin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.sdiv\">sdiv</a></span> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.intMin\">intMin</a> <span class=\"fn\">w</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.intMin\">intMin</a> <span class=\"fn\">w</span></span> <a href=\"./Init/Prelude.html#ite\">then</a> 1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#ite\">else</a> 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.sdiv_intMin","kind":"theorem","line":1446,"name":"BitVec.sdiv_intMin","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1446-L1460"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.udiv_intMin_of_msb_false\"><span class=\"name\">BitVec</span>.<span class=\"name\">udiv_intMin_of_msb_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.intMin\">intMin</a> <span class=\"fn\">w</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.udiv_intMin_of_msb_false","kind":"theorem","line":1435,"name":"BitVec.udiv_intMin_of_msb_false","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1435-L1444"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.msb_neg_of_ne_intMin_of_ne_zero\"><span class=\"name\">BitVec</span>.<span class=\"name\">msb_neg_of_ne_intMin_of_ne_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.intMin\">intMin</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h'</span> : <span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">≠</a> 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span>).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.msb_neg_of_ne_intMin_of_ne_zero","kind":"theorem","line":1429,"name":"BitVec.msb_neg_of_ne_intMin_of_ne_zero","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1429-L1433"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.ne_zero_of_msb_true\"><span class=\"name\">BitVec</span>.<span class=\"name\">ne_zero_of_msb_true</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">≠</a> 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.ne_zero_of_msb_true","kind":"theorem","line":1421,"name":"BitVec.ne_zero_of_msb_true","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1421-L1427"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.ne_intMin_of_lt_of_msb_false\"><span class=\"name\">BitVec</span>.<span class=\"name\">ne_intMin_of_lt_of_msb_false</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hw</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hx</span> : <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.intMin\">intMin</a> <span class=\"fn\">w</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.ne_intMin_of_lt_of_msb_false","kind":"theorem","line":1414,"name":"BitVec.ne_intMin_of_lt_of_msb_false","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1414-L1419"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.eq_iff_eq_of_inv\"><span class=\"name\">BitVec</span>.<span class=\"name\">eq_iff_eq_of_inv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <span class=\"fn\"><span class=\"fn\">α</span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span> → <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">∀ (<span class=\"fn\">x</span> : <span class=\"fn\">α</span>), <span class=\"fn\"><span class=\"fn\">g</span> <span class=\"fn\">(<span class=\"fn\">f</span> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">y</span> <a href=\"./Init/Core.html#Iff\">↔</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">f</span> <span class=\"fn\">y</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.eq_iff_eq_of_inv","kind":"theorem","line":1404,"name":"BitVec.eq_iff_eq_of_inv","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1404-L1412"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.getMsbD_umod\"><span class=\"name\">BitVec</span>.<span class=\"name\">getMsbD_umod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w </span><span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">d</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">d</span>).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getMsbD\">getMsbD</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#Eq\">=</a> 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getMsbD\">getMsbD</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.divRec\">divRec</a> <span class=\"fn\">w</span> <a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs.mk\">{</a> <span class=\"fn\">n</span> := <span class=\"fn\">n</span>, <span class=\"fn\">d</span> := <span class=\"fn\">d</span> <a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs.mk\">}</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.init\">DivModState.init</a> <span class=\"fn\">w</span>)</span>)</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.r\">r</a></span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getMsbD\">getMsbD</a></span> <span class=\"fn\">i</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.getMsbD_umod","kind":"theorem","line":1392,"name":"BitVec.getMsbD_umod","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1392-L1399"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.getLsbD_umod\"><span class=\"name\">BitVec</span>.<span class=\"name\">getLsbD_umod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w </span><span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">d</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">d</span>).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#Eq\">=</a> 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.divRec\">divRec</a> <span class=\"fn\">w</span> <a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs.mk\">{</a> <span class=\"fn\">n</span> := <span class=\"fn\">n</span>, <span class=\"fn\">d</span> := <span class=\"fn\">d</span> <a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs.mk\">}</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.init\">DivModState.init</a> <span class=\"fn\">w</span>)</span>)</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.r\">r</a></span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> <span class=\"fn\">i</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.getLsbD_umod","kind":"theorem","line":1384,"name":"BitVec.getLsbD_umod","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1384-L1390"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.getElem_umod\"><span class=\"name\">BitVec</span>.<span class=\"name\">getElem_umod</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w </span><span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">d</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hi</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">d</span>)<a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#Eq\">=</a> 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">n</span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.divRec\">divRec</a> <span class=\"fn\">w</span> <a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs.mk\">{</a> <span class=\"fn\">n</span> := <span class=\"fn\">n</span>, <span class=\"fn\">d</span> := <span class=\"fn\">d</span> <a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs.mk\">}</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.init\">DivModState.init</a> <span class=\"fn\">w</span>)</span>)</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.r\">r</a></span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.getElem_umod","kind":"theorem","line":1374,"name":"BitVec.getElem_umod","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1374-L1382"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.smulOverflow_eq\"><span class=\"name\">BitVec</span>.<span class=\"name\">smulOverflow_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.smulOverflow\">smulOverflow</a></span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   (<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> (<span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span>)</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a>     (<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">signExtend</a> (<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">2</span>) <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.intMax\">intMax</a> <span class=\"fn\">w</span>)</span>)</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.slt\">slt</a></span> (<span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">signExtend</a> (<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">2</span>) <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">signExtend</a> (<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">2</span>) <span class=\"fn\">y</span></span>)</span> <a href=\"./Init/Prelude.html#Bool.or\">||</a>       <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">signExtend</a> (<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">2</span>) <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">signExtend</a> (<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">2</span>) <span class=\"fn\">y</span></span>).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.slt\">slt</a></span> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">signExtend</a> (<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">2</span>) <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.intMin\">intMin</a> <span class=\"fn\">w</span>)</span>)</span></span>))</div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.smulOverflow_eq","kind":"theorem","line":1359,"name":"BitVec.smulOverflow_eq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1359-L1370"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.umulOverflow_eq\"><span class=\"name\">BitVec</span>.<span class=\"name\">umulOverflow_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.umulOverflow\">umulOverflow</a></span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> (<span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span>)</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> (<span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.twoPow\">twoPow</a> (<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">2</span>) <span class=\"fn\">w</span></span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.zeroExtend\">zeroExtend</a> (<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">2</span>) <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.zeroExtend\">zeroExtend</a> (<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">2</span>) <span class=\"fn\">y</span></span>)</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.umulOverflow_eq","kind":"theorem","line":1347,"name":"BitVec.umulOverflow_eq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1347-L1357"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.sdivOverflow_eq\"><span class=\"name\">BitVec</span>.<span class=\"name\">sdivOverflow_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.sdivOverflow\">sdivOverflow</a></span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> (<span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span>)</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.intMin\">intMin</a> <span class=\"fn\">w</span></span>)</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> (<span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.allOnes\">allOnes</a> <span class=\"fn\">w</span></span>)</span>)</div></div>","info":{"doc":"Prove that signed division `x.toInt / y.toInt` only overflows when `x = intMin w` and `y = allOnes w` (for `0 < w`).\n","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.sdivOverflow_eq","kind":"theorem","line":1315,"name":"BitVec.sdivOverflow_eq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1315-L1345"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.negOverflow_eq\"><span class=\"name\">BitVec</span>.<span class=\"name\">negOverflow_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.negOverflow\">negOverflow</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> (<span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span>)</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.intMin\">intMin</a> <span class=\"fn\">w</span></span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.negOverflow_eq","kind":"theorem","line":1306,"name":"BitVec.negOverflow_eq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1306-L1313"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.ssubOverflow_eq\"><span class=\"name\">BitVec</span>.<span class=\"name\">ssubOverflow_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.ssubOverflow\">ssubOverflow</a></span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span>).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> <a href=\"./Init/Prelude.html#Bool.or\">||</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span>).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.ssubOverflow_eq","kind":"theorem","line":1294,"name":"BitVec.ssubOverflow_eq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1294-L1304"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.usubOverflow_eq\"><span class=\"name\">BitVec</span>.<span class=\"name\">usubOverflow_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.usubOverflow\">usubOverflow</a></span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">y</span>)</span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.usubOverflow_eq","kind":"theorem","line":1291,"name":"BitVec.usubOverflow_eq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1291-L1292"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.saddOverflow_eq\"><span class=\"name\">BitVec</span>.<span class=\"name\">saddOverflow_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.saddOverflow\">saddOverflow</a></span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span>).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.saddOverflow_eq","kind":"theorem","line":1278,"name":"BitVec.saddOverflow_eq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1278-L1289"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.uaddOverflow_eq\"><span class=\"name\">BitVec</span>.<span class=\"name\">uaddOverflow_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.uaddOverflow\">uaddOverflow</a></span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.setWidth\">setWidth</a> (<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">x</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.setWidth\">setWidth</a> (<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">y</span></span>).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span></div></div>","info":{"doc":"Unsigned addition overflows iff the final carry bit of the addition circuit is `true`. ","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.uaddOverflow_eq","kind":"theorem","line":1273,"name":"BitVec.uaddOverflow_eq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1273-L1276"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.shiftRight_eq_ushiftRightRec\"><span class=\"name\">BitVec</span>.<span class=\"name\">shiftRight_eq_ushiftRightRec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w₁ </span><span class=\"fn\">w₂</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.ushiftRightRec\">ushiftRightRec</a></span> <span class=\"fn\">y</span> (<span class=\"fn\">w₂</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)</span></div></div>","info":{"doc":"Show that `x >>> y` can be written in terms of `ushiftRightRec`.\nThis can be unfolded in terms of `ushiftRightRec_zero`, `ushiftRightRec_succ` for bit blasting.\n","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.shiftRight_eq_ushiftRightRec","kind":"theorem","line":1261,"name":"BitVec.shiftRight_eq_ushiftRightRec","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1261-L1269"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.ushiftRightRec_eq\"><span class=\"name\">BitVec</span>.<span class=\"name\">ushiftRightRec_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w₁ </span><span class=\"fn\">w₂</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.ushiftRightRec\">ushiftRightRec</a></span> <span class=\"fn\">y</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.setWidth\">setWidth</a> <span class=\"fn\">w₂</span> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.setWidth\">setWidth</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">y</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.ushiftRightRec_eq","kind":"theorem","line":1245,"name":"BitVec.ushiftRightRec_eq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1245-L1259"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.ushiftRight'_or_of_and_eq_zero\"><span class=\"name\">BitVec</span>.<span class=\"name\">ushiftRight'_or_of_and_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w₁ </span><span class=\"fn\">w₂</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w₁</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y </span><span class=\"fn\">z</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w₂</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Eq\">=</a> 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> (<span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">z</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\">z</span></div></div>","info":{"doc":"If `y &&& z = 0`, `x >>> (y ||| z) = x >>> y >>> z`.\nThis follows as `y &&& z = 0` implies `y ||| z = y + z`,\nand thus `x >>> (y ||| z) = x >>> (y + z) = x >>> y >>> z`.\n","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.ushiftRight'_or_of_and_eq_zero","kind":"theorem","line":1235,"name":"BitVec.ushiftRight'_or_of_and_eq_zero","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1235-L1243"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.ushiftRightRec_succ\"><span class=\"name\">BitVec</span>.<span class=\"name\">ushiftRightRec_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w₁ </span><span class=\"fn\">w₂ </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.ushiftRightRec\">ushiftRightRec</a></span> <span class=\"fn\">y</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.ushiftRightRec\">ushiftRightRec</a></span> <span class=\"fn\">y</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> (<span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.twoPow\">twoPow</a> <span class=\"fn\">w₂</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.ushiftRightRec_succ","kind":"theorem","line":1230,"name":"BitVec.ushiftRightRec_succ","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1230-L1233"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.ushiftRightRec_zero\"><span class=\"name\">BitVec</span>.<span class=\"name\">ushiftRightRec_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w₁ </span><span class=\"fn\">w₂</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.ushiftRightRec\">ushiftRightRec</a></span> <span class=\"fn\">y</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> (<span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.twoPow\">twoPow</a> <span class=\"fn\">w₂</span> <span class=\"fn\">0</span></span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.ushiftRightRec_zero","kind":"theorem","line":1225,"name":"BitVec.ushiftRightRec_zero","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1225-L1228"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.ushiftRightRec\"><span class=\"name\">BitVec</span>.<span class=\"name\">ushiftRightRec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w₁ </span><span class=\"fn\">w₂</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w₁</span></span></div></div>","info":{"doc":"Shifts `x` logically to the right by the first `n` bits of `y`.\n\nThe theorem `BitVec.shiftRight_eq_ushiftRightRec` proves the equivalence\nof `(x >>> y)` and `BitVec.ushiftRightRec`.\n\nTogether with equations `BitVec.ushiftRightRec_zero` and `BitVec.ushiftRightRec_succ`,\nthis allows `BitVec.ushiftRight` to be unfolded into a circuit for bit blasting.\n","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.ushiftRightRec","kind":"def","line":1210,"name":"BitVec.ushiftRightRec","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1210-L1223"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.sshiftRight_eq_sshiftRightRec\"><span class=\"name\">BitVec</span>.<span class=\"name\">sshiftRight_eq_sshiftRightRec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w₁ </span><span class=\"fn\">w₂ </span><span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.sshiftRight'\">sshiftRight'</a></span> <span class=\"fn\">y</span>)</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.sshiftRightRec\">sshiftRightRec</a></span> <span class=\"fn\">y</span> (<span class=\"fn\">w₂</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>))</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> <span class=\"fn\">i</span></span></div></div>","info":{"doc":"Show that `x.sshiftRight y` can be written in terms of `sshiftRightRec`.\nThis can be unfolded in terms of `sshiftRightRec_zero_eq`, `sshiftRightRec_succ_eq` for bit blasting.\n","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.sshiftRight_eq_sshiftRightRec","kind":"theorem","line":1198,"name":"BitVec.sshiftRight_eq_sshiftRightRec","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1198-L1206"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.sshiftRightRec_eq\"><span class=\"name\">BitVec</span>.<span class=\"name\">sshiftRightRec_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w₁ </span><span class=\"fn\">w₂</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.sshiftRightRec\">sshiftRightRec</a></span> <span class=\"fn\">y</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.sshiftRight'\">sshiftRight'</a></span> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.setWidth\">setWidth</a> <span class=\"fn\">w₂</span> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.setWidth\">setWidth</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">y</span>)</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.sshiftRightRec_eq","kind":"theorem","line":1182,"name":"BitVec.sshiftRightRec_eq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1182-L1196"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.sshiftRight'_or_of_and_eq_zero\"><span class=\"name\">BitVec</span>.<span class=\"name\">sshiftRight'_or_of_and_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w₁ </span><span class=\"fn\">w₂</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w₁</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y </span><span class=\"fn\">z</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w₂</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Eq\">=</a> 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.sshiftRight'\">sshiftRight'</a></span> (<span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">z</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.sshiftRight'\">sshiftRight'</a></span> <span class=\"fn\">y</span>)</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.sshiftRight'\">sshiftRight'</a></span> <span class=\"fn\">z</span></span></div></div>","info":{"doc":"If `y &&& z = 0`, `x.sshiftRight (y ||| z) = (x.sshiftRight y).sshiftRight z`.\nThis follows as `y &&& z = 0` implies `y ||| z = y + z`,\nand thus `x.sshiftRight (y ||| z) = x.sshiftRight (y + z) = (x.sshiftRight y).sshiftRight z`.\n","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.sshiftRight'_or_of_and_eq_zero","kind":"theorem","line":1171,"name":"BitVec.sshiftRight'_or_of_and_eq_zero","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1171-L1180"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.sshiftRightRec_succ_eq\"><span class=\"name\">BitVec</span>.<span class=\"name\">sshiftRightRec_succ_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w₁ </span><span class=\"fn\">w₂</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.sshiftRightRec\">sshiftRightRec</a></span> <span class=\"fn\">y</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.sshiftRightRec\">sshiftRightRec</a></span> <span class=\"fn\">y</span> <span class=\"fn\">n</span>)</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.sshiftRight'\">sshiftRight'</a></span> (<span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.twoPow\">twoPow</a> <span class=\"fn\">w₂</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.sshiftRightRec_succ_eq","kind":"theorem","line":1166,"name":"BitVec.sshiftRightRec_succ_eq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1166-L1169"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.sshiftRightRec_zero_eq\"><span class=\"name\">BitVec</span>.<span class=\"name\">sshiftRightRec_zero_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w₁ </span><span class=\"fn\">w₂</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.sshiftRightRec\">sshiftRightRec</a></span> <span class=\"fn\">y</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.sshiftRight'\">sshiftRight'</a></span> (<span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.twoPow\">twoPow</a> <span class=\"fn\">w₂</span> <span class=\"fn\">0</span></span>)</span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.sshiftRightRec_zero_eq","kind":"theorem","line":1161,"name":"BitVec.sshiftRightRec_zero_eq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1161-L1164"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.sshiftRightRec\"><span class=\"name\">BitVec</span>.<span class=\"name\">sshiftRightRec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w₁ </span><span class=\"fn\">w₂</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w₁</span></span></div></div>","info":{"doc":"Shifts `x` arithmetically (signed) to the right by the first `n` bits of `y`.\n\nThe theorem `BitVec.sshiftRight_eq_sshiftRightRec` proves the equivalence of `(x.sshiftRight y)` and\n`BitVec.sshiftRightRec x y`. Together with equations `BitVec.sshiftRightRec_zero`, and\n`BitVec.sshiftRightRec_succ`, this allows `BitVec.sshiftRight` to be unfolded into a circuit for\nbit blasting.\n","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.sshiftRightRec","kind":"def","line":1147,"name":"BitVec.sshiftRightRec","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1147-L1159"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.getMsbD_udiv\"><span class=\"name\">BitVec</span>.<span class=\"name\">getMsbD_udiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n </span><span class=\"fn\">d</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hd</span> : 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">d</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">d</span>).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getMsbD\">getMsbD</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> (<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span>)</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.divRec\">divRec</a> <span class=\"fn\">w</span> <a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs.mk\">{</a> <span class=\"fn\">n</span> := <span class=\"fn\">n</span>, <span class=\"fn\">d</span> := <span class=\"fn\">d</span> <a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs.mk\">}</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.init\">DivModState.init</a> <span class=\"fn\">w</span>)</span>)</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.q\">q</a></span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getMsbD\">getMsbD</a></span> <span class=\"fn\">i</span></span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.getMsbD_udiv","kind":"theorem","line":1141,"name":"BitVec.getMsbD_udiv","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1141-L1143"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.getLsbD_udiv\"><span class=\"name\">BitVec</span>.<span class=\"name\">getLsbD_udiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n </span><span class=\"fn\">d</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hy</span> : 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">d</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">d</span>).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> (<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span>)</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.divRec\">divRec</a> <span class=\"fn\">w</span> <a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs.mk\">{</a> <span class=\"fn\">n</span> := <span class=\"fn\">n</span>, <span class=\"fn\">d</span> := <span class=\"fn\">d</span> <a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs.mk\">}</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.init\">DivModState.init</a> <span class=\"fn\">w</span>)</span>)</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.q\">q</a></span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> <span class=\"fn\">i</span></span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.getLsbD_udiv","kind":"theorem","line":1134,"name":"BitVec.getLsbD_udiv","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1134-L1139"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.getElem_udiv\"><span class=\"name\">BitVec</span>.<span class=\"name\">getElem_udiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n </span><span class=\"fn\">d</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hy</span> : 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">d</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hi</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">d</span>)<a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.divRec\">divRec</a> <span class=\"fn\">w</span> <a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs.mk\">{</a> <span class=\"fn\">n</span> := <span class=\"fn\">n</span>, <span class=\"fn\">d</span> := <span class=\"fn\">d</span> <a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs.mk\">}</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.init\">DivModState.init</a> <span class=\"fn\">w</span>)</span>)</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.q\">q</a></span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.getElem_udiv","kind":"theorem","line":1130,"name":"BitVec.getElem_udiv","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1130-L1132"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.divRec_succ'\"><span class=\"name\">BitVec</span>.<span class=\"name\">divRec_succ'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs\">DivModArgs</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">qr</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState\">DivModState</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.divRec\">divRec</a> (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">args</span> <span class=\"fn\">qr</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a>   <span class=\"fn\">have <span class=\"fn\">wn</span> := <span class=\"fn\"><span class=\"fn\">qr</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.wn\">wn</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>;\n  <span class=\"fn\">have <span class=\"fn\">wr</span> := <span class=\"fn\"><span class=\"fn\">qr</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.wr\">wr</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>;\n  <span class=\"fn\">have <span class=\"fn\">r'</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">qr</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.r\">r</a></span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.shiftConcat\">shiftConcat</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">args</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs.n\">n</a></span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> <span class=\"fn\">wn</span>)</span></span>;\n  <span class=\"fn\">have <span class=\"fn\">input</span> :=\n    <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">r'</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">args</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs.d\">d</a></span> <a href=\"./Init/Prelude.html#ite\">then</a> <a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.mk\">{</a> <span class=\"fn\">wn</span> := <span class=\"fn\">wn</span>, <span class=\"fn\">wr</span> := <span class=\"fn\">wr</span>, <span class=\"fn\">q</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">qr</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.q\">q</a></span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.shiftConcat\">shiftConcat</a></span> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>, <span class=\"fn\">r</span> := <span class=\"fn\">r'</span> <a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.mk\">}</a>\n    <a href=\"./Init/Prelude.html#ite\">else</a> <a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.mk\">{</a> <span class=\"fn\">wn</span> := <span class=\"fn\">wn</span>, <span class=\"fn\">wr</span> := <span class=\"fn\">wr</span>, <span class=\"fn\">q</span> := <span class=\"fn\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">qr</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.q\">q</a></span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.shiftConcat\">shiftConcat</a></span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>, <span class=\"fn\">r</span> := <span class=\"fn\">r'</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\"><span class=\"fn\">args</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs.d\">d</a></span> <a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.mk\">}</a>;\n  <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.divRec\">divRec</a> <span class=\"fn\">m</span> <span class=\"fn\">args</span> <span class=\"fn\">input</span></span></span></span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.divRec_succ'","kind":"theorem","line":1112,"name":"BitVec.divRec_succ'","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1112-L1128"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.umod_eq_divRec\"><span class=\"name\">BitVec</span>.<span class=\"name\">umod_eq_divRec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">d </span><span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hd</span> : 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">d</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">have <span class=\"fn\">out</span> := <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.divRec\">divRec</a> <span class=\"fn\">w</span> <a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs.mk\">{</a> <span class=\"fn\">n</span> := <span class=\"fn\">n</span>, <span class=\"fn\">d</span> := <span class=\"fn\">d</span> <a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs.mk\">}</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.init\">DivModState.init</a> <span class=\"fn\">w</span>)</span></span>;\n<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">out</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.r\">r</a></span></span></div></div>","info":{"doc":"The result of `umod` agrees with the result of the division recurrence. ","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.umod_eq_divRec","kind":"theorem","line":1104,"name":"BitVec.umod_eq_divRec","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1104-L1110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.udiv_eq_divRec\"><span class=\"name\">BitVec</span>.<span class=\"name\">udiv_eq_divRec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">d </span><span class=\"fn\">n</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hd</span> : 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">d</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">have <span class=\"fn\">out</span> := <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.divRec\">divRec</a> <span class=\"fn\">w</span> <a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs.mk\">{</a> <span class=\"fn\">n</span> := <span class=\"fn\">n</span>, <span class=\"fn\">d</span> := <span class=\"fn\">d</span> <a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs.mk\">}</a> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.init\">DivModState.init</a> <span class=\"fn\">w</span>)</span></span>;\n<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">out</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.q\">q</a></span></span></div></div>","info":{"doc":"The result of `udiv` agrees with the result of the division recurrence. ","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.udiv_eq_divRec","kind":"theorem","line":1096,"name":"BitVec.udiv_eq_divRec","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1096-L1102"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.wn_divRec\"><span class=\"name\">BitVec</span>.<span class=\"name\">wn_divRec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs\">DivModArgs</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">qr</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState\">DivModState</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.divRec\">divRec</a> <span class=\"fn\"><span class=\"fn\">qr</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.wn\">wn</a></span> <span class=\"fn\">args</span> <span class=\"fn\">qr</span>)</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.wn\">wn</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"The output of `divRec` has no more bits left to process (i.e., `wn = 0`) ","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.wn_divRec","kind":"theorem","line":1084,"name":"BitVec.wn_divRec","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1084-L1094"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.lawful_divRec\"><span class=\"name\">BitVec</span>.<span class=\"name\">lawful_divRec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs\">DivModArgs</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">qr</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState\">DivModState</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.Lawful\">DivModState.Lawful</a> <span class=\"fn\">args</span> <span class=\"fn\">qr</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.Lawful\">DivModState.Lawful</a> <span class=\"fn\">args</span> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.divRec\">divRec</a> <span class=\"fn\"><span class=\"fn\">qr</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.wn\">wn</a></span> <span class=\"fn\">args</span> <span class=\"fn\">qr</span>)</span></span></div></div>","info":{"doc":"The output of `divRec` is a lawful state ","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.lawful_divRec","kind":"theorem","line":1067,"name":"BitVec.lawful_divRec","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1067-L1082"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.divRec_succ\"><span class=\"name\">BitVec</span>.<span class=\"name\">divRec_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs\">DivModArgs</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">qr</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState\">DivModState</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.divRec\">divRec</a> (<span class=\"fn\">m</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">args</span> <span class=\"fn\">qr</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.divRec\">divRec</a> <span class=\"fn\">m</span> <span class=\"fn\">args</span> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.divSubtractShift\">divSubtractShift</a> <span class=\"fn\">args</span> <span class=\"fn\">qr</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.divRec_succ","kind":"theorem","line":1062,"name":"BitVec.divRec_succ","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1062-L1065"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.divRec_zero\"><span class=\"name\">BitVec</span>.<span class=\"name\">divRec_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs\">DivModArgs</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">qr</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState\">DivModState</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.divRec\">divRec</a> <span class=\"fn\">0</span> <span class=\"fn\">args</span> <span class=\"fn\">qr</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">qr</span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.divRec_zero","kind":"theorem","line":1058,"name":"BitVec.divRec_zero","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1058-L1060"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.divRec\"><span class=\"name\">BitVec</span>.<span class=\"name\">divRec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs\">DivModArgs</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">qr</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState\">DivModState</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState\">DivModState</a> <span class=\"fn\">w</span></span></div></div>","info":{"doc":"A recursive definition of division for bit blasting, in terms of a shift-subtraction circuit. ","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.divRec","kind":"def","line":1051,"name":"BitVec.divRec","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1051-L1056"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.lawful_divSubtractShift\"><span class=\"name\">BitVec</span>.<span class=\"name\">lawful_divSubtractShift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs\">DivModArgs</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">qr</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState\">DivModState</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.Poised\">DivModState.Poised</a> <span class=\"fn\">args</span> <span class=\"fn\">qr</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.Lawful\">DivModState.Lawful</a> <span class=\"fn\">args</span> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.divSubtractShift\">divSubtractShift</a> <span class=\"fn\">args</span> <span class=\"fn\">qr</span>)</span></span></div></div>","info":{"doc":"We show that the output of `divSubtractShift` is lawful, which tells us that it\nobeys the division equation. ","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.lawful_divSubtractShift","kind":"theorem","line":1002,"name":"BitVec.lawful_divSubtractShift","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L1002-L1047"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.toNat_shiftRight_sub_one_eq\"><span class=\"name\">BitVec</span>.<span class=\"name\">DivModState</span>.<span class=\"name\">toNat_shiftRight_sub_one_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs\">DivModArgs</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">qr</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState\">DivModState</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.Poised\">Poised</a> <span class=\"fn\">args</span> <span class=\"fn\">qr</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">args</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs.n\">n</a></span>.<a href=\"./Init/Prelude.html#BitVec.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> (<span class=\"fn\"><span class=\"fn\">qr</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.wn\">wn</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">args</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs.n\">n</a></span>.<a href=\"./Init/Prelude.html#BitVec.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\"><span class=\"fn\">qr</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.wn\">wn</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">args</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs.n\">n</a></span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> (<span class=\"fn\"><span class=\"fn\">qr</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.wn\">wn</a></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>))</span>.<a href=\"./Init/Data/Bool.html#Bool.toNat\">toNat</a></span></div></div>","info":{"doc":"The value of shifting right by `wn - 1` equals shifting by `wn` and grabbing the lsb at `(wn - 1)`. ","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.toNat_shiftRight_sub_one_eq","kind":"theorem","line":978,"name":"BitVec.DivModState.toNat_shiftRight_sub_one_eq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L978-L990"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.divSubtractShift\"><span class=\"name\">BitVec</span>.<span class=\"name\">divSubtractShift</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs\">DivModArgs</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">qr</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState\">DivModState</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState\">DivModState</a> <span class=\"fn\">w</span></span></div></div>","info":{"doc":"One round of the division algorithm. It tries to perform a subtract shift.\n\nThis should only be called when `r.msb = false`, so it will not overflow.\n","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.divSubtractShift","kind":"def","line":958,"name":"BitVec.divSubtractShift","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L958-L976"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.wr_lt_w\"><span class=\"name\">BitVec</span>.<span class=\"name\">DivModState</span>.<span class=\"name\">wr_lt_w</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs\">DivModArgs</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">qr</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState\">DivModState</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.Poised\">Poised</a> <span class=\"fn\">args</span> <span class=\"fn\">qr</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">qr</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.wr\">wr</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span></div></div>","info":{"doc":"In the shift subtract input, the dividend is at least one bit long (`wn > 0`), so\nthe remainder has bits to be computed (`wr < w`).\n","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.wr_lt_w","kind":"def","line":947,"name":"BitVec.DivModState.wr_lt_w","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L947-L954"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.Poised.hwn_lt\"><span class=\"name\">BitVec</span>.<span class=\"name\">DivModState</span>.<span class=\"name\">Poised</span>.<span class=\"name\">hwn_lt</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs\">DivModArgs</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">qr</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState\">DivModState</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.Poised\">Poised</a> <span class=\"fn\">args</span> <span class=\"fn\">qr</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">qr</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.wn\">wn</a></span></div></div>","info":{"doc":"Only perform a round of shift-subtract if we have dividend bits. ","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.Poised.hwn_lt","kind":"theorem","line":945,"name":"BitVec.DivModState.Poised.hwn_lt","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L945-L945"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.Poised.mk\"><span class=\"name\">BitVec</span>.<span class=\"name\">DivModState</span>.<span class=\"name\">Poised</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs\">DivModArgs</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">qr</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState\">DivModState</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toLawful</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.Lawful\">Lawful</a> <span class=\"fn\">args</span> <span class=\"fn\">qr</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hwn_lt</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">qr</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.wn\">wn</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.Poised\">Poised</a> <span class=\"fn\">args</span> <span class=\"fn\">qr</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.Poised.mk","kind":"ctor","line":942,"name":"BitVec.DivModState.Poised.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L942-L942"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.Poised.toLawful\"><span class=\"name\">BitVec</span>.<span class=\"name\">DivModState</span>.<span class=\"name\">Poised</span>.<span class=\"name\">toLawful</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs\">DivModArgs</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">qr</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState\">DivModState</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.Poised\">Poised</a> <span class=\"fn\">args</span> <span class=\"fn\">qr</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.Lawful\">Lawful</a> <span class=\"fn\">args</span> <span class=\"fn\">qr</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.Poised.toLawful","kind":"theorem","line":942,"name":"BitVec.DivModState.Poised.toLawful","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L942-L945"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.Poised\"><span class=\"name\">BitVec</span>.<span class=\"name\">DivModState</span>.<span class=\"name\">Poised</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs\">DivModArgs</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">qr</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState\">DivModState</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_extends\">extends</span> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.Lawful\">BitVec.DivModState.Lawful</a> <span class=\"fn\">args</span> <span class=\"fn\">qr</span></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"A `Poised` DivModState is a state which is `Lawful` and furthermore, has at least\none numerator bit left to process `(0 < wn)`\n\nThe input to the shift subtractor is a legal input to `divrem`, and we also need to have an\ninput bit to perform shift subtraction on, and thus we need `0 < wn`.\n","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.Poised","kind":"structure","line":935,"name":"BitVec.DivModState.Poised","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L935-L945"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.umod_eq_of_lawful\"><span class=\"name\">BitVec</span>.<span class=\"name\">DivModState</span>.<span class=\"name\">umod_eq_of_lawful</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">d</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">qr</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState\">DivModState</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.Lawful\">Lawful</a> <a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs.mk\">{</a> <span class=\"fn\">n</span> := <span class=\"fn\">n</span>, <span class=\"fn\">d</span> := <span class=\"fn\">d</span> <a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs.mk\">}</a> <span class=\"fn\">qr</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h_final</span> : <span class=\"fn\"><span class=\"fn\">qr</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.wn\">wn</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">qr</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.r\">r</a></span></div></div>","info":{"doc":"A lawful DivModState with a fully consumed dividend (`wn = 0`) witnesses that the\nremainder has been correctly computed.\n","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.umod_eq_of_lawful","kind":"theorem","line":919,"name":"BitVec.DivModState.umod_eq_of_lawful","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L919-L931"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.udiv_eq_of_lawful\"><span class=\"name\">BitVec</span>.<span class=\"name\">DivModState</span>.<span class=\"name\">udiv_eq_of_lawful</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n </span><span class=\"fn\">d</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">qr</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState\">DivModState</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h_lawful</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.Lawful\">Lawful</a> <a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs.mk\">{</a> <span class=\"fn\">n</span> := <span class=\"fn\">n</span>, <span class=\"fn\">d</span> := <span class=\"fn\">d</span> <a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs.mk\">}</a> <span class=\"fn\">qr</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h_final</span> : <span class=\"fn\"><span class=\"fn\">qr</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.wn\">wn</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">0</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">qr</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.q\">q</a></span></div></div>","info":{"doc":"A lawful DivModState with a fully consumed dividend (`wn = 0`) witnesses that the\nquotient has been correctly computed.\n","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.udiv_eq_of_lawful","kind":"theorem","line":906,"name":"BitVec.DivModState.udiv_eq_of_lawful","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L906-L917"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.lawful_init\"><span class=\"name\">BitVec</span>.<span class=\"name\">DivModState</span>.<span class=\"name\">lawful_init</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs\">DivModArgs</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hd</span> : 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">args</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs.d\">d</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.Lawful\">Lawful</a> <span class=\"fn\">args</span> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.init\">init</a> <span class=\"fn\">w</span>)</span></span></div></div>","info":{"doc":"The initial state is lawful. ","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.lawful_init","kind":"def","line":890,"name":"BitVec.DivModState.lawful_init","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L890-L904"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.init\"><span class=\"name\">BitVec</span>.<span class=\"name\">DivModState</span>.<span class=\"name\">init</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState\">DivModState</a> <span class=\"fn\">w</span></span></div></div>","info":{"doc":"An initial value with both `q, r = 0`. ","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.init","kind":"def","line":882,"name":"BitVec.DivModState.init","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L882-L888"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.Lawful.hw\"><span class=\"name\">BitVec</span>.<span class=\"name\">DivModState</span>.<span class=\"name\">Lawful</span>.<span class=\"name\">hw</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs\">DivModArgs</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">qr</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState\">DivModState</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">h</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.Lawful\">Lawful</a> <span class=\"fn\">args</span> <span class=\"fn\">qr</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span></div></div>","info":{"doc":"A lawful DivModState implies `w > 0`. ","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.Lawful.hw","kind":"def","line":872,"name":"BitVec.DivModState.Lawful.hw","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L872-L880"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.Lawful.hdiv\"><span class=\"name\">BitVec</span>.<span class=\"name\">DivModState</span>.<span class=\"name\">Lawful</span>.<span class=\"name\">hdiv</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs\">DivModArgs</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">qr</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState\">DivModState</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.Lawful\">Lawful</a> <span class=\"fn\">args</span> <span class=\"fn\">qr</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">args</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs.n\">n</a></span>.<a href=\"./Init/Prelude.html#BitVec.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\"><span class=\"fn\">qr</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.wn\">wn</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">args</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs.d\">d</a></span>.<a href=\"./Init/Prelude.html#BitVec.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">qr</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.q\">q</a></span>.<a href=\"./Init/Prelude.html#BitVec.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">qr</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.r\">r</a></span>.<a href=\"./Init/Prelude.html#BitVec.toNat\">toNat</a></span></div></div>","info":{"doc":"The low `(w - wn)` bits of `n` obey the invariant for division. ","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.Lawful.hdiv","kind":"theorem","line":870,"name":"BitVec.DivModState.Lawful.hdiv","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L870-L870"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.Lawful.hqWidth\"><span class=\"name\">BitVec</span>.<span class=\"name\">DivModState</span>.<span class=\"name\">Lawful</span>.<span class=\"name\">hqWidth</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs\">DivModArgs</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">qr</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState\">DivModState</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.Lawful\">Lawful</a> <span class=\"fn\">args</span> <span class=\"fn\">qr</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">qr</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.q\">q</a></span>.<a href=\"./Init/Prelude.html#BitVec.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\"><span class=\"fn\">qr</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.wr\">wr</a></span></div></div>","info":{"doc":"The quotient is morally a `Bitvec wr`, and so has value less than `2^wr`. ","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.Lawful.hqWidth","kind":"theorem","line":868,"name":"BitVec.DivModState.Lawful.hqWidth","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L868-L868"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.Lawful.hrWidth\"><span class=\"name\">BitVec</span>.<span class=\"name\">DivModState</span>.<span class=\"name\">Lawful</span>.<span class=\"name\">hrWidth</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs\">DivModArgs</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">qr</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState\">DivModState</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.Lawful\">Lawful</a> <span class=\"fn\">args</span> <span class=\"fn\">qr</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">qr</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.r\">r</a></span>.<a href=\"./Init/Prelude.html#BitVec.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\"><span class=\"fn\">qr</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.wr\">wr</a></span></div></div>","info":{"doc":"The remainder is morally a `Bitvec wr`, and so has value less than `2^wr`. ","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.Lawful.hrWidth","kind":"theorem","line":866,"name":"BitVec.DivModState.Lawful.hrWidth","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L866-L866"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.Lawful.hrLtDivisor\"><span class=\"name\">BitVec</span>.<span class=\"name\">DivModState</span>.<span class=\"name\">Lawful</span>.<span class=\"name\">hrLtDivisor</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs\">DivModArgs</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">qr</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState\">DivModState</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.Lawful\">Lawful</a> <span class=\"fn\">args</span> <span class=\"fn\">qr</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">qr</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.r\">r</a></span>.<a href=\"./Init/Prelude.html#BitVec.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">args</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs.d\">d</a></span>.<a href=\"./Init/Prelude.html#BitVec.toNat\">toNat</a></span></div></div>","info":{"doc":"The remainder is strictly less than the denominator. ","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.Lawful.hrLtDivisor","kind":"theorem","line":864,"name":"BitVec.DivModState.Lawful.hrLtDivisor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L864-L864"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.Lawful.hdPos\"><span class=\"name\">BitVec</span>.<span class=\"name\">DivModState</span>.<span class=\"name\">Lawful</span>.<span class=\"name\">hdPos</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs\">DivModArgs</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">qr</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState\">DivModState</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.Lawful\">Lawful</a> <span class=\"fn\">args</span> <span class=\"fn\">qr</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">args</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs.d\">d</a></span></div></div>","info":{"doc":"The denominator is positive. ","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.Lawful.hdPos","kind":"theorem","line":862,"name":"BitVec.DivModState.Lawful.hdPos","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L862-L862"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.Lawful.hwrn\"><span class=\"name\">BitVec</span>.<span class=\"name\">DivModState</span>.<span class=\"name\">Lawful</span>.<span class=\"name\">hwrn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs\">DivModArgs</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">qr</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState\">DivModState</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.Lawful\">Lawful</a> <span class=\"fn\">args</span> <span class=\"fn\">qr</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">qr</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.wr\">wr</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">qr</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.wn\">wn</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">w</span></div></div>","info":{"doc":"The sum of widths of the dividend and remainder is `w`. ","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.Lawful.hwrn","kind":"theorem","line":860,"name":"BitVec.DivModState.Lawful.hwrn","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L860-L860"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.Lawful.mk\"><span class=\"name\">BitVec</span>.<span class=\"name\">DivModState</span>.<span class=\"name\">Lawful</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs\">DivModArgs</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">qr</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState\">DivModState</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hwrn</span> : <span class=\"fn\"><span class=\"fn\">qr</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.wr\">wr</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">qr</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.wn\">wn</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">w</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hdPos</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\">args</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs.d\">d</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hrLtDivisor</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">qr</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.r\">r</a></span>.<a href=\"./Init/Prelude.html#BitVec.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">args</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs.d\">d</a></span>.<a href=\"./Init/Prelude.html#BitVec.toNat\">toNat</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hrWidth</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">qr</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.r\">r</a></span>.<a href=\"./Init/Prelude.html#BitVec.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\"><span class=\"fn\">qr</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.wr\">wr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hqWidth</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">qr</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.q\">q</a></span>.<a href=\"./Init/Prelude.html#BitVec.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\"><span class=\"fn\">qr</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.wr\">wr</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hdiv</span> : <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">args</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs.n\">n</a></span>.<a href=\"./Init/Prelude.html#BitVec.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#HShiftRight.hShiftRight\">&gt;&gt;&gt;</a> <span class=\"fn\"><span class=\"fn\">qr</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.wn\">wn</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">args</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs.d\">d</a></span>.<a href=\"./Init/Prelude.html#BitVec.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">qr</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.q\">q</a></span>.<a href=\"./Init/Prelude.html#BitVec.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">qr</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.r\">r</a></span>.<a href=\"./Init/Prelude.html#BitVec.toNat\">toNat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.Lawful\">Lawful</a> <span class=\"fn\">args</span> <span class=\"fn\">qr</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.Lawful.mk","kind":"ctor","line":858,"name":"BitVec.DivModState.Lawful.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L858-L858"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.Lawful\"><span class=\"name\">BitVec</span>.<span class=\"name\">DivModState</span>.<span class=\"name\">Lawful</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">args</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs\">DivModArgs</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">qr</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState\">DivModState</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Prop</a></div></div>","info":{"doc":"A `DivModState` is lawful if the remainder width `wr` plus the numerator width `wn` equals `w`,\nand the bitvectors `r` and `n` have values in the bounds given by bitwidths `wr`, resp. `wn`.\n\nThis is a proof engineering choice: an alternative world could have been\n`r : BitVec wr` and `n : BitVec wn`, but this required much more dependent typing coercions.\n\nInstead, we choose to declare all involved bitvectors as length `w`, and then prove that\nthe values are within their respective bounds.\n\nWe start with `wn = w` and `wr = 0`, and then in each step, we decrement `wn` and increment `wr`.\nIn this way, we grow a legal remainder in each loop iteration.\n","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.Lawful","kind":"structure","line":846,"name":"BitVec.DivModState.Lawful","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L846-L870"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs.d\"><span class=\"name\">BitVec</span>.<span class=\"name\">DivModArgs</span>.<span class=\"name\">d</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs\">DivModArgs</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span></div></div>","info":{"doc":"the denumerator (aka, divisor)","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs.d","kind":"def","line":844,"name":"BitVec.DivModArgs.d","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L844-L844"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs.n\"><span class=\"name\">BitVec</span>.<span class=\"name\">DivModArgs</span>.<span class=\"name\">n</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs\">DivModArgs</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span></div></div>","info":{"doc":"the numerator (aka, dividend) ","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs.n","kind":"def","line":842,"name":"BitVec.DivModArgs.n","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L842-L842"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs.mk\"><span class=\"name\">BitVec</span>.<span class=\"name\">DivModArgs</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n </span><span class=\"fn\">d</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs\">DivModArgs</a> <span class=\"fn\">w</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs.mk","kind":"ctor","line":840,"name":"BitVec.DivModArgs.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L840-L840"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs\"><span class=\"name\">BitVec</span>.<span class=\"name\">DivModArgs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"`DivModArgs` contains the arguments to a `divrem` call which remain constant throughout\nexecution. ","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.DivModArgs","kind":"structure","line":838,"name":"BitVec.DivModArgs","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L838-L844"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.r\"><span class=\"name\">BitVec</span>.<span class=\"name\">DivModState</span>.<span class=\"name\">r</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState\">DivModState</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span></div></div>","info":{"doc":"The current remainder. ","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.r","kind":"def","line":835,"name":"BitVec.DivModState.r","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L835-L835"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.q\"><span class=\"name\">BitVec</span>.<span class=\"name\">DivModState</span>.<span class=\"name\">q</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState\">DivModState</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span></div></div>","info":{"doc":"The current quotient. ","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.q","kind":"def","line":833,"name":"BitVec.DivModState.q","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L833-L833"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.wr\"><span class=\"name\">BitVec</span>.<span class=\"name\">DivModState</span>.<span class=\"name\">wr</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState\">DivModState</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"The number of bits in the remainder (and quotient) ","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.wr","kind":"def","line":831,"name":"BitVec.DivModState.wr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L831-L831"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.wn\"><span class=\"name\">BitVec</span>.<span class=\"name\">DivModState</span>.<span class=\"name\">wn</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState\">DivModState</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"The number of bits in the numerator that are not yet processed ","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.wn","kind":"def","line":829,"name":"BitVec.DivModState.wn","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L829-L829"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.mk\"><span class=\"name\">BitVec</span>.<span class=\"name\">DivModState</span>.<span class=\"name\">mk</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">wn </span><span class=\"fn\">wr</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">q </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState\">DivModState</a> <span class=\"fn\">w</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState.mk","kind":"ctor","line":827,"name":"BitVec.DivModState.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L827-L827"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState\"><span class=\"name\">BitVec</span>.<span class=\"name\">DivModState</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"`DivModState` is a structure that maintains the state of recursive `divrem` calls. ","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.DivModState","kind":"structure","line":826,"name":"BitVec.DivModState","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L826-L835"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.umod_eq_of_mul_add_toNat\"><span class=\"name\">BitVec</span>.<span class=\"name\">umod_eq_of_mul_add_toNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">d </span><span class=\"fn\">n </span><span class=\"fn\">q </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hrd</span> : <span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">d</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hdqnr</span> : <span class=\"fn\"><span class=\"fn\">d</span>.<a href=\"./Init/Prelude.html#BitVec.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">q</span>.<a href=\"./Init/Prelude.html#BitVec.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Prelude.html#BitVec.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Prelude.html#BitVec.toNat\">toNat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HMod.hMod\">%</a> <span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">r</span></div></div>","info":{"doc":"If the division equation `d.toNat * q.toNat + r.toNat = n.toNat` holds,\nthen `n.umod d = r`. ","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.umod_eq_of_mul_add_toNat","kind":"theorem","line":808,"name":"BitVec.umod_eq_of_mul_add_toNat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L808-L822"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.udiv_eq_of_mul_add_toNat\"><span class=\"name\">BitVec</span>.<span class=\"name\">udiv_eq_of_mul_add_toNat</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">d </span><span class=\"fn\">n </span><span class=\"fn\">q </span><span class=\"fn\">r</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hd</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">d</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hrd</span> : <span class=\"fn\">r</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">d</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hdqnr</span> : <span class=\"fn\"><span class=\"fn\">d</span>.<a href=\"./Init/Prelude.html#BitVec.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><span class=\"fn\">q</span>.<a href=\"./Init/Prelude.html#BitVec.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Prelude.html#BitVec.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">n</span>.<a href=\"./Init/Prelude.html#BitVec.toNat\">toNat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HDiv.hDiv\">/</a> <span class=\"fn\">d</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">q</span></div></div>","info":{"doc":"If the division equation `d.toNat * q.toNat + r.toNat = n.toNat` holds,\nthen `n.udiv d = q`. ","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.udiv_eq_of_mul_add_toNat","kind":"theorem","line":791,"name":"BitVec.udiv_eq_of_mul_add_toNat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L791-L806"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.shiftLeft_eq_shiftLeftRec\"><span class=\"name\">BitVec</span>.<span class=\"name\">shiftLeft_eq_shiftLeftRec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w₁ </span><span class=\"fn\">w₂</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w₂</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.shiftLeftRec\">shiftLeftRec</a></span> <span class=\"fn\">y</span> (<span class=\"fn\">w₂</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>)</span></div></div>","info":{"doc":"Show that `x <<< y` can be written in terms of `shiftLeftRec`.\nThis can be unfolded in terms of `shiftLeftRec_zero`, `shiftLeftRec_succ` for bit blasting.\n","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.shiftLeft_eq_shiftLeftRec","kind":"theorem","line":742,"name":"BitVec.shiftLeft_eq_shiftLeftRec","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L742-L750"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.shiftLeftRec_eq\"><span class=\"name\">BitVec</span>.<span class=\"name\">shiftLeftRec_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w₁ </span><span class=\"fn\">w₂</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w₁</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w₂</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.shiftLeftRec\">shiftLeftRec</a></span> <span class=\"fn\">y</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.setWidth\">setWidth</a> <span class=\"fn\">w₂</span> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.setWidth\">setWidth</a> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">y</span>)</span></span></div></div>","info":{"doc":"`shiftLeftRec x y n` shifts `x` to the left by the first `n` bits of `y`.\n","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.shiftLeftRec_eq","kind":"theorem","line":720,"name":"BitVec.shiftLeftRec_eq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L720-L740"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.shiftLeft_or_of_and_eq_zero\"><span class=\"name\">BitVec</span>.<span class=\"name\">shiftLeft_or_of_and_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w₁ </span><span class=\"fn\">w₂</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w₁</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y </span><span class=\"fn\">z</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w₂</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">z</span> <a href=\"./Init/Prelude.html#Eq\">=</a> 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w₂</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> (<span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">z</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> <span class=\"fn\">z</span></div></div>","info":{"doc":"If `y &&& z = 0`, `x <<< (y ||| z) = x <<< y <<< z`.\nThis follows as `y &&& z = 0` implies `y ||| z = y + z`,\nand thus `x <<< (y ||| z) = x <<< (y + z) = x <<< y <<< z`.\n","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.shiftLeft_or_of_and_eq_zero","kind":"theorem","line":708,"name":"BitVec.shiftLeft_or_of_and_eq_zero","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L708-L718"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.shiftLeftRec_succ\"><span class=\"name\">BitVec</span>.<span class=\"name\">shiftLeftRec_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w₁ </span><span class=\"fn\">w₂ </span><span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w₁</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w₂</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.shiftLeftRec\">shiftLeftRec</a></span> <span class=\"fn\">y</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.shiftLeftRec\">shiftLeftRec</a></span> <span class=\"fn\">y</span> <span class=\"fn\">n</span></span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> (<span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.twoPow\">twoPow</a> <span class=\"fn\">w₂</span> (<span class=\"fn\">n</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.shiftLeftRec_succ","kind":"theorem","line":703,"name":"BitVec.shiftLeftRec_succ","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L703-L706"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.shiftLeftRec_zero\"><span class=\"name\">BitVec</span>.<span class=\"name\">shiftLeftRec_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w₁ </span><span class=\"fn\">w₂</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w₁</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w₂</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.shiftLeftRec\">shiftLeftRec</a></span> <span class=\"fn\">y</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> (<span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.twoPow\">twoPow</a> <span class=\"fn\">w₂</span> <span class=\"fn\">0</span></span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.shiftLeftRec_zero","kind":"theorem","line":698,"name":"BitVec.shiftLeftRec_zero","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L698-L701"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.shiftLeftRec\"><span class=\"name\">BitVec</span>.<span class=\"name\">shiftLeftRec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w₁ </span><span class=\"fn\">w₂</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w₁</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w₂</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w₁</span></span></div></div>","info":{"doc":"Shifts `x` to the left by the first `n` bits of `y`.\n\nThe theorem `BitVec.shiftLeft_eq_shiftLeftRec` proves the equivalence of `(x <<< y)` and\n`BitVec.shiftLeftRec x y`.\n\nTogether with equations `BitVec.shiftLeftRec_zero` and `BitVec.shiftLeftRec_succ`, this allows\n`BitVec.shiftLeft` to be unfolded into a circuit for bit blasting.\n ","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.shiftLeftRec","kind":"def","line":683,"name":"BitVec.shiftLeftRec","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L683-L696"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.getElem_mul\"><span class=\"name\">BitVec</span>.<span class=\"name\">getElem_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span>)<a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.mulRec\">mulRec</a></span> <span class=\"fn\">y</span> <span class=\"fn\">w</span>)</span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.getElem_mul","kind":"theorem","line":677,"name":"BitVec.getElem_mul","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L677-L679"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.getMsbD_mul\"><span class=\"name\">BitVec</span>.<span class=\"name\">getMsbD_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span>).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getMsbD\">getMsbD</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.mulRec\">mulRec</a></span> <span class=\"fn\">y</span> <span class=\"fn\">w</span>)</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getMsbD\">getMsbD</a></span> <span class=\"fn\">i</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.getMsbD_mul","kind":"theorem","line":670,"name":"BitVec.getMsbD_mul","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L670-L675"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.mul_eq_mulRec\"><span class=\"name\">BitVec</span>.<span class=\"name\">mul_eq_mulRec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.mulRec\">mulRec</a></span> <span class=\"fn\">y</span> <span class=\"fn\">w</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.mul_eq_mulRec","kind":"theorem","line":664,"name":"BitVec.mul_eq_mulRec","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L664-L668"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.getLsbD_mul\"><span class=\"name\">BitVec</span>.<span class=\"name\">getLsbD_mul</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">y</span>).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.mulRec\">mulRec</a></span> <span class=\"fn\">y</span> <span class=\"fn\">w</span>)</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> <span class=\"fn\">i</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.getLsbD_mul","kind":"theorem","line":657,"name":"BitVec.getLsbD_mul","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L657-L662"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.mulRec_eq_mul_signExtend_setWidth\"><span class=\"name\">BitVec</span>.<span class=\"name\">mulRec_eq_mul_signExtend_setWidth</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.mulRec\">mulRec</a></span> <span class=\"fn\">y</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.setWidth\">setWidth</a> <span class=\"fn\">w</span> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.setWidth\">setWidth</a> (<span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">y</span>)</span></span></div></div>","info":{"doc":"Recurrence lemma: multiplying `x` with the first `s` bits of `y` is the\nsame as truncating `y` to `s` bits, then zero extending to the original length,\nand performing the multiplication. ","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.mulRec_eq_mul_signExtend_setWidth","kind":"theorem","line":631,"name":"BitVec.mulRec_eq_mul_signExtend_setWidth","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L631-L655"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.setWidth_setWidth_succ_eq_setWidth_setWidth_add_twoPow\"><span class=\"name\">BitVec</span>.<span class=\"name\">setWidth_setWidth_succ_eq_setWidth_setWidth_add_twoPow</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.setWidth\">setWidth</a> <span class=\"fn\">w</span> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.setWidth\">setWidth</a> (<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.setWidth\">setWidth</a> <span class=\"fn\">w</span> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.setWidth\">setWidth</a> <span class=\"fn\">i</span> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.twoPow\">twoPow</a> <span class=\"fn\">w</span> <span class=\"fn\">i</span></span>)</div></div>","info":{"doc":"Recurrence lemma: truncating to `i+1` bits and then zero extending to `w`\nequals truncating upto `i` bits `[0..i-1]`, and then adding the `i`th bit of `x`.\n","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.setWidth_setWidth_succ_eq_setWidth_setWidth_add_twoPow","kind":"theorem","line":605,"name":"BitVec.setWidth_setWidth_succ_eq_setWidth_setWidth_add_twoPow","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L605-L629"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.mulRec_succ_eq\"><span class=\"name\">BitVec</span>.<span class=\"name\">mulRec_succ_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.mulRec\">mulRec</a></span> <span class=\"fn\">y</span> (<span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.mulRec\">mulRec</a></span> <span class=\"fn\">y</span> <span class=\"fn\">s</span></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> (<span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HShiftLeft.hShiftLeft\">&lt;&lt;&lt;</a> (<span class=\"fn\">s</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.mulRec_succ_eq","kind":"theorem","line":602,"name":"BitVec.mulRec_succ_eq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L602-L603"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.mulRec_zero_eq\"><span class=\"name\">BitVec</span>.<span class=\"name\">mulRec_zero_eq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.mulRec\">mulRec</a></span> <span class=\"fn\">y</span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> <span class=\"fn\">0</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">0</span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.mulRec_zero_eq","kind":"theorem","line":598,"name":"BitVec.mulRec_zero_eq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L598-L600"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.mulRec\"><span class=\"name\">BitVec</span>.<span class=\"name\">mulRec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span></div></div>","info":{"doc":"A recurrence that describes multiplication as repeated addition.\n\nThis function is useful for bit blasting multiplication.\n","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.mulRec","kind":"def","line":587,"name":"BitVec.mulRec","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L587-L596"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.neg_sle_zero\"><span class=\"name\">BitVec</span>.<span class=\"name\">neg_sle_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span>).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.sle\">sle</a></span> 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.intMin\">intMin</a> <span class=\"fn\">w</span></span> <a href=\"./Init/Prelude.html#Bool.or\">||</a> <span class=\"fn\"><span class=\"fn\">(0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span>).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.sle\">sle</a></span> <span class=\"fn\">x</span></span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.neg_sle_zero","kind":"theorem","line":580,"name":"BitVec.neg_sle_zero","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L580-L583"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.neg_slt_zero\"><span class=\"name\">BitVec</span>.<span class=\"name\">neg_slt_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span>).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.slt\">slt</a></span> 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.intMin\">intMin</a> <span class=\"fn\">w</span></span> <a href=\"./Init/Prelude.html#Bool.or\">||</a> <span class=\"fn\"><span class=\"fn\">(0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span>).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.slt\">slt</a></span> <span class=\"fn\">x</span></span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.neg_slt_zero","kind":"theorem","line":567,"name":"BitVec.neg_slt_zero","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L567-L578"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.sle_eq_carry\"><span class=\"name\">BitVec</span>.<span class=\"name\">sle_eq_carry</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.sle\">sle</a></span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a>(<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> <a href=\"./Init/Data/Bool.html#Bool.xor\">^^</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.carry\">carry</a> <span class=\"fn\">w</span> <span class=\"fn\">y</span> (<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">x</span>) <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.sle_eq_carry","kind":"theorem","line":563,"name":"BitVec.sle_eq_carry","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L563-L565"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.slt_eq_not_carry\"><span class=\"name\">BitVec</span>.<span class=\"name\">slt_eq_not_carry</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.slt\">slt</a></span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> <a href=\"./Init/Data/Bool.html#Bool.xor\">^^</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.carry\">carry</a> <span class=\"fn\">w</span> <span class=\"fn\">x</span> (<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">y</span>) <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.slt_eq_not_carry","kind":"theorem","line":558,"name":"BitVec.slt_eq_not_carry","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L558-L561"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.ule_eq_carry\"><span class=\"name\">BitVec</span>.<span class=\"name\">ule_eq_carry</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.ule\">ule</a></span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.carry\">carry</a> <span class=\"fn\">w</span> <span class=\"fn\">y</span> (<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">x</span>) <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.ule_eq_carry","kind":"theorem","line":555,"name":"BitVec.ule_eq_carry","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L555-L556"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.ult_eq_not_carry\"><span class=\"name\">BitVec</span>.<span class=\"name\">ult_eq_not_carry</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.ult\">ult</a></span> <span class=\"fn\">y</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.carry\">carry</a> <span class=\"fn\">w</span> <span class=\"fn\">x</span> (<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">y</span>) <a href=\"./Init/Prelude.html#Bool.true\">true</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.ult_eq_not_carry","kind":"theorem","line":549,"name":"BitVec.ult_eq_not_carry","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L549-L553"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.msb_abs\"><span class=\"name\">BitVec</span>.<span class=\"name\">msb_abs</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.abs\">abs</a></span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> (<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.intMin\">intMin</a> <span class=\"fn\">w</span></span>)</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> (<span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span>)</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.msb_abs","kind":"theorem","line":530,"name":"BitVec.msb_abs","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L530-L545"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.signExtend_neg_of_ne_intMin\"><span class=\"name\">BitVec</span>.<span class=\"name\">signExtend_neg_of_ne_intMin</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v </span><span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">hb</span> : <span class=\"fn\">b</span> <a href=\"./Init/Core.html#Ne\">≠</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.intMin\">intMin</a> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">signExtend</a> <span class=\"fn\">w</span> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">signExtend</a> <span class=\"fn\">w</span> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"This is false if `v < w` and `b = intMin`. See also `signExtend_neg_of_le`. ","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.signExtend_neg_of_ne_intMin","kind":"theorem","line":510,"name":"BitVec.signExtend_neg_of_ne_intMin","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L510-L526"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.signExtend_neg_of_le\"><span class=\"name\">BitVec</span>.<span class=\"name\">signExtend_neg_of_le</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">v </span><span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">v</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">v</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">signExtend</a> <span class=\"fn\">w</span> (<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">b</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.signExtend\">signExtend</a> <span class=\"fn\">w</span> <span class=\"fn\">b</span></span></div></div>","info":{"doc":"This is false if `v < w` and `b = intMin`. See also `signExtend_neg_of_ne_intMin`. ","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.signExtend_neg_of_le","kind":"theorem","line":498,"name":"BitVec.signExtend_neg_of_le","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L498-L508"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.msb_neg\"><span class=\"name\">BitVec</span>.<span class=\"name\">msb_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span>).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">x</span> <a href=\"./Init/Core.html#bne\">!=</a> 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\">x</span> <a href=\"./Init/Core.html#bne\">!=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.intMin\">intMin</a> <span class=\"fn\">w</span></span> <a href=\"./Init/Data/Bool.html#Bool.xor\">^^</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.msb_neg","kind":"theorem","line":457,"name":"BitVec.msb_neg","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L457-L496"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.getMsbD_neg\"><span class=\"name\">BitVec</span>.<span class=\"name\">getMsbD_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w </span><span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span>).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getMsbD\">getMsbD</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getMsbD\">getMsbD</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Data/Bool.html#Bool.xor\">^^</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> (<a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">j</span> <a href=\"./Init/Core.html#Exists\">:</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getMsbD\">getMsbD</a></span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.getMsbD_neg","kind":"theorem","line":440,"name":"BitVec.getMsbD_neg","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L440-L455"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.getElem_neg\"><span class=\"name\">BitVec</span>.<span class=\"name\">getElem_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w </span><span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span>)<a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">x</span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a> <a href=\"./Init/Data/Bool.html#Bool.xor\">^^</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> (<a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">j</span> <a href=\"./Init/Core.html#Exists\">:</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.getElem_neg","kind":"theorem","line":436,"name":"BitVec.getElem_neg","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L436-L438"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.getLsbD_neg\"><span class=\"name\">BitVec</span>.<span class=\"name\">getLsbD_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w </span><span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span>).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Data/Bool.html#Bool.xor\">^^</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> (<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span>)</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> (<a href=\"./Init/Core.html#Exists\">∃</a> <a href=\"./Init/Core.html#Exists\">(</a><span class=\"fn\">j</span> <a href=\"./Init/Core.html#Exists\">:</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a><a href=\"./Init/Core.html#Exists\">)</a><a href=\"./Init/Core.html#Exists\">,</a> <span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#And\">∧</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span>)</div></div>","info":{"doc":"Remember that negating a bitvector is equal to incrementing the complement\nby one, i.e., `-x = ~~~x + 1`. See also `neg_eq_not_add`.\n\nThis computation has two crucial properties:\n- The least significant bit of `-x` is the same as the least significant bit of `x`, and\n- The `i+1`-th least significant bit of `-x` is the complement of the `i+1`-th bit of `x`, unless\n  all of the preceding bits are `false`, in which case the bit is equal to the `i+1`-th bit of `x`\n","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.getLsbD_neg","kind":"theorem","line":402,"name":"BitVec.getLsbD_neg","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L402-L434"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.bit_neg_eq_neg\"><span class=\"name\">BitVec</span>.<span class=\"name\">bit_neg_eq_neg</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/BitVec/Folds.html#BitVec.iunfoldr\">iunfoldr</a> <span class=\"fn\">(fun (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">w</span></span>) (<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Unit\">Unit</a>) =&gt; <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">c</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">x</span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">↑<span class=\"fn\">i</span></span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a><a href=\"./Init/Prelude.html#Prod.mk\">)</a>)</span> <a href=\"./Init/Prelude.html#Unit.unit\">(</a><a href=\"./Init/Prelude.html#Unit.unit\">)</a>)</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.adc\">adc</a></span> (1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span>) <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.bit_neg_eq_neg","kind":"theorem","line":395,"name":"BitVec.bit_neg_eq_neg","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L395-L400"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.bit_not_eq_not\"><span class=\"name\">BitVec</span>.<span class=\"name\">bit_not_eq_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/BitVec/Folds.html#BitVec.iunfoldr\">iunfoldr</a> <span class=\"fn\">(fun (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">w</span></span>) (<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Unit\">Unit</a>) =&gt; <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">c</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">x</span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a><a href=\"./Init/Prelude.html#Prod.mk\">)</a>)</span> <a href=\"./Init/Prelude.html#Unit.unit\">(</a><a href=\"./Init/Prelude.html#Unit.unit\">)</a>)</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">x</span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.bit_not_eq_not","kind":"theorem","line":391,"name":"BitVec.bit_not_eq_not","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L391-L393"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.bit_not_add_self\"><span class=\"name\">BitVec</span>.<span class=\"name\">bit_not_add_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/BitVec/Folds.html#BitVec.iunfoldr\">iunfoldr</a> <span class=\"fn\">(fun (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">w</span></span>) (<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Unit\">Unit</a>) =&gt; <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">c</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">x</span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">↑<span class=\"fn\">i</span></span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a><a href=\"./Init/Prelude.html#Prod.mk\">)</a>)</span> <a href=\"./Init/Prelude.html#Unit.unit\">(</a><a href=\"./Init/Prelude.html#Unit.unit\">)</a>)</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">-<span class=\"fn\">1</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.bit_not_add_self","kind":"theorem","line":382,"name":"BitVec.bit_not_add_self","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L382-L389"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.bit_not_testBit\"><span class=\"name\">BitVec</span>.<span class=\"name\">bit_not_testBit</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Data/BitVec/Folds.html#BitVec.iunfoldr\">iunfoldr</a> <span class=\"fn\">(fun (<span class=\"fn\">i</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Fin\">Fin</a> <span class=\"fn\">w</span></span>) (<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Unit\">Unit</a>) =&gt; <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\">c</span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">x</span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">↑<span class=\"fn\">i</span></span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a><a href=\"./Init/Prelude.html#Prod.mk\">)</a>)</span> <a href=\"./Init/Prelude.html#Unit.unit\">(</a><a href=\"./Init/Prelude.html#Unit.unit\">)</a>)</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">↑<span class=\"fn\">i</span></span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> <span class=\"fn\">↑<span class=\"fn\">i</span></span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.bit_not_testBit","kind":"theorem","line":378,"name":"BitVec.bit_not_testBit","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L378-L380"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.msb_sub\"><span class=\"name\">BitVec</span>.<span class=\"name\">msb_sub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span>).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> <a href=\"./Init/Data/Bool.html#Bool.xor\">^^</a> (<span class=\"fn\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> 1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span>).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> <a href=\"./Init/Data/Bool.html#Bool.xor\">^^</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.carry\">carry</a> (<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">0</span>) <span class=\"fn\">x</span> (<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> 1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span>) <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>))</div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.msb_sub","kind":"theorem","line":371,"name":"BitVec.msb_sub","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L371-L374"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.getElem_sub\"><span class=\"name\">BitVec</span>.<span class=\"name\">getElem_sub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w </span><span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span>)<a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">x</span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a> <a href=\"./Init/Data/Bool.html#Bool.xor\">^^</a> ((<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> 1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span>)<a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a> <a href=\"./Init/Data/Bool.html#Bool.xor\">^^</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.carry\">carry</a> <span class=\"fn\">i</span> <span class=\"fn\">x</span> (<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> 1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span>) <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>))</div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.getElem_sub","kind":"theorem","line":367,"name":"BitVec.getElem_sub","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L367-L369"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.getMsbD_sub\"><span class=\"name\">BitVec</span>.<span class=\"name\">getMsbD_sub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w </span><span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i_lt</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span>).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getMsbD\">getMsbD</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getMsbD\">getMsbD</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Data/Bool.html#Bool.xor\">^^</a> (<span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getMsbD\">getMsbD</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Data/Bool.html#Bool.xor\">^^</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.carry\">carry</a> (<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">i</span>) <span class=\"fn\">x</span> (<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>))</div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.getMsbD_sub","kind":"theorem","line":360,"name":"BitVec.getMsbD_sub","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L360-L365"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.getLsbD_sub\"><span class=\"name\">BitVec</span>.<span class=\"name\">getLsbD_sub</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w </span><span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i_lt</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">y</span>).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Data/Bool.html#Bool.xor\">^^</a> (<span class=\"fn\"><span class=\"fn\">(<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> 1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span>).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Data/Bool.html#Bool.xor\">^^</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.carry\">carry</a> <span class=\"fn\">i</span> <span class=\"fn\">x</span> (<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> 1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span>) <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>))</div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.getLsbD_sub","kind":"theorem","line":354,"name":"BitVec.getLsbD_sub","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L354-L358"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.add_eq_or_of_and_eq_zero\"><span class=\"name\">BitVec</span>.<span class=\"name\">add_eq_or_of_and_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HOr.hOr\">|||</a> <span class=\"fn\">y</span></div></div>","info":{"doc":"Addition of bitvectors is the same as bitwise or, if bitwise and is zero. ","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.add_eq_or_of_and_eq_zero","kind":"theorem","line":337,"name":"BitVec.add_eq_or_of_and_eq_zero","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L337-L350"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.allOnes_sub_eq_not\"><span class=\"name\">BitVec</span>.<span class=\"name\">allOnes_sub_eq_not</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.allOnes\">allOnes</a> <span class=\"fn\">w</span></span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">x</span></div></div>","info":{"doc":"Subtracting `x` from the all ones bitvector is equivalent to taking its complement ","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.allOnes_sub_eq_not","kind":"theorem","line":333,"name":"BitVec.allOnes_sub_eq_not","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L333-L335"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.add_not_self\"><span class=\"name\">BitVec</span>.<span class=\"name\">add_not_self</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.allOnes\">allOnes</a> <span class=\"fn\">w</span></span></div></div>","info":{"doc":"Adding a bitvector to its own complement yields the all ones bitpattern ","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.add_not_self","kind":"theorem","line":327,"name":"BitVec.add_not_self","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L327-L331"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.msb_add\"><span class=\"name\">BitVec</span>.<span class=\"name\">msb_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span>).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> <a href=\"./Init/Data/Bool.html#Bool.xor\">^^</a> (<span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.msb\">msb</a></span> <a href=\"./Init/Data/Bool.html#Bool.xor\">^^</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.carry\">carry</a> (<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span>) <span class=\"fn\">x</span> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>))</div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.msb_add","kind":"theorem","line":317,"name":"BitVec.msb_add","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L317-L325"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.getMsbD_add\"><span class=\"name\">BitVec</span>.<span class=\"name\">getMsbD_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w </span><span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">i_lt</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span>).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getMsbD\">getMsbD</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getMsbD\">getMsbD</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Data/Bool.html#Bool.xor\">^^</a> (<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getMsbD\">getMsbD</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Data/Bool.html#Bool.xor\">^^</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.carry\">carry</a> (<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#HSub.hSub\">-</a> <span class=\"fn\">i</span>) <span class=\"fn\">x</span> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>))</div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.getMsbD_add","kind":"theorem","line":312,"name":"BitVec.getMsbD_add","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L312-L315"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.add_eq_adc\"><span class=\"name\">BitVec</span>.<span class=\"name\">add_eq_adc</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.adc\">adc</a></span> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Bool.false\">false</a>)</span>.<a href=\"./Init/Prelude.html#Prod.snd\">snd</a></span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.add_eq_adc","kind":"theorem","line":307,"name":"BitVec.add_eq_adc","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L307-L308"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.adc_spec\"><span class=\"name\">BitVec</span>.<span class=\"name\">adc_spec</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.adc\">adc</a></span> <span class=\"fn\">y</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Prod.mk\">(</a><span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.carry\">carry</a> <span class=\"fn\">w</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span> <span class=\"fn\">c</span></span><a href=\"./Init/Prelude.html#Prod.mk\">,</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.setWidth\">setWidth</a> <span class=\"fn\">w</span> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.ofBool\">ofBool</a> <span class=\"fn\">c</span>)</span></span><a href=\"./Init/Prelude.html#Prod.mk\">)</a></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.adc_spec","kind":"theorem","line":294,"name":"BitVec.adc_spec","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L294-L305"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.getElem_add\"><span class=\"name\">BitVec</span>.<span class=\"name\">getElem_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w </span><span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i_lt</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span>)<a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">x</span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a> <a href=\"./Init/Data/Bool.html#Bool.xor\">^^</a> (<span class=\"fn\">y</span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a> <a href=\"./Init/Data/Bool.html#Bool.xor\">^^</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.carry\">carry</a> <span class=\"fn\">i</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>))</div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.getElem_add","kind":"theorem","line":290,"name":"BitVec.getElem_add","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L290-L292"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.getElem_add_add_bool\"><span class=\"name\">BitVec</span>.<span class=\"name\">getElem_add_add_bool</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w </span><span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i_lt</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.setWidth\">setWidth</a> <span class=\"fn\">w</span> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.ofBool\">ofBool</a> <span class=\"fn\">c</span>)</span></span>)<a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">x</span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a> <a href=\"./Init/Data/Bool.html#Bool.xor\">^^</a> (<span class=\"fn\">y</span><a href=\"./Init/GetElem.html#GetElem.getElem\">[</a><span class=\"fn\">i</span><a href=\"./Init/GetElem.html#GetElem.getElem\">]</a> <a href=\"./Init/Data/Bool.html#Bool.xor\">^^</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.carry\">carry</a> <span class=\"fn\">i</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span> <span class=\"fn\">c</span></span>))</div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.getElem_add_add_bool","kind":"theorem","line":283,"name":"BitVec.getElem_add_add_bool","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L283-L288"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.getLsbD_add\"><span class=\"name\">BitVec</span>.<span class=\"name\">getLsbD_add</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w </span><span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i_lt</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span>).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Data/Bool.html#Bool.xor\">^^</a> (<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Data/Bool.html#Bool.xor\">^^</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.carry\">carry</a> <span class=\"fn\">i</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span>))</div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.getLsbD_add","kind":"theorem","line":278,"name":"BitVec.getLsbD_add","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L278-L281"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.getLsbD_add_add_bool\"><span class=\"name\">BitVec</span>.<span class=\"name\">getLsbD_add_add_bool</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w </span><span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i_lt</span> : <span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Basic.html#BitVec.setWidth\">setWidth</a> <span class=\"fn\">w</span> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Basic.html#BitVec.ofBool\">ofBool</a> <span class=\"fn\">c</span>)</span></span>).<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Data/Bool.html#Bool.xor\">^^</a> (<span class=\"fn\"><span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> <span class=\"fn\">i</span></span> <a href=\"./Init/Data/Bool.html#Bool.xor\">^^</a> <span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.carry\">carry</a> <span class=\"fn\">i</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span> <span class=\"fn\">c</span></span>))</div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.getLsbD_add_add_bool","kind":"theorem","line":257,"name":"BitVec.getLsbD_add_add_bool","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L257-L276"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.adc\"><span class=\"name\">BitVec</span>.<span class=\"name\">adc</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span></span></div></div>","info":{"doc":"Bitwise addition implemented via a ripple carry adder. ","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.adc","kind":"def","line":253,"name":"BitVec.adc","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L253-L255"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.adcb\"><span class=\"name\">BitVec</span>.<span class=\"name\">adcb</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Carry function for bitwise addition. ","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.adcb","kind":"def","line":250,"name":"BitVec.adcb","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L250-L251"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.toNat_add_of_and_eq_zero\"><span class=\"name\">BitVec</span>.<span class=\"name\">toNat_add_of_and_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(<span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">y</span>).<a href=\"./Init/Prelude.html#BitVec.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#BitVec.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Prelude.html#BitVec.toNat\">toNat</a></span></div></div>","info":{"doc":"If `x &&& y = 0`, then addition does not overflow, and thus `(x + y).toNat = x.toNat + y.toNat`.\n","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.toNat_add_of_and_eq_zero","kind":"theorem","line":237,"name":"BitVec.toNat_add_of_and_eq_zero","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L237-L248"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.carry_width\"><span class=\"name\">BitVec</span>.<span class=\"name\">carry_width</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.carry\">carry</a> <span class=\"fn\">w</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> (<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Prelude.html#BitVec.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Prelude.html#BitVec.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\"><span class=\"fn\">c</span>.<a href=\"./Init/Data/Bool.html#Bool.toNat\">toNat</a></span> <a href=\"./Init/Prelude.html#GE.ge\">≥</a> <span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">w</span>)</span></div></div>","info":{"doc":"The final carry bit when computing `x + y + c` is `true` iff `x.toNat + y.toNat + c.toNat ≥ 2^w`. ","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.carry_width","kind":"theorem","line":232,"name":"BitVec.carry_width","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L232-L235"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.carry_of_and_eq_zero\"><span class=\"name\">BitVec</span>.<span class=\"name\">carry_of_and_eq_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w </span><span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#HAnd.hAnd\">&amp;&amp;&amp;</a> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Eq\">=</a> 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.carry\">carry</a> <span class=\"fn\">i</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.false\">false</a></div></div>","info":{"doc":"If `x &&& y = 0`, then the carry bit `(x + y + 0)` is always `false` for any index `i`.\nIntuitively, this is because a carry is only produced when at least two of `x`, `y`, and the\nprevious carry are true. However, since `x &&& y = 0`, at most one of `x, y` can be true,\nand thus we never have a previous carry, which means that the sum cannot produce a carry.\n","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.carry_of_and_eq_zero","kind":"theorem","line":219,"name":"BitVec.carry_of_and_eq_zero","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L219-L230"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.carry_succ_one\"><span class=\"name\">BitVec</span>.<span class=\"name\">carry_succ_one</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : <span class=\"fn\">0</span> <a href=\"./Init/Prelude.html#LT.lt\">&lt;</a> <span class=\"fn\">w</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.carry\">carry</a> (<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">x</span> (1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span>) <a href=\"./Init/Prelude.html#Bool.false\">false</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable.decide\">decide</a> <span class=\"fn\">(∀ (<span class=\"fn\">j</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>), <span class=\"fn\"><span class=\"fn\">j</span> <a href=\"./Init/Prelude.html#LE.le\">≤</a> <span class=\"fn\">i</span> → <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> <span class=\"fn\">j</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.carry_succ_one","kind":"theorem","line":195,"name":"BitVec.carry_succ_one","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L195-L217"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.carry_succ\"><span class=\"name\">BitVec</span>.<span class=\"name\">carry_succ</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.carry\">carry</a> (<span class=\"fn\">i</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>) <span class=\"fn\">x</span> <span class=\"fn\">y</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">x</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> <span class=\"fn\">i</span>)</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#Bool.atLeastTwo\">atLeastTwo</a></span> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">y</span>.<a href=\"./Init/Data/BitVec/Basic.html#BitVec.getLsbD\">getLsbD</a></span> <span class=\"fn\">i</span>)</span> <span class=\"fn\">(<a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.carry\">carry</a> <span class=\"fn\">i</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span> <span class=\"fn\">c</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.carry_succ","kind":"theorem","line":186,"name":"BitVec.carry_succ","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L186-L193"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.carry_zero\"><span class=\"name\">BitVec</span>.<span class=\"name\">carry_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w✝</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w✝</span></span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/BitVec/Bitblast.html#BitVec.carry\">carry</a> <span class=\"fn\">0</span> <span class=\"fn\">x</span> <span class=\"fn\">y</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">c</span></div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.carry_zero","kind":"theorem","line":183,"name":"BitVec.carry_zero","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L183-L184"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#BitVec.carry\"><span class=\"name\">BitVec</span>.<span class=\"name\">carry</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"carry i x y c returns true if the `i` carry bit is true when computing `x + y + c`. ","docLink":"./Init/Data/BitVec/Bitblast.html#BitVec.carry","kind":"def","line":179,"name":"BitVec.carry","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L179-L181"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#Bool.atLeastTwo_true_right\"><span class=\"name\">Bool</span>.<span class=\"name\">atLeastTwo_true_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#Bool.atLeastTwo\">atLeastTwo</a></span> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Bool.true\">true</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Bool.or\">||</a> <span class=\"fn\">b</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#Bool.atLeastTwo_true_right","kind":"theorem","line":137,"name":"Bool.atLeastTwo_true_right","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L137-L137"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#Bool.atLeastTwo_true_mid\"><span class=\"name\">Bool</span>.<span class=\"name\">atLeastTwo_true_mid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#Bool.atLeastTwo\">atLeastTwo</a></span> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Bool.or\">||</a> <span class=\"fn\">c</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#Bool.atLeastTwo_true_mid","kind":"theorem","line":136,"name":"Bool.atLeastTwo_true_mid","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L136-L136"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#Bool.atLeastTwo_true_left\"><span class=\"name\">Bool</span>.<span class=\"name\">atLeastTwo_true_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Bool.true\">true</a>.<a href=\"./Init/Data/BitVec/Bitblast.html#Bool.atLeastTwo\">atLeastTwo</a></span> <span class=\"fn\">b</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Bool.or\">||</a> <span class=\"fn\">c</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#Bool.atLeastTwo_true_left","kind":"theorem","line":135,"name":"Bool.atLeastTwo_true_left","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L135-L135"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#Bool.atLeastTwo_false_right\"><span class=\"name\">Bool</span>.<span class=\"name\">atLeastTwo_false_right</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#Bool.atLeastTwo\">atLeastTwo</a></span> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Bool.false\">false</a></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\">b</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#Bool.atLeastTwo_false_right","kind":"theorem","line":134,"name":"Bool.atLeastTwo_false_right","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L134-L134"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#Bool.atLeastTwo_false_mid\"><span class=\"name\">Bool</span>.<span class=\"name\">atLeastTwo_false_mid</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><span class=\"fn\">a</span>.<a href=\"./Init/Data/BitVec/Bitblast.html#Bool.atLeastTwo\">atLeastTwo</a></span> <a href=\"./Init/Prelude.html#Bool.false\">false</a> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\">c</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#Bool.atLeastTwo_false_mid","kind":"theorem","line":133,"name":"Bool.atLeastTwo_false_mid","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L133-L133"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#Bool.atLeastTwo_false_left\"><span class=\"name\">Bool</span>.<span class=\"name\">atLeastTwo_false_left</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Bool.false\">false</a>.<a href=\"./Init/Data/BitVec/Bitblast.html#Bool.atLeastTwo\">atLeastTwo</a></span> <span class=\"fn\">b</span> <span class=\"fn\">c</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\">c</span>)</div></div>","info":{"doc":"","docLink":"./Init/Data/BitVec/Bitblast.html#Bool.atLeastTwo_false_left","kind":"theorem","line":132,"name":"Bool.atLeastTwo_false_left","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L132-L132"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Data/BitVec/Bitblast.html#Bool.atLeastTwo\"><span class=\"name\">Bool</span>.<span class=\"name\">atLeastTwo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"At least two out of three Booleans are true.\n\nThis function is typically used to model addition of binary numbers, to combine a carry bit with two\naddend bits.\n","docLink":"./Init/Data/BitVec/Bitblast.html#Bool.atLeastTwo","kind":"def","line":124,"name":"Bool.atLeastTwo","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Data/BitVec/Bitblast.lean#L124-L130"}}],"imports":["Init.Data.Nat.Bitwise.Basic","Init.Data.Nat.Bitwise.Basic","Init.Data.Nat.Mod","Init.Data.Int.DivMod","Init.Data.Int.DivMod","Init.Data.Int.LemmasAux","Init.Data.BitVec.Basic","Init.Data.BitVec.Basic","Init.Data.BitVec.Decidable","Init.Data.BitVec.Lemmas","Init.Data.BitVec.Folds"],"instances":[],"name":"Init.Data.BitVec.Bitblast"}