{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Internalize.html#Lean.Meta.Grind.activateTheorem\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">activateTheorem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">thm</span> : <a href=\"./Lean/Meta/Tactic/Grind/EMatchTheorem.html#Lean.Meta.Grind.EMatchTheorem\">EMatchTheorem</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">generation</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Internalize.html#Lean.Meta.Grind.activateTheorem","kind":"def","line":215,"name":"Lean.Meta.Grind.activateTheorem","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Grind/Internalize.lean#L215-L221"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Internalize.html#Lean.Meta.Grind.isMorallyIff\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">isMorallyIff</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Returns `true` if `e` is of the form `@Eq Prop a b` ","docLink":"./Lean/Meta/Tactic/Grind/Internalize.html#Lean.Meta.Grind.isMorallyIff","kind":"def","line":79,"name":"Lean.Meta.Grind.isMorallyIff","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Grind/Internalize.lean#L79-L82"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Internalize.html#Lean.Meta.Grind.addCongrTable\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">addCongrTable</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Adds `e` to congruence table. ","docLink":"./Lean/Meta/Tactic/Grind/Internalize.html#Lean.Meta.Grind.addCongrTable","kind":"def","line":24,"name":"Lean.Meta.Grind.addCongrTable","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Grind/Internalize.lean#L24-L60"}}],"imports":["Init.Grind.Util","Init.Grind.Lemmas","Lean.Meta.Tactic.Grind.Arith.Cutsat.Types","Lean.Meta.LitValues","Lean.Meta.Match.MatcherInfo","Lean.Meta.Match.MatchEqsExt","Lean.Meta.Match.MatchEqs","Lean.Util.CollectLevelParams","Lean.Meta.Tactic.Grind.Util","Lean.Meta.Tactic.Grind.Beta","Lean.Meta.Tactic.Grind.MatchCond","Lean.Meta.Tactic.Grind.Simp","Lean.Meta.Tactic.Grind.MarkNestedSubsingletons"],"instances":[],"name":"Lean.Meta.Tactic.Grind.Internalize"}