{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/CommRing.html#Int.Linear.Poly.normCommRing?\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">normCommRing?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">Lean.Meta.Grind.GoalM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Lean/Meta/Tactic/Grind/Arith/CommRing/Types.html#Lean.Meta.Grind.Arith.CommRing.RingExpr\">Lean.Meta.Grind.Arith.CommRing.RingExpr</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Grind/Ring/CommSolver.html#Lean.Grind.CommRing.Poly\">Lean.Grind.CommRing.Poly</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>))</span></span></div></div>","info":{"doc":"Normalize the polynomial using `CommRing`","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/CommRing.html#Int.Linear.Poly.normCommRing?","kind":"def","line":39,"name":"Int.Linear.Poly.normCommRing?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/CommRing.lean#L39-L60"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/CommRing.html#Lean.Meta.Grind.Arith.Cutsat.getIntRingId?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Arith</span>.<span class=\"name\">Cutsat</span>.<span class=\"name\">getIntRingId?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/CommRing.html#Lean.Meta.Grind.Arith.Cutsat.getIntRingId?","kind":"def","line":36,"name":"Lean.Meta.Grind.Arith.Cutsat.getIntRingId?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/CommRing.lean#L36-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/CommRing.html#Int.Linear.Poly.getGeneration\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">getGeneration</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">Lean.Meta.Grind.GoalM</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/CommRing.html#Int.Linear.Poly.getGeneration","kind":"def","line":29,"name":"Int.Linear.Poly.getGeneration","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/CommRing.lean#L29-L34"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/Arith/Cutsat/CommRing.html#Int.Linear.Poly.isNonlinear\"><span class=\"name\">Int</span>.<span class=\"name\">Linear</span>.<span class=\"name\">Poly</span>.<span class=\"name\">isNonlinear</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Init/Data/Int/Linear.html#Int.Linear.Poly\">Poly</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">Lean.Meta.Grind.GoalM</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"Returns `true` if `p` contains a nonlinear monomial. ","docLink":"./Lean/Meta/Tactic/Grind/Arith/Cutsat/CommRing.html#Int.Linear.Poly.isNonlinear","kind":"def","line":23,"name":"Int.Linear.Poly.isNonlinear","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Grind/Arith/Cutsat/CommRing.lean#L23-L27"}}],"imports":["Lean.Meta.Tactic.Grind.Arith.Cutsat.Types","Lean.Meta.Tactic.Grind.Arith.CommRing.RingId","Lean.Meta.Tactic.Grind.ProveEq","Lean.Meta.Tactic.Grind.Simp","Lean.Meta.Tactic.Grind.Arith.Cutsat.Util","Lean.Meta.Tactic.Grind.Arith.Cutsat.Var","Lean.Meta.Tactic.Grind.Arith.CommRing.Functions","Lean.Meta.Tactic.Grind.Arith.CommRing.Reify","Lean.Meta.Tactic.Grind.Arith.CommRing.DenoteExpr"],"instances":[],"name":"Lean.Meta.Tactic.Grind.Arith.Cutsat.CommRing"}