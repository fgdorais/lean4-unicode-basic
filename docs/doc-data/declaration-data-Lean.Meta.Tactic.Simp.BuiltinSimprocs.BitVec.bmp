{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceShiftRightShiftRight\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceShiftRightShiftRight</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simproc\">Lean.Meta.Simp.Simproc</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceShiftRightShiftRight","kind":"def","line":360,"name":"BitVec.reduceShiftRightShiftRight","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L360-L361"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceShiftLeftShiftLeft\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceShiftLeftShiftLeft</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simproc\">Lean.Meta.Simp.Simproc</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceShiftLeftShiftLeft","kind":"def","line":358,"name":"BitVec.reduceShiftLeftShiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L358-L359"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceShiftShift\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceShiftShift</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName </span><span class=\"fn\">thmName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Step\">Lean.Meta.Simp.Step</a></span></div></div>","info":{"doc":"Helper function for reducing `(x <<< i) <<< j` (and `(x >>> i) >>> j`) where `i` and `j` are\nnatural number literals.\n","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceShiftShift","kind":"def","line":341,"name":"BitVec.reduceShiftShift","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L341-L356"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceBitVecToFin\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceBitVecToFin</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceBitVecToFin","kind":"def","line":336,"name":"BitVec.reduceBitVecToFin","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L336-L339"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceBitVecOfFin\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceBitVecOfFin</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceBitVecOfFin","kind":"def","line":330,"name":"BitVec.reduceBitVecOfFin","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L330-L334"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceAllOnes\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceAllOnes</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>","info":{"doc":"Simplification procedure for `allOnes` ","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceAllOnes","kind":"def","line":324,"name":"BitVec.reduceAllOnes","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L324-L328"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSignExtend\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceSignExtend</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>","info":{"doc":"Simplification procedure for `signExtend` on `BitVec`s. ","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSignExtend","kind":"def","line":321,"name":"BitVec.reduceSignExtend","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L321-L322"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceZeroExtend\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceZeroExtend</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>","info":{"doc":"Simplification procedure for `zeroExtend` on `BitVec`s. ","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceZeroExtend","kind":"def","line":318,"name":"BitVec.reduceZeroExtend","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L318-L319"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSetWidth\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceSetWidth</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>","info":{"doc":"Simplification procedure for `setWidth` on `BitVec`s. ","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSetWidth","kind":"def","line":315,"name":"BitVec.reduceSetWidth","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L315-L316"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceReplicate\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceReplicate</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>","info":{"doc":"Simplification procedure for `replicate` on `BitVec`s. ","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceReplicate","kind":"def","line":308,"name":"BitVec.reduceReplicate","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L308-L313"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceExtractLsb'\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceExtractLsb'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>","info":{"doc":"Simplification procedure for `extractLsb'` on `BitVec`s. ","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceExtractLsb'","kind":"def","line":300,"name":"BitVec.reduceExtractLsb'","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L300-L306"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceShiftLeftZeroExtend\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceShiftLeftZeroExtend</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>","info":{"doc":"Simplification procedure for `shiftLeftZeroExtend` on `BitVec`s. ","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceShiftLeftZeroExtend","kind":"def","line":293,"name":"BitVec.reduceShiftLeftZeroExtend","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L293-L298"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSetWidth'\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceSetWidth'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>","info":{"doc":"Simplification procedure for `setWidth'` on `BitVec`s. ","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSetWidth'","kind":"def","line":283,"name":"BitVec.reduceSetWidth'","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L283-L291"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSLE\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceSLE</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>","info":{"doc":"Simplification procedure for signed less than or equal `sle` on `BitVec`s. ","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSLE","kind":"def","line":279,"name":"BitVec.reduceSLE","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L279-L281"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSLT\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceSLT</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>","info":{"doc":"Simplification procedure for signed less than `slt` on `BitVec`s. ","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSLT","kind":"def","line":276,"name":"BitVec.reduceSLT","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L276-L278"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceULE\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceULE</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>","info":{"doc":"Simplification procedure for unsigned less than or equal `ule` on `BitVec`s. ","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceULE","kind":"def","line":273,"name":"BitVec.reduceULE","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L273-L275"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceULT\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceULT</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>","info":{"doc":"Simplification procedure for unsigned less than `ult` on `BitVec`s. ","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceULT","kind":"def","line":270,"name":"BitVec.reduceULT","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L270-L272"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceGE\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceGE</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simproc\">Lean.Meta.Simp.Simproc</a></div></div>","info":{"doc":"Simplification procedure for `≥` on `BitVec`s. ","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceGE","kind":"def","line":267,"name":"BitVec.reduceGE","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L267-L268"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceGT\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceGT</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simproc\">Lean.Meta.Simp.Simproc</a></div></div>","info":{"doc":"Simplification procedure for `>` on `BitVec`s. ","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceGT","kind":"def","line":265,"name":"BitVec.reduceGT","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L265-L266"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceLE\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceLE</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simproc\">Lean.Meta.Simp.Simproc</a></div></div>","info":{"doc":"Simplification procedure for `≤` on `BitVec`s. ","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceLE","kind":"def","line":263,"name":"BitVec.reduceLE","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L263-L264"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceLT\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceLT</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simproc\">Lean.Meta.Simp.Simproc</a></div></div>","info":{"doc":"Simplification procedure for `<` on `BitVec`s. ","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceLT","kind":"def","line":261,"name":"BitVec.reduceLT","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L261-L262"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceBNe\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceBNe</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>","info":{"doc":"Simplification procedure for `!=` on `BitVec`s. ","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceBNe","kind":"def","line":257,"name":"BitVec.reduceBNe","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L257-L259"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceBEq\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceBEq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>","info":{"doc":"Simplification procedure for `==` on `BitVec`s. ","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceBEq","kind":"def","line":254,"name":"BitVec.reduceBEq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L254-L256"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceNe\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceNe</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simproc\">Lean.Meta.Simp.Simproc</a></div></div>","info":{"doc":"Simplification procedure for `≠` on `BitVec`s. ","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceNe","kind":"def","line":252,"name":"BitVec.reduceNe","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L252-L253"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceEq\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceEq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Simproc\">Lean.Meta.Simp.Simproc</a></div></div>","info":{"doc":"Simplification procedure for `=` on `BitVec`s. ","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceEq","kind":"def","line":250,"name":"BitVec.reduceEq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L250-L251"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceOfNat\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceOfNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>","info":{"doc":"Simplification procedure for ensuring `BitVec.ofNat` literals are normalized. ","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceOfNat","kind":"def","line":241,"name":"BitVec.reduceOfNat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L241-L248"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceOfInt\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceOfInt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>","info":{"doc":"Simplification procedure for `BitVec.ofInt`. ","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceOfInt","kind":"def","line":234,"name":"BitVec.reduceOfInt","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L234-L239"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceToInt\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceToInt</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>","info":{"doc":"Simplification procedure for `BitVec.toInt`. ","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceToInt","kind":"def","line":228,"name":"BitVec.reduceToInt","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L228-L232"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceToNat\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceToNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>","info":{"doc":"Simplification procedure for `BitVec.toNat`. ","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceToNat","kind":"def","line":222,"name":"BitVec.reduceToNat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L222-L226"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceCast\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceCast</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>","info":{"doc":"Simplification procedure for casting `BitVec`s along an equality of the size. ","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceCast","kind":"def","line":215,"name":"BitVec.reduceCast","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L215-L220"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceAppend\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceAppend</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>","info":{"doc":"Simplification procedure for append on `BitVec`. ","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceAppend","kind":"def","line":208,"name":"BitVec.reduceAppend","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L208-L213"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceRotateRight\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceRotateRight</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>","info":{"doc":"Simplification procedure for rotate right on `BitVec`. ","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceRotateRight","kind":"def","line":204,"name":"BitVec.reduceRotateRight","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L204-L206"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceRotateLeft\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceRotateLeft</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>","info":{"doc":"Simplification procedure for rotate left on `BitVec`. ","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceRotateLeft","kind":"def","line":201,"name":"BitVec.reduceRotateLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L201-L203"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceHShiftRight'\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceHShiftRight'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>","info":{"doc":"Simplification procedure for converting a shift with a bit-vector literal into a natural number literal. ","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceHShiftRight'","kind":"def","line":198,"name":"BitVec.reduceHShiftRight'","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L198-L200"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceHShiftRight\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceHShiftRight</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>","info":{"doc":"Simplification procedure for shift right on `BitVec`. ","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceHShiftRight","kind":"def","line":195,"name":"BitVec.reduceHShiftRight","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L195-L197"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceHShiftLeft'\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceHShiftLeft'</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>","info":{"doc":"Simplification procedure for converting a shift with a bit-vector literal into a natural number literal. ","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceHShiftLeft'","kind":"def","line":192,"name":"BitVec.reduceHShiftLeft'","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L192-L194"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceHShiftLeft\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceHShiftLeft</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>","info":{"doc":"Simplification procedure for shift left on `BitVec`. ","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceHShiftLeft","kind":"def","line":189,"name":"BitVec.reduceHShiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L189-L191"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSShiftRight\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceSShiftRight</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>","info":{"doc":"Simplification procedure for signed shift right on `BitVec`. ","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSShiftRight","kind":"def","line":186,"name":"BitVec.reduceSShiftRight","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L186-L188"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceUShiftRight\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceUShiftRight</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>","info":{"doc":"Simplification procedure for unsigned shift right on `BitVec`. ","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceUShiftRight","kind":"def","line":183,"name":"BitVec.reduceUShiftRight","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L183-L185"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceShiftLeft\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceShiftLeft</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>","info":{"doc":"Simplification procedure for shift left on `BitVec`. ","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceShiftLeft","kind":"def","line":180,"name":"BitVec.reduceShiftLeft","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L180-L182"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceGetElem\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceGetElem</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>","info":{"doc":"Simplification procedure for `getElem`  on `BitVec`. ","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceGetElem","kind":"def","line":172,"name":"BitVec.reduceGetElem","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L172-L178"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceClz\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceClz</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>","info":{"doc":"Simplification procedure for `clz` (count leading zeros) on `BitVec`. ","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceClz","kind":"def","line":169,"name":"BitVec.reduceClz","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L169-L170"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceGetMsb\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceGetMsb</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>","info":{"doc":"Simplification procedure for `getMsb` (most significant bit) on `BitVec`. ","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceGetMsb","kind":"def","line":167,"name":"BitVec.reduceGetMsb","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L167-L168"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceGetLsb\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceGetLsb</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>","info":{"doc":"Simplification procedure for `getLsb` (lowest significant bit) on `BitVec`. ","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceGetLsb","kind":"def","line":165,"name":"BitVec.reduceGetLsb","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L165-L166"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSMTSDiv\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceSMTSDiv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>","info":{"doc":"Simplification procedure for signed division of `BitVec`s using the SMT-LIB conventions. ","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSMTSDiv","kind":"def","line":163,"name":"BitVec.reduceSMTSDiv","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L163-L164"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSDiv\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceSDiv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>","info":{"doc":"Simplification procedure for signed t-division of `BitVec`s. ","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSDiv","kind":"def","line":161,"name":"BitVec.reduceSDiv","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L161-L162"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSRem\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceSRem</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>","info":{"doc":"Simplification procedure for signed remainder of `BitVec`s. ","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSRem","kind":"def","line":159,"name":"BitVec.reduceSRem","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L159-L160"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSMod\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceSMod</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>","info":{"doc":"Simplification procedure for the signed modulo operation on `BitVec`s. ","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSMod","kind":"def","line":157,"name":"BitVec.reduceSMod","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L157-L158"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSMTUDiv\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceSMTUDiv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>","info":{"doc":"Simplification procedure for division of `BitVec`s using the SMT-LIB conventions. ","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSMTUDiv","kind":"def","line":155,"name":"BitVec.reduceSMTUDiv","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L155-L156"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceUDiv\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceUDiv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>","info":{"doc":"Simplification procedure for unsigned division of `BitVec`s. ","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceUDiv","kind":"def","line":153,"name":"BitVec.reduceUDiv","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L153-L154"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceUMod\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceUMod</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>","info":{"doc":"Simplification procedure for the unsigned modulo operation on `BitVec`s. ","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceUMod","kind":"def","line":151,"name":"BitVec.reduceUMod","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L151-L152"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceMod\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceMod</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>","info":{"doc":"Simplification procedure for the modulo operation on `BitVec`s. ","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceMod","kind":"def","line":149,"name":"BitVec.reduceMod","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L149-L150"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceDiv\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceDiv</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>","info":{"doc":"Simplification procedure for division of `BitVec`s. ","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceDiv","kind":"def","line":147,"name":"BitVec.reduceDiv","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L147-L148"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSub\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceSub</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>","info":{"doc":"Simplification procedure for subtraction of `BitVec`s. ","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceSub","kind":"def","line":145,"name":"BitVec.reduceSub","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L145-L146"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceMul\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceMul</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>","info":{"doc":"Simplification procedure for multiplication of `BitVec`s. ","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceMul","kind":"def","line":143,"name":"BitVec.reduceMul","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L143-L144"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceAdd\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceAdd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>","info":{"doc":"Simplification procedure for addition of `BitVec`s. ","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceAdd","kind":"def","line":141,"name":"BitVec.reduceAdd","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L141-L142"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceXOr\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceXOr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>","info":{"doc":"Simplification procedure for bitwise xor of `BitVec`s. ","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceXOr","kind":"def","line":139,"name":"BitVec.reduceXOr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L139-L140"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceOr\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceOr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>","info":{"doc":"Simplification procedure for bitwise or of `BitVec`s. ","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceOr","kind":"def","line":137,"name":"BitVec.reduceOr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L137-L138"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceAnd\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceAnd</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>","info":{"doc":"Simplification procedure for bitwise and of `BitVec`s. ","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceAnd","kind":"def","line":135,"name":"BitVec.reduceAnd","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L135-L136"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceAbs\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceAbs</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>","info":{"doc":"Simplification procedure for absolute value of `BitVec`s. ","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceAbs","kind":"def","line":133,"name":"BitVec.reduceAbs","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L133-L134"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceNot\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceNot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>","info":{"doc":"Simplification procedure for bitwise not of `BitVec`s. ","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceNot","kind":"def","line":130,"name":"BitVec.reduceNot","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L130-L132"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceNeg\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceNeg</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DSimproc\">Lean.Meta.Simp.DSimproc</a></div></div>","info":{"doc":"Simplification procedure for negation of `BitVec`s. ","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceNeg","kind":"def","line":128,"name":"BitVec.reduceNeg","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L128-L129"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceBoolPred\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceBoolPred</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arity</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">op</span> : <span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>} → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DStep\">Lean.Meta.Simp.DStep</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceBoolPred","kind":"def","line":116,"name":"BitVec.reduceBoolPred","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L116-L125"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceBinPred\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceBinPred</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arity</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">op</span> : <span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>} → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.Step\">Lean.Meta.Simp.Step</a></span></div></div>","info":{"doc":"Helper function for reducing bitvector predicates.\n","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceBinPred","kind":"def","line":102,"name":"BitVec.reduceBinPred","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L102-L114"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceShiftWithBitVecLit\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceShiftWithBitVecLit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DStep\">Lean.Meta.Simp.DStep</a></span></div></div>","info":{"doc":"Helper function for reducing `x <<< i` and `x >>> i` where `i` is a bitvector literal,\ninto one that is a natural number literal.\n","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceShiftWithBitVecLit","kind":"def","line":92,"name":"BitVec.reduceShiftWithBitVecLit","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L92-L100"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceShift\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceShift</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arity</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">op</span> : <span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>} → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DStep\">Lean.Meta.Simp.DStep</a></span></div></div>","info":{"doc":"Helper function for reducing bitvector functions such as `shiftLeft` and `rotateRight`.\n","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceShift","kind":"def","line":82,"name":"BitVec.reduceShift","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L82-L90"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceGetBit\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceGetBit</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">op</span> : <span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>} → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DStep\">Lean.Meta.Simp.DStep</a></span></div></div>","info":{"doc":"Helper function for reducing bitvector functions such as `getLsb` and `getMsb`.\n","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceGetBit","kind":"def","line":71,"name":"BitVec.reduceGetBit","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L71-L80"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceExtend\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceExtend</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">op</span> : <span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>} → <span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>) → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">m</span></span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DStep\">Lean.Meta.Simp.DStep</a></span></div></div>","info":{"doc":"Simplification procedure for `setWidth`, `zeroExtend` and `signExtend` on `BitVec`s. ","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceExtend","kind":"def","line":63,"name":"BitVec.reduceExtend","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L63-L69"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceBin\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceBin</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arity</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">op</span> : <span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>} → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DStep\">Lean.Meta.Simp.DStep</a></span></div></div>","info":{"doc":"Helper function for reducing homogeneous binary bitvector operators.\n","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceBin","kind":"def","line":50,"name":"BitVec.reduceBin","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L50-L61"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceUnary\"><span class=\"name\">BitVec</span>.<span class=\"name\">reduceUnary</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Lean.Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">arity</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">op</span> : <span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>} → <span class=\"fn\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span> → <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span></span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.DStep\">Lean.Meta.Simp.DStep</a></span></div></div>","info":{"doc":"Helper function for reducing homogeneous unary bitvector operators.\n","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.reduceUnary","kind":"def","line":41,"name":"BitVec.reduceUnary","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L41-L48"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.toExpr'\"><span class=\"name\">BitVec</span>.<span class=\"name\">toExpr'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.toExpr'","kind":"def","line":35,"name":"BitVec.toExpr'","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L35-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.fromExpr?\"><span class=\"name\">BitVec</span>.<span class=\"name\">fromExpr?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">e</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Lean.Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/Types.html#Lean.Meta.Simp.SimpM\">Lean.Meta.SimpM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.Literal\">Literal</a>)</span></span></div></div>","info":{"doc":"Try to convert `OfNat.ofNat`/`BitVec.OfNat` application into a\nbitvector literal.\n","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.fromExpr?","kind":"def","line":27,"name":"BitVec.fromExpr?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L27-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.instReprLiteral.repr\"><span class=\"name\">BitVec</span>.<span class=\"name\">instReprLiteral</span>.<span class=\"name\">repr</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.Literal\">Literal</a> → <span class=\"fn\"><a href=\"./Init/Prelude.html#Nat\">Nat</a> → <a href=\"./Init/Data/Format/Basic.html#Std.Format\">Std.Format</a></span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.instReprLiteral.repr","kind":"def","line":25,"name":"BitVec.instReprLiteral.repr","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L25-L25"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.instReprLiteral\"><span class=\"name\">BitVec</span>.<span class=\"name\">instReprLiteral</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Repr.html#Repr\">Repr</a> <a href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.Literal\">Literal</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.instReprLiteral","kind":"instance","line":25,"name":"BitVec.instReprLiteral","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L25-L25"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.instDecidableEqLiteral.decEq\"><span class=\"name\">BitVec</span>.<span class=\"name\">instDecidableEqLiteral</span>.<span class=\"name\">decEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x✝ </span><span class=\"fn\">x✝¹</span> : <a href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.Literal\">Literal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Decidable\">Decidable</a> (<span class=\"fn\">x✝</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">x✝¹</span>)</span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.instDecidableEqLiteral.decEq","kind":"def","line":25,"name":"BitVec.instDecidableEqLiteral.decEq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L25-L25"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.instDecidableEqLiteral\"><span class=\"name\">BitVec</span>.<span class=\"name\">instDecidableEqLiteral</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#DecidableEq\">DecidableEq</a> <a href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.Literal\">Literal</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.instDecidableEqLiteral","kind":"instance","line":25,"name":"BitVec.instDecidableEqLiteral","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L25-L25"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.Literal.value\"><span class=\"name\">BitVec</span>.<span class=\"name\">Literal</span>.<span class=\"name\">value</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.Literal\">Literal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.Literal.n\">n</a></span></span></div></div>","info":{"doc":"Actual value. ","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.Literal.value","kind":"def","line":24,"name":"BitVec.Literal.value","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L24-L24"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.Literal.n\"><span class=\"name\">BitVec</span>.<span class=\"name\">Literal</span>.<span class=\"name\">n</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.Literal\">Literal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"Size. ","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.Literal.n","kind":"def","line":22,"name":"BitVec.Literal.n","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L22-L22"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.Literal.mk\"><span class=\"name\">BitVec</span>.<span class=\"name\">Literal</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">n</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">value</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">n</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.Literal\">Literal</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.Literal.mk","kind":"ctor","line":20,"name":"BitVec.Literal.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L20-L20"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.Literal\"><span class=\"name\">BitVec</span>.<span class=\"name\">Literal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A bit-vector literal ","docLink":"./Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.html#BitVec.Literal","kind":"structure","line":19,"name":"BitVec.Literal","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Simp/BuiltinSimprocs/BitVec.lean#L19-L25"}}],"imports":["Lean.Meta.LitValues","Lean.Meta.Tactic.Simp.BuiltinSimprocs.Nat","Lean.Meta.Tactic.Simp.BuiltinSimprocs.Int","Init.Data.BitVec.Basic"],"instances":[{"className":"Decidable","name":"BitVec.instDecidableEqLiteral","typeNames":["Eq"]},{"className":"Repr","name":"BitVec.instReprLiteral","typeNames":["BitVec.Literal"]}],"name":"Lean.Meta.Tactic.Simp.BuiltinSimprocs.BitVec"}