{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.elimination\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Problem</span>.<span class=\"name\">elimination</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem\">Problem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">OmegaM</a> <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem\">Problem</a></span></div></div>","info":{"doc":"As for `runOmega`, but assuming the first round of solving equalities has already happened. ","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.elimination","kind":"opaque","line":564,"name":"Lean.Elab.Tactic.Omega.Problem.elimination","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L564-L573"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.runOmega\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Problem</span>.<span class=\"name\">runOmega</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem\">Problem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">OmegaM</a> <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem\">Problem</a></span></div></div>","info":{"doc":"Run the `omega` algorithm (for now without dark and grey shadows!) on a problem.\n","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.runOmega","kind":"opaque","line":553,"name":"Lean.Elab.Tactic.Omega.Problem.runOmega","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L553-L562"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.fourierMotzkin\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Problem</span>.<span class=\"name\">fourierMotzkin</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem\">Problem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem\">Problem</a></span></div></div>","info":{"doc":"Run Fourier-Motzkin elimination on one variable.\n","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.fourierMotzkin","kind":"def","line":535,"name":"Lean.Elab.Tactic.Omega.Problem.fourierMotzkin","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L535-L549"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.fourierMotzkinSelect\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Problem</span>.<span class=\"name\">fourierMotzkinSelect</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">data</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.FourierMotzkinData\">FourierMotzkinData</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.FourierMotzkinData\">FourierMotzkinData</a></span></div></div>","info":{"doc":"Decides which variable to run Fourier-Motzkin elimination on, and returns the associated data.\n\nWe prefer eliminations which introduce no new inequalities, or otherwise exact eliminations,\nand break ties by the number of new inequalities introduced.\n","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.fourierMotzkinSelect","kind":"def","line":506,"name":"Lean.Elab.Tactic.Omega.Problem.fourierMotzkinSelect","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L506-L533"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.fourierMotzkinData\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Problem</span>.<span class=\"name\">fourierMotzkinData</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem\">Problem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.FourierMotzkinData\">FourierMotzkinData</a></span></div></div>","info":{"doc":"Prepare the Fourier-Motzkin elimination data for each variable. ","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.fourierMotzkinData","kind":"def","line":480,"name":"Lean.Elab.Tactic.Omega.Problem.fourierMotzkinData","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L480-L504"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.FourierMotzkinData.exact\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Problem</span>.<span class=\"name\">FourierMotzkinData</span>.<span class=\"name\">exact</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.FourierMotzkinData\">FourierMotzkinData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Is the Fourier-Motzkin elimination known to be exact? ","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.FourierMotzkinData.exact","kind":"def","line":477,"name":"Lean.Elab.Tactic.Omega.Problem.FourierMotzkinData.exact","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L477-L478"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.FourierMotzkinData.size\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Problem</span>.<span class=\"name\">FourierMotzkinData</span>.<span class=\"name\">size</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.FourierMotzkinData\">FourierMotzkinData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"The number of new constraints that would be introduced by Fourier-Motzkin elimination. ","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.FourierMotzkinData.size","kind":"def","line":474,"name":"Lean.Elab.Tactic.Omega.Problem.FourierMotzkinData.size","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L474-L476"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.FourierMotzkinData.isEmpty\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Problem</span>.<span class=\"name\">FourierMotzkinData</span>.<span class=\"name\">isEmpty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">d</span> : <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.FourierMotzkinData\">FourierMotzkinData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Is a Fourier-Motzkin elimination empty (i.e. there are no relevant constraints). ","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.FourierMotzkinData.isEmpty","kind":"def","line":471,"name":"Lean.Elab.Tactic.Omega.Problem.FourierMotzkinData.isEmpty","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L471-L473"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.instToStringFourierMotzkinData\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Problem</span>.<span class=\"name\">instToStringFourierMotzkinData</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.FourierMotzkinData\">FourierMotzkinData</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.instToStringFourierMotzkinData","kind":"instance","line":461,"name":"Lean.Elab.Tactic.Omega.Problem.instToStringFourierMotzkinData","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L461-L469"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.instInhabitedFourierMotzkinData\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Problem</span>.<span class=\"name\">instInhabitedFourierMotzkinData</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.FourierMotzkinData\">FourierMotzkinData</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.instInhabitedFourierMotzkinData","kind":"instance","line":459,"name":"Lean.Elab.Tactic.Omega.Problem.instInhabitedFourierMotzkinData","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L459-L459"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.instInhabitedFourierMotzkinData.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Problem</span>.<span class=\"name\">instInhabitedFourierMotzkinData</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.FourierMotzkinData\">FourierMotzkinData</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.instInhabitedFourierMotzkinData.default","kind":"def","line":459,"name":"Lean.Elab.Tactic.Omega.Problem.instInhabitedFourierMotzkinData.default","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L459-L459"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.FourierMotzkinData.upperExact\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Problem</span>.<span class=\"name\">FourierMotzkinData</span>.<span class=\"name\">upperExact</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.FourierMotzkinData\">FourierMotzkinData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Whether the elimination would be exact, because all of the upper bound coefficients are `±1`.\n","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.FourierMotzkinData.upperExact","kind":"def","line":458,"name":"Lean.Elab.Tactic.Omega.Problem.FourierMotzkinData.upperExact","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L458-L458"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.FourierMotzkinData.lowerExact\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Problem</span>.<span class=\"name\">FourierMotzkinData</span>.<span class=\"name\">lowerExact</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.FourierMotzkinData\">FourierMotzkinData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Whether the elimination would be exact, because all of the lower bound coefficients are `±1`.\n","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.FourierMotzkinData.lowerExact","kind":"def","line":454,"name":"Lean.Elab.Tactic.Omega.Problem.FourierMotzkinData.lowerExact","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L454-L454"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.FourierMotzkinData.upperBounds\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Problem</span>.<span class=\"name\">FourierMotzkinData</span>.<span class=\"name\">upperBounds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.FourierMotzkinData\">FourierMotzkinData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Fact\">Fact</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></div></div>","info":{"doc":"The facts which give an upper bound on the target variable,\nand the coefficient of the target variable in each.\n","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.FourierMotzkinData.upperBounds","kind":"def","line":450,"name":"Lean.Elab.Tactic.Omega.Problem.FourierMotzkinData.upperBounds","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L450-L450"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.FourierMotzkinData.lowerBounds\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Problem</span>.<span class=\"name\">FourierMotzkinData</span>.<span class=\"name\">lowerBounds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.FourierMotzkinData\">FourierMotzkinData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Fact\">Fact</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></div></div>","info":{"doc":"The facts which give a lower bound on the target variable,\nand the coefficient of the target variable in each.\n","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.FourierMotzkinData.lowerBounds","kind":"def","line":445,"name":"Lean.Elab.Tactic.Omega.Problem.FourierMotzkinData.lowerBounds","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L445-L445"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.FourierMotzkinData.irrelevant\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Problem</span>.<span class=\"name\">FourierMotzkinData</span>.<span class=\"name\">irrelevant</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.FourierMotzkinData\">FourierMotzkinData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Fact\">Fact</a></span></div></div>","info":{"doc":"The \"irrelevant\" facts which do not involve the target variable. ","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.FourierMotzkinData.irrelevant","kind":"def","line":440,"name":"Lean.Elab.Tactic.Omega.Problem.FourierMotzkinData.irrelevant","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L440-L440"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.FourierMotzkinData.var\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Problem</span>.<span class=\"name\">FourierMotzkinData</span>.<span class=\"name\">var</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.FourierMotzkinData\">FourierMotzkinData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"Which variable is being eliminated. ","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.FourierMotzkinData.var","kind":"def","line":438,"name":"Lean.Elab.Tactic.Omega.Problem.FourierMotzkinData.var","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L438-L438"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.FourierMotzkinData.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Problem</span>.<span class=\"name\">FourierMotzkinData</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">var</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">irrelevant</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Fact\">Fact</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lowerBounds </span><span class=\"fn\">upperBounds</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Fact\">Fact</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lowerExact </span><span class=\"fn\">upperExact</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.FourierMotzkinData\">FourierMotzkinData</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.FourierMotzkinData.mk","kind":"ctor","line":436,"name":"Lean.Elab.Tactic.Omega.Problem.FourierMotzkinData.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L436-L436"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.FourierMotzkinData\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Problem</span>.<span class=\"name\">FourierMotzkinData</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Representation of the data required to run Fourier-Motzkin elimination on a variable. ","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.FourierMotzkinData","kind":"structure","line":435,"name":"Lean.Elab.Tactic.Omega.Problem.FourierMotzkinData","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L435-L459"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.addEqualities\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Problem</span>.<span class=\"name\">addEqualities</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem\">Problem</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">eqs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Omega.Coeffs</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Proof\">Proof</a></span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem\">Problem</a></div></div>","info":{"doc":"Folding `addEquality` over a list. ","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.addEqualities","kind":"def","line":431,"name":"Lean.Elab.Tactic.Omega.Problem.addEqualities","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L431-L433"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.addInequalities\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Problem</span>.<span class=\"name\">addInequalities</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem\">Problem</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ineqs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Init/Data/Int/Basic.html#Int\">Int</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Omega.Coeffs</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Proof\">Proof</a></span>)</span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem\">Problem</a></div></div>","info":{"doc":"Folding `addInequality` over a list. ","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.addInequalities","kind":"def","line":427,"name":"Lean.Elab.Tactic.Omega.Problem.addInequalities","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L427-L429"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.addEquality\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Problem</span>.<span class=\"name\">addEquality</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem\">Problem</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">const</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">coeffs</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Omega.Coeffs</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prf?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Proof\">Proof</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem\">Problem</a></div></div>","info":{"doc":"Helper function for adding an equality of the form `const + Coeffs.dot coeffs atoms = 0`\nto a `Problem`.\n\n(This is only used while initializing a `Problem`. During elimination we use `addConstraint`.)\n","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.addEquality","kind":"def","line":409,"name":"Lean.Elab.Tactic.Omega.Problem.addEquality","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L409-L425"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.addInequality\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Problem</span>.<span class=\"name\">addInequality</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem\">Problem</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">const</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">coeffs</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Omega.Coeffs</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">prf?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Proof\">Proof</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem\">Problem</a></div></div>","info":{"doc":"Helper function for adding an inequality of the form `const + Coeffs.dot coeffs atoms ≥ 0`\nto a `Problem`.\n\n(This is only used while initializing a `Problem`. During elimination we use `addConstraint`.)\n","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.addInequality","kind":"def","line":389,"name":"Lean.Elab.Tactic.Omega.Problem.addInequality","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L389-L407"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.addEquality_proof\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Problem</span>.<span class=\"name\">addEquality_proof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Omega.Coeffs</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Proof\">Proof</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Proof\">Proof</a></div></div>","info":{"doc":"Constructing the proof term for `addEquality`. ","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.addEquality_proof","kind":"def","line":385,"name":"Lean.Elab.Tactic.Omega.Problem.addEquality_proof","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L385-L387"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.addInequality_proof\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Problem</span>.<span class=\"name\">addInequality_proof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Omega.Coeffs</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Proof\">Proof</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Proof\">Proof</a></div></div>","info":{"doc":"Constructing the proof term for `addInequality`. ","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.addInequality_proof","kind":"def","line":380,"name":"Lean.Elab.Tactic.Omega.Problem.addInequality_proof","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L380-L382"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">partial def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.solveEqualities\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Problem</span>.<span class=\"name\">solveEqualities</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem\">Problem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">OmegaM</a> <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem\">Problem</a></span></div></div>","info":{"doc":"Recursively solve all equalities. ","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.solveEqualities","kind":"opaque","line":369,"name":"Lean.Elab.Tactic.Omega.Problem.solveEqualities","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L369-L375"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.solveEquality\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Problem</span>.<span class=\"name\">solveEquality</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem\">Problem</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Omega.Coeffs</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">OmegaM</a> <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem\">Problem</a></span></div></div>","info":{"doc":"Solve an equality, by deciding whether it is easy (has a `±1` coefficient) or hard,\nand delegating to the appropriate function.\n","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.solveEquality","kind":"def","line":359,"name":"Lean.Elab.Tactic.Omega.Problem.solveEquality","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L359-L367"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.dealWithHardEquality\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Problem</span>.<span class=\"name\">dealWithHardEquality</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem\">Problem</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Omega.Coeffs</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/OmegaM.html#Lean.Elab.Tactic.Omega.OmegaM\">OmegaM</a> <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem\">Problem</a></span></div></div>","info":{"doc":"We deal with a hard equality by introducing a new easy equality.\n\nAfter solving the easy equality,\nthe minimum lexicographic value of `(c.minNatAbs, c.maxNatAbs)` will have been reduced.\n","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.dealWithHardEquality","kind":"def","line":335,"name":"Lean.Elab.Tactic.Omega.Problem.dealWithHardEquality","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L335-L357"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.solveEasyEquality\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Problem</span>.<span class=\"name\">solveEasyEquality</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem\">Problem</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Omega.Coeffs</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem\">Problem</a></div></div>","info":{"doc":"Solve an \"easy\" equality, i.e. one with a coefficient that is `±1`.\n\nAfter solving, the variable will have been eliminated from all constraints.\n","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.solveEasyEquality","kind":"def","line":312,"name":"Lean.Elab.Tactic.Omega.Problem.solveEasyEquality","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L312-L332"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.replayEliminations\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Problem</span>.<span class=\"name\">replayEliminations</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem\">Problem</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Fact\">Fact</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Fact\">Fact</a></div></div>","info":{"doc":"If we have already solved some equalities, apply those to some new `Fact`.\n","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.replayEliminations","kind":"def","line":303,"name":"Lean.Elab.Tactic.Omega.Problem.replayEliminations","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L303-L310"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.selectEquality\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Problem</span>.<span class=\"name\">selectEquality</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem\">Problem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Omega.Coeffs</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></div></div>","info":{"doc":"Walk through the equalities, finding either the first equality with minimal coefficient `±1`,\nor otherwise the equality with minimal `(r.minNatAbs, r.maxNatAbs)` (ordered lexicographically).\n\nReturns the coefficients of the equality, along with the value of `minNatAbs`.\n\nAlthough we don't need to run a termination proof here, it's nevertheless important that we use this\nordering so the algorithm terminates in practice!\n","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.selectEquality","kind":"def","line":281,"name":"Lean.Elab.Tactic.Omega.Problem.selectEquality","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L281-L301"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.addConstraint\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Problem</span>.<span class=\"name\">addConstraint</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem\">Problem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Fact\">Fact</a> → <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem\">Problem</a></span></div></div>","info":{"doc":"Add a constraint into the problem,\ncombining it with any existing constraints for the same coefficients.\n","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.addConstraint","kind":"def","line":251,"name":"Lean.Elab.Tactic.Omega.Problem.addConstraint","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L251-L279"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.insertConstraint\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Problem</span>.<span class=\"name\">insertConstraint</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem\">Problem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Fact\">Fact</a> → <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem\">Problem</a></span></div></div>","info":{"doc":"Insert a constraint into the problem,\nwithout checking if there is already a constraint for these coefficients.\n","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.insertConstraint","kind":"def","line":228,"name":"Lean.Elab.Tactic.Omega.Problem.insertConstraint","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L228-L249"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.proveFalse\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Problem</span>.<span class=\"name\">proveFalse</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Omega.Constraint</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Omega.Coeffs</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Justification\">Justification</a> <span class=\"fn\">s</span> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">assumptions</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Proof\">Proof</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Proof\">Proof</a></div></div>","info":{"doc":"Takes a proof that `s.sat' x v` for some `s` such that `s.isImpossible`,\nand constructs a proof of `False`.\n","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.proveFalse","kind":"def","line":215,"name":"Lean.Elab.Tactic.Omega.Problem.proveFalse","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L215-L226"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.instToString\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Problem</span>.<span class=\"name\">instToString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem\">Problem</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.instToString","kind":"instance","line":203,"name":"Lean.Elab.Tactic.Omega.Problem.instToString","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L203-L212"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.isEmpty\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Problem</span>.<span class=\"name\">isEmpty</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">p</span> : <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem\">Problem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Check if a problem has no constraints. ","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.isEmpty","kind":"def","line":200,"name":"Lean.Elab.Tactic.Omega.Problem.isEmpty","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L200-L201"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.explanation?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Problem</span>.<span class=\"name\">explanation?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem\">Problem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Core.html#Thunk\">Thunk</a> <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"If we have found a contradiction,\n`explanation?` will contain a human readable account of the derivation.\n","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.explanation?","kind":"def","line":196,"name":"Lean.Elab.Tactic.Omega.Problem.explanation?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L196-L196"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.proveFalse?_spec\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Problem</span>.<span class=\"name\">proveFalse?_spec</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem\">Problem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.possible\">possible</a></span> <a href=\"./Init/Prelude.html#Bool.or\">||</a> <span class=\"fn\"><span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.proveFalse?\">proveFalse?</a></span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>","info":{"doc":"Invariant between `possible` and `proveFalse?`. ","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.proveFalse?_spec","kind":"theorem","line":191,"name":"Lean.Elab.Tactic.Omega.Problem.proveFalse?_spec","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L191-L191"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.proveFalse?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Problem</span>.<span class=\"name\">proveFalse?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem\">Problem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Proof\">Proof</a></span></div></div>","info":{"doc":"If the problem is impossible, then `proveFalse?` will contain a proof of `False`. ","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.proveFalse?","kind":"def","line":189,"name":"Lean.Elab.Tactic.Omega.Problem.proveFalse?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L189-L189"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.possible\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Problem</span>.<span class=\"name\">possible</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem\">Problem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Whether the problem is possible. ","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.possible","kind":"def","line":187,"name":"Lean.Elab.Tactic.Omega.Problem.possible","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L187-L187"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.eliminations\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Problem</span>.<span class=\"name\">eliminations</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem\">Problem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Fact\">Fact</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></div></div>","info":{"doc":"Equations that have already been used to eliminate variables,\nalong with the variable which was removed, and its coefficient (either `1` or `-1`).\nThe earlier elements are more recent,\nso if these are being reapplied it is essential to use `List.foldr`.\n","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.eliminations","kind":"def","line":185,"name":"Lean.Elab.Tactic.Omega.Problem.eliminations","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L185-L185"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.equalities\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Problem</span>.<span class=\"name\">equalities</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem\">Problem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Omega.Coeffs</a></span></div></div>","info":{"doc":"The coefficients for which `constraints` contains an exact constraint (i.e. an equality).\n","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.equalities","kind":"def","line":178,"name":"Lean.Elab.Tactic.Omega.Problem.equalities","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L178-L178"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.constraints\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Problem</span>.<span class=\"name\">constraints</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem\">Problem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Omega.Coeffs</a> <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Fact\">Fact</a></span></div></div>","info":{"doc":"The current constraints, indexed by their coefficients. ","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.constraints","kind":"def","line":174,"name":"Lean.Elab.Tactic.Omega.Problem.constraints","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L174-L174"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.numVars\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Problem</span>.<span class=\"name\">numVars</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem\">Problem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"The number of variables in the problem. ","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.numVars","kind":"def","line":172,"name":"Lean.Elab.Tactic.Omega.Problem.numVars","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L172-L172"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.assumptions\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Problem</span>.<span class=\"name\">assumptions</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem\">Problem</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Proof\">Proof</a></span></div></div>","info":{"doc":"The ground assumptions that the algorithm starts from. ","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.assumptions","kind":"def","line":170,"name":"Lean.Elab.Tactic.Omega.Problem.assumptions","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L170-L170"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Problem</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">assumptions</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Proof\">Proof</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">numVars</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">constraints</span> : <span class=\"fn\"><a href=\"./Std/Data/HashMap/Basic.html#Std.HashMap\">Std.HashMap</a> <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Omega.Coeffs</a> <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Fact\">Fact</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">equalities</span> : <span class=\"fn\"><a href=\"./Std/Data/HashSet/Basic.html#Std.HashSet\">Std.HashSet</a> <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Omega.Coeffs</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">eliminations</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> (<a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Fact\">Fact</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">possible</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">proveFalse?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Proof\">Proof</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">proveFalse?_spec</span> : (<span class=\"fn\">possible</span> <a href=\"./Init/Prelude.html#Bool.or\">||</a> <span class=\"fn\"><span class=\"fn\">proveFalse?</span>.<a href=\"./Init/Data/Option/Basic.html#Option.isSome\">isSome</a></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> := by rfl)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">explanation?</span> : <span class=\"fn\"><a href=\"./Init/Core.html#Thunk\">Thunk</a> <a href=\"./Init/Prelude.html#String\">String</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem\">Problem</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem.mk","kind":"ctor","line":168,"name":"Lean.Elab.Tactic.Omega.Problem.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L168-L168"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Problem</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A `omega` problem.\n\nThis is a hybrid structure:\nit contains both `Expr` objects giving proofs of the \"ground\" assumptions\n(or rather continuations which will produce the proofs when needed)\nand internal representations of the linear constraints that we manipulate in the algorithm.\n\nWhile the algorithm is running we do not synthesize any new `Expr` proofs: proof extraction happens\nonly once we've found a contradiction.\n","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Problem","kind":"structure","line":157,"name":"Lean.Elab.Tactic.Omega.Problem","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L157-L196"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Fact.combo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Fact</span>.<span class=\"name\">combo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Fact\">Fact</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">g</span> : <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Fact\">Fact</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Fact\">Fact</a></div></div>","info":{"doc":"`combo`, implemented on `Fact`. ","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Fact.combo","kind":"def","line":149,"name":"Lean.Elab.Tactic.Omega.Fact.combo","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L149-L153"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Fact.tidy\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Fact</span>.<span class=\"name\">tidy</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">f</span> : <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Fact\">Fact</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Fact\">Fact</a></div></div>","info":{"doc":"`tidy`, implemented on `Fact`. ","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Fact.tidy","kind":"def","line":143,"name":"Lean.Elab.Tactic.Omega.Fact.tidy","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L143-L147"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Fact.instToString\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Fact</span>.<span class=\"name\">instToString</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Fact\">Fact</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Fact.instToString","kind":"instance","line":140,"name":"Lean.Elab.Tactic.Omega.Fact.instToString","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L140-L141"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Fact.justification\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Fact</span>.<span class=\"name\">justification</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Fact\">Fact</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Justification\">Justification</a> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Fact.constraint\">constraint</a></span> <span class=\"fn\"><span class=\"fn\">self</span>.<a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Fact.coeffs\">coeffs</a></span></span></div></div>","info":{"doc":"The justification of a derived fact. ","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Fact.justification","kind":"def","line":136,"name":"Lean.Elab.Tactic.Omega.Fact.justification","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L136-L136"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Fact.constraint\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Fact</span>.<span class=\"name\">constraint</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Fact\">Fact</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Omega.Constraint</a></div></div>","info":{"doc":"The constraint. ","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Fact.constraint","kind":"def","line":134,"name":"Lean.Elab.Tactic.Omega.Fact.constraint","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L134-L134"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Fact.coeffs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Fact</span>.<span class=\"name\">coeffs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Fact\">Fact</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Omega.Coeffs</a></div></div>","info":{"doc":"The coefficients of a constraint. ","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Fact.coeffs","kind":"def","line":132,"name":"Lean.Elab.Tactic.Omega.Fact.coeffs","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L132-L132"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Fact.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Fact</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">coeffs</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Omega.Coeffs</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">constraint</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Omega.Constraint</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">justification</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Justification\">Justification</a> <span class=\"fn\">constraint</span> <span class=\"fn\">coeffs</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Fact\">Fact</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Fact.mk","kind":"ctor","line":130,"name":"Lean.Elab.Tactic.Omega.Fact.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L130-L130"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Fact\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Fact</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A `Justification` bundled together with its parameters. ","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Fact","kind":"structure","line":129,"name":"Lean.Elab.Tactic.Omega.Fact","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L129-L136"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Justification.proof\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Justification</span>.<span class=\"name\">proof</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Omega.Constraint</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Omega.Coeffs</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">assumptions</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Proof\">Proof</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Justification\">Justification</a> <span class=\"fn\">s</span> <span class=\"fn\">c</span></span> → <a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Proof\">Proof</a></span></div></div>","info":{"doc":"Constructs a proof that `s.sat' c v = true` ","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Justification.proof","kind":"def","line":117,"name":"Lean.Elab.Tactic.Omega.Justification.proof","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L117-L125"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Justification.bmodProof\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Justification</span>.<span class=\"name\">bmodProof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Omega.Coeffs</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v </span><span class=\"fn\">w</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></span></div></div>","info":{"doc":"Construct the proof term associated to a `bmod` step. ","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Justification.bmodProof","kind":"def","line":102,"name":"Lean.Elab.Tactic.Omega.Justification.bmodProof","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L102-L113"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Justification.comboProof\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Justification</span>.<span class=\"name\">comboProof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s </span><span class=\"fn\">t</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Omega.Constraint</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Omega.Coeffs</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">y</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Omega.Coeffs</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v </span><span class=\"fn\">px </span><span class=\"fn\">py</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"Construct the proof term associated to a `combo` step. ","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Justification.comboProof","kind":"def","line":96,"name":"Lean.Elab.Tactic.Omega.Justification.comboProof","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L96-L100"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Justification.combineProof\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Justification</span>.<span class=\"name\">combineProof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s </span><span class=\"fn\">t</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Omega.Constraint</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Omega.Coeffs</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v </span><span class=\"fn\">ps </span><span class=\"fn\">pt</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"Construct the proof term associated to a `combine` step. ","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Justification.combineProof","kind":"def","line":92,"name":"Lean.Elab.Tactic.Omega.Justification.combineProof","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L92-L94"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Justification.tidyProof\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Justification</span>.<span class=\"name\">tidyProof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Omega.Constraint</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Omega.Coeffs</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">v </span><span class=\"fn\">prf</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"Construct the proof term associated to a `tidy` step. ","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Justification.tidyProof","kind":"def","line":88,"name":"Lean.Elab.Tactic.Omega.Justification.tidyProof","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L88-L90"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Justification.instToString\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Justification</span>.<span class=\"name\">instToString</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Omega.Constraint</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Omega.Coeffs</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/ToString/Basic.html#ToString\">ToString</a> <span class=\"fn\">(<a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Justification\">Justification</a> <span class=\"fn\">s</span> <span class=\"fn\">x</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Justification.instToString","kind":"instance","line":84,"name":"Lean.Elab.Tactic.Omega.Justification.instToString","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L84-L84"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Justification.toString\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Justification</span>.<span class=\"name\">toString</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Omega.Constraint</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Omega.Coeffs</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Justification\">Justification</a> <span class=\"fn\">s</span> <span class=\"fn\">x</span></span> → <a href=\"./Init/Prelude.html#String\">String</a></span></div></div>","info":{"doc":"Print a `Justification` as an indented tree structure. ","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Justification.toString","kind":"def","line":72,"name":"Lean.Elab.Tactic.Omega.Justification.toString","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L72-L82"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Justification.tidy?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Justification</span>.<span class=\"name\">tidy?</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Omega.Constraint</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Omega.Coeffs</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Justification\">Justification</a> <span class=\"fn\">s</span> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">((<span class=\"fn\">s'</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Omega.Constraint</a>) × <span class=\"fn\">(<span class=\"fn\">c'</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Omega.Coeffs</a>) × <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Justification\">Justification</a> <span class=\"fn\">s'</span> <span class=\"fn\">c'</span></span></span>)</span></span></div></div>","info":{"doc":"Wrapping for `Justification.tidy` when `tidy?` is nonempty. ","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Justification.tidy?","kind":"def","line":62,"name":"Lean.Elab.Tactic.Omega.Justification.tidy?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L62-L66"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Justification.bmod\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Justification</span>.<span class=\"name\">bmod</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">m</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">r</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Omega.Coeffs</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Justification\">Justification</a> <span class=\"fn\">(<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.exact\">Omega.Constraint.exact</a> <span class=\"fn\">r</span>)</span> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Justification\">Justification</a> <span class=\"fn\">(<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.exact\">Omega.Constraint.exact</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">r</span>.<a href=\"./Init/Data/Int/DivMod/Basic.html#Int.bmod\">bmod</a></span> <span class=\"fn\">m</span>)</span>)</span> <span class=\"fn\">(<a href=\"./Init/Omega/Constraint.html#Lean.Omega.bmod_coeffs\">Omega.bmod_coeffs</a> <span class=\"fn\">m</span> <span class=\"fn\">i</span> <span class=\"fn\">x</span>)</span></span></div></div>","info":{"doc":"The justification for the constraint constructed using \"balanced mod\" while\neliminating an equality.\n","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Justification.bmod","kind":"ctor","line":55,"name":"Lean.Elab.Tactic.Omega.Justification.bmod","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L55-L60"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Justification.combo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Justification</span>.<span class=\"name\">combo</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s </span><span class=\"fn\">t</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Omega.Constraint</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Omega.Coeffs</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Justification\">Justification</a> <span class=\"fn\">s</span> <span class=\"fn\">x</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">b</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Justification\">Justification</a> <span class=\"fn\">t</span> <span class=\"fn\">y</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Justification\">Justification</a> <span class=\"fn\">(<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.combo\">Omega.Constraint.combo</a> <span class=\"fn\">a</span> <span class=\"fn\">s</span> <span class=\"fn\">b</span> <span class=\"fn\">t</span>)</span> <span class=\"fn\">(<a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs.combo\">Omega.Coeffs.combo</a> <span class=\"fn\">a</span> <span class=\"fn\">x</span> <span class=\"fn\">b</span> <span class=\"fn\">y</span>)</span></span></div></div>","info":{"doc":"A linear `combo` of two `Justifications`. ","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Justification.combo","kind":"ctor","line":52,"name":"Lean.Elab.Tactic.Omega.Justification.combo","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L52-L54"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Justification.combine\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Justification</span>.<span class=\"name\">combine</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s </span><span class=\"fn\">t</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Omega.Constraint</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Omega.Coeffs</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Justification\">Justification</a> <span class=\"fn\">s</span> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">k</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Justification\">Justification</a> <span class=\"fn\">t</span> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Justification\">Justification</a> <span class=\"fn\">(<span class=\"fn\"><span class=\"fn\">s</span>.<a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint.combine\">combine</a></span> <span class=\"fn\">t</span>)</span> <span class=\"fn\">c</span></span></div></div>","info":{"doc":"The result of `combine` on two `Justifications`. ","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Justification.combine","kind":"ctor","line":50,"name":"Lean.Elab.Tactic.Omega.Justification.combine","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L50-L51"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Justification.tidy\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Justification</span>.<span class=\"name\">tidy</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">s</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Omega.Constraint</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Omega.Coeffs</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">j</span> : <span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Justification\">Justification</a> <span class=\"fn\">s</span> <span class=\"fn\">c</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Justification\">Justification</a> <span class=\"fn\">(<a href=\"./Init/Omega/Constraint.html#Lean.Omega.tidyConstraint\">Omega.tidyConstraint</a> <span class=\"fn\">s</span> <span class=\"fn\">c</span>)</span> <span class=\"fn\">(<a href=\"./Init/Omega/Constraint.html#Lean.Omega.tidyCoeffs\">Omega.tidyCoeffs</a> <span class=\"fn\">s</span> <span class=\"fn\">c</span>)</span></span></div></div>","info":{"doc":"The result of `tidy` on another `Justification`. ","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Justification.tidy","kind":"ctor","line":48,"name":"Lean.Elab.Tactic.Omega.Justification.tidy","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L48-L49"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Justification.assumption\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Justification</span>.<span class=\"name\">assumption</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">s</span> : <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Omega.Constraint</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Omega.Coeffs</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Justification\">Justification</a> <span class=\"fn\">s</span> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"`Problem.assumptions[i]` generates a proof that `s.sat' coeffs atoms`\n","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Justification.assumption","kind":"ctor","line":44,"name":"Lean.Elab.Tactic.Omega.Justification.assumption","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L44-L47"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Justification\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Justification</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Omega.Constraint</a> → <span class=\"fn\"><a href=\"./Init/Omega/Coeffs.html#Lean.Omega.Coeffs\">Omega.Coeffs</a> → <a href=\"./foundational_types.html\">Type</a></span></span></div></div>","info":{"doc":"Our internal representation of an argument \"justifying\" that a constraint holds on some coefficients.\nWe'll use this to construct the proof term once a contradiction is found.\n","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Justification","kind":"inductive","line":39,"name":"Lean.Elab.Tactic.Omega.Justification","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L39-L60"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Proof\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">Proof</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A delayed proof that a constraint is satisfied at the atoms.\n","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.Proof","kind":"def","line":34,"name":"Lean.Elab.Tactic.Omega.Proof","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L34-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.instToExprConstraint\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">instToExprConstraint</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/ToExpr.html#Lean.ToExpr\">ToExpr</a> <a href=\"./Init/Omega/Constraint.html#Lean.Omega.Constraint\">Omega.Constraint</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.instToExprConstraint","kind":"instance","line":29,"name":"Lean.Elab.Tactic.Omega.instToExprConstraint","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L29-L32"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.instToExprLinearCombo\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">Omega</span>.<span class=\"name\">instToExprLinearCombo</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/ToExpr.html#Lean.ToExpr\">ToExpr</a> <a href=\"./Init/Omega/LinearCombo.html#Lean.Omega.LinearCombo\">Omega.LinearCombo</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/Tactic/Omega/Core.html#Lean.Elab.Tactic.Omega.instToExprLinearCombo","kind":"instance","line":23,"name":"Lean.Elab.Tactic.Omega.instToExprLinearCombo","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/Tactic/Omega/Core.lean#L23-L26"}}],"imports":["Init.Omega.Constraint","Lean.Elab.Tactic.Omega.OmegaM","Lean.Elab.Tactic.Omega.MinNatAbs"],"instances":[{"className":"Lean.ToExpr","name":"Lean.Elab.Tactic.Omega.instToExprLinearCombo","typeNames":["Lean.Omega.LinearCombo"]},{"className":"Lean.ToExpr","name":"Lean.Elab.Tactic.Omega.instToExprConstraint","typeNames":["Lean.Omega.Constraint"]},{"className":"ToString","name":"Lean.Elab.Tactic.Omega.Justification.instToString","typeNames":["Lean.Elab.Tactic.Omega.Justification"]},{"className":"ToString","name":"Lean.Elab.Tactic.Omega.Fact.instToString","typeNames":["Lean.Elab.Tactic.Omega.Fact"]},{"className":"ToString","name":"Lean.Elab.Tactic.Omega.Problem.instToString","typeNames":["Lean.Elab.Tactic.Omega.Problem"]},{"className":"Inhabited","name":"Lean.Elab.Tactic.Omega.Problem.instInhabitedFourierMotzkinData","typeNames":["Lean.Elab.Tactic.Omega.Problem.FourierMotzkinData"]},{"className":"ToString","name":"Lean.Elab.Tactic.Omega.Problem.instToStringFourierMotzkinData","typeNames":["Lean.Elab.Tactic.Omega.Problem.FourierMotzkinData"]}],"name":"Lean.Elab.Tactic.Omega.Core"}