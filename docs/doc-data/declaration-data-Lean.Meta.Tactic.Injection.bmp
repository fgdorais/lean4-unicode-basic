{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Injection.html#Lean.Meta.injections\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">injections</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">newNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">maxDepth</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a> := <span class=\"fn\">5</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">forbidden</span> : <a href=\"./Lean/Expr.html#Lean.FVarIdSet\">FVarIdSet</a> := <a href=\"./Init/Core.html#EmptyCollection.emptyCollection\">âˆ…</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Meta/Tactic/Injection.html#Lean.Meta.InjectionsResult\">InjectionsResult</a></span></div></div>","info":{"doc":"Applies `injection` to local declarations in `mvarId`. It uses `newNames` to name the new local declarations.\n`maxDepth` is the maximum recursion depth. Only local declarations that are not in `forbidden` are considered.\nRecall that some of local declarations may not have been eliminated from the local context due to forward dependencies, and\nwe use `forbidden` to avoid non-termination when using `injections` in a loop.\n","docLink":"./Lean/Meta/Tactic/Injection.html#Lean.Meta.injections","kind":"def","line":111,"name":"Lean.Meta.injections","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Injection.lean#L111-L144"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Injection.html#Lean.Meta.InjectionsResult.subgoal\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">InjectionsResult</span>.<span class=\"name\">subgoal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">remainingNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">forbidden</span> : <a href=\"./Lean/Expr.html#Lean.FVarIdSet\">FVarIdSet</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Injection.html#Lean.Meta.InjectionsResult\">InjectionsResult</a></div></div>","info":{"doc":"`injections` produces a new goal `mvarId`. `remainingNames` contains the user-facing names that have not been used.\n`forbidden` contains all local declarations to which `injection` has been applied.\nRecall that some of these declarations may not have been eliminated from the local context due to forward dependencies, and\nwe use `forbidden` to avoid non-termination when using `injections` in a loop.\n","docLink":"./Lean/Meta/Tactic/Injection.html#Lean.Meta.InjectionsResult.subgoal","kind":"ctor","line":103,"name":"Lean.Meta.InjectionsResult.subgoal","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Injection.lean#L103-L109"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Injection.html#Lean.Meta.InjectionsResult.solved\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">InjectionsResult</span>.<span class=\"name\">solved</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Injection.html#Lean.Meta.InjectionsResult\">InjectionsResult</a></div></div>","info":{"doc":"`injections` closed the input goal. ","docLink":"./Lean/Meta/Tactic/Injection.html#Lean.Meta.InjectionsResult.solved","kind":"ctor","line":101,"name":"Lean.Meta.InjectionsResult.solved","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Injection.lean#L101-L102"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Injection.html#Lean.Meta.InjectionsResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">InjectionsResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Injection.html#Lean.Meta.InjectionsResult","kind":"inductive","line":100,"name":"Lean.Meta.InjectionsResult","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Injection.lean#L100-L109"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Injection.html#Lean.Meta.injection\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">injection</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">newNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span> := <a href=\"./Init/Prelude.html#List.nil\">[</a><a href=\"./Init/Prelude.html#List.nil\">]</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Meta/Tactic/Injection.html#Lean.Meta.InjectionResult\">InjectionResult</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Injection.html#Lean.Meta.injection","kind":"def","line":95,"name":"Lean.Meta.injection","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Injection.lean#L95-L98"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Injection.html#Lean.Meta.injectionIntro\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">injectionIntro</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">numEqs</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">newNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tryToClear</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a> := <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Meta/Tactic/Injection.html#Lean.Meta.InjectionResult\">InjectionResult</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Injection.html#Lean.Meta.injectionIntro","kind":"def","line":81,"name":"Lean.Meta.injectionIntro","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Injection.lean#L81-L93"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Injection.html#Lean.Meta.InjectionResult.subgoal\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">InjectionResult</span>.<span class=\"name\">subgoal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">newEqs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">remainingNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Injection.html#Lean.Meta.InjectionResult\">InjectionResult</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Injection.html#Lean.Meta.InjectionResult.subgoal","kind":"ctor","line":78,"name":"Lean.Meta.InjectionResult.subgoal","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Injection.lean#L78-L78"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Injection.html#Lean.Meta.InjectionResult.solved\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">InjectionResult</span>.<span class=\"name\">solved</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Injection.html#Lean.Meta.InjectionResult\">InjectionResult</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Injection.html#Lean.Meta.InjectionResult.solved","kind":"ctor","line":77,"name":"Lean.Meta.InjectionResult.solved","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Injection.lean#L77-L77"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Injection.html#Lean.Meta.InjectionResult\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">InjectionResult</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Injection.html#Lean.Meta.InjectionResult","kind":"inductive","line":76,"name":"Lean.Meta.InjectionResult","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Injection.lean#L76-L78"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Injection.html#Lean.Meta.injectionCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">injectionCore</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fvarId</span> : <a href=\"./Lean/Expr.html#Lean.FVarId\">FVarId</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Lean/Meta/Tactic/Injection.html#Lean.Meta.InjectionResultCore\">InjectionResultCore</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Injection.html#Lean.Meta.injectionCore","kind":"def","line":32,"name":"Lean.Meta.injectionCore","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Injection.lean#L32-L74"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Injection.html#Lean.Meta.InjectionResultCore.subgoal\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">InjectionResultCore</span>.<span class=\"name\">subgoal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">mvarId</span> : <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">numNewEqs</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Injection.html#Lean.Meta.InjectionResultCore\">InjectionResultCore</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Injection.html#Lean.Meta.InjectionResultCore.subgoal","kind":"ctor","line":30,"name":"Lean.Meta.InjectionResultCore.subgoal","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Injection.lean#L30-L30"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Injection.html#Lean.Meta.InjectionResultCore.solved\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">InjectionResultCore</span>.<span class=\"name\">solved</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Injection.html#Lean.Meta.InjectionResultCore\">InjectionResultCore</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Injection.html#Lean.Meta.InjectionResultCore.solved","kind":"ctor","line":29,"name":"Lean.Meta.InjectionResultCore.solved","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Injection.lean#L29-L29"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Injection.html#Lean.Meta.InjectionResultCore\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">InjectionResultCore</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Injection.html#Lean.Meta.InjectionResultCore","kind":"inductive","line":28,"name":"Lean.Meta.InjectionResultCore","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Injection.lean#L28-L30"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Injection.html#Lean.Meta.getCtorNumPropFields\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">getCtorNumPropFields</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ctorInfo</span> : <a href=\"./Lean/Declaration.html#Lean.ConstructorVal\">ConstructorVal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Basic.html#Lean.Meta.MetaM\">MetaM</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Injection.html#Lean.Meta.getCtorNumPropFields","kind":"def","line":20,"name":"Lean.Meta.getCtorNumPropFields","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Injection.lean#L20-L26"}}],"imports":["Lean.Meta.AppBuilder","Lean.Meta.MatchUtil","Lean.Meta.Tactic.Clear","Lean.Meta.Tactic.Subst","Lean.Meta.Tactic.Assert","Lean.Meta.Tactic.Intro"],"instances":[],"name":"Lean.Meta.Tactic.Injection"}