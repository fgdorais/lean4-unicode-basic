{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Parser.Tactic.dsimpAutoUnfold\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">dsimpAutoUnfold</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"`dsimp!` is shorthand for `dsimp` with `autoUnfold := true`.\nThis will unfold applications of functions defined by pattern matching, when one of the patterns applies.\nThis can be used to partially evaluate many definitions. ","docLink":"./Init/Meta.html#Lean.Parser.Tactic.dsimpAutoUnfold","kind":"def","line":100,"name":"Lean.Parser.Tactic.dsimpAutoUnfold","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta.lean#L100-L103"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Parser.Tactic.simpAllArithBang\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">simpAllArithBang</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"`simp_all_arith!` has been deprecated. It was a shorthand for `simp_all! +arith +decide`.\nNote that `+decide` is not needed for reducing arithmetic terms since simprocs have been added to Lean.\n","docLink":"./Init/Meta.html#Lean.Parser.Tactic.simpAllArithBang","kind":"def","line":93,"name":"Lean.Parser.Tactic.simpAllArithBang","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta.lean#L93-L97"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Parser.Tactic.simpAllArith\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">simpAllArith</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"`simp_all_arith` has been deprecated. It was a shorthand for `simp_all +arith +decide`.\nNote that `+decide` is not needed for reducing arithmetic terms since simprocs have been added to Lean.\n","docLink":"./Init/Meta.html#Lean.Parser.Tactic.simpAllArith","kind":"def","line":87,"name":"Lean.Parser.Tactic.simpAllArith","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta.lean#L87-L91"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Parser.Tactic.simpAllAutoUnfold\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">simpAllAutoUnfold</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"`simp_all!` is shorthand for `simp_all` with `autoUnfold := true`.\nThis will unfold applications of functions defined by pattern matching, when one of the patterns applies.\nThis can be used to partially evaluate many definitions. ","docLink":"./Init/Meta.html#Lean.Parser.Tactic.simpAllAutoUnfold","kind":"def","line":82,"name":"Lean.Parser.Tactic.simpAllAutoUnfold","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta.lean#L82-L85"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Parser.Tactic.simpArithBang\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">simpArithBang</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"`simp_arith!` has been deprecated. It was a shorthand for `simp! +arith +decide`.\nNote that `+decide` is not needed for reducing arithmetic terms since simprocs have been added to Lean.\n","docLink":"./Init/Meta.html#Lean.Parser.Tactic.simpArithBang","kind":"def","line":76,"name":"Lean.Parser.Tactic.simpArithBang","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta.lean#L76-L80"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Parser.Tactic.simpArith\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">simpArith</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"`simp_arith` has been deprecated. It was a shorthand for `simp +arith +decide`.\nNote that `+decide` is not needed for reducing arithmetic terms since simprocs have been added to Lean.\n","docLink":"./Init/Meta.html#Lean.Parser.Tactic.simpArith","kind":"def","line":70,"name":"Lean.Parser.Tactic.simpArith","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta.lean#L70-L74"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Parser.Tactic.simpAutoUnfold\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">simpAutoUnfold</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"`simp!` is shorthand for `simp` with `autoUnfold := true`.\nThis will unfold applications of functions defined by pattern matching, when one of the patterns applies.\nThis can be used to partially evaluate many definitions. ","docLink":"./Init/Meta.html#Lean.Parser.Tactic.simpAutoUnfold","kind":"def","line":65,"name":"Lean.Parser.Tactic.simpAutoUnfold","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta.lean#L65-L68"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Parser.Tactic.declareSimpLikeTactic\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">declareSimpLikeTactic</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"","docLink":"./Init/Meta.html#Lean.Parser.Tactic.declareSimpLikeTactic","kind":"def","line":46,"name":"Lean.Parser.Tactic.declareSimpLikeTactic","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta.lean#L46-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Parser.Tactic.dsimpKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">dsimpKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"","docLink":"./Init/Meta.html#Lean.Parser.Tactic.dsimpKind","kind":"def","line":44,"name":"Lean.Parser.Tactic.dsimpKind","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta.lean#L44-L44"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Parser.Tactic.simpAllKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">simpAllKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"","docLink":"./Init/Meta.html#Lean.Parser.Tactic.simpAllKind","kind":"def","line":43,"name":"Lean.Parser.Tactic.simpAllKind","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta.lean#L43-L43"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.Parser.Tactic.tacticErw___\"><span class=\"name\">Lean</span>.<span class=\"name\">Parser</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">tacticErw___</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"`erw [rules]` is a shorthand for `rw (transparency := .default) [rules]`.\nThis does rewriting up to unfolding of regular definitions (by comparison to regular `rw`\nwhich only unfolds `@[reducible]` definitions). ","docLink":"./Init/Meta.html#Lean.Parser.Tactic.tacticErw___","kind":"def","line":40,"name":"Lean.Parser.Tactic.tacticErw___","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta.lean#L40-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.termEval_prio_\"><span class=\"name\">Lean</span>.<span class=\"name\">termEval_prio_</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"","docLink":"./Init/Meta.html#Lean.termEval_prio_","kind":"def","line":33,"name":"Lean.termEval_prio_","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta.lean#L33-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/Meta.html#Lean.termEval_prec_\"><span class=\"name\">Lean</span>.<span class=\"name\">termEval_prec_</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.ParserDescr\">ParserDescr</a></div></div>","info":{"doc":"","docLink":"./Init/Meta.html#Lean.termEval_prec_","kind":"def","line":25,"name":"Lean.termEval_prec_","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/Meta.lean#L25-L25"}}],"imports":["Init.Meta.Defs","Init.Meta.Defs","Init.Tactics"],"instances":[],"name":"Init.Meta"}