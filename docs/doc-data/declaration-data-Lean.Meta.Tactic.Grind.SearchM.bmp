{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.nextGoal?\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">nextGoal?</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.SearchM\">SearchM</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span></div></div>","info":{"doc":"Select the next goal to be processed from the `choiceStack`.\nThis function assumes the current goal has been closed (i.e., `inconsistent` is `true`)\nReturns `some gen` if a new goal was found for a choice point with generation `gen`,\nand returns `none` otherwise.\n","docLink":"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.nextGoal?","kind":"def","line":169,"name":"Lean.Meta.Grind.nextGoal?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Grind/SearchM.lean#L169-L225"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.mkAuxMVarForCurrGoal\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">mkAuxMVarForCurrGoal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.SearchM\">SearchM</a> <a href=\"./Lean/Expr.html#Lean.MVarId\">MVarId</a></span></div></div>","info":{"doc":"Create an auxiliary metavariable with the same type and tag of the metavariable\nassociated with the current goal.\nWe use this function to perform `cases` on the current goal without eagerly assigning it.\n","docLink":"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.mkAuxMVarForCurrGoal","kind":"def","line":88,"name":"Lean.Meta.Grind.mkAuxMVarForCurrGoal","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Grind/SearchM.lean#L88-L98"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.mkChoice\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">mkChoice</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">proof</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">subgoals</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">generation</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.SearchM\">SearchM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"Given a proof containing meta-variables corresponding to the given subgoals,\ncreate a choice point.\n- If there are no choice points, we just close the current goal using `proof`.\n- If there is only one subgoal `s`, we close the current goal using `proof`, and\nupdate current goal using `s`.\n- If there are more than one `s :: ss`, we create a choice point using the current\ngoal as the pending goal, and update the current goal with `s`.\n","docLink":"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.mkChoice","kind":"def","line":63,"name":"Lean.Meta.Grind.mkChoice","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Grind/SearchM.lean#L63-L86"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.SearchM.run\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SearchM</span>.<span class=\"name\">run</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.SearchM\">SearchM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GrindM\">GrindM</a> (<span class=\"fn\">α</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.SearchM.State\">State</a>)</span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.SearchM.run","kind":"def","line":60,"name":"Lean.Meta.Grind.SearchM.run","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Grind/SearchM.lean#L60-L61"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.instMonadLiftGoalMSearchM\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instMonadLiftGoalMSearchM</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#MonadLift\">MonadLift</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <a href=\"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.SearchM\">SearchM</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.instMonadLiftGoalMSearchM","kind":"instance","line":57,"name":"Lean.Meta.Grind.instMonadLiftGoalMSearchM","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Grind/SearchM.lean#L57-L58"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.liftGoalM\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">liftGoalM</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.GoalM\">GoalM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.SearchM\">SearchM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.liftGoalM","kind":"def","line":52,"name":"Lean.Meta.Grind.liftGoalM","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Grind/SearchM.lean#L52-L55"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.withCurrGoalContext\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">withCurrGoalContext</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.SearchM\">SearchM</a> <span class=\"fn\">α</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.SearchM\">SearchM</a> <span class=\"fn\">α</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.withCurrGoalContext","kind":"def","line":49,"name":"Lean.Meta.Grind.withCurrGoalContext","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Grind/SearchM.lean#L49-L50"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.setGoal\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">setGoal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.SearchM\">SearchM</a> <a href=\"./Init/Prelude.html#Unit\">Unit</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.setGoal","kind":"def","line":46,"name":"Lean.Meta.Grind.setGoal","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Grind/SearchM.lean#L46-L47"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.getGoal\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">getGoal</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.SearchM\">SearchM</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.getGoal","kind":"def","line":43,"name":"Lean.Meta.Grind.getGoal","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Grind/SearchM.lean#L43-L44"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.SearchM\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SearchM</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Type</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.SearchM","kind":"def","line":41,"name":"Lean.Meta.Grind.SearchM","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Grind/SearchM.lean#L41-L41"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.SearchM.State.choiceStack\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SearchM</span>.<span class=\"name\">State</span>.<span class=\"name\">choiceStack</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.SearchM.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.Choice\">Choice</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.SearchM.State.choiceStack","kind":"def","line":39,"name":"Lean.Meta.Grind.SearchM.State.choiceStack","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Grind/SearchM.lean#L39-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.SearchM.State.goal\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SearchM</span>.<span class=\"name\">State</span>.<span class=\"name\">goal</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.SearchM.State\">State</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.SearchM.State.goal","kind":"def","line":38,"name":"Lean.Meta.Grind.SearchM.State.goal","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Grind/SearchM.lean#L38-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.SearchM.State.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SearchM</span>.<span class=\"name\">State</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goal</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">choiceStack</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.Choice\">Choice</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.SearchM.State\">State</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.SearchM.State.mk","kind":"ctor","line":37,"name":"Lean.Meta.Grind.SearchM.State.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Grind/SearchM.lean#L37-L37"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.SearchM.State\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">SearchM</span>.<span class=\"name\">State</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.SearchM.State","kind":"structure","line":37,"name":"Lean.Meta.Grind.SearchM.State","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Grind/SearchM.lean#L37-L39"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.instInhabitedChoice\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instInhabitedChoice</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.Choice\">Choice</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.instInhabitedChoice","kind":"instance","line":35,"name":"Lean.Meta.Grind.instInhabitedChoice","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Grind/SearchM.lean#L35-L35"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.instInhabitedChoice.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instInhabitedChoice</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.Choice\">Choice</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.instInhabitedChoice.default","kind":"def","line":35,"name":"Lean.Meta.Grind.instInhabitedChoice.default","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Grind/SearchM.lean#L35-L35"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.Choice.generation\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Choice</span>.<span class=\"name\">generation</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.Choice\">Choice</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.Choice.generation","kind":"def","line":34,"name":"Lean.Meta.Grind.Choice.generation","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Grind/SearchM.lean#L34-L34"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.Choice.todo\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Choice</span>.<span class=\"name\">todo</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.Choice\">Choice</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a></span></div></div>","info":{"doc":"Subgoals that still need to be processed.\n","docLink":"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.Choice.todo","kind":"def","line":33,"name":"Lean.Meta.Grind.Choice.todo","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Grind/SearchM.lean#L33-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.Choice.proof\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Choice</span>.<span class=\"name\">proof</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.Choice\">Choice</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"Expression to be assigned to `goalOld.mvarId` if it is not possible to perform\nnon-chronological backtracking.\n`proof` is often a `casesOn` application containing meta-variables.\n","docLink":"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.Choice.proof","kind":"def","line":29,"name":"Lean.Meta.Grind.Choice.proof","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Grind/SearchM.lean#L29-L29"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.Choice.goalPending\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Choice</span>.<span class=\"name\">goalPending</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.Choice\">Choice</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a></div></div>","info":{"doc":"Goal where the case-split was performed.\nInvariant: `goalOld.mvarId` is not assigned.\n","docLink":"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.Choice.goalPending","kind":"def","line":23,"name":"Lean.Meta.Grind.Choice.goalPending","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Grind/SearchM.lean#L23-L23"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.Choice.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Choice</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">goalPending</span> : <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">proof</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">todo</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Lean/Meta/Tactic/Grind/Types.html#Lean.Meta.Grind.Goal\">Goal</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">generation</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.Choice\">Choice</a></div></div>","info":{"doc":"","docLink":"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.Choice.mk","kind":"ctor","line":18,"name":"Lean.Meta.Grind.Choice.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Grind/SearchM.lean#L18-L18"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.Choice\"><span class=\"name\">Lean</span>.<span class=\"name\">Meta</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Choice</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"A `choice` (aka backtracking) point in the search tree.\n","docLink":"./Lean/Meta/Tactic/Grind/SearchM.html#Lean.Meta.Grind.Choice","kind":"structure","line":15,"name":"Lean.Meta.Grind.Choice","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Meta/Tactic/Grind/SearchM.lean#L15-L35"}}],"imports":["Lean.Util.ForEachExpr","Lean.Meta.Tactic.Grind.Types"],"instances":[{"className":"Inhabited","name":"Lean.Meta.Grind.instInhabitedChoice","typeNames":["Lean.Meta.Grind.Choice"]},{"className":"MonadLift","name":"Lean.Meta.Grind.instMonadLiftGoalMSearchM","typeNames":["Lean.Meta.Grind.GoalM","Lean.Meta.Grind.SearchM"]}],"name":"Lean.Meta.Tactic.Grind.SearchM"}