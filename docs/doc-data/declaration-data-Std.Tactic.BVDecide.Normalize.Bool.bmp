{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.and_right\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">and_right</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : (<span class=\"fn\">lhs</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\">rhs</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">rhs</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.and_right","kind":"theorem","line":302,"name":"Std.Tactic.BVDecide.Normalize.Bool.and_right","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L302-L304"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.and_left\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">and_left</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lhs </span><span class=\"fn\">rhs</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">h</span> : (<span class=\"fn\">lhs</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\">rhs</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">lhs</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.and_left","kind":"theorem","line":298,"name":"Std.Tactic.BVDecide.Normalize.Bool.and_left","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L298-L300"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.not_ite_beq'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">not_ite_beq'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> (<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">((<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">bif <span class=\"fn\">c</span> then <span class=\"fn\">b</span> else <span class=\"fn\">a</span></span>) <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.not_ite_beq'","kind":"theorem","line":293,"name":"Std.Tactic.BVDecide.Normalize.BitVec.not_ite_beq'","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L293-L296"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.not_ite_beq\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">not_ite_beq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> (<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">((<a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">bif <span class=\"fn\">c</span> then <span class=\"fn\">a</span> else <span class=\"fn\">b</span></span>) <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.not_ite_beq","kind":"theorem","line":288,"name":"Std.Tactic.BVDecide.Normalize.BitVec.not_ite_beq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L288-L291"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.beq_not_ite'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">beq_not_ite'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> (<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">bif <span class=\"fn\">c</span> then <span class=\"fn\">b</span> else <span class=\"fn\">a</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">b</span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.beq_not_ite'","kind":"theorem","line":283,"name":"Std.Tactic.BVDecide.Normalize.BitVec.beq_not_ite'","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L283-L286"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.beq_not_ite\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">beq_not_ite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> (<span class=\"fn\">w</span> <a href=\"./Init/Prelude.html#HAdd.hAdd\">+</a> <span class=\"fn\">1</span>)</span>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">bif <span class=\"fn\">c</span> then <span class=\"fn\">a</span> else <span class=\"fn\">b</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">b</span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.beq_not_ite","kind":"theorem","line":278,"name":"Std.Tactic.BVDecide.Normalize.BitVec.beq_not_ite","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L278-L281"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.not_ite_beq'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">not_ite_beq'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">((<a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">bif <span class=\"fn\">c</span> then <span class=\"fn\">b</span> else <span class=\"fn\">a</span></span>) <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">b</span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.not_ite_beq'","kind":"theorem","line":273,"name":"Std.Tactic.BVDecide.Normalize.Bool.not_ite_beq'","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L273-L276"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.not_ite_beq\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">not_ite_beq</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">((<a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">bif <span class=\"fn\">c</span> then <span class=\"fn\">a</span> else <span class=\"fn\">b</span></span>) <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">b</span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.not_ite_beq","kind":"theorem","line":268,"name":"Std.Tactic.BVDecide.Normalize.Bool.not_ite_beq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L268-L271"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.beq_not_ite'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">beq_not_ite'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">bif <span class=\"fn\">c</span> then <span class=\"fn\">b</span> else <span class=\"fn\">a</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">b</span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.beq_not_ite'","kind":"theorem","line":263,"name":"Std.Tactic.BVDecide.Normalize.Bool.beq_not_ite'","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L263-L266"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.beq_not_ite\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">beq_not_ite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">bif <span class=\"fn\">c</span> then <span class=\"fn\">a</span> else <span class=\"fn\">b</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">b</span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.beq_not_ite","kind":"theorem","line":258,"name":"Std.Tactic.BVDecide.Normalize.Bool.beq_not_ite","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L258-L261"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.zero_beq_eq_ite'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">zero_beq_eq_ite'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">1</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> (0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>)) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">bif <span class=\"fn\">b</span> then 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span> else 1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span></span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.zero_beq_eq_ite'","kind":"theorem","line":253,"name":"Std.Tactic.BVDecide.Normalize.BitVec.zero_beq_eq_ite'","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L253-L256"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.beq_zero_eq_ite'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">beq_zero_eq_ite'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">1</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span>)) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">bif <span class=\"fn\">b</span> then 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span> else 1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span></span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.beq_zero_eq_ite'","kind":"theorem","line":248,"name":"Std.Tactic.BVDecide.Normalize.BitVec.beq_zero_eq_ite'","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L248-L251"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.zero_beq_eq_ite\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">zero_beq_eq_ite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">1</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">((0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">bif <span class=\"fn\">b</span> then 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span> else 1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span></span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.zero_beq_eq_ite","kind":"theorem","line":243,"name":"Std.Tactic.BVDecide.Normalize.BitVec.zero_beq_eq_ite","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L243-L246"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.beq_zero_eq_ite\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">beq_zero_eq_ite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">1</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">((<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span>) <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">bif <span class=\"fn\">b</span> then 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span> else 1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span></span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.beq_zero_eq_ite","kind":"theorem","line":238,"name":"Std.Tactic.BVDecide.Normalize.BitVec.beq_zero_eq_ite","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L238-L241"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.one_beq_eq_ite'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">one_beq_eq_ite'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">1</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> (1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>)) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">bif <span class=\"fn\">b</span> then 1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span> else 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span></span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.one_beq_eq_ite'","kind":"theorem","line":233,"name":"Std.Tactic.BVDecide.Normalize.BitVec.one_beq_eq_ite'","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L233-L236"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.beq_one_eq_ite'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">beq_one_eq_ite'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">1</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> 1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span>)) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">bif <span class=\"fn\">b</span> then 1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span> else 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span></span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.beq_one_eq_ite'","kind":"theorem","line":228,"name":"Std.Tactic.BVDecide.Normalize.BitVec.beq_one_eq_ite'","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L228-L231"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.one_beq_eq_ite\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">one_beq_eq_ite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">1</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">((1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">bif <span class=\"fn\">b</span> then 1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span> else 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span></span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.one_beq_eq_ite","kind":"theorem","line":223,"name":"Std.Tactic.BVDecide.Normalize.BitVec.one_beq_eq_ite","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L223-L226"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.beq_one_eq_ite\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">beq_one_eq_ite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">1</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">((<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> 1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span>) <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">b</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">bif <span class=\"fn\">b</span> then 1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span> else 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span></span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.beq_one_eq_ite","kind":"theorem","line":218,"name":"Std.Tactic.BVDecide.Normalize.BitVec.beq_one_eq_ite","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L218-L221"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.mul_ite_zero'''\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">mul_ite_zero'''</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(bif <span class=\"fn\">c</span> then <span class=\"fn\">t</span> else 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span>)</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">c</span> then <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">a</span> else 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.mul_ite_zero'''","kind":"theorem","line":213,"name":"Std.Tactic.BVDecide.Normalize.BitVec.mul_ite_zero'''","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L213-L216"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.mul_ite_zero''\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">mul_ite_zero''</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">e</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(bif <span class=\"fn\">c</span> then 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span> else <span class=\"fn\">e</span>)</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">c</span> then 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span> else <span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.mul_ite_zero''","kind":"theorem","line":208,"name":"Std.Tactic.BVDecide.Normalize.BitVec.mul_ite_zero''","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L208-L211"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.mul_ite_zero'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">mul_ite_zero'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">t</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">bif <span class=\"fn\">c</span> then <span class=\"fn\">t</span> else 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">c</span> then <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">t</span> else 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.mul_ite_zero'","kind":"theorem","line":203,"name":"Std.Tactic.BVDecide.Normalize.BitVec.mul_ite_zero'","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L203-L206"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.mul_ite_zero\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">mul_ite_zero</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">e</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">bif <span class=\"fn\">c</span> then 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span> else <span class=\"fn\">e</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">c</span> then 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">w</span> else <span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#HMul.hMul\">*</a> <span class=\"fn\">e</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.mul_ite_zero","kind":"theorem","line":198,"name":"Std.Tactic.BVDecide.Normalize.BitVec.mul_ite_zero","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L198-L201"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.ite_else_not_ite''\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ite_else_not_ite''</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c0 </span><span class=\"fn\">c1</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(bif <span class=\"fn\">c0</span> then <span class=\"fn\">a</span> else <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">bif <span class=\"fn\">c1</span> then <span class=\"fn\">b</span> else <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">c0</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\">c1</span> then <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">b</span> else <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.ite_else_not_ite''","kind":"theorem","line":193,"name":"Std.Tactic.BVDecide.Normalize.BitVec.ite_else_not_ite''","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L193-L196"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_else_not_ite''\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">ite_else_not_ite''</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c0 </span><span class=\"fn\">c1</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(bif <span class=\"fn\">c0</span> then <span class=\"fn\">a</span> else <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">bif <span class=\"fn\">c1</span> then <span class=\"fn\">b</span> else <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">a</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">c0</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\">c1</span> then <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">b</span> else <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_else_not_ite''","kind":"theorem","line":188,"name":"Std.Tactic.BVDecide.Normalize.Bool.ite_else_not_ite''","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L188-L191"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_else_ite''\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">ite_else_ite''</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c0 </span><span class=\"fn\">c1</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(bif <span class=\"fn\">c0</span> then <span class=\"fn\">a</span> else <span class=\"fn\">bif <span class=\"fn\">c1</span> then <span class=\"fn\">b</span> else <span class=\"fn\">a</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">c0</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\">c1</span> then <span class=\"fn\">b</span> else <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_else_ite''","kind":"theorem","line":183,"name":"Std.Tactic.BVDecide.Normalize.Bool.ite_else_ite''","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L183-L186"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.ite_then_not_ite''\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ite_then_not_ite''</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c0 </span><span class=\"fn\">c1</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(bif <span class=\"fn\">c0</span> then <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">bif <span class=\"fn\">c1</span> then <span class=\"fn\">b</span> else <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span></span> else <span class=\"fn\">a</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">c0</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\">c1</span> then <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">b</span> else <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.ite_then_not_ite''","kind":"theorem","line":178,"name":"Std.Tactic.BVDecide.Normalize.BitVec.ite_then_not_ite''","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L178-L181"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_then_not_ite''\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">ite_then_not_ite''</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c0 </span><span class=\"fn\">c1</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(bif <span class=\"fn\">c0</span> then <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">bif <span class=\"fn\">c1</span> then <span class=\"fn\">b</span> else <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">a</span></span> else <span class=\"fn\">a</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">c0</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\">c1</span> then <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">b</span> else <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_then_not_ite''","kind":"theorem","line":173,"name":"Std.Tactic.BVDecide.Normalize.Bool.ite_then_not_ite''","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L173-L176"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_then_ite''\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">ite_then_ite''</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c0 </span><span class=\"fn\">c1</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(bif <span class=\"fn\">c0</span> then <span class=\"fn\">bif <span class=\"fn\">c1</span> then <span class=\"fn\">b</span> else <span class=\"fn\">a</span></span> else <span class=\"fn\">a</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">c0</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <span class=\"fn\">c1</span> then <span class=\"fn\">b</span> else <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_then_ite''","kind":"theorem","line":168,"name":"Std.Tactic.BVDecide.Normalize.Bool.ite_then_ite''","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L168-L171"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.ite_else_not_ite'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ite_else_not_ite'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c0 </span><span class=\"fn\">c1</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(bif <span class=\"fn\">c0</span> then <span class=\"fn\">a</span> else <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">bif <span class=\"fn\">c1</span> then <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> else <span class=\"fn\">b</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">c0</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">c1</span> then <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">b</span> else <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.ite_else_not_ite'","kind":"theorem","line":163,"name":"Std.Tactic.BVDecide.Normalize.BitVec.ite_else_not_ite'","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L163-L166"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_else_not_ite'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">ite_else_not_ite'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c0 </span><span class=\"fn\">c1</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(bif <span class=\"fn\">c0</span> then <span class=\"fn\">a</span> else <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">bif <span class=\"fn\">c1</span> then <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">a</span> else <span class=\"fn\">b</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">c0</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">c1</span> then <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">b</span> else <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_else_not_ite'","kind":"theorem","line":158,"name":"Std.Tactic.BVDecide.Normalize.Bool.ite_else_not_ite'","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L158-L161"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_else_ite'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">ite_else_ite'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c0 </span><span class=\"fn\">c1</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(bif <span class=\"fn\">c0</span> then <span class=\"fn\">a</span> else <span class=\"fn\">bif <span class=\"fn\">c1</span> then <span class=\"fn\">a</span> else <span class=\"fn\">b</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">c0</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">c1</span> then <span class=\"fn\">b</span> else <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_else_ite'","kind":"theorem","line":153,"name":"Std.Tactic.BVDecide.Normalize.Bool.ite_else_ite'","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L153-L156"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.ite_then_not_ite'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ite_then_not_ite'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c0 </span><span class=\"fn\">c1</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(bif <span class=\"fn\">c0</span> then <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">bif <span class=\"fn\">c1</span> then <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> else <span class=\"fn\">b</span></span> else <span class=\"fn\">a</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">c0</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">c1</span> then <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">b</span> else <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.ite_then_not_ite'","kind":"theorem","line":148,"name":"Std.Tactic.BVDecide.Normalize.BitVec.ite_then_not_ite'","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L148-L151"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_then_not_ite'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">ite_then_not_ite'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c0 </span><span class=\"fn\">c1</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(bif <span class=\"fn\">c0</span> then <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">bif <span class=\"fn\">c1</span> then <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">a</span> else <span class=\"fn\">b</span></span> else <span class=\"fn\">a</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">c0</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">c1</span> then <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">b</span> else <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_then_not_ite'","kind":"theorem","line":143,"name":"Std.Tactic.BVDecide.Normalize.Bool.ite_then_not_ite'","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L143-L146"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_then_ite'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">ite_then_ite'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c0 </span><span class=\"fn\">c1</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(bif <span class=\"fn\">c0</span> then <span class=\"fn\">bif <span class=\"fn\">c1</span> then <span class=\"fn\">a</span> else <span class=\"fn\">b</span></span> else <span class=\"fn\">a</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">c0</span> <a href=\"./Init/Prelude.html#Bool.and\">&amp;&amp;</a> <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">c1</span> then <span class=\"fn\">b</span> else <span class=\"fn\">a</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_then_ite'","kind":"theorem","line":138,"name":"Std.Tactic.BVDecide.Normalize.Bool.ite_then_ite'","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L138-L141"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.ite_else_not_ite\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ite_else_not_ite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cond</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(bif <span class=\"fn\">cond</span> then <span class=\"fn\">a</span> else <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">bif <span class=\"fn\">cond</span> then <span class=\"fn\">b</span> else <span class=\"fn\">c</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">cond</span> then <span class=\"fn\">a</span> else <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">c</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.ite_else_not_ite","kind":"theorem","line":133,"name":"Std.Tactic.BVDecide.Normalize.BitVec.ite_else_not_ite","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L133-L136"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_else_not_ite\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">ite_else_not_ite</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cond</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(bif <span class=\"fn\">cond</span> then <span class=\"fn\">a</span> else <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">bif <span class=\"fn\">cond</span> then <span class=\"fn\">b</span> else <span class=\"fn\">c</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">cond</span> then <span class=\"fn\">a</span> else <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">c</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_else_not_ite","kind":"theorem","line":128,"name":"Std.Tactic.BVDecide.Normalize.Bool.ite_else_not_ite","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L128-L131"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_else_ite\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">ite_else_ite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cond</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(bif <span class=\"fn\">cond</span> then <span class=\"fn\">a</span> else <span class=\"fn\">bif <span class=\"fn\">cond</span> then <span class=\"fn\">b</span> else <span class=\"fn\">c</span></span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">cond</span> then <span class=\"fn\">a</span> else <span class=\"fn\">c</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_else_ite","kind":"theorem","line":123,"name":"Std.Tactic.BVDecide.Normalize.Bool.ite_else_ite","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L123-L126"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.ite_then_not_ite\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ite_then_not_ite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cond</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(bif <span class=\"fn\">cond</span> then <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">bif <span class=\"fn\">cond</span> then <span class=\"fn\">a</span> else <span class=\"fn\">b</span></span> else <span class=\"fn\">c</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">cond</span> then <a href=\"./Init/Prelude.html#Complement.complement\">~~~</a><span class=\"fn\">a</span> else <span class=\"fn\">c</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.ite_then_not_ite","kind":"theorem","line":118,"name":"Std.Tactic.BVDecide.Normalize.BitVec.ite_then_not_ite","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L118-L121"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_then_not_ite\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">ite_then_not_ite</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cond</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(bif <span class=\"fn\">cond</span> then <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">bif <span class=\"fn\">cond</span> then <span class=\"fn\">a</span> else <span class=\"fn\">b</span></span> else <span class=\"fn\">c</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">cond</span> then <a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">a</span> else <span class=\"fn\">c</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_then_not_ite","kind":"theorem","line":113,"name":"Std.Tactic.BVDecide.Normalize.Bool.ite_then_not_ite","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L113-L116"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_then_ite\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">ite_then_ite</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cond</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">a </span><span class=\"fn\">b </span><span class=\"fn\">c</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">(bif <span class=\"fn\">cond</span> then <span class=\"fn\">bif <span class=\"fn\">cond</span> then <span class=\"fn\">a</span> else <span class=\"fn\">b</span></span> else <span class=\"fn\">c</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">cond</span> then <span class=\"fn\">a</span> else <span class=\"fn\">c</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_then_ite","kind":"theorem","line":108,"name":"Std.Tactic.BVDecide.Normalize.Bool.ite_then_ite","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L108-L111"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.ite_same_else'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ite_same_else'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t </span><span class=\"fn\">e</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">bif <span class=\"fn\">c</span> then <span class=\"fn\">t</span> else <span class=\"fn\">e</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Bool.or\">||</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">e</span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.ite_same_else'","kind":"theorem","line":102,"name":"Std.Tactic.BVDecide.Normalize.BitVec.ite_same_else'","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L102-L106"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.ite_same_else\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ite_same_else</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t </span><span class=\"fn\">e</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">(bif <span class=\"fn\">c</span> then <span class=\"fn\">t</span> else <span class=\"fn\">e</span>)</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">e</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Bool.or\">||</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">e</span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.ite_same_else","kind":"theorem","line":96,"name":"Std.Tactic.BVDecide.Normalize.BitVec.ite_same_else","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L96-L100"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.ite_same_then'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ite_same_then'</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t </span><span class=\"fn\">e</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">bif <span class=\"fn\">c</span> then <span class=\"fn\">t</span> else <span class=\"fn\">e</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Bool.or\">||</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">e</span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.ite_same_then'","kind":"theorem","line":90,"name":"Std.Tactic.BVDecide.Normalize.BitVec.ite_same_then'","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L90-L94"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.ite_same_then\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">BitVec</span>.<span class=\"name\">ite_same_then</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">w</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>}</span></span>\n</span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">t </span><span class=\"fn\">e</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">w</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">(bif <span class=\"fn\">c</span> then <span class=\"fn\">t</span> else <span class=\"fn\">e</span>)</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">t</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Bool.or\">||</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">e</span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.BitVec.ite_same_then","kind":"theorem","line":84,"name":"Std.Tactic.BVDecide.Normalize.BitVec.ite_same_then","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L84-L88"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_same_else'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">ite_same_else'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c </span><span class=\"fn\">t </span><span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">e</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">bif <span class=\"fn\">c</span> then <span class=\"fn\">t</span> else <span class=\"fn\">e</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Bool.or\">||</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">e</span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_same_else'","kind":"theorem","line":79,"name":"Std.Tactic.BVDecide.Normalize.Bool.ite_same_else'","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L79-L82"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_same_else\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">ite_same_else</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c </span><span class=\"fn\">t </span><span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">(bif <span class=\"fn\">c</span> then <span class=\"fn\">t</span> else <span class=\"fn\">e</span>)</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">e</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Bool.or\">||</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">e</span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_same_else","kind":"theorem","line":75,"name":"Std.Tactic.BVDecide.Normalize.Bool.ite_same_else","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L75-L77"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_same_then'\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">ite_same_then'</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c </span><span class=\"fn\">t </span><span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">bif <span class=\"fn\">c</span> then <span class=\"fn\">t</span> else <span class=\"fn\">e</span></span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Bool.or\">||</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">e</span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_same_then'","kind":"theorem","line":71,"name":"Std.Tactic.BVDecide.Normalize.Bool.ite_same_then'","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L71-L73"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_same_then\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">ite_same_then</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">c </span><span class=\"fn\">t </span><span class=\"fn\">e</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<span class=\"fn\">(bif <span class=\"fn\">c</span> then <span class=\"fn\">t</span> else <span class=\"fn\">e</span>)</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">t</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">c</span> <a href=\"./Init/Prelude.html#Bool.or\">||</a> <span class=\"fn\">t</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">e</span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.ite_same_then","kind":"theorem","line":67,"name":"Std.Tactic.BVDecide.Normalize.Bool.ite_same_then","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L67-L69"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.not_zero_beq\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">not_zero_beq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Prelude.html#Bool.not\">!</a>0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> 1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.not_zero_beq","kind":"theorem","line":63,"name":"Std.Tactic.BVDecide.Normalize.Bool.not_zero_beq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L63-L65"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.not_one_beq\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">not_one_beq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Prelude.html#Bool.not\">!</a>1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">a</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.not_one_beq","kind":"theorem","line":59,"name":"Std.Tactic.BVDecide.Normalize.Bool.not_one_beq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L59-L61"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.not_beq_zero\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">not_beq_zero</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> 1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.not_beq_zero","kind":"theorem","line":55,"name":"Std.Tactic.BVDecide.Normalize.Bool.not_beq_zero","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L55-L57"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.not_beq_one\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">not_beq_one</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#BitVec\">BitVec</a> <span class=\"fn\">1</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Prelude.html#Bool.not\">!</a><span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> 1<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> 0<a href=\"./Init/Prelude.html#BitVec.ofNat\">#</a><span class=\"fn\">1</span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.not_beq_one","kind":"theorem","line":51,"name":"Std.Tactic.BVDecide.Normalize.Bool.not_beq_one","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L51-L53"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.not_xor\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">Bool</span>.<span class=\"name\">not_xor</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">a </span><span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Prelude.html#Bool.not\">!</a>(<span class=\"fn\">a</span> <a href=\"./Init/Data/Bool.html#Bool.xor\">^^</a> <span class=\"fn\">b</span>)) <a href=\"./Init/Prelude.html#Eq\">=</a> (<span class=\"fn\">a</span> <a href=\"./Init/Prelude.html#BEq.beq\">==</a> <span class=\"fn\">b</span>)</div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.Bool.not_xor","kind":"theorem","line":48,"name":"Std.Tactic.BVDecide.Normalize.Bool.not_xor","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L48-L49"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.if_eq_cond\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">Normalize</span>.<span class=\"name\">if_eq_cond</span></a></span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">α</span> : <a href=\"./foundational_types.html\">Sort</a> u_1}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">b</span> : <a href=\"./Init/Prelude.html#Bool\">Bool</a>}</span></span>\n</span><span class=\"impl_arg\"><span class=\"decl_args\">\n<span class=\"fn\">{<span class=\"fn\">x </span><span class=\"fn\">y</span> : <span class=\"fn\">α</span>}</span></span>\n</span><span class=\"decl_args\"> :</span><div class=\"decl_type\">(<a href=\"./Init/Prelude.html#ite\">if</a> <span class=\"fn\">b</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> <a href=\"./Init/Prelude.html#ite\">then</a> <span class=\"fn\">x</span> <a href=\"./Init/Prelude.html#ite\">else</a> <span class=\"fn\">y</span>) <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\">bif <span class=\"fn\">b</span> then <span class=\"fn\">x</span> else <span class=\"fn\">y</span></span></div></div>","info":{"doc":"","docLink":"./Std/Tactic/BVDecide/Normalize/Bool.html#Std.Tactic.BVDecide.Normalize.if_eq_cond","kind":"theorem","line":44,"name":"Std.Tactic.BVDecide.Normalize.if_eq_cond","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/Normalize/Bool.lean#L44-L46"}}],"imports":["Init.SimpLemmas","Init.Data.Bool","Init.Data.BitVec.Lemmas","Init.Data.BitVec.Decidable"],"instances":[],"name":"Std.Tactic.BVDecide.Normalize.Bool"}