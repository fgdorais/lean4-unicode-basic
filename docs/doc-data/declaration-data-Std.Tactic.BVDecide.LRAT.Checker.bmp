{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/LRAT/Checker.html#Std.Tactic.BVDecide.LRAT.check_sound\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">check_sound</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lratProof</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/Tactic/BVDecide/LRAT/Actions.html#Std.Tactic.BVDecide.LRAT.IntAction\">IntAction</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cnf</span> : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF\">Sat.CNF</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><span class=\"fn\"><a href=\"./Std/Tactic/BVDecide/LRAT/Checker.html#Std.Tactic.BVDecide.LRAT.check\">check</a> <span class=\"fn\">lratProof</span> <span class=\"fn\">cnf</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Bool.true\">true</a> â†’ <span class=\"fn\"><span class=\"fn\">cnf</span>.<a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF.Unsat\">Unsat</a></span></span></div></div>","info":{"doc":"If the `check` functions succeeds on `lratProof` and `cnf` then the `cnf` is unsatisfiable.\n","docLink":"./Std/Tactic/BVDecide/LRAT/Checker.html#Std.Tactic.BVDecide.LRAT.check_sound","kind":"theorem","line":53,"name":"Std.Tactic.BVDecide.LRAT.check_sound","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/LRAT/Checker.lean#L53-L85"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Std/Tactic/BVDecide/LRAT/Checker.html#Std.Tactic.BVDecide.LRAT.check\"><span class=\"name\">Std</span>.<span class=\"name\">Tactic</span>.<span class=\"name\">BVDecide</span>.<span class=\"name\">LRAT</span>.<span class=\"name\">check</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">lratProof</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Std/Tactic/BVDecide/LRAT/Actions.html#Std.Tactic.BVDecide.LRAT.IntAction\">IntAction</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">cnf</span> : <span class=\"fn\"><a href=\"./Std/Sat/CNF/Basic.html#Std.Sat.CNF\">Sat.CNF</a> <a href=\"./Init/Prelude.html#Nat\">Nat</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"Check whether `lratProof` is a valid LRAT certificate for the unsatisfiability of `cnf`.\n","docLink":"./Std/Tactic/BVDecide/LRAT/Checker.html#Std.Tactic.BVDecide.LRAT.check","kind":"def","line":28,"name":"Std.Tactic.BVDecide.LRAT.check","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Std/Tactic/BVDecide/LRAT/Checker.lean#L28-L50"}}],"imports":["Std.Tactic.BVDecide.LRAT.Actions","Std.Tactic.BVDecide.LRAT.Internal.Convert","Std.Tactic.BVDecide.LRAT.Internal.LRATChecker","Std.Tactic.BVDecide.LRAT.Internal.LRATCheckerSound","Std.Sat.CNF"],"instances":[],"name":"Std.Tactic.BVDecide.LRAT.Checker"}