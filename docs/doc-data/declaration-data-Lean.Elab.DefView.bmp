{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.Command.mkDefView\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">mkDefView</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">modifiers</span> : <a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Modifiers</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a> <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView\">DefView</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DefView.html#Lean.Elab.Command.mkDefView","kind":"def","line":222,"name":"Lean.Elab.Command.mkDefView","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L222-L237"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.Command.isDefLike\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">isDefLike</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DefView.html#Lean.Elab.Command.isDefLike","kind":"def","line":213,"name":"Lean.Elab.Command.isDefLike","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L213-L220"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.Command.mkDefViewOfExample\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">mkDefViewOfExample</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">modifiers</span> : <a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Modifiers</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView\">DefView</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DefView.html#Lean.Elab.Command.mkDefViewOfExample","kind":"def","line":204,"name":"Lean.Elab.Command.mkDefViewOfExample","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L204-L211"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.Command.mkDefViewOfOpaque\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">mkDefViewOfOpaque</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">modifiers</span> : <a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Modifiers</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a> <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView\">DefView</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DefView.html#Lean.Elab.Command.mkDefViewOfOpaque","kind":"def","line":190,"name":"Lean.Elab.Command.mkDefViewOfOpaque","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L190-L202"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.Command.mkDefViewOfInstance\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">mkDefViewOfInstance</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">modifiers</span> : <a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Modifiers</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/Command.html#Lean.Elab.Command.CommandElabM\">CommandElabM</a> <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView\">DefView</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DefView.html#Lean.Elab.Command.mkDefViewOfInstance","kind":"def","line":167,"name":"Lean.Elab.Command.mkDefViewOfInstance","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L167-L188"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.Command.mkDefViewOfTheorem\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">mkDefViewOfTheorem</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">modifiers</span> : <a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Modifiers</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView\">DefView</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DefView.html#Lean.Elab.Command.mkDefViewOfTheorem","kind":"def","line":160,"name":"Lean.Elab.Command.mkDefViewOfTheorem","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L160-L165"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.Command.mkDefViewOfDef\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">mkDefViewOfDef</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">modifiers</span> : <a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Modifiers</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView\">DefView</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DefView.html#Lean.Elab.Command.mkDefViewOfDef","kind":"def","line":152,"name":"Lean.Elab.Command.mkDefViewOfDef","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L152-L158"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.Command.mkDefViewOfAbbrev\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">Command</span>.<span class=\"name\">mkDefViewOfAbbrev</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">modifiers</span> : <a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Modifiers</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">stx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView\">DefView</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DefView.html#Lean.Elab.Command.mkDefViewOfAbbrev","kind":"def","line":144,"name":"Lean.Elab.Command.mkDefViewOfAbbrev","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L144-L150"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView.markDefEq\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefView</span>.<span class=\"name\">markDefEq</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">view</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView\">DefView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView\">DefView</a></div></div>","info":{"doc":"Prepends the `defeq` attribute, removing existing ones if there are any ","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefView.markDefEq","kind":"def","line":136,"name":"Lean.Elab.DefView.markDefEq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L136-L139"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView.isInstance\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefView</span>.<span class=\"name\">isInstance</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">view</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView\">DefView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Bool\">Bool</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefView.isInstance","kind":"def","line":133,"name":"Lean.Elab.DefView.isInstance","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L133-L134"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.instInhabitedDefView.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instInhabitedDefView</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView\">DefView</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DefView.html#Lean.Elab.instInhabitedDefView.default","kind":"def","line":131,"name":"Lean.Elab.instInhabitedDefView.default","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L131-L131"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.instInhabitedDefView\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instInhabitedDefView</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView\">DefView</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DefView.html#Lean.Elab.instInhabitedDefView","kind":"instance","line":131,"name":"Lean.Elab.instInhabitedDefView","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L131-L131"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView.deriving?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefView</span>.<span class=\"name\">deriving?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView\">DefView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefView.deriving?","kind":"def","line":130,"name":"Lean.Elab.DefView.deriving?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L130-L130"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView.headerSnap?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefView</span>.<span class=\"name\">headerSnap?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView\">DefView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotBundle\">Language.SnapshotBundle</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot\">HeaderProcessedSnapshot</a>)</span>)</span></span></div></div>","info":{"doc":"Snapshot for incremental processing of this definition.\n\nInvariant: If the bundle's `old?` is set, then elaboration of the header is guaranteed to result\nin the same elaboration result and state, i.e. reuse is possible.\n","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefView.headerSnap?","kind":"def","line":129,"name":"Lean.Elab.DefView.headerSnap?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L129-L129"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView.docString?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefView</span>.<span class=\"name\">docString?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView\">DefView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.Parser.Command.docComment</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span></div></div>","info":{"doc":"The docstring, if present, and whether it's Verso ","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefView.docString?","kind":"def","line":122,"name":"Lean.Elab.DefView.docString?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L122-L122"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView.value\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefView</span>.<span class=\"name\">value</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView\">DefView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefView.value","kind":"def","line":120,"name":"Lean.Elab.DefView.value","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L120-L120"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView.type?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefView</span>.<span class=\"name\">type?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView\">DefView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefView.type?","kind":"def","line":119,"name":"Lean.Elab.DefView.type?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L119-L119"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView.binders\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefView</span>.<span class=\"name\">binders</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView\">DefView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefView.binders","kind":"def","line":118,"name":"Lean.Elab.DefView.binders","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L118-L118"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView.declId\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefView</span>.<span class=\"name\">declId</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView\">DefView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefView.declId","kind":"def","line":117,"name":"Lean.Elab.DefView.declId","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L117-L117"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView.modifiers\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefView</span>.<span class=\"name\">modifiers</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView\">DefView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Modifiers</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefView.modifiers","kind":"def","line":116,"name":"Lean.Elab.DefView.modifiers","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L116-L116"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView.headerRef\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefView</span>.<span class=\"name\">headerRef</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView\">DefView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>","info":{"doc":"An unstructured syntax object that comprises the \"header\" of the definition, i.e. everything up\nto the value. Used as a more specific ref for header elaboration.\n","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefView.headerRef","kind":"def","line":115,"name":"Lean.Elab.DefView.headerRef","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L115-L115"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView.ref\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefView</span>.<span class=\"name\">ref</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView\">DefView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefView.ref","kind":"def","line":110,"name":"Lean.Elab.DefView.ref","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L110-L110"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView.kind\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefView</span>.<span class=\"name\">kind</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView\">DefView</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefKind\">DefKind</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefView.kind","kind":"def","line":109,"name":"Lean.Elab.DefView.kind","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L109-L109"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefView</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">kind</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefKind\">DefKind</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">ref </span><span class=\"fn\">headerRef</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">modifiers</span> : <a href=\"./Lean/Elab/DeclModifiers.html#Lean.Elab.Modifiers\">Modifiers</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">declId </span><span class=\"fn\">binders</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">value</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">docString?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> (<a href=\"./Init/Prelude.html#Lean.TSyntax\">TSyntax</a> <span class=\"fn\">`Lean.Parser.Command.docComment</span> <a href=\"./Init/Prelude.html#Prod\">×</a> <a href=\"./Init/Prelude.html#Bool\">Bool</a>)</span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">headerSnap?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotBundle\">Language.SnapshotBundle</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot\">HeaderProcessedSnapshot</a>)</span>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">deriving?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView\">DefView</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefView.mk","kind":"ctor","line":108,"name":"Lean.Elab.DefView.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L108-L108"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefView\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefView</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefView","kind":"structure","line":108,"name":"Lean.Elab.DefView","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L108-L131"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.instToSnapshotTreeDefsParsedSnapshot\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instToSnapshotTreeDefsParsedSnapshot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.ToSnapshotTree\">Language.ToSnapshotTree</a> <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefsParsedSnapshot\">DefsParsedSnapshot</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DefView.html#Lean.Elab.instToSnapshotTreeDefsParsedSnapshot","kind":"instance","line":102,"name":"Lean.Elab.instToSnapshotTreeDefsParsedSnapshot","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L102-L104"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.instTypeNameDefsParsedSnapshot\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instTypeNameDefsParsedSnapshot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Dynamic.html#TypeName\">TypeName</a> <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefsParsedSnapshot\">DefsParsedSnapshot</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DefView.html#Lean.Elab.instTypeNameDefsParsedSnapshot","kind":"instance","line":101,"name":"Lean.Elab.instTypeNameDefsParsedSnapshot","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L101-L101"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.instNonemptyDefsParsedSnapshot\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instNonemptyDefsParsedSnapshot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefsParsedSnapshot\">DefsParsedSnapshot</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DefView.html#Lean.Elab.instNonemptyDefsParsedSnapshot","kind":"instance","line":101,"name":"Lean.Elab.instNonemptyDefsParsedSnapshot","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L101-L101"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefsParsedSnapshot.defs\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefsParsedSnapshot</span>.<span class=\"name\">defs</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefsParsedSnapshot\">DefsParsedSnapshot</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefParsed\">DefParsed</a></span></div></div>","info":{"doc":"Definitions of this mutual block. ","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefsParsedSnapshot.defs","kind":"def","line":100,"name":"Lean.Elab.DefsParsedSnapshot.defs","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L100-L100"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefsParsedSnapshot.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefsParsedSnapshot</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toSnapshot</span> : <a href=\"./Lean/Language/Basic.html#Lean.Language.Snapshot\">Language.Snapshot</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">defs</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefParsed\">DefParsed</a></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefsParsedSnapshot\">DefsParsedSnapshot</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefsParsedSnapshot.mk","kind":"ctor","line":98,"name":"Lean.Elab.DefsParsedSnapshot.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L98-L98"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefsParsedSnapshot.toSnapshot\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefsParsedSnapshot</span>.<span class=\"name\">toSnapshot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefsParsedSnapshot\">DefsParsedSnapshot</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Language/Basic.html#Lean.Language.Snapshot\">Language.Snapshot</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefsParsedSnapshot.toSnapshot","kind":"def","line":98,"name":"Lean.Elab.DefsParsedSnapshot.toSnapshot","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L98-L101"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefsParsedSnapshot\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefsParsedSnapshot</span></a></span><span class=\"decl_extends\">extends</span> <a href=\"./Lean/Language/Basic.html#Lean.Language.Snapshot\">Lean.Language.Snapshot</a><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Snapshot after syntax tree has been split into separate mutual def headers. ","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefsParsedSnapshot","kind":"structure","line":97,"name":"Lean.Elab.DefsParsedSnapshot","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L97-L101"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.instNonemptyDefParsed\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instNonemptyDefParsed</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefParsed\">DefParsed</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DefView.html#Lean.Elab.instNonemptyDefParsed","kind":"instance","line":95,"name":"Lean.Elab.instNonemptyDefParsed","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L95-L95"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefParsed.headerProcessedSnap\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefParsed</span>.<span class=\"name\">headerProcessedSnap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefParsed\">DefParsed</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask\">Language.SnapshotTask</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot\">HeaderProcessedSnapshot</a>)</span></span></div></div>","info":{"doc":"Elaboration result, unless fatal exception occurred. ","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefParsed.headerProcessedSnap","kind":"def","line":94,"name":"Lean.Elab.DefParsed.headerProcessedSnap","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L94-L94"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefParsed.fullHeaderRef\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefParsed</span>.<span class=\"name\">fullHeaderRef</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefParsed\">DefParsed</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>","info":{"doc":"Unstructured syntax object comprising the full \"header\" of the definition from the modifiers\n(incl. docstring) up to the value, used for determining header elaboration reuse.\n","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefParsed.fullHeaderRef","kind":"def","line":92,"name":"Lean.Elab.DefParsed.fullHeaderRef","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L92-L92"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefParsed.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefParsed</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">fullHeaderRef</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">headerProcessedSnap</span> : <span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask\">Language.SnapshotTask</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot\">HeaderProcessedSnapshot</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefParsed\">DefParsed</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefParsed.mk","kind":"ctor","line":87,"name":"Lean.Elab.DefParsed.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L87-L87"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefParsed\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefParsed</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"State before elaboration of a mutual definition. ","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefParsed","kind":"structure","line":86,"name":"Lean.Elab.DefParsed","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L86-L95"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.instToSnapshotTreeHeaderProcessedSnapshot\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instToSnapshotTreeHeaderProcessedSnapshot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.ToSnapshotTree\">Language.ToSnapshotTree</a> <a href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot\">HeaderProcessedSnapshot</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DefView.html#Lean.Elab.instToSnapshotTreeHeaderProcessedSnapshot","kind":"instance","line":79,"name":"Lean.Elab.instToSnapshotTreeHeaderProcessedSnapshot","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L79-L84"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.instNonemptyHeaderProcessedSnapshot\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instNonemptyHeaderProcessedSnapshot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <a href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot\">HeaderProcessedSnapshot</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DefView.html#Lean.Elab.instNonemptyHeaderProcessedSnapshot","kind":"instance","line":78,"name":"Lean.Elab.instNonemptyHeaderProcessedSnapshot","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L78-L78"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot.moreSnaps\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">HeaderProcessedSnapshot</span>.<span class=\"name\">moreSnaps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot\">HeaderProcessedSnapshot</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask\">Language.SnapshotTask</a> <a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTree\">Language.SnapshotTree</a>)</span></span></div></div>","info":{"doc":"Untyped snapshots from `logSnapshotTask`, saved at this level for cancellation. ","docLink":"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot.moreSnaps","kind":"def","line":77,"name":"Lean.Elab.HeaderProcessedSnapshot.moreSnaps","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L77-L77"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot.bodySnap\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">HeaderProcessedSnapshot</span>.<span class=\"name\">bodySnap</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot\">HeaderProcessedSnapshot</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask\">Language.SnapshotTask</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/DefView.html#Lean.Elab.BodyProcessedSnapshot\">BodyProcessedSnapshot</a>)</span></span></div></div>","info":{"doc":"Result of body elaboration. ","docLink":"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot.bodySnap","kind":"def","line":75,"name":"Lean.Elab.HeaderProcessedSnapshot.bodySnap","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L75-L75"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot.bodyStx\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">HeaderProcessedSnapshot</span>.<span class=\"name\">bodyStx</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot\">HeaderProcessedSnapshot</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></div></div>","info":{"doc":"Syntax of definition body, for checking reuse of `bodySnap`. ","docLink":"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot.bodyStx","kind":"def","line":73,"name":"Lean.Elab.HeaderProcessedSnapshot.bodyStx","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L73-L73"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot.tacSnap?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">HeaderProcessedSnapshot</span>.<span class=\"name\">tacSnap?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot\">HeaderProcessedSnapshot</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask\">Language.SnapshotTask</a> <a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Tactic.TacticParsedSnapshot\">Tactic.TacticParsedSnapshot</a>)</span></span></div></div>","info":{"doc":"Incremental execution of main tactic block, if any. ","docLink":"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot.tacSnap?","kind":"def","line":71,"name":"Lean.Elab.HeaderProcessedSnapshot.tacSnap?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L71-L71"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot.tacStx?\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">HeaderProcessedSnapshot</span>.<span class=\"name\">tacStx?</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot\">HeaderProcessedSnapshot</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>","info":{"doc":"Syntax of top-level tactic block if any, for checking reuse of `tacSnap?`. ","docLink":"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot.tacStx?","kind":"def","line":69,"name":"Lean.Elab.HeaderProcessedSnapshot.tacStx?","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L69-L69"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot.state\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">HeaderProcessedSnapshot</span>.<span class=\"name\">state</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot\">HeaderProcessedSnapshot</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.SavedState\">Term.SavedState</a></div></div>","info":{"doc":"Resulting elaboration state, including any environment additions. ","docLink":"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot.state","kind":"def","line":67,"name":"Lean.Elab.HeaderProcessedSnapshot.state","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L67-L67"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot.view\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">HeaderProcessedSnapshot</span>.<span class=\"name\">view</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot\">HeaderProcessedSnapshot</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData\">DefViewElabHeaderData</a></div></div>","info":{"doc":"Elaboration results. ","docLink":"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot.view","kind":"def","line":65,"name":"Lean.Elab.HeaderProcessedSnapshot.view","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L65-L65"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">HeaderProcessedSnapshot</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toSnapshot</span> : <a href=\"./Lean/Language/Basic.html#Lean.Language.Snapshot\">Language.Snapshot</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">view</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData\">DefViewElabHeaderData</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">state</span> : <a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.SavedState\">Term.SavedState</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tacStx?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">tacSnap?</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Option\">Option</a> <span class=\"fn\">(<a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask\">Language.SnapshotTask</a> <a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Tactic.TacticParsedSnapshot\">Tactic.TacticParsedSnapshot</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bodyStx</span> : <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">bodySnap</span> : <span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask\">Language.SnapshotTask</a> <span class=\"fn\">(<a href=\"./Init/Prelude.html#Option\">Option</a> <a href=\"./Lean/Elab/DefView.html#Lean.Elab.BodyProcessedSnapshot\">BodyProcessedSnapshot</a>)</span></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">moreSnaps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask\">Language.SnapshotTask</a> <a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTree\">Language.SnapshotTree</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot\">HeaderProcessedSnapshot</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot.mk","kind":"ctor","line":63,"name":"Lean.Elab.HeaderProcessedSnapshot.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L63-L63"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot.toSnapshot\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">HeaderProcessedSnapshot</span>.<span class=\"name\">toSnapshot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot\">HeaderProcessedSnapshot</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Language/Basic.html#Lean.Language.Snapshot\">Language.Snapshot</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot.toSnapshot","kind":"def","line":63,"name":"Lean.Elab.HeaderProcessedSnapshot.toSnapshot","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L63-L78"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">HeaderProcessedSnapshot</span></a></span><span class=\"decl_extends\">extends</span> <a href=\"./Lean/Language/Basic.html#Lean.Language.Snapshot\">Lean.Language.Snapshot</a><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Snapshot after elaboration of a definition header. ","docLink":"./Lean/Elab/DefView.html#Lean.Elab.HeaderProcessedSnapshot","kind":"structure","line":62,"name":"Lean.Elab.HeaderProcessedSnapshot","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L62-L78"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.instToSnapshotTreeBodyProcessedSnapshot\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instToSnapshotTreeBodyProcessedSnapshot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Language/Basic.html#Lean.Language.ToSnapshotTree\">Language.ToSnapshotTree</a> <a href=\"./Lean/Elab/DefView.html#Lean.Elab.BodyProcessedSnapshot\">BodyProcessedSnapshot</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DefView.html#Lean.Elab.instToSnapshotTreeBodyProcessedSnapshot","kind":"instance","line":59,"name":"Lean.Elab.instToSnapshotTreeBodyProcessedSnapshot","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L59-L60"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.instNonemptyBodyProcessedSnapshot\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instNonemptyBodyProcessedSnapshot</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Nonempty\">Nonempty</a> <a href=\"./Lean/Elab/DefView.html#Lean.Elab.BodyProcessedSnapshot\">BodyProcessedSnapshot</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DefView.html#Lean.Elab.instNonemptyBodyProcessedSnapshot","kind":"instance","line":58,"name":"Lean.Elab.instNonemptyBodyProcessedSnapshot","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L58-L58"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.BodyProcessedSnapshot.moreSnaps\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">BodyProcessedSnapshot</span>.<span class=\"name\">moreSnaps</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.BodyProcessedSnapshot\">BodyProcessedSnapshot</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask\">Language.SnapshotTask</a> <a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTree\">Language.SnapshotTree</a>)</span></span></div></div>","info":{"doc":"Untyped snapshots from `logSnapshotTask`, saved at this level for cancellation. ","docLink":"./Lean/Elab/DefView.html#Lean.Elab.BodyProcessedSnapshot.moreSnaps","kind":"def","line":57,"name":"Lean.Elab.BodyProcessedSnapshot.moreSnaps","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L57-L57"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.BodyProcessedSnapshot.value\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">BodyProcessedSnapshot</span>.<span class=\"name\">value</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.BodyProcessedSnapshot\">BodyProcessedSnapshot</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"Elaboration result. ","docLink":"./Lean/Elab/DefView.html#Lean.Elab.BodyProcessedSnapshot.value","kind":"def","line":55,"name":"Lean.Elab.BodyProcessedSnapshot.value","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L55-L55"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.BodyProcessedSnapshot.state\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">BodyProcessedSnapshot</span>.<span class=\"name\">state</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.BodyProcessedSnapshot\">BodyProcessedSnapshot</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.SavedState\">Term.SavedState</a></div></div>","info":{"doc":"State after elaboration. ","docLink":"./Lean/Elab/DefView.html#Lean.Elab.BodyProcessedSnapshot.state","kind":"def","line":53,"name":"Lean.Elab.BodyProcessedSnapshot.state","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L53-L53"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.BodyProcessedSnapshot.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">BodyProcessedSnapshot</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">toSnapshot</span> : <a href=\"./Lean/Language/Basic.html#Lean.Language.Snapshot\">Language.Snapshot</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">state</span> : <a href=\"./Lean/Elab/Term/TermElabM.html#Lean.Elab.Term.SavedState\">Term.SavedState</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">value</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">moreSnaps</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <span class=\"fn\">(<a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTask\">Language.SnapshotTask</a> <a href=\"./Lean/Language/Basic.html#Lean.Language.SnapshotTree\">Language.SnapshotTree</a>)</span></span>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DefView.html#Lean.Elab.BodyProcessedSnapshot\">BodyProcessedSnapshot</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DefView.html#Lean.Elab.BodyProcessedSnapshot.mk","kind":"ctor","line":51,"name":"Lean.Elab.BodyProcessedSnapshot.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L51-L51"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.BodyProcessedSnapshot.toSnapshot\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">BodyProcessedSnapshot</span>.<span class=\"name\">toSnapshot</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.BodyProcessedSnapshot\">BodyProcessedSnapshot</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Language/Basic.html#Lean.Language.Snapshot\">Language.Snapshot</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DefView.html#Lean.Elab.BodyProcessedSnapshot.toSnapshot","kind":"def","line":51,"name":"Lean.Elab.BodyProcessedSnapshot.toSnapshot","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L51-L58"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.BodyProcessedSnapshot\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">BodyProcessedSnapshot</span></a></span><span class=\"decl_extends\">extends</span> <a href=\"./Lean/Language/Basic.html#Lean.Language.Snapshot\">Lean.Language.Snapshot</a><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Snapshot after processing of a definition body.  ","docLink":"./Lean/Elab/DefView.html#Lean.Elab.BodyProcessedSnapshot","kind":"structure","line":50,"name":"Lean.Elab.BodyProcessedSnapshot","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L50-L58"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.instInhabitedDefViewElabHeaderData\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instInhabitedDefViewElabHeaderData</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData\">DefViewElabHeaderData</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DefView.html#Lean.Elab.instInhabitedDefViewElabHeaderData","kind":"instance","line":45,"name":"Lean.Elab.instInhabitedDefViewElabHeaderData","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L45-L45"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.instInhabitedDefViewElabHeaderData.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instInhabitedDefViewElabHeaderData</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData\">DefViewElabHeaderData</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DefView.html#Lean.Elab.instInhabitedDefViewElabHeaderData.default","kind":"def","line":45,"name":"Lean.Elab.instInhabitedDefViewElabHeaderData.default","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L45-L45"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData.type\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefViewElabHeaderData</span>.<span class=\"name\">type</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData\">DefViewElabHeaderData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a></div></div>","info":{"doc":"Type including parameters. ","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData.type","kind":"def","line":44,"name":"Lean.Elab.DefViewElabHeaderData.type","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L44-L44"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData.numParams\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefViewElabHeaderData</span>.<span class=\"name\">numParams</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData\">DefViewElabHeaderData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Nat\">Nat</a></div></div>","info":{"doc":"Number of parameters before `:`, it also includes auto-implicit parameters automatically added by Lean. ","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData.numParams","kind":"def","line":42,"name":"Lean.Elab.DefViewElabHeaderData.numParams","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L42-L42"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData.binderIds\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefViewElabHeaderData</span>.<span class=\"name\">binderIds</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData\">DefViewElabHeaderData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span></div></div>","info":{"doc":"Syntax objects for the binders occurring before `:`, we use them to populate the `InfoTree` when elaborating `valueStx`. ","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData.binderIds","kind":"def","line":40,"name":"Lean.Elab.DefViewElabHeaderData.binderIds","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L40-L40"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData.levelNames\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefViewElabHeaderData</span>.<span class=\"name\">levelNames</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData\">DefViewElabHeaderData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span></div></div>","info":{"doc":"Universe level parameter names explicitly provided by the user. ","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData.levelNames","kind":"def","line":38,"name":"Lean.Elab.DefViewElabHeaderData.levelNames","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L38-L38"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData.declName\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefViewElabHeaderData</span>.<span class=\"name\">declName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData\">DefViewElabHeaderData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"Full name for this declaration. This is the name that will be added to the `Environment`. ","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData.declName","kind":"def","line":36,"name":"Lean.Elab.DefViewElabHeaderData.declName","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L36-L36"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">abbrev</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData.shortDeclName\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefViewElabHeaderData</span>.<span class=\"name\">shortDeclName</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">self</span> : <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData\">DefViewElabHeaderData</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Init/Prelude.html#Lean.Name\">Name</a></div></div>","info":{"doc":"Short name. Recall that all declarations in Lean 4 are potentially recursive. We use `shortDeclName` to refer\nto them at `valueStx`, and other declarations in the same mutual block. ","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData.shortDeclName","kind":"def","line":34,"name":"Lean.Elab.DefViewElabHeaderData.shortDeclName","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L34-L34"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData.mk\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefViewElabHeaderData</span>.<span class=\"name\">mk</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">shortDeclName </span><span class=\"fn\">declName</span> : <a href=\"./Init/Prelude.html#Lean.Name\">Name</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">levelNames</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#List\">List</a> <a href=\"./Init/Prelude.html#Lean.Name\">Name</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">binderIds</span> : <span class=\"fn\"><a href=\"./Init/Prelude.html#Array\">Array</a> <a href=\"./Init/Prelude.html#Lean.Syntax\">Syntax</a></span>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">numParams</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">type</span> : <a href=\"./Lean/Expr.html#Lean.Expr\">Expr</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData\">DefViewElabHeaderData</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData.mk","kind":"ctor","line":30,"name":"Lean.Elab.DefViewElabHeaderData.mk","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L30-L30"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">structure</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefViewElabHeaderData</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"Header elaboration data of a `DefView`. ","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefViewElabHeaderData","kind":"structure","line":29,"name":"Lean.Elab.DefViewElabHeaderData","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L29-L45"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefKind.isExample\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefKind</span>.<span class=\"name\">isExample</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefKind\">DefKind</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefKind.isExample","kind":"def","line":25,"name":"Lean.Elab.DefKind.isExample","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L25-L27"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefKind.isTheorem\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefKind</span>.<span class=\"name\">isTheorem</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefKind\">DefKind</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefKind.isTheorem","kind":"def","line":21,"name":"Lean.Elab.DefKind.isTheorem","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L21-L23"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.instBEqDefKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instBEqDefKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#BEq\">BEq</a> <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefKind\">DefKind</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DefView.html#Lean.Elab.instBEqDefKind","kind":"instance","line":19,"name":"Lean.Elab.instBEqDefKind","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L19-L19"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.instBEqDefKind.beq\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instBEqDefKind</span>.<span class=\"name\">beq</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefKind\">DefKind</a> → <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefKind\">DefKind</a> → <a href=\"./Init/Prelude.html#Bool\">Bool</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DefView.html#Lean.Elab.instBEqDefKind.beq","kind":"def","line":19,"name":"Lean.Elab.instBEqDefKind.beq","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L19-L19"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.instInhabitedDefKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instInhabitedDefKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Prelude.html#Inhabited\">Inhabited</a> <a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefKind\">DefKind</a></span></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DefView.html#Lean.Elab.instInhabitedDefKind","kind":"instance","line":19,"name":"Lean.Elab.instInhabitedDefKind","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L19-L19"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.instInhabitedDefKind.default\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">instInhabitedDefKind</span>.<span class=\"name\">default</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefKind\">DefKind</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DefView.html#Lean.Elab.instInhabitedDefKind.default","kind":"def","line":19,"name":"Lean.Elab.instInhabitedDefKind.default","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L19-L19"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefKind.abbrev\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefKind</span>.<span class=\"name\">abbrev</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefKind\">DefKind</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefKind.abbrev","kind":"ctor","line":18,"name":"Lean.Elab.DefKind.abbrev","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L18-L18"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefKind.opaque\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefKind</span>.<span class=\"name\">opaque</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefKind\">DefKind</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefKind.opaque","kind":"ctor","line":18,"name":"Lean.Elab.DefKind.opaque","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L18-L18"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefKind.example\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefKind</span>.<span class=\"name\">example</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefKind\">DefKind</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefKind.example","kind":"ctor","line":18,"name":"Lean.Elab.DefKind.example","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L18-L18"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefKind.theorem\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefKind</span>.<span class=\"name\">theorem</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefKind\">DefKind</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefKind.theorem","kind":"ctor","line":18,"name":"Lean.Elab.DefKind.theorem","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L18-L18"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefKind.instance\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefKind</span>.<span class=\"name\">instance</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefKind\">DefKind</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefKind.instance","kind":"ctor","line":18,"name":"Lean.Elab.DefKind.instance","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L18-L18"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">constructor</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefKind.def\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefKind</span>.<span class=\"name\">def</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./Lean/Elab/DefView.html#Lean.Elab.DefKind\">DefKind</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefKind.def","kind":"ctor","line":18,"name":"Lean.Elab.DefKind.def","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L18-L18"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">inductive</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Lean/Elab/DefView.html#Lean.Elab.DefKind\"><span class=\"name\">Lean</span>.<span class=\"name\">Elab</span>.<span class=\"name\">DefKind</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><a href=\"./foundational_types.html\">Type</a></div></div>","info":{"doc":"","docLink":"./Lean/Elab/DefView.html#Lean.Elab.DefKind","kind":"inductive","line":17,"name":"Lean.Elab.DefKind","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Lean/Elab/DefView.lean#L17-L19"}}],"imports":["Lean.Elab.Command","Lean.Elab.DeclNameGen","Lean.Elab.DeclUtil"],"instances":[{"className":"Inhabited","name":"Lean.Elab.instInhabitedDefKind","typeNames":["Lean.Elab.DefKind"]},{"className":"BEq","name":"Lean.Elab.instBEqDefKind","typeNames":["Lean.Elab.DefKind"]},{"className":"Inhabited","name":"Lean.Elab.instInhabitedDefViewElabHeaderData","typeNames":["Lean.Elab.DefViewElabHeaderData"]},{"className":"Nonempty","name":"Lean.Elab.instNonemptyBodyProcessedSnapshot","typeNames":["Lean.Elab.BodyProcessedSnapshot"]},{"className":"Lean.Language.ToSnapshotTree","name":"Lean.Elab.instToSnapshotTreeBodyProcessedSnapshot","typeNames":["Lean.Elab.BodyProcessedSnapshot"]},{"className":"Nonempty","name":"Lean.Elab.instNonemptyHeaderProcessedSnapshot","typeNames":["Lean.Elab.HeaderProcessedSnapshot"]},{"className":"Lean.Language.ToSnapshotTree","name":"Lean.Elab.instToSnapshotTreeHeaderProcessedSnapshot","typeNames":["Lean.Elab.HeaderProcessedSnapshot"]},{"className":"Nonempty","name":"Lean.Elab.instNonemptyDefParsed","typeNames":["Lean.Elab.DefParsed"]},{"className":"Nonempty","name":"Lean.Elab.instNonemptyDefsParsedSnapshot","typeNames":["Lean.Elab.DefsParsedSnapshot"]},{"className":"TypeName","name":"Lean.Elab.instTypeNameDefsParsedSnapshot","typeNames":["Lean.Elab.DefsParsedSnapshot"]},{"className":"Lean.Language.ToSnapshotTree","name":"Lean.Elab.instToSnapshotTreeDefsParsedSnapshot","typeNames":["Lean.Elab.DefsParsedSnapshot"]},{"className":"Inhabited","name":"Lean.Elab.instInhabitedDefView","typeNames":["Lean.Elab.DefView"]}],"name":"Lean.Elab.DefView"}