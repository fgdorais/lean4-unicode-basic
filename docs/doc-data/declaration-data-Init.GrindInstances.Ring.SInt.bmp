{"declarations":[{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.instPowISizeSintNumBits\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instPowISizeSintNumBits</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Pow\">ToInt.Pow</a> <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a> <span class=\"fn\">(<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.sint\">IntInterval.sint</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.instPowISizeSintNumBits","kind":"instance","line":298,"name":"Lean.Grind.instPowISizeSintNumBits","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/GrindInstances/Ring/SInt.lean#L298-L299"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.instIsCharPISizeHPowNatOfNatNumBits\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instIsCharPISizeHPowNatOfNatNumBits</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.IsCharP\">IsCharP</a> <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a> (<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <a href=\"./Init/Prelude.html#System.Platform.numBits\">System.Platform.numBits</a>)</span></div></div>","info":{"doc":"","docLink":"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.instIsCharPISizeHPowNatOfNatNumBits","kind":"instance","line":286,"name":"Lean.Grind.instIsCharPISizeHPowNatOfNatNumBits","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/GrindInstances/Ring/SInt.lean#L286-L291"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.instCommRingISize\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instCommRingISize</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommRing\">CommRing</a> <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></span></div></div>","info":{"doc":"","docLink":"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.instCommRingISize","kind":"instance","line":259,"name":"Lean.Grind.instCommRingISize","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/GrindInstances/Ring/SInt.lean#L259-L282"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.ISize.intCast_ofNat\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ISize</span>.<span class=\"name\">intCast_ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.ISize.intCast_ofNat","kind":"theorem","line":256,"name":"Lean.Grind.ISize.intCast_ofNat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/GrindInstances/Ring/SInt.lean#L256-L256"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.ISize.intCast_neg\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ISize</span>.<span class=\"name\">intCast_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">i</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">↑<span class=\"fn\">i</span></span></div></div>","info":{"doc":"","docLink":"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.ISize.intCast_neg","kind":"theorem","line":252,"name":"Lean.Grind.ISize.intCast_neg","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/GrindInstances/Ring/SInt.lean#L252-L253"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.ISize.intCast\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ISize</span>.<span class=\"name\">intCast</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#IntCast\">IntCast</a> <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></span></div></div>","info":{"doc":"","docLink":"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.ISize.intCast","kind":"def","line":247,"name":"Lean.Grind.ISize.intCast","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/GrindInstances/Ring/SInt.lean#L247-L249"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.ISize.natCast\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">ISize</span>.<span class=\"name\">natCast</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Cast.html#NatCast\">NatCast</a> <a href=\"./Init/Data/SInt/Basic.html#ISize\">ISize</a></span></div></div>","info":{"doc":"","docLink":"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.ISize.natCast","kind":"def","line":243,"name":"Lean.Grind.ISize.natCast","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/GrindInstances/Ring/SInt.lean#L243-L245"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.instPowInt64SintOfNatNat\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instPowInt64SintOfNatNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Pow\">ToInt.Pow</a> <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a> <span class=\"fn\">(<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.sint\">IntInterval.sint</a> <span class=\"fn\">64</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.instPowInt64SintOfNatNat","kind":"instance","line":241,"name":"Lean.Grind.instPowInt64SintOfNatNat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/GrindInstances/Ring/SInt.lean#L241-L241"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.instIsCharPInt64HPowNatOfNat\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instIsCharPInt64HPowNatOfNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.IsCharP\">IsCharP</a> <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a> (<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">64</span>)</span></div></div>","info":{"doc":"","docLink":"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.instIsCharPInt64HPowNatOfNat","kind":"instance","line":229,"name":"Lean.Grind.instIsCharPInt64HPowNatOfNat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/GrindInstances/Ring/SInt.lean#L229-L234"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.instCommRingInt64\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instCommRingInt64</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommRing\">CommRing</a> <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></span></div></div>","info":{"doc":"","docLink":"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.instCommRingInt64","kind":"instance","line":204,"name":"Lean.Grind.instCommRingInt64","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/GrindInstances/Ring/SInt.lean#L204-L227"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.Int64.intCast_ofNat\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Int64</span>.<span class=\"name\">intCast_ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.Int64.intCast_ofNat","kind":"theorem","line":201,"name":"Lean.Grind.Int64.intCast_ofNat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/GrindInstances/Ring/SInt.lean#L201-L201"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.Int64.intCast_neg\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Int64</span>.<span class=\"name\">intCast_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">i</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">↑<span class=\"fn\">i</span></span></div></div>","info":{"doc":"","docLink":"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.Int64.intCast_neg","kind":"theorem","line":197,"name":"Lean.Grind.Int64.intCast_neg","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/GrindInstances/Ring/SInt.lean#L197-L198"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.Int64.intCast\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Int64</span>.<span class=\"name\">intCast</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#IntCast\">IntCast</a> <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></span></div></div>","info":{"doc":"","docLink":"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.Int64.intCast","kind":"def","line":192,"name":"Lean.Grind.Int64.intCast","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/GrindInstances/Ring/SInt.lean#L192-L194"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.Int64.natCast\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Int64</span>.<span class=\"name\">natCast</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Cast.html#NatCast\">NatCast</a> <a href=\"./Init/Data/SInt/Basic.html#Int64\">Int64</a></span></div></div>","info":{"doc":"","docLink":"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.Int64.natCast","kind":"def","line":188,"name":"Lean.Grind.Int64.natCast","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/GrindInstances/Ring/SInt.lean#L188-L190"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.instPowInt32SintOfNatNat\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instPowInt32SintOfNatNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Pow\">ToInt.Pow</a> <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a> <span class=\"fn\">(<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.sint\">IntInterval.sint</a> <span class=\"fn\">32</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.instPowInt32SintOfNatNat","kind":"instance","line":186,"name":"Lean.Grind.instPowInt32SintOfNatNat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/GrindInstances/Ring/SInt.lean#L186-L186"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.instIsCharPInt32HPowNatOfNat\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instIsCharPInt32HPowNatOfNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.IsCharP\">IsCharP</a> <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a> (<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">32</span>)</span></div></div>","info":{"doc":"","docLink":"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.instIsCharPInt32HPowNatOfNat","kind":"instance","line":174,"name":"Lean.Grind.instIsCharPInt32HPowNatOfNat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/GrindInstances/Ring/SInt.lean#L174-L179"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.instCommRingInt32\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instCommRingInt32</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommRing\">CommRing</a> <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></span></div></div>","info":{"doc":"","docLink":"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.instCommRingInt32","kind":"instance","line":149,"name":"Lean.Grind.instCommRingInt32","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/GrindInstances/Ring/SInt.lean#L149-L172"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.Int32.intCast_ofNat\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Int32</span>.<span class=\"name\">intCast_ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.Int32.intCast_ofNat","kind":"theorem","line":146,"name":"Lean.Grind.Int32.intCast_ofNat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/GrindInstances/Ring/SInt.lean#L146-L146"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.Int32.intCast_neg\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Int32</span>.<span class=\"name\">intCast_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">i</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">↑<span class=\"fn\">i</span></span></div></div>","info":{"doc":"","docLink":"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.Int32.intCast_neg","kind":"theorem","line":142,"name":"Lean.Grind.Int32.intCast_neg","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/GrindInstances/Ring/SInt.lean#L142-L143"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.Int32.intCast\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Int32</span>.<span class=\"name\">intCast</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#IntCast\">IntCast</a> <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></span></div></div>","info":{"doc":"","docLink":"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.Int32.intCast","kind":"def","line":137,"name":"Lean.Grind.Int32.intCast","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/GrindInstances/Ring/SInt.lean#L137-L139"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.Int32.natCast\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Int32</span>.<span class=\"name\">natCast</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Cast.html#NatCast\">NatCast</a> <a href=\"./Init/Data/SInt/Basic.html#Int32\">Int32</a></span></div></div>","info":{"doc":"","docLink":"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.Int32.natCast","kind":"def","line":133,"name":"Lean.Grind.Int32.natCast","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/GrindInstances/Ring/SInt.lean#L133-L135"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.instPowInt16SintOfNatNat\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instPowInt16SintOfNatNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Pow\">ToInt.Pow</a> <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a> <span class=\"fn\">(<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.sint\">IntInterval.sint</a> <span class=\"fn\">16</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.instPowInt16SintOfNatNat","kind":"instance","line":131,"name":"Lean.Grind.instPowInt16SintOfNatNat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/GrindInstances/Ring/SInt.lean#L131-L131"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.instIsCharPInt16HPowNatOfNat\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instIsCharPInt16HPowNatOfNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.IsCharP\">IsCharP</a> <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a> (<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">16</span>)</span></div></div>","info":{"doc":"","docLink":"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.instIsCharPInt16HPowNatOfNat","kind":"instance","line":119,"name":"Lean.Grind.instIsCharPInt16HPowNatOfNat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/GrindInstances/Ring/SInt.lean#L119-L124"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.instCommRingInt16\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instCommRingInt16</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommRing\">CommRing</a> <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></span></div></div>","info":{"doc":"","docLink":"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.instCommRingInt16","kind":"instance","line":94,"name":"Lean.Grind.instCommRingInt16","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/GrindInstances/Ring/SInt.lean#L94-L117"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.Int16.intCast_ofNat\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Int16</span>.<span class=\"name\">intCast_ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.Int16.intCast_ofNat","kind":"theorem","line":91,"name":"Lean.Grind.Int16.intCast_ofNat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/GrindInstances/Ring/SInt.lean#L91-L91"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.Int16.intCast_neg\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Int16</span>.<span class=\"name\">intCast_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">i</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">↑<span class=\"fn\">i</span></span></div></div>","info":{"doc":"","docLink":"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.Int16.intCast_neg","kind":"theorem","line":87,"name":"Lean.Grind.Int16.intCast_neg","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/GrindInstances/Ring/SInt.lean#L87-L88"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.Int16.intCast\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Int16</span>.<span class=\"name\">intCast</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#IntCast\">IntCast</a> <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></span></div></div>","info":{"doc":"","docLink":"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.Int16.intCast","kind":"def","line":82,"name":"Lean.Grind.Int16.intCast","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/GrindInstances/Ring/SInt.lean#L82-L84"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.Int16.natCast\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Int16</span>.<span class=\"name\">natCast</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Cast.html#NatCast\">NatCast</a> <a href=\"./Init/Data/SInt/Basic.html#Int16\">Int16</a></span></div></div>","info":{"doc":"","docLink":"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.Int16.natCast","kind":"def","line":78,"name":"Lean.Grind.Int16.natCast","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/GrindInstances/Ring/SInt.lean#L78-L80"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.instPowInt8SintOfNatNat\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instPowInt8SintOfNatNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/ToInt.html#Lean.Grind.ToInt.Pow\">ToInt.Pow</a> <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a> <span class=\"fn\">(<a href=\"./Init/Grind/ToInt.html#Lean.Grind.IntInterval.sint\">IntInterval.sint</a> <span class=\"fn\">8</span>)</span></span></div></div>","info":{"doc":"","docLink":"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.instPowInt8SintOfNatNat","kind":"instance","line":76,"name":"Lean.Grind.instPowInt8SintOfNatNat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/GrindInstances/Ring/SInt.lean#L76-L76"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.instIsCharPInt8HPowNatOfNat\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instIsCharPInt8HPowNatOfNat</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.IsCharP\">IsCharP</a> <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a> (<span class=\"fn\">2</span> <a href=\"./Init/Prelude.html#HPow.hPow\">^</a> <span class=\"fn\">8</span>)</span></div></div>","info":{"doc":"","docLink":"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.instIsCharPInt8HPowNatOfNat","kind":"instance","line":64,"name":"Lean.Grind.instIsCharPInt8HPowNatOfNat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/GrindInstances/Ring/SInt.lean#L64-L69"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">instance</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.instCommRingInt8\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">instCommRingInt8</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Grind/Ring/Basic.html#Lean.Grind.CommRing\">CommRing</a> <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></span></div></div>","info":{"doc":"","docLink":"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.instCommRingInt8","kind":"instance","line":39,"name":"Lean.Grind.instCommRingInt8","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/GrindInstances/Ring/SInt.lean#L39-L62"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.Int8.intCast_ofNat\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Int8</span>.<span class=\"name\">intCast_ofNat</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">x</span> : <a href=\"./Init/Prelude.html#Nat\">Nat</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑<span class=\"fn\">(<a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">x</span>)</span></span> <a href=\"./Init/Prelude.html#Eq\">=</a> <span class=\"fn\"><a href=\"./Init/Prelude.html#OfNat.ofNat\">OfNat.ofNat</a> <span class=\"fn\">x</span></span></div></div>","info":{"doc":"","docLink":"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.Int8.intCast_ofNat","kind":"theorem","line":36,"name":"Lean.Grind.Int8.intCast_ofNat","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/GrindInstances/Ring/SInt.lean#L36-L36"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">theorem</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.Int8.intCast_neg\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Int8</span>.<span class=\"name\">intCast_neg</span></a></span><span class=\"decl_args\">\n<span class=\"fn\">(<span class=\"fn\">i</span> : <a href=\"./Init/Data/Int/Basic.html#Int\">Int</a>)</span></span>\n<span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\">↑(<a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">i</span>)</span> <a href=\"./Init/Prelude.html#Eq\">=</a> <a href=\"./Init/Prelude.html#Neg.neg\">-</a><span class=\"fn\">↑<span class=\"fn\">i</span></span></div></div>","info":{"doc":"","docLink":"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.Int8.intCast_neg","kind":"theorem","line":32,"name":"Lean.Grind.Int8.intCast_neg","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/GrindInstances/Ring/SInt.lean#L32-L33"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.Int8.intCast\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Int8</span>.<span class=\"name\">intCast</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Int/Basic.html#IntCast\">IntCast</a> <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></span></div></div>","info":{"doc":"","docLink":"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.Int8.intCast","kind":"def","line":27,"name":"Lean.Grind.Int8.intCast","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/GrindInstances/Ring/SInt.lean#L27-L29"}},{"header":"<div class=\"decl_header\"><span class=\"decl_kind\">def</span>\n<span class=\"decl_name\"><a class=\"break_within\" href=\"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.Int8.natCast\"><span class=\"name\">Lean</span>.<span class=\"name\">Grind</span>.<span class=\"name\">Int8</span>.<span class=\"name\">natCast</span></a></span><span class=\"decl_args\"> :</span><div class=\"decl_type\"><span class=\"fn\"><a href=\"./Init/Data/Cast.html#NatCast\">NatCast</a> <a href=\"./Init/Data/SInt/Basic.html#Int8\">Int8</a></span></div></div>","info":{"doc":"","docLink":"./Init/GrindInstances/Ring/SInt.html#Lean.Grind.Int8.natCast","kind":"def","line":23,"name":"Lean.Grind.Int8.natCast","sourceLink":"https://github.com/leanprover/lean4/blob/797c613eb9b6d4ec95db23e3e00af9ac6657f24b/src/Init/GrindInstances/Ring/SInt.lean#L23-L25"}}],"imports":["Init.Grind.Ring.Basic","Init.Grind.ToInt","Init.Grind.ToInt","Init.GrindInstances.ToInt","Init.Data.BitVec.Basic","Init.Data.BitVec.Basic","Init.Data.SInt.Basic","Init.Data.SInt.Basic","Init.Data.SInt.Lemmas"],"instances":[{"className":"Lean.Grind.CommRing","name":"Lean.Grind.instCommRingInt8","typeNames":["Int8"]},{"className":"Lean.Grind.IsCharP","name":"Lean.Grind.instIsCharPInt8HPowNatOfNat","typeNames":["Int8","HPow.hPow"]},{"className":"Lean.Grind.ToInt.Pow","name":"Lean.Grind.instPowInt8SintOfNatNat","typeNames":["Int8","Lean.Grind.IntInterval.sint"]},{"className":"Lean.Grind.CommRing","name":"Lean.Grind.instCommRingInt16","typeNames":["Int16"]},{"className":"Lean.Grind.IsCharP","name":"Lean.Grind.instIsCharPInt16HPowNatOfNat","typeNames":["Int16","HPow.hPow"]},{"className":"Lean.Grind.ToInt.Pow","name":"Lean.Grind.instPowInt16SintOfNatNat","typeNames":["Int16","Lean.Grind.IntInterval.sint"]},{"className":"Lean.Grind.CommRing","name":"Lean.Grind.instCommRingInt32","typeNames":["Int32"]},{"className":"Lean.Grind.IsCharP","name":"Lean.Grind.instIsCharPInt32HPowNatOfNat","typeNames":["Int32","HPow.hPow"]},{"className":"Lean.Grind.ToInt.Pow","name":"Lean.Grind.instPowInt32SintOfNatNat","typeNames":["Int32","Lean.Grind.IntInterval.sint"]},{"className":"Lean.Grind.CommRing","name":"Lean.Grind.instCommRingInt64","typeNames":["Int64"]},{"className":"Lean.Grind.IsCharP","name":"Lean.Grind.instIsCharPInt64HPowNatOfNat","typeNames":["Int64","HPow.hPow"]},{"className":"Lean.Grind.ToInt.Pow","name":"Lean.Grind.instPowInt64SintOfNatNat","typeNames":["Int64","Lean.Grind.IntInterval.sint"]},{"className":"Lean.Grind.CommRing","name":"Lean.Grind.instCommRingISize","typeNames":["ISize"]},{"className":"Lean.Grind.IsCharP","name":"Lean.Grind.instIsCharPISizeHPowNatOfNatNumBits","typeNames":["ISize","HPow.hPow"]},{"className":"Lean.Grind.ToInt.Pow","name":"Lean.Grind.instPowISizeSintNumBits","typeNames":["ISize","Lean.Grind.IntInterval.sint"]}],"name":"Init.GrindInstances.Ring.SInt"}